
Cubesat_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ccf8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002198  0801cf98  0801cf98  0002cf98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f130  0801f130  0002f130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f138  0801f138  0002f138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f13c  0801f13c  0002f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d0  24000000  0801f140  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b58  240002d0  0801f410  000302d0  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24002e28  0801f410  00032e28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00043048  00000000  00000000  000302fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000873e  00000000  00000000  00073346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ef8  00000000  00000000  0007ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b20  00000000  00000000  0007e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00048f1b  00000000  00000000  000814a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004a20b  00000000  00000000  000ca3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00193352  00000000  00000000  001145c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a7918  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d674  00000000  00000000  002a7968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d0 	.word	0x240002d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801cf80 	.word	0x0801cf80

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d4 	.word	0x240002d4
 80002dc:	0801cf80 	.word	0x0801cf80

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <AS5047U_init>:
//	return (Enc->Position * 0.000383495f);
}

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6178      	str	r0, [r7, #20]
 800069c:	6139      	str	r1, [r7, #16]
 800069e:	60fa      	str	r2, [r7, #12]
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	8c3a      	ldrh	r2, [r7, #32]
 80006bc:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 80006be:	8c3b      	ldrh	r3, [r7, #32]
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f007 f995 	bl	80079f4 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2200      	movs	r2, #0
 80006ce:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	2200      	movs	r2, #0
 80006d4:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2200      	movs	r2, #0
 80006da:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2200      	movs	r2, #0
 80006e0:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2200      	movs	r2, #0
 80006e6:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	2200      	movs	r2, #0
 80006ec:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2200      	movs	r2, #0
 80006f2:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2200      	movs	r2, #0
 80006f8:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	2200      	movs	r2, #0
 8000704:	765a      	strb	r2, [r3, #25]
	dev->is_connect = 2;
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	2202      	movs	r2, #2
 800070a:	769a      	strb	r2, [r3, #26]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 800070c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000710:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800072c <AS5047U_init+0x98>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	edc3 7a07 	vstr	s15, [r3, #28]
	AS5047U_Read_Error(dev);
 800071e:	6978      	ldr	r0, [r7, #20]
 8000720:	f000 f88a 	bl	8000838 <AS5047U_Read_Error>
}
 8000724:	bf00      	nop
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	39c90fd4 	.word	0x39c90fd4

08000730 <AS5047U_Read>:
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
}

inline HAL_StatusTypeDef AS5047U_Read(AS5047U *dev,uint16_t Register_Address, uint16_t *Data){
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	460b      	mov	r3, r1
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	817b      	strh	r3, [r7, #10]
	uint8_t Buffer[3] = {};
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <AS5047U_Read+0x104>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	743b      	strb	r3, [r7, #16]
 8000744:	f107 0311 	add.w	r3, r7, #17
 8000748:	2200      	movs	r2, #0
 800074a:	801a      	strh	r2, [r3, #0]

	for (uint16_t i=0; i <= 480 ; i++);  			//delay before sent data (#Base clock 550MHz)
 800074c:	2300      	movs	r3, #0
 800074e:	82fb      	strh	r3, [r7, #22]
 8000750:	e002      	b.n	8000758 <AS5047U_Read+0x28>
 8000752:	8afb      	ldrh	r3, [r7, #22]
 8000754:	3301      	adds	r3, #1
 8000756:	82fb      	strh	r3, [r7, #22]
 8000758:	8afb      	ldrh	r3, [r7, #22]
 800075a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800075e:	d9f8      	bls.n	8000752 <AS5047U_Read+0x22>
	Buffer[0] = ((uint8_t) (Register_Address >> 8)) | 0x40;
 8000760:	897b      	ldrh	r3, [r7, #10]
 8000762:	0a1b      	lsrs	r3, r3, #8
 8000764:	b29b      	uxth	r3, r3
 8000766:	b2db      	uxtb	r3, r3
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	b2db      	uxtb	r3, r3
 800076e:	743b      	strb	r3, [r7, #16]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000770:	897b      	ldrh	r3, [r7, #10]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	747b      	strb	r3, [r7, #17]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	f107 0110 	add.w	r1, r7, #16
 800077e:	2202      	movs	r2, #2
 8000780:	4618      	mov	r0, r3
 8000782:	f005 f913 	bl	80059ac <HAL_CRC_Calculate>
 8000786:	4603      	mov	r3, r0
 8000788:	b2db      	uxtb	r3, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	74bb      	strb	r3, [r7, #18]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6898      	ldr	r0, [r3, #8]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	899b      	ldrh	r3, [r3, #12]
 8000798:	2200      	movs	r2, #0
 800079a:	4619      	mov	r1, r3
 800079c:	f007 f92a 	bl	80079f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	f107 0110 	add.w	r1, r7, #16
 80007a8:	2301      	movs	r3, #1
 80007aa:	2203      	movs	r2, #3
 80007ac:	f00e fc6a 	bl	800f084 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	6898      	ldr	r0, [r3, #8]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	899b      	ldrh	r3, [r3, #12]
 80007b8:	2201      	movs	r2, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	f007 f91a 	bl	80079f4 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 480 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c0:	2300      	movs	r3, #0
 80007c2:	82bb      	strh	r3, [r7, #20]
 80007c4:	e002      	b.n	80007cc <AS5047U_Read+0x9c>
 80007c6:	8abb      	ldrh	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	82bb      	strh	r3, [r7, #20]
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80007d2:	d9f8      	bls.n	80007c6 <AS5047U_Read+0x96>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	6898      	ldr	r0, [r3, #8]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	899b      	ldrh	r3, [r3, #12]
 80007dc:	2200      	movs	r2, #0
 80007de:	4619      	mov	r1, r3
 80007e0:	f007 f908 	bl	80079f4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 3, 1);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	f107 0110 	add.w	r1, r7, #16
 80007ec:	2301      	movs	r3, #1
 80007ee:	2203      	movs	r2, #3
 80007f0:	f00e fe3a 	bl	800f468 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	6898      	ldr	r0, [r3, #8]
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	899b      	ldrh	r3, [r3, #12]
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	f007 f8f8 	bl	80079f4 <HAL_GPIO_WritePin>
	uint8_t AS5047U_crc = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t*)Buffer, 2) ^ 0xFF;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f107 0110 	add.w	r1, r7, #16
 800080c:	2202      	movs	r2, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f005 f8cc 	bl	80059ac <HAL_CRC_Calculate>
 8000814:	4603      	mov	r3, r0
 8000816:	b2db      	uxtb	r3, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	74fb      	strb	r3, [r7, #19]
	if (AS5047U_crc == Buffer[2]){
 800081c:	7cbb      	ldrb	r3, [r7, #18]
 800081e:	7cfa      	ldrb	r2, [r7, #19]
 8000820:	429a      	cmp	r2, r3
 8000822:	d101      	bne.n	8000828 <AS5047U_Read+0xf8>
		return HAL_OK;
 8000824:	2300      	movs	r3, #0
 8000826:	e000      	b.n	800082a <AS5047U_Read+0xfa>
	}
	else{
		return HAL_ERROR;
 8000828:	2301      	movs	r3, #1
	}
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	0801cf98 	.word	0x0801cf98

08000838 <AS5047U_Read_Error>:
		Output_Data = (((int16_t) Buffer[0] | 0xC0) << 8) | (int16_t) Buffer[1];
	}
	return Output_Data;
}

HAL_StatusTypeDef AS5047U_Read_Error(AS5047U *dev) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	uint16_t Status;
	uint8_t cmd[2] = { 0x00,0x01 };
 8000840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000844:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 8000846:	2300      	movs	r3, #0
 8000848:	81bb      	strh	r3, [r7, #12]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6898      	ldr	r0, [r3, #8]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	899b      	ldrh	r3, [r3, #12]
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	f007 f8cd 	bl	80079f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 1);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	f107 0110 	add.w	r1, r7, #16
 8000862:	2301      	movs	r3, #1
 8000864:	2202      	movs	r2, #2
 8000866:	f00e fc0d 	bl	800f084 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6898      	ldr	r0, [r3, #8]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	899b      	ldrh	r3, [r3, #12]
 8000872:	2201      	movs	r2, #1
 8000874:	4619      	mov	r1, r3
 8000876:	f007 f8bd 	bl	80079f4 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);			//delay before sent data (#Base clock 550MHz)
 800087a:	2300      	movs	r3, #0
 800087c:	82fb      	strh	r3, [r7, #22]
 800087e:	e002      	b.n	8000886 <AS5047U_Read_Error+0x4e>
 8000880:	8afb      	ldrh	r3, [r7, #22]
 8000882:	3301      	adds	r3, #1
 8000884:	82fb      	strh	r3, [r7, #22]
 8000886:	8afb      	ldrh	r3, [r7, #22]
 8000888:	f240 2226 	movw	r2, #550	; 0x226
 800088c:	4293      	cmp	r3, r2
 800088e:	d9f7      	bls.n	8000880 <AS5047U_Read_Error+0x48>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6898      	ldr	r0, [r3, #8]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	899b      	ldrh	r3, [r3, #12]
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	f007 f8aa 	bl	80079f4 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef rep = HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6818      	ldr	r0, [r3, #0]
 80008a4:	f107 010c 	add.w	r1, r7, #12
 80008a8:	2301      	movs	r3, #1
 80008aa:	2202      	movs	r2, #2
 80008ac:	f00e fddc 	bl	800f468 <HAL_SPI_Receive>
 80008b0:	4603      	mov	r3, r0
 80008b2:	757b      	strb	r3, [r7, #21]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6898      	ldr	r0, [r3, #8]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	899b      	ldrh	r3, [r3, #12]
 80008bc:	2201      	movs	r2, #1
 80008be:	4619      	mov	r1, r3
 80008c0:	f007 f898 	bl	80079f4 <HAL_GPIO_WritePin>
	Status = (((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1];
 80008c4:	7b3b      	ldrb	r3, [r7, #12]
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	b29b      	uxth	r3, r3
 80008da:	827b      	strh	r3, [r7, #18]

	AS5047U_Read(dev, 0x0001, &Status);
 80008dc:	f107 0312 	add.w	r3, r7, #18
 80008e0:	461a      	mov	r2, r3
 80008e2:	2101      	movs	r1, #1
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff23 	bl	8000730 <AS5047U_Read>
	dev->Error_Status.CORDIC_Overflow 					= (uint8_t) ((Status >> 10) & 0x01);
 80008ea:	8a7b      	ldrh	r3, [r7, #18]
 80008ec:	0a9b      	lsrs	r3, r3, #10
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished 	= (uint8_t) ((Status >> 9) & 0x01);
 80008fc:	8a7b      	ldrh	r3, [r7, #18]
 80008fe:	0a5b      	lsrs	r3, r3, #9
 8000900:	b29b      	uxth	r3, r3
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error 					= (uint8_t) ((Status >> 7) & 0x01);
 800090e:	8a7b      	ldrh	r3, [r7, #18]
 8000910:	09db      	lsrs	r3, r3, #7
 8000912:	b29b      	uxth	r3, r3
 8000914:	b2db      	uxtb	r3, r3
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error 						= (uint8_t) ((Status >> 6) & 0x01);
 8000920:	8a7b      	ldrh	r3, [r7, #18]
 8000922:	099b      	lsrs	r3, r3, #6
 8000924:	b29b      	uxth	r3, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	b2da      	uxtb	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error 					= (uint8_t) ((Status >> 5) & 0x01);
 8000932:	8a7b      	ldrh	r3, [r7, #18]
 8000934:	095b      	lsrs	r3, r3, #5
 8000936:	b29b      	uxth	r3, r3
 8000938:	b2db      	uxtb	r3, r3
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	b2da      	uxtb	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error 					= (uint8_t) ((Status >> 4) & 0x01);
 8000944:	8a7b      	ldrh	r3, [r7, #18]
 8000946:	091b      	lsrs	r3, r3, #4
 8000948:	b29b      	uxth	r3, r3
 800094a:	b2db      	uxtb	r3, r3
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error 						= (uint8_t) ((Status >> 3) & 0x01);
 8000956:	8a7b      	ldrh	r3, [r7, #18]
 8000958:	08db      	lsrs	r3, r3, #3
 800095a:	b29b      	uxth	r3, r3
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	b2da      	uxtb	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning 					= (uint8_t) ((Status >> 2) & 0x01);
 8000968:	8a7b      	ldrh	r3, [r7, #18]
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	b29b      	uxth	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	b2da      	uxtb	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf 							= (uint8_t) ((Status >> 1) & 0x01);
 800097a:	8a7b      	ldrh	r3, [r7, #18]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning 						= (uint8_t) (Status & 0x01);
 800098c:	8a7b      	ldrh	r3, [r7, #18]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	765a      	strb	r2, [r3, #25]
	AS5047U_Error_Handle(dev, rep);
 800099a:	7d7b      	ldrb	r3, [r7, #21]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f806 	bl	80009b0 <AS5047U_Error_Handle>
	return rep;
 80009a4:	7d7b      	ldrb	r3, [r7, #21]
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <AS5047U_Error_Handle>:

void AS5047U_Error_Handle(AS5047U *dev,HAL_StatusTypeDef respond){
 80009b0:	b5b0      	push	{r4, r5, r7, lr}
 80009b2:	b08c      	sub	sp, #48	; 0x30
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d123      	bne.n	8000a0a <AS5047U_Error_Handle+0x5a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7e9b      	ldrb	r3, [r3, #26]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d11f      	bne.n	8000a0a <AS5047U_Error_Handle+0x5a>
		uint8_t message[40] = "AS5047U initializes successfully.";
 80009ca:	4b4f      	ldr	r3, [pc, #316]	; (8000b08 <AS5047U_Error_Handle+0x158>)
 80009cc:	f107 0408 	add.w	r4, r7, #8
 80009d0:	461d      	mov	r5, r3
 80009d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	8023      	strh	r3, [r4, #0]
 80009de:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	809a      	strh	r2, [r3, #4]
		SD_Card_Write_Log(LOG_INFO, message, strlen((char *)message));
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fc77 	bl	80002e0 <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4619      	mov	r1, r3
 80009fc:	2000      	movs	r0, #0
 80009fe:	f001 fa77 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 1;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2201      	movs	r2, #1
 8000a06:	769a      	strb	r2, [r3, #26]
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 8000a08:	e079      	b.n	8000afe <AS5047U_Error_Handle+0x14e>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d024      	beq.n	8000a5a <AS5047U_Error_Handle+0xaa>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7e9b      	ldrb	r3, [r3, #26]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d120      	bne.n	8000a5a <AS5047U_Error_Handle+0xaa>
		uint8_t message[40] = "AS5047U initialization fails.";
 8000a18:	4b3c      	ldr	r3, [pc, #240]	; (8000b0c <AS5047U_Error_Handle+0x15c>)
 8000a1a:	f107 0408 	add.w	r4, r7, #8
 8000a1e:	461d      	mov	r5, r3
 8000a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a28:	c407      	stmia	r4!, {r0, r1, r2}
 8000a2a:	8023      	strh	r3, [r4, #0]
 8000a2c:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	811a      	strh	r2, [r3, #8]
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fc4f 	bl	80002e0 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f001 fa4f 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	769a      	strb	r2, [r3, #26]
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 8000a58:	e051      	b.n	8000afe <AS5047U_Error_Handle+0x14e>
	}
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d127      	bne.n	8000ab0 <AS5047U_Error_Handle+0x100>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7e9b      	ldrb	r3, [r3, #26]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d123      	bne.n	8000ab0 <AS5047U_Error_Handle+0x100>
		uint8_t message[40] = "connect with AS5047U successfully.";
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <AS5047U_Error_Handle+0x160>)
 8000a6a:	f107 0408 	add.w	r4, r7, #8
 8000a6e:	461d      	mov	r5, r3
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a78:	682b      	ldr	r3, [r5, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	8022      	strh	r2, [r4, #0]
 8000a7e:	3402      	adds	r4, #2
 8000a80:	0c1b      	lsrs	r3, r3, #16
 8000a82:	7023      	strb	r3, [r4, #0]
 8000a84:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	711a      	strb	r2, [r3, #4]
		SD_Card_Write_Log(LOG_INFO, message, strlen((char *)message));
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fc24 	bl	80002e0 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f001 fa24 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 1;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	769a      	strb	r2, [r3, #26]
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 8000aae:	e026      	b.n	8000afe <AS5047U_Error_Handle+0x14e>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 1)){
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d023      	beq.n	8000afe <AS5047U_Error_Handle+0x14e>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7e9b      	ldrb	r3, [r3, #26]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d11f      	bne.n	8000afe <AS5047U_Error_Handle+0x14e>
		uint8_t message[40] = "can't communicate with AS5047U.";
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <AS5047U_Error_Handle+0x164>)
 8000ac0:	f107 0408 	add.w	r4, r7, #8
 8000ac4:	461d      	mov	r5, r3
 8000ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ace:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fbfd 	bl	80002e0 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	4619      	mov	r1, r3
 8000af0:	2002      	movs	r0, #2
 8000af2:	f001 f9fd 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	769a      	strb	r2, [r3, #26]
	}
}
 8000afc:	e7ff      	b.n	8000afe <AS5047U_Error_Handle+0x14e>
 8000afe:	bf00      	nop
 8000b00:	3730      	adds	r7, #48	; 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bdb0      	pop	{r4, r5, r7, pc}
 8000b06:	bf00      	nop
 8000b08:	0801cf9c 	.word	0x0801cf9c
 8000b0c:	0801cfc4 	.word	0x0801cfc4
 8000b10:	0801cfec 	.word	0x0801cfec
 8000b14:	0801d014 	.word	0x0801d014

08000b18 <DRV10975_Init>:
 */

#include "Library/DRV10975.h"
#include  "Library/Logging.h"

void DRV10975_Init(DRV10975 *dev,I2C_HandleTypeDef *i2c_handle, TIM_HandleTypeDef *tim_handle, uint32_t tim_channel, GPIO_TypeDef *gpio_port,uint16_t gpio_pin){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af04      	add	r7, sp, #16
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
	dev->address = 0xA4;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	22a4      	movs	r2, #164	; 0xa4
 8000b2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->i2cHandle = i2c_handle;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	68ba      	ldr	r2, [r7, #8]
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
	dev->tim_handle = tim_handle;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	641a      	str	r2, [r3, #64]	; 0x40
	dev->tim_channel = tim_channel;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	645a      	str	r2, [r3, #68]	; 0x44
	dev->dir_gpio_port = gpio_port;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6a3a      	ldr	r2, [r7, #32]
 8000b44:	639a      	str	r2, [r3, #56]	; 0x38
	dev->dir_gpio_pin = gpio_pin;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000b4a:	879a      	strh	r2, [r3, #60]	; 0x3c
	dev->is_connect = 2;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	2202      	movs	r2, #2
 8000b50:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(dev->tim_handle, dev->tim_channel);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	f00f fa61 	bl	8010024 <HAL_TIM_PWM_Start>
	uint8_t EECtrl[1] = { 0x10 };
 8000b62:	2310      	movs	r3, #16
 8000b64:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef rep = HAL_I2C_Mem_Read(&hi2c2, 0xA4, 0x03, I2C_MEMADD_SIZE_8BIT, EECtrl, 1,
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	2203      	movs	r2, #3
 8000b78:	21a4      	movs	r1, #164	; 0xa4
 8000b7a:	4807      	ldr	r0, [pc, #28]	; (8000b98 <DRV10975_Init+0x80>)
 8000b7c:	f007 f912 	bl	8007da4 <HAL_I2C_Mem_Read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	75fb      	strb	r3, [r7, #23]
					100);
	DRV10975_Error_Handle(dev, rep);
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	4619      	mov	r1, r3
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f965 	bl	8000e58 <DRV10975_Error_Handle>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2400043c 	.word	0x2400043c

08000b9c <DRV10975_Config>:

void DRV10975_Config(DRV10975 *dev){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af04      	add	r7, sp, #16
 8000ba2:	6078      	str	r0, [r7, #4]
	//set SLDATA to 1
	uint8_t EECtrl[1] = { 0x40 };
 8000ba4:	2340      	movs	r3, #64	; 0x40
 8000ba6:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x03, I2C_MEMADD_SIZE_8BIT, EECtrl, 1, 100);
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	9302      	str	r3, [sp, #8]
 8000bac:	2301      	movs	r3, #1
 8000bae:	9301      	str	r3, [sp, #4]
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	21a4      	movs	r1, #164	; 0xa4
 8000bbc:	487c      	ldr	r0, [pc, #496]	; (8000db0 <DRV10975_Config+0x214>)
 8000bbe:	f006 ffdd 	bl	8007b7c <HAL_I2C_Mem_Write>
	uint8_t data_jaa[1] = { 0 };
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	743b      	strb	r3, [r7, #16]
	data_jaa[0] = 0x68;
 8000bc6:	2368      	movs	r3, #104	; 0x68
 8000bc8:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x20, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	9302      	str	r3, [sp, #8]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2301      	movs	r3, #1
 8000bda:	2220      	movs	r2, #32
 8000bdc:	21a4      	movs	r1, #164	; 0xa4
 8000bde:	4874      	ldr	r0, [pc, #464]	; (8000db0 <DRV10975_Config+0x214>)
 8000be0:	f006 ffcc 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x1F;
 8000be4:	231f      	movs	r3, #31
 8000be6:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x21, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000be8:	2364      	movs	r3, #100	; 0x64
 8000bea:	9302      	str	r3, [sp, #8]
 8000bec:	2301      	movs	r3, #1
 8000bee:	9301      	str	r3, [sp, #4]
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	9300      	str	r3, [sp, #0]
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	2221      	movs	r2, #33	; 0x21
 8000bfa:	21a4      	movs	r1, #164	; 0xa4
 8000bfc:	486c      	ldr	r0, [pc, #432]	; (8000db0 <DRV10975_Config+0x214>)
 8000bfe:	f006 ffbd 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x3A;
 8000c02:	233a      	movs	r3, #58	; 0x3a
 8000c04:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x22, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	2301      	movs	r3, #1
 8000c16:	2222      	movs	r2, #34	; 0x22
 8000c18:	21a4      	movs	r1, #164	; 0xa4
 8000c1a:	4865      	ldr	r0, [pc, #404]	; (8000db0 <DRV10975_Config+0x214>)
 8000c1c:	f006 ffae 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0xF;
 8000c20:	230f      	movs	r3, #15
 8000c22:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x23, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	2301      	movs	r3, #1
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	2223      	movs	r2, #35	; 0x23
 8000c36:	21a4      	movs	r1, #164	; 0xa4
 8000c38:	485d      	ldr	r0, [pc, #372]	; (8000db0 <DRV10975_Config+0x214>)
 8000c3a:	f006 ff9f 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x47;
 8000c3e:	2347      	movs	r3, #71	; 0x47
 8000c40:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x24, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	9302      	str	r3, [sp, #8]
 8000c46:	2301      	movs	r3, #1
 8000c48:	9301      	str	r3, [sp, #4]
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	9300      	str	r3, [sp, #0]
 8000c50:	2301      	movs	r3, #1
 8000c52:	2224      	movs	r2, #36	; 0x24
 8000c54:	21a4      	movs	r1, #164	; 0xa4
 8000c56:	4856      	ldr	r0, [pc, #344]	; (8000db0 <DRV10975_Config+0x214>)
 8000c58:	f006 ff90 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0xC0;
 8000c5c:	23c0      	movs	r3, #192	; 0xc0
 8000c5e:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x25, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000c60:	2364      	movs	r3, #100	; 0x64
 8000c62:	9302      	str	r3, [sp, #8]
 8000c64:	2301      	movs	r3, #1
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	2225      	movs	r2, #37	; 0x25
 8000c72:	21a4      	movs	r1, #164	; 0xa4
 8000c74:	484e      	ldr	r0, [pc, #312]	; (8000db0 <DRV10975_Config+0x214>)
 8000c76:	f006 ff81 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x8F;
 8000c7a:	238f      	movs	r3, #143	; 0x8f
 8000c7c:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x26, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000c7e:	2364      	movs	r3, #100	; 0x64
 8000c80:	9302      	str	r3, [sp, #8]
 8000c82:	2301      	movs	r3, #1
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	2226      	movs	r2, #38	; 0x26
 8000c90:	21a4      	movs	r1, #164	; 0xa4
 8000c92:	4847      	ldr	r0, [pc, #284]	; (8000db0 <DRV10975_Config+0x214>)
 8000c94:	f006 ff72 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x9C;
 8000c98:	239c      	movs	r3, #156	; 0x9c
 8000c9a:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x27, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000c9c:	2364      	movs	r3, #100	; 0x64
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	2227      	movs	r2, #39	; 0x27
 8000cae:	21a4      	movs	r1, #164	; 0xa4
 8000cb0:	483f      	ldr	r0, [pc, #252]	; (8000db0 <DRV10975_Config+0x214>)
 8000cb2:	f006 ff63 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x66;
 8000cb6:	2366      	movs	r3, #102	; 0x66
 8000cb8:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x28, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000cba:	2364      	movs	r3, #100	; 0x64
 8000cbc:	9302      	str	r3, [sp, #8]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	9301      	str	r3, [sp, #4]
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	2228      	movs	r2, #40	; 0x28
 8000ccc:	21a4      	movs	r1, #164	; 0xa4
 8000cce:	4838      	ldr	r0, [pc, #224]	; (8000db0 <DRV10975_Config+0x214>)
 8000cd0:	f006 ff54 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0x88;
 8000cd4:	2388      	movs	r3, #136	; 0x88
 8000cd6:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x29, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	9302      	str	r3, [sp, #8]
 8000cdc:	2301      	movs	r3, #1
 8000cde:	9301      	str	r3, [sp, #4]
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	2229      	movs	r2, #41	; 0x29
 8000cea:	21a4      	movs	r1, #164	; 0xa4
 8000cec:	4830      	ldr	r0, [pc, #192]	; (8000db0 <DRV10975_Config+0x214>)
 8000cee:	f006 ff45 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0xB;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x2A, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2301      	movs	r3, #1
 8000d06:	222a      	movs	r2, #42	; 0x2a
 8000d08:	21a4      	movs	r1, #164	; 0xa4
 8000d0a:	4829      	ldr	r0, [pc, #164]	; (8000db0 <DRV10975_Config+0x214>)
 8000d0c:	f006 ff36 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	data_jaa[0] = 0xC;
 8000d10:	230c      	movs	r3, #12
 8000d12:	743b      	strb	r3, [r7, #16]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x2B, I2C_MEMADD_SIZE_8BIT, data_jaa, 1,
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2301      	movs	r3, #1
 8000d24:	222b      	movs	r2, #43	; 0x2b
 8000d26:	21a4      	movs	r1, #164	; 0xa4
 8000d28:	4821      	ldr	r0, [pc, #132]	; (8000db0 <DRV10975_Config+0x214>)
 8000d2a:	f006 ff27 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);

	// Write 0xB6 to enProgKey
	uint8_t DevCtrl[1] = { 0xB6 };
 8000d2e:	23b6      	movs	r3, #182	; 0xb6
 8000d30:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x02, I2C_MEMADD_SIZE_8BIT, DevCtrl, 1,
 8000d32:	2364      	movs	r3, #100	; 0x64
 8000d34:	9302      	str	r3, [sp, #8]
 8000d36:	2301      	movs	r3, #1
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2301      	movs	r3, #1
 8000d42:	2202      	movs	r2, #2
 8000d44:	21a4      	movs	r1, #164	; 0xa4
 8000d46:	481a      	ldr	r0, [pc, #104]	; (8000db0 <DRV10975_Config+0x214>)
 8000d48:	f006 ff18 	bl	8007b7c <HAL_I2C_Mem_Write>
			100);
	// Write eeWrite = 1
	EECtrl[0] = 0x10;
 8000d4c:	2310      	movs	r3, #16
 8000d4e:	753b      	strb	r3, [r7, #20]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x03, I2C_MEMADD_SIZE_8BIT, EECtrl, 1, 100);
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	9302      	str	r3, [sp, #8]
 8000d54:	2301      	movs	r3, #1
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2301      	movs	r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	21a4      	movs	r1, #164	; 0xa4
 8000d64:	4812      	ldr	r0, [pc, #72]	; (8000db0 <DRV10975_Config+0x214>)
 8000d66:	f006 ff09 	bl	8007b7c <HAL_I2C_Mem_Write>
	EECtrl[0] = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	753b      	strb	r3, [r7, #20]
	//wait till eeWrite = 0
	HAL_StatusTypeDef rep = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	75fb      	strb	r3, [r7, #23]
	while (1) {
		rep = HAL_I2C_Mem_Read(&hi2c2, 0xA4, 0x03, I2C_MEMADD_SIZE_8BIT, EECtrl, 1,
 8000d72:	2364      	movs	r3, #100	; 0x64
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2301      	movs	r3, #1
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	21a4      	movs	r1, #164	; 0xa4
 8000d86:	480a      	ldr	r0, [pc, #40]	; (8000db0 <DRV10975_Config+0x214>)
 8000d88:	f007 f80c 	bl	8007da4 <HAL_I2C_Mem_Read>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	75fb      	strb	r3, [r7, #23]
				100);
		if ((EECtrl[0] & 0x10) == 0x00) {
 8000d90:	7d3b      	ldrb	r3, [r7, #20]
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d000      	beq.n	8000d9c <DRV10975_Config+0x200>
		rep = HAL_I2C_Mem_Read(&hi2c2, 0xA4, 0x03, I2C_MEMADD_SIZE_8BIT, EECtrl, 1,
 8000d9a:	e7ea      	b.n	8000d72 <DRV10975_Config+0x1d6>
			break;
 8000d9c:	bf00      	nop
		}
	}
	DRV10975_Error_Handle(dev, rep);
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f000 f858 	bl	8000e58 <DRV10975_Error_Handle>
}
 8000da8:	bf00      	nop
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2400043c 	.word	0x2400043c

08000db4 <DRV10975_I2C_Set_Speed>:
		}
	}
	set_pwm(dev->tim_handle, dev->tim_channel, 25000, speed/100.0f);
}

void DRV10975_I2C_Set_Speed(DRV10975 *dev, int32_t speed, uint8_t dir){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af04      	add	r7, sp, #16
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	71fb      	strb	r3, [r7, #7]
	//Disable sleepDis (sleepDis = 1)
	uint8_t EECtrl[1] = { 0x80 };
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	773b      	strb	r3, [r7, #28]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x03, I2C_MEMADD_SIZE_8BIT, EECtrl, 1, 100);
 8000dc6:	2364      	movs	r3, #100	; 0x64
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	21a4      	movs	r1, #164	; 0xa4
 8000dda:	481d      	ldr	r0, [pc, #116]	; (8000e50 <DRV10975_I2C_Set_Speed+0x9c>)
 8000ddc:	f006 fece 	bl	8007b7c <HAL_I2C_Mem_Write>
	//Disable Write OverRide and write MSB First
	uint8_t SpeedCtrl_MSB[1] = { (speed >> 8) | 0x80 };
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	121b      	asrs	r3, r3, #8
 8000de4:	b25b      	sxtb	r3, r3
 8000de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dea:	b25b      	sxtb	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	763b      	strb	r3, [r7, #24]
	HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x01, I2C_MEMADD_SIZE_8BIT, SpeedCtrl_MSB,
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	f107 0318 	add.w	r3, r7, #24
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2201      	movs	r2, #1
 8000e02:	21a4      	movs	r1, #164	; 0xa4
 8000e04:	4812      	ldr	r0, [pc, #72]	; (8000e50 <DRV10975_I2C_Set_Speed+0x9c>)
 8000e06:	f006 feb9 	bl	8007b7c <HAL_I2C_Mem_Write>
			1, 100);
	//write LSB
	uint8_t SpeedCtrl_LSB[1] = { speed & 0xFF };
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	753b      	strb	r3, [r7, #20]
	HAL_StatusTypeDef rep = HAL_I2C_Mem_Write(&hi2c2, 0xA4, 0x00, I2C_MEMADD_SIZE_8BIT, SpeedCtrl_LSB,
 8000e10:	2364      	movs	r3, #100	; 0x64
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2301      	movs	r3, #1
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2301      	movs	r3, #1
 8000e20:	2200      	movs	r2, #0
 8000e22:	21a4      	movs	r1, #164	; 0xa4
 8000e24:	480a      	ldr	r0, [pc, #40]	; (8000e50 <DRV10975_I2C_Set_Speed+0x9c>)
 8000e26:	f006 fea9 	bl	8007b7c <HAL_I2C_Mem_Write>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	77fb      	strb	r3, [r7, #31]
			1, 100);
	DRV10975_Error_Handle(dev, rep);
 8000e2e:	7ffb      	ldrb	r3, [r7, #31]
 8000e30:	4619      	mov	r1, r3
 8000e32:	68f8      	ldr	r0, [r7, #12]
 8000e34:	f000 f810 	bl	8000e58 <DRV10975_Error_Handle>
	HAL_GPIO_WritePin(D2_DIR_GPIO_Port, D2_DIR_Pin, dir);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <DRV10975_I2C_Set_Speed+0xa0>)
 8000e42:	f006 fdd7 	bl	80079f4 <HAL_GPIO_WritePin>
}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2400043c 	.word	0x2400043c
 8000e54:	58021400 	.word	0x58021400

08000e58 <DRV10975_Error_Handle>:

void DRV10975_Error_Handle(DRV10975 *dev,HAL_StatusTypeDef respond){
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	b08c      	sub	sp, #48	; 0x30
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d127      	bne.n	8000eba <DRV10975_Error_Handle+0x62>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d123      	bne.n	8000eba <DRV10975_Error_Handle+0x62>
			uint8_t message[40] = "DRV10975 initializes successfully.";
 8000e72:	4b4f      	ldr	r3, [pc, #316]	; (8000fb0 <DRV10975_Error_Handle+0x158>)
 8000e74:	f107 0408 	add.w	r4, r7, #8
 8000e78:	461d      	mov	r5, r3
 8000e7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	461a      	mov	r2, r3
 8000e86:	8022      	strh	r2, [r4, #0]
 8000e88:	3402      	adds	r4, #2
 8000e8a:	0c1b      	lsrs	r3, r3, #16
 8000e8c:	7023      	strb	r3, [r4, #0]
 8000e8e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	711a      	strb	r2, [r3, #4]
			SD_Card_Write_Log(LOG_INFO, message, strlen((char *)message));
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fa1f 	bl	80002e0 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2000      	movs	r0, #0
 8000eae:	f001 f81f 	bl	8001ef0 <SD_Card_Write_Log>
			dev->is_connect = 1;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 8000eb8:	e076      	b.n	8000fa8 <DRV10975_Error_Handle+0x150>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d027      	beq.n	8000f10 <DRV10975_Error_Handle+0xb8>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d123      	bne.n	8000f10 <DRV10975_Error_Handle+0xb8>
		uint8_t message[40] = "DRV10975 initialization fails.";
 8000ec8:	4b3a      	ldr	r3, [pc, #232]	; (8000fb4 <DRV10975_Error_Handle+0x15c>)
 8000eca:	f107 0408 	add.w	r4, r7, #8
 8000ece:	461d      	mov	r5, r3
 8000ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ed4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ed8:	c407      	stmia	r4!, {r0, r1, r2}
 8000eda:	8023      	strh	r3, [r4, #0]
 8000edc:	3402      	adds	r4, #2
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	7023      	strb	r3, [r4, #0]
 8000ee2:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	721a      	strb	r2, [r3, #8]
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff f9f4 	bl	80002e0 <strlen>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	2002      	movs	r0, #2
 8000f04:	f000 fff4 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 8000f0e:	e04b      	b.n	8000fa8 <DRV10975_Error_Handle+0x150>
	}
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d120      	bne.n	8000f58 <DRV10975_Error_Handle+0x100>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11c      	bne.n	8000f58 <DRV10975_Error_Handle+0x100>
		uint8_t message[40] = "connect with DRV10975 successfully.";
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <DRV10975_Error_Handle+0x160>)
 8000f20:	f107 0408 	add.w	r4, r7, #8
 8000f24:	461d      	mov	r5, r3
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2e:	682b      	ldr	r3, [r5, #0]
 8000f30:	6023      	str	r3, [r4, #0]
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff f9d0 	bl	80002e0 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	f107 0308 	add.w	r3, r7, #8
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f000 ffd0 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 1;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 8000f56:	e027      	b.n	8000fa8 <DRV10975_Error_Handle+0x150>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 1)){
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d024      	beq.n	8000fa8 <DRV10975_Error_Handle+0x150>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d120      	bne.n	8000fa8 <DRV10975_Error_Handle+0x150>
		uint8_t message[40] = "can't communicate with DRV10975.";
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <DRV10975_Error_Handle+0x164>)
 8000f68:	f107 0408 	add.w	r4, r7, #8
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f76:	682b      	ldr	r3, [r5, #0]
 8000f78:	7023      	strb	r3, [r4, #0]
 8000f7a:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	f8c3 2003 	str.w	r2, [r3, #3]
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8000f86:	f107 0308 	add.w	r3, r7, #8
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f9a8 	bl	80002e0 <strlen>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f000 ffa8 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
	}
}
 8000fa6:	e7ff      	b.n	8000fa8 <DRV10975_Error_Handle+0x150>
 8000fa8:	bf00      	nop
 8000faa:	3730      	adds	r7, #48	; 0x30
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb0:	0801d03c 	.word	0x0801d03c
 8000fb4:	0801d064 	.word	0x0801d064
 8000fb8:	0801d08c 	.word	0x0801d08c
 8000fbc:	0801d0b4 	.word	0x0801d0b4

08000fc0 <hamming7264_encode>:
 *      Author: fame
 */
#include <Library/EDAC.h>

void hamming7264_encode(uint8_t data[8], uint8_t target_arr[9])
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b090      	sub	sp, #64	; 0x40
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
    uint8_t current_idx = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (int i = 0; i < 9; i++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fd4:	e007      	b.n	8000fe6 <hamming7264_encode+0x26>
        target_arr[i] = 0;
 8000fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	4413      	add	r3, r2
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 9; i++){
 8000fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	ddf4      	ble.n	8000fd6 <hamming7264_encode+0x16>
    }
    // arrange data into target array
    for (int i = 0; i < 72; i++)
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
 8000ff0:	e03d      	b.n	800106e <hamming7264_encode+0xae>
    {
        // check if it not power of two?
        if ((i & (i - 1)) != 0)
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff4:	1e5a      	subs	r2, r3, #1
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d034      	beq.n	8001068 <hamming7264_encode+0xa8>
        {
            int arr_num = i / 8;
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	2b00      	cmp	r3, #0
 8001002:	da00      	bge.n	8001006 <hamming7264_encode+0x46>
 8001004:	3307      	adds	r3, #7
 8001006:	10db      	asrs	r3, r3, #3
 8001008:	61bb      	str	r3, [r7, #24]
            int arr_idx = i % 8;
 800100a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100c:	425a      	negs	r2, r3
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	f002 0207 	and.w	r2, r2, #7
 8001016:	bf58      	it	pl
 8001018:	4253      	negpl	r3, r2
 800101a:	617b      	str	r3, [r7, #20]
            target_arr[arr_num] |= ((data[current_idx / 8] >> (current_idx % 8)) & 0x01) << arr_idx;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	4413      	add	r3, r2
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25a      	sxtb	r2, r3
 8001026:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800102a:	08db      	lsrs	r3, r3, #3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4619      	mov	r1, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	440b      	add	r3, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	fa41 f303 	asr.w	r3, r1, r3
 8001044:	f003 0101 	and.w	r1, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	b25b      	sxtb	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b259      	sxtb	r1, r3
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	4413      	add	r3, r2
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
            current_idx++;
 800105e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001062:	3301      	adds	r3, #1
 8001064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    for (int i = 0; i < 72; i++)
 8001068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800106a:	3301      	adds	r3, #1
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	2b47      	cmp	r3, #71	; 0x47
 8001072:	ddbe      	ble.n	8000ff2 <hamming7264_encode+0x32>
        }
    }
    // calculate parity_bits
    //  0 is parity bits
    for (int i = 0; i < 7; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
 8001078:	e066      	b.n	8001148 <hamming7264_encode+0x188>
    {
        uint8_t parity_idx = pow(2, i);
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001084:	eeb0 1b47 	vmov.f64	d1, d7
 8001088:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800108c:	f01b fcb4 	bl	801c9f8 <pow>
 8001090:	eeb0 7b40 	vmov.f64	d7, d0
 8001094:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001098:	edc7 7a01 	vstr	s15, [r7, #4]
 800109c:	793b      	ldrb	r3, [r7, #4]
 800109e:	77fb      	strb	r3, [r7, #31]
        uint8_t parity_value = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        // check if that idx should be calculate in parity bits
        for (int j = 0; j < 72; j++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010aa:	e02a      	b.n	8001102 <hamming7264_encode+0x142>
        {
            if (((j & parity_idx) == parity_idx) && (j != parity_idx))
 80010ac:	7ffa      	ldrb	r2, [r7, #31]
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	401a      	ands	r2, r3
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d121      	bne.n	80010fc <hamming7264_encode+0x13c>
 80010b8:	7ffb      	ldrb	r3, [r7, #31]
 80010ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010bc:	429a      	cmp	r2, r3
 80010be:	d01d      	beq.n	80010fc <hamming7264_encode+0x13c>
            {
                parity_value ^= (target_arr[j / 8] >> (j % 8)) & 0x01;
 80010c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	da00      	bge.n	80010c8 <hamming7264_encode+0x108>
 80010c6:	3307      	adds	r3, #7
 80010c8:	10db      	asrs	r3, r3, #3
 80010ca:	461a      	mov	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d6:	425a      	negs	r2, r3
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	f002 0207 	and.w	r2, r2, #7
 80010e0:	bf58      	it	pl
 80010e2:	4253      	negpl	r3, r2
 80010e4:	fa41 f303 	asr.w	r3, r1, r3
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	b25a      	sxtb	r2, r3
 80010f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010f4:	4053      	eors	r3, r2
 80010f6:	b25b      	sxtb	r3, r3
 80010f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        for (int j = 0; j < 72; j++)
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	3301      	adds	r3, #1
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
 8001102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001104:	2b47      	cmp	r3, #71	; 0x47
 8001106:	ddd1      	ble.n	80010ac <hamming7264_encode+0xec>
            }
        }
        parity_value = parity_value & 0x01;
 8001108:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        target_arr[parity_idx / 8] |= parity_value << (parity_idx % 8);
 8001114:	7ffb      	ldrb	r3, [r7, #31]
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	b2d8      	uxtb	r0, r3
 800111a:	4602      	mov	r2, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b25a      	sxtb	r2, r3
 8001124:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	b25b      	sxtb	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b25a      	sxtb	r2, r3
 8001138:	4601      	mov	r1, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	440b      	add	r3, r1
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 7; i++)
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	3301      	adds	r3, #1
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
 8001148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114a:	2b06      	cmp	r3, #6
 800114c:	dd95      	ble.n	800107a <hamming7264_encode+0xba>
    }
    // calculate all parity_bits
    uint8_t parity_value = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (int i = 0; i < 72; i++)
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	e020      	b.n	800119c <hamming7264_encode+0x1dc>
    {
        parity_value ^= (target_arr[i / 8] >> (i % 8)) & 0x01;
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	2b00      	cmp	r3, #0
 800115e:	da00      	bge.n	8001162 <hamming7264_encode+0x1a2>
 8001160:	3307      	adds	r3, #7
 8001162:	10db      	asrs	r3, r3, #3
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	6a3b      	ldr	r3, [r7, #32]
 8001170:	425a      	negs	r2, r3
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	f002 0207 	and.w	r2, r2, #7
 800117a:	bf58      	it	pl
 800117c:	4253      	negpl	r3, r2
 800117e:	fa41 f303 	asr.w	r3, r1, r3
 8001182:	b25b      	sxtb	r3, r3
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	b25a      	sxtb	r2, r3
 800118a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800118e:	4053      	eors	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for (int i = 0; i < 72; i++)
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	3301      	adds	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	2b47      	cmp	r3, #71	; 0x47
 80011a0:	dddb      	ble.n	800115a <hamming7264_encode+0x19a>
    }
    parity_value = parity_value & 0x01;
 80011a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    target_arr[0] |= parity_value;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	701a      	strb	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3740      	adds	r7, #64	; 0x40
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <hamming7264_decode>:

uint8_t hamming7264_decode(uint8_t data[9], uint8_t target_data[8])
{
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b091      	sub	sp, #68	; 0x44
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
    uint8_t result = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    // check overall parity (work)
    uint8_t overall_msg_parity = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for (int i = 0; i < 72; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
 80011e0:	e01d      	b.n	800121e <hamming7264_decode+0x58>
    {
        overall_msg_parity ^= (data[i / 8] >> (i % 8));
 80011e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da00      	bge.n	80011ea <hamming7264_decode+0x24>
 80011e8:	3307      	adds	r3, #7
 80011ea:	10db      	asrs	r3, r3, #3
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4413      	add	r3, r2
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f8:	425a      	negs	r2, r3
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	f002 0207 	and.w	r2, r2, #7
 8001202:	bf58      	it	pl
 8001204:	4253      	negpl	r3, r2
 8001206:	fa41 f303 	asr.w	r3, r1, r3
 800120a:	b25a      	sxtb	r2, r3
 800120c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8001210:	4053      	eors	r3, r2
 8001212:	b25b      	sxtb	r3, r3
 8001214:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for (int i = 0; i < 72; i++)
 8001218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800121a:	3301      	adds	r3, #1
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
 800121e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001220:	2b47      	cmp	r3, #71	; 0x47
 8001222:	ddde      	ble.n	80011e2 <hamming7264_decode+0x1c>
    }
    overall_msg_parity = overall_msg_parity & 0x01;
 8001224:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    //get store parity bit (maybe work?)
    uint8_t store_parity_bits = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for (int i = 0; i < 7; i++){
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
 800123a:	e02e      	b.n	800129a <hamming7264_decode+0xd4>
        uint8_t parity_idx = pow(2, i);
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001246:	eeb0 1b47 	vmov.f64	d1, d7
 800124a:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800124e:	f01b fbd3 	bl	801c9f8 <pow>
 8001252:	eeb0 7b40 	vmov.f64	d7, d0
 8001256:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800125a:	edc7 7a01 	vstr	s15, [r7, #4]
 800125e:	793b      	ldrb	r3, [r7, #4]
 8001260:	75bb      	strb	r3, [r7, #22]
        store_parity_bits |= ((data[parity_idx/8] >> (parity_idx % 8)) & 0x01) << i;
 8001262:	7dbb      	ldrb	r3, [r7, #22]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	b2db      	uxtb	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	7dbb      	ldrb	r3, [r7, #22]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	fa42 f303 	asr.w	r3, r2, r3
 800127c:	f003 0201 	and.w	r2, r3, #1
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	b25a      	sxtb	r2, r3
 8001288:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800128c:	4313      	orrs	r3, r2
 800128e:	b25b      	sxtb	r3, r3
 8001290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    for (int i = 0; i < 7; i++){
 8001294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001296:	3301      	adds	r3, #1
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
 800129a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129c:	2b06      	cmp	r3, #6
 800129e:	ddcd      	ble.n	800123c <hamming7264_decode+0x76>
    }
    //calculate current parity bit (meh)
    uint8_t current_parity_bits = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t fix_parity_bits = 0; // this one use when 1 bits error has occured!
 80012a6:	2300      	movs	r3, #0
 80012a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for (int i = 0; i < 7; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b0:	e078      	b.n	80013a4 <hamming7264_decode+0x1de>
    {
        uint8_t parity_idx = pow(2, i);
 80012b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80012bc:	eeb0 1b47 	vmov.f64	d1, d7
 80012c0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80012c4:	f01b fb98 	bl	801c9f8 <pow>
 80012c8:	eeb0 7b40 	vmov.f64	d7, d0
 80012cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012d0:	edc7 7a01 	vstr	s15, [r7, #4]
 80012d4:	793b      	ldrb	r3, [r7, #4]
 80012d6:	75fb      	strb	r3, [r7, #23]
        uint8_t parity_value = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        // check if that idx should be calculate in parity bits
        for (int j = 0; j < 72; j++)
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	e02a      	b.n	800133a <hamming7264_decode+0x174>
        {
            if (((j & parity_idx) == parity_idx) && (j != parity_idx))
 80012e4:	7dfa      	ldrb	r2, [r7, #23]
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	401a      	ands	r2, r3
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d121      	bne.n	8001334 <hamming7264_decode+0x16e>
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	6a3a      	ldr	r2, [r7, #32]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d01d      	beq.n	8001334 <hamming7264_decode+0x16e>
            {
                parity_value ^= (data[j / 8] >> (j % 8)) & 0x01;
 80012f8:	6a3b      	ldr	r3, [r7, #32]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da00      	bge.n	8001300 <hamming7264_decode+0x13a>
 80012fe:	3307      	adds	r3, #7
 8001300:	10db      	asrs	r3, r3, #3
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	4619      	mov	r1, r3
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	425a      	negs	r2, r3
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	f002 0207 	and.w	r2, r2, #7
 8001318:	bf58      	it	pl
 800131a:	4253      	negpl	r3, r2
 800131c:	fa41 f303 	asr.w	r3, r1, r3
 8001320:	b25b      	sxtb	r3, r3
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	b25a      	sxtb	r2, r3
 8001328:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800132c:	4053      	eors	r3, r2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (int j = 0; j < 72; j++)
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	3301      	adds	r3, #1
 8001338:	623b      	str	r3, [r7, #32]
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	2b47      	cmp	r3, #71	; 0x47
 800133e:	ddd1      	ble.n	80012e4 <hamming7264_decode+0x11e>
            }
        }
        current_parity_bits |= parity_value << i;
 8001340:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	b25a      	sxtb	r2, r3
 800134c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001350:	4313      	orrs	r3, r2
 8001352:	b25b      	sxtb	r3, r3
 8001354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        parity_value ^= (data[parity_idx / 8] >> (parity_idx % 8)) & 0x01;
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	08db      	lsrs	r3, r3, #3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	fa42 f303 	asr.w	r3, r2, r3
 8001372:	b25b      	sxtb	r3, r3
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	b25a      	sxtb	r2, r3
 800137a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800137e:	4053      	eors	r3, r2
 8001380:	b25b      	sxtb	r3, r3
 8001382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        fix_parity_bits |= parity_value << i;
 8001386:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	b25a      	sxtb	r2, r3
 8001392:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001396:	4313      	orrs	r3, r2
 8001398:	b25b      	sxtb	r3, r3
 800139a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    for (int i = 0; i < 7; i++)
 800139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a0:	3301      	adds	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80013a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	dd83      	ble.n	80012b2 <hamming7264_decode+0xec>
    }
    if ((overall_msg_parity == 0) && (store_parity_bits != current_parity_bits)){
 80013aa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d107      	bne.n	80013c2 <hamming7264_decode+0x1fc>
 80013b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80013b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d001      	beq.n	80013c2 <hamming7264_decode+0x1fc>
        return 2;
 80013be:	2302      	movs	r3, #2
 80013c0:	e07f      	b.n	80014c2 <hamming7264_decode+0x2fc>
    }
    else if ((overall_msg_parity == 1) && (store_parity_bits != current_parity_bits)){
 80013c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d12e      	bne.n	8001428 <hamming7264_decode+0x262>
 80013ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80013ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d028      	beq.n	8001428 <hamming7264_decode+0x262>
        data[fix_parity_bits/8] ^= (int)(pow(2,(fix_parity_bits % 8)));
 80013d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80013e6:	eeb0 1b47 	vmov.f64	d1, d7
 80013ea:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80013ee:	f01b fb03 	bl	801c9f8 <pow>
 80013f2:	eeb0 7b40 	vmov.f64	d7, d0
 80013f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80013fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80013fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	b2d9      	uxtb	r1, r3
 8001406:	460a      	mov	r2, r1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b25a      	sxtb	r2, r3
 8001410:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001414:	4053      	eors	r3, r2
 8001416:	b25a      	sxtb	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	440b      	add	r3, r1
 800141c:	b2d2      	uxtb	r2, r2
 800141e:	701a      	strb	r2, [r3, #0]
        result = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001426:	e00b      	b.n	8001440 <hamming7264_decode+0x27a>
    }
    else if (overall_msg_parity != (data[0] ^ 0x01)){
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f083 0301 	eor.w	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8001436:	429a      	cmp	r2, r3
 8001438:	d002      	beq.n	8001440 <hamming7264_decode+0x27a>
        result = 1;
 800143a:	2301      	movs	r3, #1
 800143c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    //decode data (work)
    uint8_t cnt = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	77fb      	strb	r3, [r7, #31]
    for (int i = 0; i < 72; i++){
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	e036      	b.n	80014b8 <hamming7264_decode+0x2f2>
        if ((i & (i - 1)) != 0){
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	1e5a      	subs	r2, r3, #1
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d02d      	beq.n	80014b2 <hamming7264_decode+0x2ec>
            target_data[cnt/8] |= ((data[i/8] >> (i%8)) & 0x01) << (cnt%8);
 8001456:	7ffb      	ldrb	r3, [r7, #31]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	b2d8      	uxtb	r0, r3
 800145c:	4602      	mov	r2, r0
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b25a      	sxtb	r2, r3
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da00      	bge.n	800146e <hamming7264_decode+0x2a8>
 800146c:	3307      	adds	r3, #7
 800146e:	10db      	asrs	r3, r3, #3
 8001470:	4619      	mov	r1, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	440b      	add	r3, r1
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	461c      	mov	r4, r3
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4259      	negs	r1, r3
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	f001 0107 	and.w	r1, r1, #7
 8001486:	bf58      	it	pl
 8001488:	424b      	negpl	r3, r1
 800148a:	fa44 f303 	asr.w	r3, r4, r3
 800148e:	f003 0101 	and.w	r1, r3, #1
 8001492:	7ffb      	ldrb	r3, [r7, #31]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	fa01 f303 	lsl.w	r3, r1, r3
 800149c:	b25b      	sxtb	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	4601      	mov	r1, r0
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	440b      	add	r3, r1
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
            cnt++;
 80014ac:	7ffb      	ldrb	r3, [r7, #31]
 80014ae:	3301      	adds	r3, #1
 80014b0:	77fb      	strb	r3, [r7, #31]
    for (int i = 0; i < 72; i++){
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b47      	cmp	r3, #71	; 0x47
 80014bc:	ddc5      	ble.n	800144a <hamming7264_decode+0x284>
        }
    }
    return result;
 80014be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3744      	adds	r7, #68	; 0x44
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd90      	pop	{r4, r7, pc}

080014ca <FRAM_Encode_Write>:

void FRAM_Encode_Write(FRAM *dev, uint16_t addr, uint8_t data[8]){
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b088      	sub	sp, #32
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	460b      	mov	r3, r1
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	817b      	strh	r3, [r7, #10]
	uint8_t encode_data[9] = {0};
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	711a      	strb	r2, [r3, #4]
	hamming7264_encode(data,encode_data);
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	4619      	mov	r1, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fd67 	bl	8000fc0 <hamming7264_encode>
	FRAM_Seq_Write(dev, addr, encode_data, sizeof(encode_data));
 80014f2:	f107 0214 	add.w	r2, r7, #20
 80014f6:	8979      	ldrh	r1, [r7, #10]
 80014f8:	2309      	movs	r3, #9
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f000 f8fa 	bl	80016f4 <FRAM_Seq_Write>
}
 8001500:	bf00      	nop
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <FRAM_Decode_Read>:

void FRAM_Decode_Read(FRAM *dev, uint16_t addr, uint8_t data[8]){
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	460b      	mov	r3, r1
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	817b      	strh	r3, [r7, #10]
	uint8_t decode_data[9] = {0};
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	711a      	strb	r2, [r3, #4]
	FRAM_Seq_Read(dev, addr, decode_data, sizeof(decode_data));
 8001524:	f107 0214 	add.w	r2, r7, #20
 8001528:	8979      	ldrh	r1, [r7, #10]
 800152a:	2309      	movs	r3, #9
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f91d 	bl	800176c <FRAM_Seq_Read>
	uint8_t result = hamming7264_decode(decode_data, data);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fe44 	bl	80011c6 <hamming7264_decode>
 800153e:	4603      	mov	r3, r0
 8001540:	77fb      	strb	r3, [r7, #31]
	if (result == 1){
 8001542:	7ffb      	ldrb	r3, [r7, #31]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <FRAM_Decode_Read+0x4c>
		FRAM_Encode_Write(dev, addr, data);
 8001548:	897b      	ldrh	r3, [r7, #10]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4619      	mov	r1, r3
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f7ff ffbb 	bl	80014ca <FRAM_Encode_Write>
	}
}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <FRAM_Encode_Write_Block>:

void FRAM_Encode_Write_Block(FRAM *dev, uint16_t block, uint32_t first_data[1], uint32_t second_data[1]){
 800155c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001560:	b088      	sub	sp, #32
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	817b      	strh	r3, [r7, #10]
	uint64_t combine_data = ((uint64_t) *first_data << 32) | *second_data;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	469a      	mov	sl, r3
 8001576:	4693      	mov	fp, r2
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	4653      	mov	r3, sl
 8001582:	2200      	movs	r2, #0
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	6809      	ldr	r1, [r1, #0]
 8001588:	2000      	movs	r0, #0
 800158a:	460c      	mov	r4, r1
 800158c:	4605      	mov	r5, r0
 800158e:	ea42 0804 	orr.w	r8, r2, r4
 8001592:	ea43 0905 	orr.w	r9, r3, r5
 8001596:	e9c7 8906 	strd	r8, r9, [r7, #24]
	uint8_t arr_buf[8] = {0};
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
	memcpy(arr_buf, &combine_data, 8);
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	f107 0218 	add.w	r2, r7, #24
 80015aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ae:	e883 0003 	stmia.w	r3, {r0, r1}
	FRAM_Encode_Write(dev, (block * 9), arr_buf);
 80015b2:	897b      	ldrh	r3, [r7, #10]
 80015b4:	461a      	mov	r2, r3
 80015b6:	00d2      	lsls	r2, r2, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	4619      	mov	r1, r3
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7ff ff81 	bl	80014ca <FRAM_Encode_Write>
}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080015d2 <FRAM_Encode_Read_Block>:

void FRAM_Encode_Read_Block(FRAM *dev, uint16_t block, uint8_t select_half, uint32_t *data){
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	817b      	strh	r3, [r7, #10]
 80015e0:	4613      	mov	r3, r2
 80015e2:	727b      	strb	r3, [r7, #9]
	uint8_t read_buf[8] = {0};
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
	FRAM_Decode_Read(dev, (block*9), read_buf);
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	461a      	mov	r2, r3
 80015f0:	00d2      	lsls	r2, r2, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	f107 0210 	add.w	r2, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff ff83 	bl	8001508 <FRAM_Decode_Read>
	if(select_half == 0){
 8001602:	7a7b      	ldrb	r3, [r7, #9]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d107      	bne.n	8001618 <FRAM_Encode_Read_Block+0x46>
		memcpy(data, (read_buf+4), 4);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	3304      	adds	r3, #4
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
	}
	else {
		memcpy(data, read_buf, 4);
	}
}
 8001616:	e002      	b.n	800161e <FRAM_Encode_Read_Block+0x4c>
 8001618:	693a      	ldr	r2, [r7, #16]
		memcpy(data, read_buf, 4);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]
}
 800161e:	bf00      	nop
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <FRAM_Initialise>:
 *  Created on: Nov 20, 2021
 *      Author: fames
 */
#include <Library/FRAM.h>

uint8_t FRAM_Initialise(FRAM *dev, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *cs_port, uint16_t cs_pin){
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	807b      	strh	r3, [r7, #2]
	dev->spiHandle = spiHandle;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	601a      	str	r2, [r3, #0]
	dev->cs_port = cs_port;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	605a      	str	r2, [r3, #4]
	dev->cs_pin = cs_pin;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	811a      	strh	r2, [r3, #8]
	dev->device_id = 0x00000000;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
	dev->is_connect = 2;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2202      	movs	r2, #2
 8001652:	741a      	strb	r2, [r3, #16]

	uint8_t sent_data[1] = {FRAM_RDID};
 8001654:	239f      	movs	r3, #159	; 0x9f
 8001656:	753b      	strb	r3, [r7, #20]
	uint8_t recieve_data[4] = {0};
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
	HAL_SPI_Transmit(dev->spiHandle, sent_data, 1, 100);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f107 0114 	add.w	r1, r7, #20
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	2201      	movs	r2, #1
 8001668:	f00d fd0c 	bl	800f084 <HAL_SPI_Transmit>
	HAL_StatusTypeDef rep = HAL_SPI_Receive(dev->spiHandle, recieve_data, 4, 100);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	f107 0110 	add.w	r1, r7, #16
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	2204      	movs	r2, #4
 8001678:	f00d fef6 	bl	800f468 <HAL_SPI_Receive>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
	memcpy(&(dev->device_id), recieve_data ,sizeof(dev->device_id));
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	330c      	adds	r3, #12
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	601a      	str	r2, [r3, #0]
	FRAM_Write_Status(dev, 1, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2101      	movs	r1, #1
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 f89c 	bl	80017ca <FRAM_Write_Status>
	FRAM_Error_Handle(dev, rep);
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f000 f8d2 	bl	8001840 <FRAM_Error_Handle>
	if (((dev->device_id) & 0xFFFF0000) == 0x047F0000){
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <FRAM_Initialise+0x90>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	4a05      	ldr	r2, [pc, #20]	; (80016bc <FRAM_Initialise+0x94>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <FRAM_Initialise+0x86>
		return 1; //Fujitsu manufacturer and right continuation code
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <FRAM_Initialise+0x88>
	}
	return 0;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	ffff0000 	.word	0xffff0000
 80016bc:	047f0000 	.word	0x047f0000

080016c0 <FRAM_Unlock>:
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	FRAM_Error_Handle(dev, state);
	return state;
}

HAL_StatusTypeDef FRAM_Unlock(FRAM *dev){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint8_t buf[1] = {FRAM_WREN};
 80016c8:	2306      	movs	r3, #6
 80016ca:	733b      	strb	r3, [r7, #12]
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 0);
	HAL_StatusTypeDef state = HAL_SPI_Transmit(dev->spiHandle, buf, 1, 100);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6818      	ldr	r0, [r3, #0]
 80016d0:	f107 010c 	add.w	r1, r7, #12
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	2201      	movs	r2, #1
 80016d8:	f00d fcd4 	bl	800f084 <HAL_SPI_Transmit>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
	FRAM_Error_Handle(dev, state);
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8ab 	bl	8001840 <FRAM_Error_Handle>
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	return state;
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <FRAM_Seq_Write>:
	FRAM_Error_Handle(dev, state);
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	return state;
}

HAL_StatusTypeDef FRAM_Seq_Write(FRAM *dev, uint16_t addr, uint8_t *data, uint16_t data_size){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	461a      	mov	r2, r3
 8001700:	460b      	mov	r3, r1
 8001702:	817b      	strh	r3, [r7, #10]
 8001704:	4613      	mov	r3, r2
 8001706:	813b      	strh	r3, [r7, #8]
	uint8_t buf[3] = {0};
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <FRAM_Seq_Write+0x74>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	82bb      	strh	r3, [r7, #20]
 800170e:	2300      	movs	r3, #0
 8001710:	75bb      	strb	r3, [r7, #22]
	buf[0] = FRAM_WRITE;
 8001712:	2302      	movs	r3, #2
 8001714:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)(addr >> 8);
 8001716:	897b      	ldrh	r3, [r7, #10]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	b29b      	uxth	r3, r3
 800171c:	b2db      	uxtb	r3, r3
 800171e:	757b      	strb	r3, [r7, #21]
	buf[2] = (uint8_t)(addr);
 8001720:	897b      	ldrh	r3, [r7, #10]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	75bb      	strb	r3, [r7, #22]
	FRAM_Unlock(dev);
 8001726:	68f8      	ldr	r0, [r7, #12]
 8001728:	f7ff ffca 	bl	80016c0 <FRAM_Unlock>
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 0);
	HAL_StatusTypeDef state = HAL_SPI_Transmit(dev->spiHandle, buf, 3, 100);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	f107 0114 	add.w	r1, r7, #20
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	2203      	movs	r2, #3
 8001738:	f00d fca4 	bl	800f084 <HAL_SPI_Transmit>
 800173c:	4603      	mov	r3, r0
 800173e:	75fb      	strb	r3, [r7, #23]
	state = HAL_SPI_Transmit(dev->spiHandle, data, data_size, 100);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	893a      	ldrh	r2, [r7, #8]
 8001746:	2364      	movs	r3, #100	; 0x64
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	f00d fc9b 	bl	800f084 <HAL_SPI_Transmit>
 800174e:	4603      	mov	r3, r0
 8001750:	75fb      	strb	r3, [r7, #23]
	FRAM_Error_Handle(dev, state);
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	4619      	mov	r1, r3
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f872 	bl	8001840 <FRAM_Error_Handle>
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	return state;
 800175c:	7dfb      	ldrb	r3, [r7, #23]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	0801d0dc 	.word	0x0801d0dc

0800176c <FRAM_Seq_Read>:

HAL_StatusTypeDef FRAM_Seq_Read(FRAM *dev, uint16_t addr,uint8_t *data, uint16_t data_size){
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	461a      	mov	r2, r3
 8001778:	460b      	mov	r3, r1
 800177a:	817b      	strh	r3, [r7, #10]
 800177c:	4613      	mov	r3, r2
 800177e:	813b      	strh	r3, [r7, #8]
	uint8_t buf[3] = {FRAM_READ, (uint8_t)(addr >> 8), (uint8_t)(addr)};
 8001780:	2303      	movs	r3, #3
 8001782:	753b      	strb	r3, [r7, #20]
 8001784:	897b      	ldrh	r3, [r7, #10]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	757b      	strb	r3, [r7, #21]
 800178e:	897b      	ldrh	r3, [r7, #10]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	75bb      	strb	r3, [r7, #22]
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 0);
	HAL_SPI_Transmit(dev->spiHandle, buf, 3, 100);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	f107 0114 	add.w	r1, r7, #20
 800179c:	2364      	movs	r3, #100	; 0x64
 800179e:	2203      	movs	r2, #3
 80017a0:	f00d fc70 	bl	800f084 <HAL_SPI_Transmit>
	HAL_StatusTypeDef state = HAL_SPI_Receive(dev->spiHandle, (uint8_t *) data, data_size, 100);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	893a      	ldrh	r2, [r7, #8]
 80017aa:	2364      	movs	r3, #100	; 0x64
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	f00d fe5b 	bl	800f468 <HAL_SPI_Receive>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
	FRAM_Error_Handle(dev, state);
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	4619      	mov	r1, r3
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f840 	bl	8001840 <FRAM_Error_Handle>
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	return state;
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <FRAM_Write_Status>:

HAL_StatusTypeDef FRAM_Write_Status(FRAM *dev, uint8_t wpen,uint8_t bp){
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b084      	sub	sp, #16
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	70fb      	strb	r3, [r7, #3]
 80017d6:	4613      	mov	r3, r2
 80017d8:	70bb      	strb	r3, [r7, #2]
	uint8_t status = 0x00;
 80017da:	2300      	movs	r3, #0
 80017dc:	73fb      	strb	r3, [r7, #15]
	if (wpen > 1){wpen = 1;}
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d901      	bls.n	80017e8 <FRAM_Write_Status+0x1e>
 80017e4:	2301      	movs	r3, #1
 80017e6:	70fb      	strb	r3, [r7, #3]
	if (bp > 3){bp = 3;}
 80017e8:	78bb      	ldrb	r3, [r7, #2]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d901      	bls.n	80017f2 <FRAM_Write_Status+0x28>
 80017ee:	2303      	movs	r3, #3
 80017f0:	70bb      	strb	r3, [r7, #2]
	status = status + (bp << 2);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4413      	add	r3, r2
 80017fc:	73fb      	strb	r3, [r7, #15]
	status = status + (wpen << 7);
 80017fe:	78fb      	ldrb	r3, [r7, #3]
 8001800:	01db      	lsls	r3, r3, #7
 8001802:	b2da      	uxtb	r2, r3
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	4413      	add	r3, r2
 8001808:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2] = {FRAM_WRSR, status};
 800180a:	2301      	movs	r3, #1
 800180c:	733b      	strb	r3, [r7, #12]
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	737b      	strb	r3, [r7, #13]
	FRAM_Unlock(dev);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ff54 	bl	80016c0 <FRAM_Unlock>
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 0);
	HAL_StatusTypeDef state = HAL_SPI_Transmit(dev->spiHandle, buf, 2, 100);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6818      	ldr	r0, [r3, #0]
 800181c:	f107 010c 	add.w	r1, r7, #12
 8001820:	2364      	movs	r3, #100	; 0x64
 8001822:	2202      	movs	r2, #2
 8001824:	f00d fc2e 	bl	800f084 <HAL_SPI_Transmit>
 8001828:	4603      	mov	r3, r0
 800182a:	73bb      	strb	r3, [r7, #14]
	FRAM_Error_Handle(dev, state);
 800182c:	7bbb      	ldrb	r3, [r7, #14]
 800182e:	4619      	mov	r1, r3
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f805 	bl	8001840 <FRAM_Error_Handle>
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	return state;
 8001836:	7bbb      	ldrb	r3, [r7, #14]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <FRAM_Error_Handle>:
	FRAM_Error_Handle(dev, state);
//	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, 1);
	return state;
}

void FRAM_Error_Handle(FRAM *dev,HAL_StatusTypeDef respond){
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b08c      	sub	sp, #48	; 0x30
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d127      	bne.n	80018a2 <FRAM_Error_Handle+0x62>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7c1b      	ldrb	r3, [r3, #16]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d123      	bne.n	80018a2 <FRAM_Error_Handle+0x62>
				uint8_t message[40] = "FRAM initializes successfully.";
 800185a:	4b52      	ldr	r3, [pc, #328]	; (80019a4 <FRAM_Error_Handle+0x164>)
 800185c:	f107 0408 	add.w	r4, r7, #8
 8001860:	461d      	mov	r5, r3
 8001862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001866:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800186a:	c407      	stmia	r4!, {r0, r1, r2}
 800186c:	8023      	strh	r3, [r4, #0]
 800186e:	3402      	adds	r4, #2
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	7023      	strb	r3, [r4, #0]
 8001874:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	721a      	strb	r2, [r3, #8]
				SD_Card_Write_Log(LOG_INFO, message, strlen((char *)message));
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fd2b 	bl	80002e0 <strlen>
 800188a:	4603      	mov	r3, r0
 800188c:	b29a      	uxth	r2, r3
 800188e:	f107 0308 	add.w	r3, r7, #8
 8001892:	4619      	mov	r1, r3
 8001894:	2000      	movs	r0, #0
 8001896:	f000 fb2b 	bl	8001ef0 <SD_Card_Write_Log>
				dev->is_connect = 1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	741a      	strb	r2, [r3, #16]
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 80018a0:	e07b      	b.n	800199a <FRAM_Error_Handle+0x15a>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d028      	beq.n	80018fa <FRAM_Error_Handle+0xba>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7c1b      	ldrb	r3, [r3, #16]
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d124      	bne.n	80018fa <FRAM_Error_Handle+0xba>
		uint8_t message[40] = "FRAM initialization fails.";
 80018b0:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <FRAM_Error_Handle+0x168>)
 80018b2:	f107 0408 	add.w	r4, r7, #8
 80018b6:	461d      	mov	r5, r3
 80018b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c0:	c403      	stmia	r4!, {r0, r1}
 80018c2:	8022      	strh	r2, [r4, #0]
 80018c4:	3402      	adds	r4, #2
 80018c6:	0c13      	lsrs	r3, r2, #16
 80018c8:	7023      	strb	r3, [r4, #0]
 80018ca:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	731a      	strb	r2, [r3, #12]
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 80018d8:	f107 0308 	add.w	r3, r7, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fcff 	bl	80002e0 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f107 0308 	add.w	r3, r7, #8
 80018ea:	4619      	mov	r1, r3
 80018ec:	2002      	movs	r0, #2
 80018ee:	f000 faff 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	741a      	strb	r2, [r3, #16]
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 80018f8:	e04f      	b.n	800199a <FRAM_Error_Handle+0x15a>
	}
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d123      	bne.n	8001948 <FRAM_Error_Handle+0x108>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7c1b      	ldrb	r3, [r3, #16]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d11f      	bne.n	8001948 <FRAM_Error_Handle+0x108>
		uint8_t message[40] = "connect with FRAM successfully.";
 8001908:	4b28      	ldr	r3, [pc, #160]	; (80019ac <FRAM_Error_Handle+0x16c>)
 800190a:	f107 0408 	add.w	r4, r7, #8
 800190e:	461d      	mov	r5, r3
 8001910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800191c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
		SD_Card_Write_Log(LOG_INFO, message, strlen((char *)message));
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fcd8 	bl	80002e0 <strlen>
 8001930:	4603      	mov	r3, r0
 8001932:	b29a      	uxth	r2, r3
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4619      	mov	r1, r3
 800193a:	2000      	movs	r0, #0
 800193c:	f000 fad8 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	741a      	strb	r2, [r3, #16]
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 8001946:	e028      	b.n	800199a <FRAM_Error_Handle+0x15a>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 1)){
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d025      	beq.n	800199a <FRAM_Error_Handle+0x15a>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7c1b      	ldrb	r3, [r3, #16]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d121      	bne.n	800199a <FRAM_Error_Handle+0x15a>
		uint8_t message[40] = "can't communicate with FRAM.";
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <FRAM_Error_Handle+0x170>)
 8001958:	f107 0408 	add.w	r4, r7, #8
 800195c:	461d      	mov	r5, r3
 800195e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001962:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001966:	c407      	stmia	r4!, {r0, r1, r2}
 8001968:	7023      	strb	r3, [r4, #0]
 800196a:	f107 0325 	add.w	r3, r7, #37	; 0x25
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	f8c3 2007 	str.w	r2, [r3, #7]
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8001978:	f107 0308 	add.w	r3, r7, #8
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fcaf 	bl	80002e0 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4619      	mov	r1, r3
 800198c:	2002      	movs	r0, #2
 800198e:	f000 faaf 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	741a      	strb	r2, [r3, #16]
	}
}
 8001998:	e7ff      	b.n	800199a <FRAM_Error_Handle+0x15a>
 800199a:	bf00      	nop
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bdb0      	pop	{r4, r5, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	0801d0e0 	.word	0x0801d0e0
 80019a8:	0801d108 	.word	0x0801d108
 80019ac:	0801d130 	.word	0x0801d130
 80019b0:	0801d158 	.word	0x0801d158

080019b4 <i2c_mem_write>:
 *      Author: hue
 */

#include <Library/INA238.h>

HAL_StatusTypeDef i2c_mem_write(INA238 *dev, uint8_t mem_adress, uint16_t *data) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af04      	add	r7, sp, #16
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	460b      	mov	r3, r1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	72fb      	strb	r3, [r7, #11]
	/*
	 * only support 2 bytes memory size
	 */
	uint8_t Buffer[2] = {(uint8_t)(0x00FF & (*data>>8)),(uint8_t)(0x00FF & *data)};
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	753b      	strb	r3, [r7, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	757b      	strb	r3, [r7, #21]
	HAL_StatusTypeDef rep = HAL_I2C_Mem_Write(dev->i2cHandle, dev->address, mem_adress,
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	b299      	uxth	r1, r3
 80019e0:	7afb      	ldrb	r3, [r7, #11]
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	2364      	movs	r3, #100	; 0x64
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2302      	movs	r3, #2
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	f006 f8c2 	bl	8007b7c <HAL_I2C_Mem_Write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	75fb      	strb	r3, [r7, #23]
	I2C_MEMADD_SIZE_8BIT, Buffer, 2, 100);
	INA238_Error_Handle(dev, rep);
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	4619      	mov	r1, r3
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f985 	bl	8001d10 <INA238_Error_Handle>
	return rep;
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <i2c_mem_read>:

HAL_StatusTypeDef i2c_mem_read(INA238 *dev, uint8_t mem_adress, uint16_t *data) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	72fb      	strb	r3, [r7, #11]
	/*
	 * only support 2 bytes memory size
	 */
	uint8_t Buffer[2];
	HAL_StatusTypeDef rep = HAL_I2C_Mem_Read(dev->i2cHandle, dev->address, mem_adress,
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6818      	ldr	r0, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	791b      	ldrb	r3, [r3, #4]
 8001a26:	b299      	uxth	r1, r3
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2302      	movs	r3, #2
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	f006 f9b2 	bl	8007da4 <HAL_I2C_Mem_Read>
 8001a40:	4603      	mov	r3, r0
 8001a42:	75fb      	strb	r3, [r7, #23]
	I2C_MEMADD_SIZE_8BIT, Buffer, 2, 100);
	*data = (uint16_t)Buffer[1] | (uint16_t)Buffer[0] << 8;
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	7d3b      	ldrb	r3, [r7, #20]
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	801a      	strh	r2, [r3, #0]
	INA238_Error_Handle(dev, rep);
 8001a58:	7dfb      	ldrb	r3, [r7, #23]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f957 	bl	8001d10 <INA238_Error_Handle>
	return rep;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <INA238_init>:

/*
 * Very Useful Function!!
 */

void INA238_init(INA238 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t address) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	71fb      	strb	r3, [r7, #7]
	dev->i2cHandle = i2cHandle;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	601a      	str	r2, [r3, #0]
	dev->address = address;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	711a      	strb	r2, [r3, #4]

	dev->shunt_voltage = 0;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
	dev->bus_voltage = 0;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
	dev->current = 0;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
	dev->power = 0;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]

	dev->is_connect = 2;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

	dev->Current_LSB = 0;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
	dev->SHUNT_CAL = 0;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	845a      	strh	r2, [r3, #34]	; 0x22

	dev->ADCRANGE = 0;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	INA238_reset(dev);
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f893 	bl	8001bf0 <INA238_reset>
	INA238_read_manufacturer_id(dev);
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 f8ee 	bl	8001cac <INA238_read_manufacturer_id>
	INA238_read_device_id(dev);
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f8ff 	bl	8001cd4 <INA238_read_device_id>
	dev->error.MATHOF = 0;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	dev->error.TMPOL = 0;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	dev->error.SHNTOL = 0;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	dev->error.SHNTUL = 0;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	dev->error.BUSOL = 0;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	dev->error.BUSUL = 0;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	dev->error.POL = 0;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	dev->error.MEMSTAT = 0;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <INA238_calibrate>:

void INA238_calibrate(INA238 *dev, uint8_t ADCRANGE,
		float r_shunt) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2e:	72fb      	strb	r3, [r7, #11]
	//	calculate best ADCRANGE
	/*
	 * ±163.84 mV (ADCRANGE = 0)
	 * ±40.96 mV (ADCRANGE = 1
	 */
	float expected_maximum_current = 0.0;
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
	if (ADCRANGE > 1){ADCRANGE = 1;}
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d901      	bls.n	8001b40 <INA238_calibrate+0x20>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	72fb      	strb	r3, [r7, #11]
	if (ADCRANGE == 0){
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <INA238_calibrate+0x36>
		expected_maximum_current  = 0.16384f/r_shunt;
 8001b46:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001be0 <INA238_calibrate+0xc0>
 8001b4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	if (ADCRANGE == 1){
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <INA238_calibrate+0x4c>
		expected_maximum_current  = 0.04096f/r_shunt;
 8001b5c:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001be4 <INA238_calibrate+0xc4>
 8001b60:	ed97 7a01 	vldr	s14, [r7, #4]
 8001b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b68:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	INA238_set_ADCRANGE(dev, ADCRANGE);
 8001b6c:	7afb      	ldrb	r3, [r7, #11]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f84e 	bl	8001c14 <INA238_set_ADCRANGE>
	dev->ADCRANGE = ADCRANGE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	7afa      	ldrb	r2, [r7, #11]
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	dev->Current_LSB = expected_maximum_current / 32768.0f;
 8001b80:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b84:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001be8 <INA238_calibrate+0xc8>
 8001b88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edc3 7a07 	vstr	s15, [r3, #28]
	/*
	 * SHUNT_CAL MUST NOT EXCEED 32768
	 */
	dev->SHUNT_CAL = 819200000 * r_shunt * dev->Current_LSB;
 8001b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b96:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001bec <INA238_calibrate+0xcc>
 8001b9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bac:	ee17 3a90 	vmov	r3, s15
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	845a      	strh	r2, [r3, #34]	; 0x22
	if (ADCRANGE == 1){
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <INA238_calibrate+0xa8>
		dev->SHUNT_CAL = dev->SHUNT_CAL * 4;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	i2c_mem_write(dev, INA238_SHUNT_CAL, &(dev->SHUNT_CAL));
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	3322      	adds	r3, #34	; 0x22
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2102      	movs	r1, #2
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff feef 	bl	80019b4 <i2c_mem_write>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	3e27c5ac 	.word	0x3e27c5ac
 8001be4:	3d27c5ac 	.word	0x3d27c5ac
 8001be8:	47000000 	.word	0x47000000
 8001bec:	4e435000 	.word	0x4e435000

08001bf0 <INA238_reset>:

void INA238_reset(INA238 *dev) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	/*
	 * Reset All register to default
	 */
	uint16_t data = 0x8000;
 8001bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfc:	81fb      	strh	r3, [r7, #14]
	i2c_mem_write(dev, INA238_CONFIG, &data);
 8001bfe:	f107 030e 	add.w	r3, r7, #14
 8001c02:	461a      	mov	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fed4 	bl	80019b4 <i2c_mem_write>
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <INA238_set_ADCRANGE>:
	i2c_mem_read(dev, INA238_CONFIG, &data);
	data = (data & 0xC03F) | (step << 6);
	i2c_mem_write(dev, INA238_CONFIG, &data);
}

void INA238_set_ADCRANGE(INA238 *dev, uint16_t range) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
	/*	Shunt full scale range selection across IN+ and IN–.
	 0h = ±163.84 mV
	 1h = ± 40.96 mV*/
	uint16_t data = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	81fb      	strh	r3, [r7, #14]
	i2c_mem_read(dev, INA238_CONFIG, &data);
 8001c24:	f107 030e 	add.w	r3, r7, #14
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff feef 	bl	8001a10 <i2c_mem_read>
	data = (data & 0xFFEF) | (range << 4);
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	f023 0310 	bic.w	r3, r3, #16
 8001c3a:	b21a      	sxth	r2, r3
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	81fb      	strh	r3, [r7, #14]
	i2c_mem_write(dev, INA238_CONFIG, &data);
 8001c4a:	f107 030e 	add.w	r3, r7, #14
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2100      	movs	r1, #0
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff feae 	bl	80019b4 <i2c_mem_write>
}
 8001c58:	bf00      	nop
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <INA238_set_mode>:

void INA238_set_mode(INA238 *dev, uint16_t mode) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
	 Bh = Continuous shunt and bus voltage
	 Ch = Continuous temperature only
	 Dh = Continuous bus voltage and temperature
	 Eh = Continuous temperature and shunt voltage
	 Fh = Continuous bus, shunt voltage and temperature*/
	uint16_t data = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	81fb      	strh	r3, [r7, #14]
	i2c_mem_read(dev, INA238_ADC_CONFIG, &data);
 8001c70:	f107 030e 	add.w	r3, r7, #14
 8001c74:	461a      	mov	r2, r3
 8001c76:	2101      	movs	r1, #1
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff fec9 	bl	8001a10 <i2c_mem_read>
	data = (data & 0x0FFF) | (mode << 12);
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	031b      	lsls	r3, r3, #12
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	81fb      	strh	r3, [r7, #14]
	i2c_mem_write(dev, INA238_ADC_CONFIG, &data);
 8001c96:	f107 030e 	add.w	r3, r7, #14
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fe88 	bl	80019b4 <i2c_mem_write>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <INA238_read_manufacturer_id>:
	 * overlimit default value is 0x7FF0
	 */
	i2c_mem_write(dev, INA238_PWR_LIMIT, &power_lsb);
}

void INA238_read_manufacturer_id(INA238 *dev) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	uint16_t data = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	81fb      	strh	r3, [r7, #14]
	i2c_mem_read(dev, INA238_MANUFACTURER_ID, &data);
 8001cb8:	f107 030e 	add.w	r3, r7, #14
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	213e      	movs	r1, #62	; 0x3e
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fea5 	bl	8001a10 <i2c_mem_read>
	dev->manufacturer_id = data;
 8001cc6:	89fa      	ldrh	r2, [r7, #14]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8001ccc:	bf00      	nop
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <INA238_read_device_id>:

// dev id reg 17

void INA238_read_device_id(INA238 *dev) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint16_t data = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	81fb      	strh	r3, [r7, #14]
	i2c_mem_read(dev, INA238_DEVICE_ID, &data);
 8001ce0:	f107 030e 	add.w	r3, r7, #14
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	213f      	movs	r1, #63	; 0x3f
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fe91 	bl	8001a10 <i2c_mem_read>
	dev->device_rev = data & 0x0003;
 8001cee:	89fb      	ldrh	r3, [r7, #14]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	dev->device_id = (data >> 3);
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <INA238_Error_Handle>:
	INA238_read_temp(dev);
	INA238_read_current(dev);
	INA238_read_power(dev);
}

void INA238_Error_Handle(INA238 *dev,HAL_StatusTypeDef respond){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	70fb      	strb	r3, [r7, #3]
	uint8_t message[40] = {0};
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	2224      	movs	r2, #36	; 0x24
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f017 ff73 	bl	8019c14 <memset>
	if ((respond == HAL_OK) && (dev->is_connect == 2)){
 8001d2e:	78fb      	ldrb	r3, [r7, #3]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d11f      	bne.n	8001d74 <INA238_Error_Handle+0x64>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d11a      	bne.n	8001d74 <INA238_Error_Handle+0x64>
		sprintf((char *)message,"INA238(%x) initializes successfully." ,dev->address);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4941      	ldr	r1, [pc, #260]	; (8001e50 <INA238_Error_Handle+0x140>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f018 fbdc 	bl	801a508 <siprintf>
		SD_Card_Write_Log(LOG_INFO, message, strlen((char *)message));
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fac3 	bl	80002e0 <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4619      	mov	r1, r3
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f8c3 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 1;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]
 8001d72:	e068      	b.n	8001e46 <INA238_Error_Handle+0x136>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 2)){
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d01f      	beq.n	8001dba <INA238_Error_Handle+0xaa>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d11a      	bne.n	8001dba <INA238_Error_Handle+0xaa>
		sprintf((char *)message,"INA238(%x) initializes fails." ,dev->address);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	791b      	ldrb	r3, [r3, #4]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4931      	ldr	r1, [pc, #196]	; (8001e54 <INA238_Error_Handle+0x144>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f018 fbb9 	bl	801a508 <siprintf>
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe faa0 	bl	80002e0 <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4619      	mov	r1, r3
 8001daa:	2002      	movs	r0, #2
 8001dac:	f000 f8a0 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]
 8001db8:	e045      	b.n	8001e46 <INA238_Error_Handle+0x136>
	}
	else if ((respond == HAL_OK) && (dev->is_connect == 0)){
 8001dba:	78fb      	ldrb	r3, [r7, #3]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11f      	bne.n	8001e00 <INA238_Error_Handle+0xf0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d11a      	bne.n	8001e00 <INA238_Error_Handle+0xf0>
		sprintf((char *)message,"connect with INA238(%x) successfully." ,dev->address);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	4920      	ldr	r1, [pc, #128]	; (8001e58 <INA238_Error_Handle+0x148>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f018 fb96 	bl	801a508 <siprintf>
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fa7d 	bl	80002e0 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4619      	mov	r1, r3
 8001df0:	2002      	movs	r0, #2
 8001df2:	f000 f87d 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 1;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2020 	strb.w	r2, [r3, #32]
 8001dfe:	e022      	b.n	8001e46 <INA238_Error_Handle+0x136>
	}
	else if ((respond != HAL_OK) && (dev->is_connect == 1)){
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01f      	beq.n	8001e46 <INA238_Error_Handle+0x136>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d11a      	bne.n	8001e46 <INA238_Error_Handle+0x136>
		sprintf((char *)message,"can't communicate with INA238(%x)." ,dev->address);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	791b      	ldrb	r3, [r3, #4]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	4910      	ldr	r1, [pc, #64]	; (8001e5c <INA238_Error_Handle+0x14c>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f018 fb73 	bl	801a508 <siprintf>
		SD_Card_Write_Log(LOG_ERROR, message, strlen((char *)message));
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fa5a 	bl	80002e0 <strlen>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4619      	mov	r1, r3
 8001e36:	2002      	movs	r0, #2
 8001e38:	f000 f85a 	bl	8001ef0 <SD_Card_Write_Log>
		dev->is_connect = 0;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]
	}
}
 8001e44:	e7ff      	b.n	8001e46 <INA238_Error_Handle+0x136>
 8001e46:	bf00      	nop
 8001e48:	3730      	adds	r7, #48	; 0x30
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	0801d180 	.word	0x0801d180
 8001e54:	0801d1a8 	.word	0x0801d1a8
 8001e58:	0801d1c8 	.word	0x0801d1c8
 8001e5c:	0801d1f0 	.word	0x0801d1f0

08001e60 <KalmanFilter_Init>:
 *      Author: fame
 */
#include "Library/KalmanFilter.h"

void KalmanFilter_Init(KalmanFilter *dev, double x1, double x2, double p11,
		double p12, double p21, double p22, double R, double Q, double dt) {
 8001e60:	b480      	push	{r7}
 8001e62:	b093      	sub	sp, #76	; 0x4c
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6478      	str	r0, [r7, #68]	; 0x44
 8001e68:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001e6c:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001e70:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 8001e74:	ed87 3b08 	vstr	d3, [r7, #32]
 8001e78:	ed87 4b06 	vstr	d4, [r7, #24]
 8001e7c:	ed87 5b04 	vstr	d5, [r7, #16]
 8001e80:	ed87 6b02 	vstr	d6, [r7, #8]
 8001e84:	ed87 7b00 	vstr	d7, [r7]
	/* Parameter */
	dev->R = R;
 8001e88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e8e:	e9c1 2300 	strd	r2, r3, [r1]
	dev->Q = Q;
 8001e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e98:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* KF "memory" */
	dev->x1 = x1;
 8001e9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e9e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ea2:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->x2 = x2;
 8001ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ea8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001eac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->p11 = p11;
 8001eb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001eb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->p12 = p12;
 8001eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ebc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001ec0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	dev->p21 = p21;
 8001ec4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eca:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dev->p22 = p22;
 8001ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ed4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	dev->dt = dt;
 8001ed8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001eda:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ede:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001ee2:	bf00      	nop
 8001ee4:	374c      	adds	r7, #76	; 0x4c
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
	...

08001ef0 <SD_Card_Write_Log>:

#include "Library/Logging.h"

void SD_Card_Write_Log(uint8_t log_type, uint8_t *message, uint16_t message_length) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0a2      	sub	sp, #136	; 0x88
 8001ef4:	af02      	add	r7, sp, #8
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	4613      	mov	r3, r2
 8001efe:	80bb      	strh	r3, [r7, #4]
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	uint8_t date[25] = {0};
 8001f00:	2300      	movs	r3, #0
 8001f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
 8001f14:	751a      	strb	r2, [r3, #20]
	uint8_t time[25] = {0};
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]
 8001f2a:	751a      	strb	r2, [r3, #20]
	uint8_t log_type_message[25] = {0};
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	751a      	strb	r2, [r3, #20]
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001f42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f46:	2200      	movs	r2, #0
 8001f48:	4619      	mov	r1, r3
 8001f4a:	484e      	ldr	r0, [pc, #312]	; (8002084 <SD_Card_Write_Log+0x194>)
 8001f4c:	f00b f932 	bl	800d1b4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001f50:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f54:	2200      	movs	r2, #0
 8001f56:	4619      	mov	r1, r3
 8001f58:	484a      	ldr	r0, [pc, #296]	; (8002084 <SD_Card_Write_Log+0x194>)
 8001f5a:	f00b fa0f 	bl	800d37c <HAL_RTC_GetDate>
	sprintf((char*) time, "%02d:%02d:%02d,\t", gTime.Hours, gTime.Minutes,
 8001f5e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001f62:	461a      	mov	r2, r3
 8001f64:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001f68:	4619      	mov	r1, r3
			gTime.Seconds);
 8001f6a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
	sprintf((char*) time, "%02d:%02d:%02d,\t", gTime.Hours, gTime.Minutes,
 8001f6e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	460b      	mov	r3, r1
 8001f76:	4944      	ldr	r1, [pc, #272]	; (8002088 <SD_Card_Write_Log+0x198>)
 8001f78:	f018 fac6 	bl	801a508 <siprintf>
	sprintf((char*) date, "%02d-%02d-%2d,\t", gDate.Date, gDate.Month,
 8001f7c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001f80:	461a      	mov	r2, r3
 8001f82:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8001f86:	4619      	mov	r1, r3
			2000 + gDate.Year);
 8001f88:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
	sprintf((char*) date, "%02d-%02d-%2d,\t", gDate.Date, gDate.Month,
 8001f8c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001f90:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	460b      	mov	r3, r1
 8001f98:	493c      	ldr	r1, [pc, #240]	; (800208c <SD_Card_Write_Log+0x19c>)
 8001f9a:	f018 fab5 	bl	801a508 <siprintf>
	if (log_type == LOG_INFO){
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d106      	bne.n	8001fb2 <SD_Card_Write_Log+0xc2>
		sprintf((char*) log_type_message, "info,\t\t");
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	4939      	ldr	r1, [pc, #228]	; (8002090 <SD_Card_Write_Log+0x1a0>)
 8001faa:	4618      	mov	r0, r3
 8001fac:	f018 faac 	bl	801a508 <siprintf>
 8001fb0:	e012      	b.n	8001fd8 <SD_Card_Write_Log+0xe8>
	}
	else if (log_type == LOG_ERROR){
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d106      	bne.n	8001fc6 <SD_Card_Write_Log+0xd6>
		sprintf((char*) log_type_message, "error,\t");
 8001fb8:	f107 0310 	add.w	r3, r7, #16
 8001fbc:	4935      	ldr	r1, [pc, #212]	; (8002094 <SD_Card_Write_Log+0x1a4>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f018 faa2 	bl	801a508 <siprintf>
 8001fc4:	e008      	b.n	8001fd8 <SD_Card_Write_Log+0xe8>
	}
	else if (log_type == LOG_DEBUG){
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <SD_Card_Write_Log+0xe8>
		sprintf((char*) log_type_message, "debug,\t");
 8001fcc:	f107 0310 	add.w	r3, r7, #16
 8001fd0:	4931      	ldr	r1, [pc, #196]	; (8002098 <SD_Card_Write_Log+0x1a8>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f018 fa98 	bl	801a508 <siprintf>
	}
	uint8_t enter_msg[5] = "\n";
 8001fd8:	230a      	movs	r3, #10
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	733b      	strb	r3, [r7, #12]
	static uint32_t byteswritten;
	f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	492e      	ldr	r1, [pc, #184]	; (800209c <SD_Card_Write_Log+0x1ac>)
 8001fe4:	482e      	ldr	r0, [pc, #184]	; (80020a0 <SD_Card_Write_Log+0x1b0>)
 8001fe6:	f016 fc47 	bl	8018878 <f_mount>
	FRESULT sd_result = f_open(&SDFile, "log.txt", FA_OPEN_APPEND | FA_WRITE);
 8001fea:	2232      	movs	r2, #50	; 0x32
 8001fec:	492d      	ldr	r1, [pc, #180]	; (80020a4 <SD_Card_Write_Log+0x1b4>)
 8001fee:	482e      	ldr	r0, [pc, #184]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 8001ff0:	f016 fc88 	bl	8018904 <f_open>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (sd_result == FR_OK) {
 8001ffa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d13b      	bne.n	800207a <SD_Card_Write_Log+0x18a>
		f_write(&SDFile, log_type_message, strlen((char*) log_type_message), (void*) &byteswritten);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe f96a 	bl	80002e0 <strlen>
 800200c:	4602      	mov	r2, r0
 800200e:	f107 0110 	add.w	r1, r7, #16
 8002012:	4b26      	ldr	r3, [pc, #152]	; (80020ac <SD_Card_Write_Log+0x1bc>)
 8002014:	4824      	ldr	r0, [pc, #144]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 8002016:	f016 fe33 	bl	8018c80 <f_write>
		f_write(&SDFile, date, strlen((char*) date), (void*) &byteswritten);
 800201a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe f95e 	bl	80002e0 <strlen>
 8002024:	4602      	mov	r2, r0
 8002026:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800202a:	4b20      	ldr	r3, [pc, #128]	; (80020ac <SD_Card_Write_Log+0x1bc>)
 800202c:	481e      	ldr	r0, [pc, #120]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 800202e:	f016 fe27 	bl	8018c80 <f_write>
		f_write(&SDFile, time, strlen((char*) time), (void*) &byteswritten);
 8002032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe f952 	bl	80002e0 <strlen>
 800203c:	4602      	mov	r2, r0
 800203e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <SD_Card_Write_Log+0x1bc>)
 8002044:	4818      	ldr	r0, [pc, #96]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 8002046:	f016 fe1b 	bl	8018c80 <f_write>
		f_write(&SDFile, message, strlen((char*) message), (void*) &byteswritten);
 800204a:	6838      	ldr	r0, [r7, #0]
 800204c:	f7fe f948 	bl	80002e0 <strlen>
 8002050:	4602      	mov	r2, r0
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <SD_Card_Write_Log+0x1bc>)
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 8002058:	f016 fe12 	bl	8018c80 <f_write>
		f_write(&SDFile, enter_msg, strlen((char*) enter_msg), (void*) &byteswritten);
 800205c:	f107 0308 	add.w	r3, r7, #8
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe f93d 	bl	80002e0 <strlen>
 8002066:	4602      	mov	r2, r0
 8002068:	f107 0108 	add.w	r1, r7, #8
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <SD_Card_Write_Log+0x1bc>)
 800206e:	480e      	ldr	r0, [pc, #56]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 8002070:	f016 fe06 	bl	8018c80 <f_write>
		f_close(&SDFile);
 8002074:	480c      	ldr	r0, [pc, #48]	; (80020a8 <SD_Card_Write_Log+0x1b8>)
 8002076:	f016 fff6 	bl	8019066 <f_close>
	}
}
 800207a:	bf00      	nop
 800207c:	3780      	adds	r7, #128	; 0x80
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	24000730 	.word	0x24000730
 8002088:	0801d214 	.word	0x0801d214
 800208c:	0801d228 	.word	0x0801d228
 8002090:	0801d238 	.word	0x0801d238
 8002094:	0801d240 	.word	0x0801d240
 8002098:	0801d248 	.word	0x0801d248
 800209c:	24000d6c 	.word	0x24000d6c
 80020a0:	24000d70 	.word	0x24000d70
 80020a4:	0801d250 	.word	0x0801d250
 80020a8:	24000fa0 	.word	0x24000fa0
 80020ac:	240002ec 	.word	0x240002ec

080020b0 <Neopixel_Init>:


/*
 * Define LED Number In Header File Before Initial this function
 */
void Neopixel_Init(NeopixelParameter *Neopixel_led ,TIM_HandleTypeDef *htim_in){
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
	Neopixel_led->htim = htim_in;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	Neopixel_led->Pulse_High = (uint16_t)(htim_in->Init.Period * 0.66f);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ce:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002118 <Neopixel_Init+0x68>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020da:	ee17 3a90 	vmov	r3, s15
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e
	Neopixel_led->Pulse_Low = (uint16_t)(htim_in->Init.Period * 0.33f);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800211c <Neopixel_Init+0x6c>
 80020f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fe:	ee17 3a90 	vmov	r3, s15
 8002102:	b29a      	uxth	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	3f28f5c3 	.word	0x3f28f5c3
 800211c:	3ea8f5c3 	.word	0x3ea8f5c3

08002120 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002126:	f107 031c 	add.w	r3, r7, #28
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002132:	463b      	mov	r3, r7
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
 8002140:	615a      	str	r2, [r3, #20]
 8002142:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002144:	4b35      	ldr	r3, [pc, #212]	; (800221c <MX_ADC1_Init+0xfc>)
 8002146:	4a36      	ldr	r2, [pc, #216]	; (8002220 <MX_ADC1_Init+0x100>)
 8002148:	601a      	str	r2, [r3, #0]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800214a:	4b34      	ldr	r3, [pc, #208]	; (800221c <MX_ADC1_Init+0xfc>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002150:	4b32      	ldr	r3, [pc, #200]	; (800221c <MX_ADC1_Init+0xfc>)
 8002152:	2201      	movs	r2, #1
 8002154:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002156:	4b31      	ldr	r3, [pc, #196]	; (800221c <MX_ADC1_Init+0xfc>)
 8002158:	2204      	movs	r2, #4
 800215a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800215c:	4b2f      	ldr	r3, [pc, #188]	; (800221c <MX_ADC1_Init+0xfc>)
 800215e:	2200      	movs	r2, #0
 8002160:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <MX_ADC1_Init+0xfc>)
 8002164:	2201      	movs	r2, #1
 8002166:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8002168:	4b2c      	ldr	r3, [pc, #176]	; (800221c <MX_ADC1_Init+0xfc>)
 800216a:	2202      	movs	r2, #2
 800216c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800216e:	4b2b      	ldr	r3, [pc, #172]	; (800221c <MX_ADC1_Init+0xfc>)
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <MX_ADC1_Init+0xfc>)
 8002176:	2200      	movs	r2, #0
 8002178:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800217a:	4b28      	ldr	r3, [pc, #160]	; (800221c <MX_ADC1_Init+0xfc>)
 800217c:	2200      	movs	r2, #0
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002180:	4b26      	ldr	r3, [pc, #152]	; (800221c <MX_ADC1_Init+0xfc>)
 8002182:	2203      	movs	r2, #3
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002186:	4b25      	ldr	r3, [pc, #148]	; (800221c <MX_ADC1_Init+0xfc>)
 8002188:	2200      	movs	r2, #0
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800218c:	4b23      	ldr	r3, [pc, #140]	; (800221c <MX_ADC1_Init+0xfc>)
 800218e:	2200      	movs	r2, #0
 8002190:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002192:	4b22      	ldr	r3, [pc, #136]	; (800221c <MX_ADC1_Init+0xfc>)
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800219a:	4820      	ldr	r0, [pc, #128]	; (800221c <MX_ADC1_Init+0xfc>)
 800219c:	f002 fb92 	bl	80048c4 <HAL_ADC_Init>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80021a6:	f000 feb5 	bl	8002f14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4819      	ldr	r0, [pc, #100]	; (800221c <MX_ADC1_Init+0xfc>)
 80021b6:	f003 f9a7 	bl	8005508 <HAL_ADCEx_MultiModeConfigChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_ADC1_Init+0xa4>
  {
    Error_Handler();
 80021c0:	f000 fea8 	bl	8002f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_ADC1_Init+0x104>)
 80021c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021c8:	2306      	movs	r3, #6
 80021ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80021cc:	2304      	movs	r3, #4
 80021ce:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021d0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80021d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021d6:	2304      	movs	r3, #4
 80021d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80021de:	2300      	movs	r3, #0
 80021e0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	4619      	mov	r1, r3
 80021e6:	480d      	ldr	r0, [pc, #52]	; (800221c <MX_ADC1_Init+0xfc>)
 80021e8:	f002 fd0e 	bl	8004c08 <HAL_ADC_ConfigChannel>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 80021f2:	f000 fe8f 	bl	8002f14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80021f6:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <MX_ADC1_Init+0x108>)
 80021f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021fa:	230c      	movs	r3, #12
 80021fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021fe:	463b      	mov	r3, r7
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <MX_ADC1_Init+0xfc>)
 8002204:	f002 fd00 	bl	8004c08 <HAL_ADC_ConfigChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 800220e:	f000 fe81 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	240002f0 	.word	0x240002f0
 8002220:	40022000 	.word	0x40022000
 8002224:	2a000400 	.word	0x2a000400
 8002228:	2e300800 	.word	0x2e300800

0800222c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08a      	sub	sp, #40	; 0x28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a30      	ldr	r2, [pc, #192]	; (800230c <HAL_ADC_MspInit+0xe0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d159      	bne.n	8002302 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_ADC_MspInit+0xe4>)
 8002250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_ADC_MspInit+0xe4>)
 8002256:	f043 0320 	orr.w	r3, r3, #32
 800225a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_ADC_MspInit+0xe4>)
 8002260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_ADC_MspInit+0xe4>)
 800226e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002272:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_ADC_MspInit+0xe4>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_ADC_MspInit+0xe4>)
 800227e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC1     ------> ADC1_INP11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800228a:	2303      	movs	r3, #3
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800228e:	2303      	movs	r3, #3
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	481d      	ldr	r0, [pc, #116]	; (8002314 <HAL_ADC_MspInit+0xe8>)
 800229e:	f005 f9e1 	bl	8007664 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022a4:	4a1d      	ldr	r2, [pc, #116]	; (800231c <HAL_ADC_MspInit+0xf0>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022aa:	2209      	movs	r2, #9
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022e6:	480c      	ldr	r0, [pc, #48]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022e8:	f003 fcfa 	bl	8005ce0 <HAL_DMA_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80022f2:	f000 fe0f 	bl	8002f14 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80022fc:	4a06      	ldr	r2, [pc, #24]	; (8002318 <HAL_ADC_MspInit+0xec>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	58024400 	.word	0x58024400
 8002314:	58020800 	.word	0x58020800
 8002318:	24000354 	.word	0x24000354
 800231c:	40020028 	.word	0x40020028

08002320 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <MX_CRC_Init+0x50>)
 8002326:	4a13      	ldr	r2, [pc, #76]	; (8002374 <MX_CRC_Init+0x54>)
 8002328:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800232a:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_CRC_Init+0x50>)
 800232c:	2201      	movs	r2, #1
 800232e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002330:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_CRC_Init+0x50>)
 8002332:	2201      	movs	r2, #1
 8002334:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_CRC_Init+0x50>)
 8002338:	221d      	movs	r2, #29
 800233a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_CRC_Init+0x50>)
 800233e:	2210      	movs	r2, #16
 8002340:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_CRC_Init+0x50>)
 8002344:	22c4      	movs	r2, #196	; 0xc4
 8002346:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_CRC_Init+0x50>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_CRC_Init+0x50>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_CRC_Init+0x50>)
 8002356:	2201      	movs	r2, #1
 8002358:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_CRC_Init+0x50>)
 800235c:	f003 fac2 	bl	80058e4 <HAL_CRC_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8002366:	f000 fdd5 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	240003cc 	.word	0x240003cc
 8002374:	58024c00 	.word	0x58024c00

08002378 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <HAL_CRC_MspInit+0x3c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10e      	bne.n	80023a8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_CRC_MspInit+0x40>)
 800238c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002390:	4a09      	ldr	r2, [pc, #36]	; (80023b8 <HAL_CRC_MspInit+0x40>)
 8002392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_CRC_MspInit+0x40>)
 800239c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	58024c00 	.word	0x58024c00
 80023b8:	58024400 	.word	0x58024400

080023bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023c2:	4b11      	ldr	r3, [pc, #68]	; (8002408 <MX_DMA_Init+0x4c>)
 80023c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023c8:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <MX_DMA_Init+0x4c>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <MX_DMA_Init+0x4c>)
 80023d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	200b      	movs	r0, #11
 80023e6:	f003 fa48 	bl	800587a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023ea:	200b      	movs	r0, #11
 80023ec:	f003 fa5f 	bl	80058ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	200c      	movs	r0, #12
 80023f6:	f003 fa40 	bl	800587a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023fa:	200c      	movs	r0, #12
 80023fc:	f003 fa57 	bl	80058ae <HAL_NVIC_EnableIRQ>

}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	58024400 	.word	0x58024400

0800240c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	; 0x38
 8002410:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
 800241e:	60da      	str	r2, [r3, #12]
 8002420:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002422:	4b95      	ldr	r3, [pc, #596]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002428:	4a93      	ldr	r2, [pc, #588]	; (8002678 <MX_GPIO_Init+0x26c>)
 800242a:	f043 0310 	orr.w	r3, r3, #16
 800242e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002432:	4b91      	ldr	r3, [pc, #580]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	623b      	str	r3, [r7, #32]
 800243e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002440:	4b8d      	ldr	r3, [pc, #564]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002446:	4a8c      	ldr	r2, [pc, #560]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002448:	f043 0304 	orr.w	r3, r3, #4
 800244c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002450:	4b89      	ldr	r3, [pc, #548]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	61fb      	str	r3, [r7, #28]
 800245c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800245e:	4b86      	ldr	r3, [pc, #536]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002464:	4a84      	ldr	r2, [pc, #528]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002466:	f043 0320 	orr.w	r3, r3, #32
 800246a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800246e:	4b82      	ldr	r3, [pc, #520]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <MX_GPIO_Init+0x26c>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002482:	4a7d      	ldr	r2, [pc, #500]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800248c:	4b7a      	ldr	r3, [pc, #488]	; (8002678 <MX_GPIO_Init+0x26c>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800249a:	4b77      	ldr	r3, [pc, #476]	; (8002678 <MX_GPIO_Init+0x26c>)
 800249c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a0:	4a75      	ldr	r2, [pc, #468]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024aa:	4b73      	ldr	r3, [pc, #460]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80024b8:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024c8:	4b6b      	ldr	r3, [pc, #428]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b68      	ldr	r3, [pc, #416]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024dc:	4a66      	ldr	r2, [pc, #408]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e6:	4b64      	ldr	r3, [pc, #400]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f4:	4b60      	ldr	r3, [pc, #384]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fa:	4a5f      	ldr	r2, [pc, #380]	; (8002678 <MX_GPIO_Init+0x26c>)
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002504:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <MX_GPIO_Init+0x26c>)
 8002506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250a:	f003 0308 	and.w	r3, r3, #8
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, D1_DIR_Pin|WDI2_Pin|WDI1_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	2113      	movs	r1, #19
 8002516:	4859      	ldr	r0, [pc, #356]	; (800267c <MX_GPIO_Init+0x270>)
 8002518:	f005 fa6c 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D1_SPEED_GPIO_Port, D1_SPEED_Pin, GPIO_PIN_SET);
 800251c:	2201      	movs	r2, #1
 800251e:	2120      	movs	r1, #32
 8002520:	4856      	ldr	r0, [pc, #344]	; (800267c <MX_GPIO_Init+0x270>)
 8002522:	f005 fa67 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D2_SPEED_Pin|D2_DIR_Pin, GPIO_PIN_SET);
 8002526:	2201      	movs	r2, #1
 8002528:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800252c:	4854      	ldr	r0, [pc, #336]	; (8002680 <MX_GPIO_Init+0x274>)
 800252e:	f005 fa61 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002532:	2200      	movs	r2, #0
 8002534:	2110      	movs	r1, #16
 8002536:	4853      	ldr	r0, [pc, #332]	; (8002684 <MX_GPIO_Init+0x278>)
 8002538:	f005 fa5c 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED4_Pin|LED3_Pin, GPIO_PIN_RESET);
 800253c:	2200      	movs	r2, #0
 800253e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002542:	484f      	ldr	r0, [pc, #316]	; (8002680 <MX_GPIO_Init+0x274>)
 8002544:	f005 fa56 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8002548:	2200      	movs	r2, #0
 800254a:	2103      	movs	r1, #3
 800254c:	484e      	ldr	r0, [pc, #312]	; (8002688 <MX_GPIO_Init+0x27c>)
 800254e:	f005 fa51 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAM_CS_GPIO_Port, FRAM_CS_Pin, GPIO_PIN_RESET);
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002558:	484c      	ldr	r0, [pc, #304]	; (800268c <MX_GPIO_Init+0x280>)
 800255a:	f005 fa4b 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FRAM_HOLD_Pin|FRAM_WP_Pin, GPIO_PIN_RESET);
 800255e:	2200      	movs	r2, #0
 8002560:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002564:	484a      	ldr	r0, [pc, #296]	; (8002690 <MX_GPIO_Init+0x284>)
 8002566:	f005 fa45 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI6_CS_GPIO_Port, SPI6_CS_Pin, GPIO_PIN_SET);
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002570:	4845      	ldr	r0, [pc, #276]	; (8002688 <MX_GPIO_Init+0x27c>)
 8002572:	f005 fa3f 	bl	80079f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = D1_DIR_Pin|D1_SPEED_Pin|WDI2_Pin|WDI1_Pin;
 8002576:	2333      	movs	r3, #51	; 0x33
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002582:	2300      	movs	r3, #0
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800258a:	4619      	mov	r1, r3
 800258c:	483b      	ldr	r0, [pc, #236]	; (800267c <MX_GPIO_Init+0x270>)
 800258e:	f005 f869 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 8002592:	2304      	movs	r3, #4
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002596:	2300      	movs	r3, #0
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 800259e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a2:	4619      	mov	r1, r3
 80025a4:	4836      	ldr	r0, [pc, #216]	; (8002680 <MX_GPIO_Init+0x274>)
 80025a6:	f005 f85d 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D2_SPEED_Pin|D2_DIR_Pin|LED4_Pin|LED3_Pin;
 80025aa:	f24c 1380 	movw	r3, #49536	; 0xc180
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	4619      	mov	r1, r3
 80025c2:	482f      	ldr	r0, [pc, #188]	; (8002680 <MX_GPIO_Init+0x274>)
 80025c4:	f005 f84e 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ALERT_INA238_1_Pin|ALERT_INA238_2_Pin;
 80025c8:	230c      	movs	r3, #12
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	4619      	mov	r1, r3
 80025da:	482e      	ldr	r0, [pc, #184]	; (8002694 <MX_GPIO_Init+0x288>)
 80025dc:	f005 f842 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80025e0:	2310      	movs	r3, #16
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f4:	4619      	mov	r1, r3
 80025f6:	4823      	ldr	r0, [pc, #140]	; (8002684 <MX_GPIO_Init+0x278>)
 80025f8:	f005 f834 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|SPI6_CS_Pin;
 80025fc:	f640 0303 	movw	r3, #2051	; 0x803
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800260e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002612:	4619      	mov	r1, r3
 8002614:	481c      	ldr	r0, [pc, #112]	; (8002688 <MX_GPIO_Init+0x27c>)
 8002616:	f005 f825 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRAM_CS_Pin;
 800261a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002620:	2301      	movs	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAM_CS_GPIO_Port, &GPIO_InitStruct);
 800262c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002630:	4619      	mov	r1, r3
 8002632:	4816      	ldr	r0, [pc, #88]	; (800268c <MX_GPIO_Init+0x280>)
 8002634:	f005 f816 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = FRAM_HOLD_Pin|FRAM_WP_Pin;
 8002638:	f44f 7340 	mov.w	r3, #768	; 0x300
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	2301      	movs	r3, #1
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002642:	2300      	movs	r3, #0
 8002644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002646:	2300      	movs	r3, #0
 8002648:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	480f      	ldr	r0, [pc, #60]	; (8002690 <MX_GPIO_Init+0x284>)
 8002652:	f005 f807 	bl	8007664 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_DETECT_Pin;
 8002656:	2301      	movs	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800265e:	2302      	movs	r3, #2
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SDMMC_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002666:	4619      	mov	r1, r3
 8002668:	4809      	ldr	r0, [pc, #36]	; (8002690 <MX_GPIO_Init+0x284>)
 800266a:	f004 fffb 	bl	8007664 <HAL_GPIO_Init>

}
 800266e:	bf00      	nop
 8002670:	3738      	adds	r7, #56	; 0x38
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	58024400 	.word	0x58024400
 800267c:	58021000 	.word	0x58021000
 8002680:	58021400 	.word	0x58021400
 8002684:	58020000 	.word	0x58020000
 8002688:	58021800 	.word	0x58021800
 800268c:	58020400 	.word	0x58020400
 8002690:	58020c00 	.word	0x58020c00
 8002694:	58020800 	.word	0x58020800

08002698 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <MX_I2C1_Init+0x74>)
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <MX_I2C1_Init+0x78>)
 80026a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <MX_I2C1_Init+0x74>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026a8:	4b18      	ldr	r3, [pc, #96]	; (800270c <MX_I2C1_Init+0x74>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <MX_I2C1_Init+0x74>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026b4:	4b15      	ldr	r3, [pc, #84]	; (800270c <MX_I2C1_Init+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026ba:	4b14      	ldr	r3, [pc, #80]	; (800270c <MX_I2C1_Init+0x74>)
 80026bc:	2200      	movs	r2, #0
 80026be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <MX_I2C1_Init+0x74>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026c6:	4b11      	ldr	r3, [pc, #68]	; (800270c <MX_I2C1_Init+0x74>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	; (800270c <MX_I2C1_Init+0x74>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026d2:	480e      	ldr	r0, [pc, #56]	; (800270c <MX_I2C1_Init+0x74>)
 80026d4:	f005 f9c2 	bl	8007a5c <HAL_I2C_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80026de:	f000 fc19 	bl	8002f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026e2:	2100      	movs	r1, #0
 80026e4:	4809      	ldr	r0, [pc, #36]	; (800270c <MX_I2C1_Init+0x74>)
 80026e6:	f005 ff1d 	bl	8008524 <HAL_I2CEx_ConfigAnalogFilter>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026f0:	f000 fc10 	bl	8002f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	4805      	ldr	r0, [pc, #20]	; (800270c <MX_I2C1_Init+0x74>)
 80026f8:	f005 ff5f 	bl	80085ba <HAL_I2CEx_ConfigDigitalFilter>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002702:	f000 fc07 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	240003f0 	.word	0x240003f0
 8002710:	40005400 	.word	0x40005400

08002714 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002718:	4b1c      	ldr	r3, [pc, #112]	; (800278c <MX_I2C2_Init+0x78>)
 800271a:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <MX_I2C2_Init+0x7c>)
 800271c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0050174F;
 800271e:	4b1b      	ldr	r3, [pc, #108]	; (800278c <MX_I2C2_Init+0x78>)
 8002720:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <MX_I2C2_Init+0x80>)
 8002722:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <MX_I2C2_Init+0x78>)
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800272a:	4b18      	ldr	r3, [pc, #96]	; (800278c <MX_I2C2_Init+0x78>)
 800272c:	2201      	movs	r2, #1
 800272e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002730:	4b16      	ldr	r3, [pc, #88]	; (800278c <MX_I2C2_Init+0x78>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <MX_I2C2_Init+0x78>)
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <MX_I2C2_Init+0x78>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_I2C2_Init+0x78>)
 8002744:	2200      	movs	r2, #0
 8002746:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <MX_I2C2_Init+0x78>)
 800274a:	2200      	movs	r2, #0
 800274c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800274e:	480f      	ldr	r0, [pc, #60]	; (800278c <MX_I2C2_Init+0x78>)
 8002750:	f005 f984 	bl	8007a5c <HAL_I2C_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800275a:	f000 fbdb 	bl	8002f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800275e:	2100      	movs	r1, #0
 8002760:	480a      	ldr	r0, [pc, #40]	; (800278c <MX_I2C2_Init+0x78>)
 8002762:	f005 fedf 	bl	8008524 <HAL_I2CEx_ConfigAnalogFilter>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800276c:	f000 fbd2 	bl	8002f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002770:	2100      	movs	r1, #0
 8002772:	4806      	ldr	r0, [pc, #24]	; (800278c <MX_I2C2_Init+0x78>)
 8002774:	f005 ff21 	bl	80085ba <HAL_I2CEx_ConfigDigitalFilter>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800277e:	f000 fbc9 	bl	8002f14 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8002782:	2002      	movs	r0, #2
 8002784:	f005 ff66 	bl	8008654 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	2400043c 	.word	0x2400043c
 8002790:	40005800 	.word	0x40005800
 8002794:	0050174f 	.word	0x0050174f

08002798 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800279c:	4b1b      	ldr	r3, [pc, #108]	; (800280c <MX_I2C4_Init+0x74>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <MX_I2C4_Init+0x78>)
 80027a0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00B03FDB;
 80027a2:	4b1a      	ldr	r3, [pc, #104]	; (800280c <MX_I2C4_Init+0x74>)
 80027a4:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <MX_I2C4_Init+0x7c>)
 80027a6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <MX_I2C4_Init+0x74>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_I2C4_Init+0x74>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <MX_I2C4_Init+0x74>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_I2C4_Init+0x74>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <MX_I2C4_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_I2C4_Init+0x74>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_I2C4_Init+0x74>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80027d2:	480e      	ldr	r0, [pc, #56]	; (800280c <MX_I2C4_Init+0x74>)
 80027d4:	f005 f942 	bl	8007a5c <HAL_I2C_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80027de:	f000 fb99 	bl	8002f14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027e2:	2100      	movs	r1, #0
 80027e4:	4809      	ldr	r0, [pc, #36]	; (800280c <MX_I2C4_Init+0x74>)
 80027e6:	f005 fe9d 	bl	8008524 <HAL_I2CEx_ConfigAnalogFilter>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80027f0:	f000 fb90 	bl	8002f14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80027f4:	2100      	movs	r1, #0
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <MX_I2C4_Init+0x74>)
 80027f8:	f005 fedf 	bl	80085ba <HAL_I2CEx_ConfigDigitalFilter>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002802:	f000 fb87 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	24000488 	.word	0x24000488
 8002810:	58001c00 	.word	0x58001c00
 8002814:	00b03fdb 	.word	0x00b03fdb

08002818 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b0bc      	sub	sp, #240	; 0xf0
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002830:	f107 0320 	add.w	r3, r7, #32
 8002834:	22bc      	movs	r2, #188	; 0xbc
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f017 f9eb 	bl	8019c14 <memset>
  if(i2cHandle->Instance==I2C1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a6d      	ldr	r2, [pc, #436]	; (80029f8 <HAL_I2C_MspInit+0x1e0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d142      	bne.n	80028ce <HAL_I2C_MspInit+0xb6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002848:	2308      	movs	r3, #8
 800284a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002852:	f107 0320 	add.w	r3, r7, #32
 8002856:	4618      	mov	r0, r3
 8002858:	f008 fa0a 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002862:	f000 fb57 	bl	8002f14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286c:	4a63      	ldr	r2, [pc, #396]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 800286e:	f043 0302 	orr.w	r3, r3, #2
 8002872:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002876:	4b61      	ldr	r3, [pc, #388]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002884:	23c0      	movs	r3, #192	; 0xc0
 8002886:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288a:	2312      	movs	r3, #18
 800288c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800289c:	2304      	movs	r3, #4
 800289e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028a6:	4619      	mov	r1, r3
 80028a8:	4855      	ldr	r0, [pc, #340]	; (8002a00 <HAL_I2C_MspInit+0x1e8>)
 80028aa:	f004 fedb 	bl	8007664 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80028b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80028b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028be:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80028c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80028cc:	e08f      	b.n	80029ee <HAL_I2C_MspInit+0x1d6>
  else if(i2cHandle->Instance==I2C2)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a4c      	ldr	r2, [pc, #304]	; (8002a04 <HAL_I2C_MspInit+0x1ec>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d142      	bne.n	800295e <HAL_I2C_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028d8:	2308      	movs	r3, #8
 80028da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	4618      	mov	r0, r3
 80028e8:	f008 f9c2 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_I2C_MspInit+0xde>
      Error_Handler();
 80028f2:	f000 fb0f 	bl	8002f14 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028f6:	4b41      	ldr	r3, [pc, #260]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80028f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80028fe:	f043 0320 	orr.w	r3, r3, #32
 8002902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002914:	2303      	movs	r3, #3
 8002916:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291a:	2312      	movs	r3, #18
 800291c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800292c:	2304      	movs	r3, #4
 800292e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002932:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002936:	4619      	mov	r1, r3
 8002938:	4833      	ldr	r0, [pc, #204]	; (8002a08 <HAL_I2C_MspInit+0x1f0>)
 800293a:	f004 fe93 	bl	8007664 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800293e:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002944:	4a2d      	ldr	r2, [pc, #180]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002946:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800294a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002954:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	693b      	ldr	r3, [r7, #16]
}
 800295c:	e047      	b.n	80029ee <HAL_I2C_MspInit+0x1d6>
  else if(i2cHandle->Instance==I2C4)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a2a      	ldr	r2, [pc, #168]	; (8002a0c <HAL_I2C_MspInit+0x1f4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d142      	bne.n	80029ee <HAL_I2C_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002968:	2310      	movs	r3, #16
 800296a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002972:	f107 0320 	add.w	r3, r7, #32
 8002976:	4618      	mov	r0, r3
 8002978:	f008 f97a 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_I2C_MspInit+0x16e>
      Error_Handler();
 8002982:	f000 fac7 	bl	8002f14 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 8002998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ac:	2312      	movs	r3, #18
 80029ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80029be:	2306      	movs	r3, #6
 80029c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80029c8:	4619      	mov	r1, r3
 80029ca:	480d      	ldr	r0, [pc, #52]	; (8002a00 <HAL_I2C_MspInit+0x1e8>)
 80029cc:	f004 fe4a 	bl	8007664 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80029d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80029d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_I2C_MspInit+0x1e4>)
 80029e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
}
 80029ee:	bf00      	nop
 80029f0:	37f0      	adds	r7, #240	; 0xf0
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40005400 	.word	0x40005400
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58020400 	.word	0x58020400
 8002a04:	40005800 	.word	0x40005800
 8002a08:	58021400 	.word	0x58021400
 8002a0c:	58001c00 	.word	0x58001c00

08002a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b09a      	sub	sp, #104	; 0x68
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a16:	f001 fd07 	bl	8004428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a1a:	f000 f843 	bl	8002aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a1e:	f7ff fcf5 	bl	800240c <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8002a22:	f000 fb09 	bl	8003038 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002a26:	f012 f817 	bl	8014a58 <MX_FATFS_Init>
  MX_DMA_Init();
 8002a2a:	f7ff fcc7 	bl	80023bc <MX_DMA_Init>
  MX_TIM2_Init();
 8002a2e:	f000 ffd9 	bl	80039e4 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8002a32:	f001 fbd1 	bl	80041d8 <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8002a36:	f000 fc09 	bl	800324c <MX_SPI2_Init>
  MX_I2C1_Init();
 8002a3a:	f7ff fe2d 	bl	8002698 <MX_I2C1_Init>
  MX_I2C4_Init();
 8002a3e:	f7ff feab 	bl	8002798 <MX_I2C4_Init>
  MX_SPI1_Init();
 8002a42:	f000 fbab 	bl	800319c <MX_SPI1_Init>
  MX_SPI6_Init();
 8002a46:	f000 fc57 	bl	80032f8 <MX_SPI6_Init>
  MX_TIM1_Init();
 8002a4a:	f000 ff71 	bl	8003930 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002a4e:	f001 f83f 	bl	8003ad0 <MX_TIM3_Init>
  MX_TIM15_Init();
 8002a52:	f001 f975 	bl	8003d40 <MX_TIM15_Init>
  MX_TIM17_Init();
 8002a56:	f001 f9c5 	bl	8003de4 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8002a5a:	f001 fb71 	bl	8004140 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8002a5e:	f7ff fc5f 	bl	8002320 <MX_CRC_Init>
  MX_TIM6_Init();
 8002a62:	f001 f901 	bl	8003c68 <MX_TIM6_Init>
  MX_RTC_Init();
 8002a66:	f000 fa5b 	bl	8002f20 <MX_RTC_Init>
  MX_I2C2_Init();
 8002a6a:	f7ff fe53 	bl	8002714 <MX_I2C2_Init>
  MX_TIM4_Init();
 8002a6e:	f001 f885 	bl	8003b7c <MX_TIM4_Init>
  MX_ADC1_Init();
 8002a72:	f7ff fb55 	bl	8002120 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8002a76:	f016 fb7d 	bl	8019174 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8002a7a:	f001 f92b 	bl	8003cd4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8002a7e:	4807      	ldr	r0, [pc, #28]	; (8002a9c <main+0x8c>)
 8002a80:	f00d f9f6 	bl	800fe70 <HAL_TIM_Base_Start_IT>
	Watchog_Timer_Trigger();
 8002a84:	f000 f972 	bl	8002d6c <Watchog_Timer_Trigger>
	Device_Init();
 8002a88:	f000 f89e 	bl	8002bc8 <Device_Init>
	DRV10975_I2C_Set_Speed(&Sin_Driver, 0, 1);
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <main+0x90>)
 8002a92:	f7fe f98f 	bl	8000db4 <DRV10975_I2C_Set_Speed>
	Test_Fram();
 8002a96:	f000 f977 	bl	8002d88 <Test_Fram>
	while(1);
 8002a9a:	e7fe      	b.n	8002a9a <main+0x8a>
 8002a9c:	24000ae8 	.word	0x24000ae8
 8002aa0:	24000688 	.word	0x24000688

08002aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b09c      	sub	sp, #112	; 0x70
 8002aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aae:	224c      	movs	r2, #76	; 0x4c
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f017 f8ae 	bl	8019c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2220      	movs	r2, #32
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f017 f8a8 	bl	8019c14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002ac4:	2002      	movs	r0, #2
 8002ac6:	f007 f8cf 	bl	8009c68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <SystemClock_Config+0x114>)
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	4a39      	ldr	r2, [pc, #228]	; (8002bb8 <SystemClock_Config+0x114>)
 8002ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ad8:	6193      	str	r3, [r2, #24]
 8002ada:	4b37      	ldr	r3, [pc, #220]	; (8002bb8 <SystemClock_Config+0x114>)
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4b35      	ldr	r3, [pc, #212]	; (8002bbc <SystemClock_Config+0x118>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4a34      	ldr	r2, [pc, #208]	; (8002bbc <SystemClock_Config+0x118>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <SystemClock_Config+0x118>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002afc:	bf00      	nop
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <SystemClock_Config+0x114>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0a:	d1f8      	bne.n	8002afe <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b0c:	f007 f89c 	bl	8009c48 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b10:	f001 fd40 	bl	8004594 <HAL_GetREVID>
 8002b14:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <SystemClock_Config+0x11c>)
 8002b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b18:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <SystemClock_Config+0x11c>)
 8002b1a:	f023 0318 	bic.w	r3, r3, #24
 8002b1e:	6713      	str	r3, [r2, #112]	; 0x70

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002b20:	4b27      	ldr	r3, [pc, #156]	; (8002bc0 <SystemClock_Config+0x11c>)
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f023 0303 	bic.w	r3, r3, #3
 8002b28:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <SystemClock_Config+0x11c>)
 8002b2a:	f043 0302 	orr.w	r3, r3, #2
 8002b2e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002b30:	2305      	movs	r3, #5
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b42:	2302      	movs	r3, #2
 8002b44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002b4a:	233c      	movs	r3, #60	; 0x3c
 8002b4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002b52:	2308      	movs	r3, #8
 8002b54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 24;
 8002b56:	2318      	movs	r3, #24
 8002b58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f007 f8c6 	bl	8009cfc <HAL_RCC_OscConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002b76:	f000 f9cd 	bl	8002f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b7a:	233f      	movs	r3, #63	; 0x3f
 8002b7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002b86:	2308      	movs	r3, #8
 8002b88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002b8a:	2340      	movs	r3, #64	; 0x40
 8002b8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002b8e:	2340      	movs	r3, #64	; 0x40
 8002b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002b98:	2340      	movs	r3, #64	; 0x40
 8002b9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2104      	movs	r1, #4
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f007 fcd9 	bl	800a558 <HAL_RCC_ClockConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002bac:	f000 f9b2 	bl	8002f14 <Error_Handler>
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3770      	adds	r7, #112	; 0x70
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	58024800 	.word	0x58024800
 8002bbc:	58000400 	.word	0x58000400
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <Device_Init>:
	KalmanFilter_Update(&KF_Motor, motor_pos);
	filtered_motor_pos = KF_Motor.x1;
	filtered_motor_speed = KF_Motor.x2;
}

void Device_Init() {
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b08a      	sub	sp, #40	; 0x28
 8002bcc:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1); // indicate that mcu still alive :>
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	484f      	ldr	r0, [pc, #316]	; (8002d10 <Device_Init+0x148>)
 8002bd4:	f004 ff0e 	bl	80079f4 <HAL_GPIO_WritePin>

	uint8_t initialize_msg[25] = "MCU still alive :>";
 8002bd8:	4b4e      	ldr	r3, [pc, #312]	; (8002d14 <Device_Init+0x14c>)
 8002bda:	1d3c      	adds	r4, r7, #4
 8002bdc:	461d      	mov	r5, r3
 8002bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002be2:	682b      	ldr	r3, [r5, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	8022      	strh	r2, [r4, #0]
 8002be8:	3402      	adds	r4, #2
 8002bea:	0c1b      	lsrs	r3, r3, #16
 8002bec:	7023      	strb	r3, [r4, #0]
 8002bee:	f107 0317 	add.w	r3, r7, #23
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	809a      	strh	r2, [r3, #4]
	SD_Card_Write_Log(LOG_INFO, initialize_msg, strlen((char *) initialize_msg));
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fb70 	bl	80002e0 <strlen>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff f971 	bl	8001ef0 <SD_Card_Write_Log>

	KalmanFilter_Init(&KF_Motor, 0, 0, 1, 0, 0, 1, KALMAN_R, KALMAN_Q, 0.001);
 8002c0e:	a338      	add	r3, pc, #224	; (adr r3, 8002cf0 <Device_Init+0x128>)
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	e9cd 2300 	strd	r2, r3, [sp]
 8002c18:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8002cf8 <Device_Init+0x130>
 8002c1c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8002d00 <Device_Init+0x138>
 8002c20:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8002c24:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8002d08 <Device_Init+0x140>
 8002c28:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8002d08 <Device_Init+0x140>
 8002c2c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8002c30:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8002d08 <Device_Init+0x140>
 8002c34:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8002d08 <Device_Init+0x140>
 8002c38:	4837      	ldr	r0, [pc, #220]	; (8002d18 <Device_Init+0x150>)
 8002c3a:	f7ff f911 	bl	8001e60 <KalmanFilter_Init>

	HAL_GPIO_WritePin(FRAM_WP_GPIO_Port, FRAM_WP_Pin, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c44:	4835      	ldr	r0, [pc, #212]	; (8002d1c <Device_Init+0x154>)
 8002c46:	f004 fed5 	bl	80079f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FRAM_HOLD_GPIO_Port, FRAM_HOLD_Pin, GPIO_PIN_SET);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c50:	4832      	ldr	r0, [pc, #200]	; (8002d1c <Device_Init+0x154>)
 8002c52:	f004 fecf 	bl	80079f4 <HAL_GPIO_WritePin>
	FRAM_Initialise(&Fram, &hspi2, FRAM_CS_GPIO_Port, FRAM_CS_Pin);
 8002c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5a:	4a31      	ldr	r2, [pc, #196]	; (8002d20 <Device_Init+0x158>)
 8002c5c:	4931      	ldr	r1, [pc, #196]	; (8002d24 <Device_Init+0x15c>)
 8002c5e:	4832      	ldr	r0, [pc, #200]	; (8002d28 <Device_Init+0x160>)
 8002c60:	f7fe fce2 	bl	8001628 <FRAM_Initialise>
	AS5047U_init(&Encoder, &hspi1, SPI1_CS_GPIO_Port, &hcrc, SPI1_CS_Pin, 0);
 8002c64:	2310      	movs	r3, #16
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002d2c <Device_Init+0x164>
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <Device_Init+0x168>)
 8002c6e:	4a31      	ldr	r2, [pc, #196]	; (8002d34 <Device_Init+0x16c>)
 8002c70:	4931      	ldr	r1, [pc, #196]	; (8002d38 <Device_Init+0x170>)
 8002c72:	4832      	ldr	r0, [pc, #200]	; (8002d3c <Device_Init+0x174>)
 8002c74:	f7fd fd0e 	bl	8000694 <AS5047U_init>

	DRV10975_Init(&Sin_Driver, &hi2c2, &htim17, TIM_CHANNEL_1, D1_DIR_GPIO_Port,
 8002c78:	2310      	movs	r3, #16
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <Device_Init+0x178>)
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <Device_Init+0x17c>)
 8002c84:	4930      	ldr	r1, [pc, #192]	; (8002d48 <Device_Init+0x180>)
 8002c86:	4831      	ldr	r0, [pc, #196]	; (8002d4c <Device_Init+0x184>)
 8002c88:	f7fd ff46 	bl	8000b18 <DRV10975_Init>
	D1_DIR_Pin);
	DRV10975_Config(&Sin_Driver);
 8002c8c:	482f      	ldr	r0, [pc, #188]	; (8002d4c <Device_Init+0x184>)
 8002c8e:	f7fd ff85 	bl	8000b9c <DRV10975_Config>
	//Motor Driver Current Sensor
	INA238_init(&Current_Sensor_Motor, &hi2c4, 0x80);
 8002c92:	2280      	movs	r2, #128	; 0x80
 8002c94:	492e      	ldr	r1, [pc, #184]	; (8002d50 <Device_Init+0x188>)
 8002c96:	482f      	ldr	r0, [pc, #188]	; (8002d54 <Device_Init+0x18c>)
 8002c98:	f7fe fee8 	bl	8001a6c <INA238_init>
	INA238_reset(&Current_Sensor_Motor);
 8002c9c:	482d      	ldr	r0, [pc, #180]	; (8002d54 <Device_Init+0x18c>)
 8002c9e:	f7fe ffa7 	bl	8001bf0 <INA238_reset>
	INA238_set_mode(&Current_Sensor_Motor, 0x0F);
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	482b      	ldr	r0, [pc, #172]	; (8002d54 <Device_Init+0x18c>)
 8002ca6:	f7fe ffdb 	bl	8001c60 <INA238_set_mode>
	INA238_calibrate(&Current_Sensor_Motor, 0, 0.05);
 8002caa:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8002d58 <Device_Init+0x190>
 8002cae:	2100      	movs	r1, #0
 8002cb0:	4828      	ldr	r0, [pc, #160]	; (8002d54 <Device_Init+0x18c>)
 8002cb2:	f7fe ff35 	bl	8001b20 <INA238_calibrate>

	//System Current Sensor
	INA238_init(&Current_Sensor_System, &hi2c4, 0x88);
 8002cb6:	2288      	movs	r2, #136	; 0x88
 8002cb8:	4925      	ldr	r1, [pc, #148]	; (8002d50 <Device_Init+0x188>)
 8002cba:	4828      	ldr	r0, [pc, #160]	; (8002d5c <Device_Init+0x194>)
 8002cbc:	f7fe fed6 	bl	8001a6c <INA238_init>
	INA238_reset(&Current_Sensor_System);
 8002cc0:	4826      	ldr	r0, [pc, #152]	; (8002d5c <Device_Init+0x194>)
 8002cc2:	f7fe ff95 	bl	8001bf0 <INA238_reset>
	INA238_set_mode(&Current_Sensor_System, 0x0F);
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	4824      	ldr	r0, [pc, #144]	; (8002d5c <Device_Init+0x194>)
 8002cca:	f7fe ffc9 	bl	8001c60 <INA238_set_mode>
	INA238_calibrate(&Current_Sensor_System, 1, 0.1);
 8002cce:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8002d60 <Device_Init+0x198>
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4821      	ldr	r0, [pc, #132]	; (8002d5c <Device_Init+0x194>)
 8002cd6:	f7fe ff23 	bl	8001b20 <INA238_calibrate>

	Neopixel_Init(&Neopixel, &htim2);
 8002cda:	4922      	ldr	r1, [pc, #136]	; (8002d64 <Device_Init+0x19c>)
 8002cdc:	4822      	ldr	r0, [pc, #136]	; (8002d68 <Device_Init+0x1a0>)
 8002cde:	f7ff f9e7 	bl	80020b0 <Neopixel_Init>
}
 8002ce2:	bf00      	nop
 8002ce4:	3720      	adds	r7, #32
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	f3af 8000 	nop.w
 8002cf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cf4:	3f50624d 	.word	0x3f50624d
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40b38800 	.word	0x40b38800
 8002d00:	9999999a 	.word	0x9999999a
 8002d04:	3fb99999 	.word	0x3fb99999
	...
 8002d10:	58021800 	.word	0x58021800
 8002d14:	0801d258 	.word	0x0801d258
 8002d18:	240006e0 	.word	0x240006e0
 8002d1c:	58020c00 	.word	0x58020c00
 8002d20:	58020400 	.word	0x58020400
 8002d24:	24000858 	.word	0x24000858
 8002d28:	24000670 	.word	0x24000670
 8002d2c:	00000000 	.word	0x00000000
 8002d30:	240003cc 	.word	0x240003cc
 8002d34:	58020000 	.word	0x58020000
 8002d38:	240007d0 	.word	0x240007d0
 8002d3c:	240005e8 	.word	0x240005e8
 8002d40:	58021000 	.word	0x58021000
 8002d44:	24000b80 	.word	0x24000b80
 8002d48:	2400043c 	.word	0x2400043c
 8002d4c:	24000688 	.word	0x24000688
 8002d50:	24000488 	.word	0x24000488
 8002d54:	2400063c 	.word	0x2400063c
 8002d58:	3d4ccccd 	.word	0x3d4ccccd
 8002d5c:	24000608 	.word	0x24000608
 8002d60:	3dcccccd 	.word	0x3dcccccd
 8002d64:	240009b8 	.word	0x240009b8
 8002d68:	240004d4 	.word	0x240004d4

08002d6c <Watchog_Timer_Trigger>:

void Watchog_Timer_Trigger() {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	// External WD Trigger
	HAL_GPIO_TogglePin(WDI1_GPIO_Port, WDI1_Pin);
 8002d70:	2102      	movs	r1, #2
 8002d72:	4804      	ldr	r0, [pc, #16]	; (8002d84 <Watchog_Timer_Trigger+0x18>)
 8002d74:	f004 fe57 	bl	8007a26 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(WDI2_GPIO_Port, WDI2_Pin);
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4802      	ldr	r0, [pc, #8]	; (8002d84 <Watchog_Timer_Trigger+0x18>)
 8002d7c:	f004 fe53 	bl	8007a26 <HAL_GPIO_TogglePin>
	// Internal WD
//	HAL_IWDG_Refresh(&hiwdg1);
}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	58021000 	.word	0x58021000

08002d88 <Test_Fram>:

void Test_Fram() {
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08e      	sub	sp, #56	; 0x38
 8002d8c:	af02      	add	r7, sp, #8
	float read_first_data = 0;
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t read_second_data = 0;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
	uint8_t test[8] = {0x42,0xf6,0xe6,0x66,0x00,0x00,0x1a,0x85};
 8002d98:	4a3f      	ldr	r2, [pc, #252]	; (8002e98 <Test_Fram+0x110>)
 8002d9a:	f107 0318 	add.w	r3, r7, #24
 8002d9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002da2:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t before_flip[9] = {0};
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	711a      	strb	r2, [r3, #4]
//	uint8_t after_flip[9] = { 0 };
	hamming7264_encode(test, before_flip);
 8002db4:	f107 020c 	add.w	r2, r7, #12
 8002db8:	f107 0318 	add.w	r3, r7, #24
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fe f8fe 	bl	8000fc0 <hamming7264_encode>

//	// declare data
	float write_first_data = 123.45;
 8002dc4:	4b35      	ldr	r3, [pc, #212]	; (8002e9c <Test_Fram+0x114>)
 8002dc6:	60bb      	str	r3, [r7, #8]
	uint32_t write_second_data = 6789;
 8002dc8:	f641 2385 	movw	r3, #6789	; 0x1a85
 8002dcc:	607b      	str	r3, [r7, #4]

	printf("This is the data that we want to store. %f, %u\n", write_first_data,
 8002dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	ec53 2b17 	vmov	r2, r3, d7
 8002dde:	4830      	ldr	r0, [pc, #192]	; (8002ea0 <Test_Fram+0x118>)
 8002de0:	f017 fb64 	bl	801a4ac <iprintf>
			(unsigned int) write_second_data);

	//encode data and write to fram
	FRAM_Encode_Write_Block(&Fram, 0, (uint32_t*) &write_first_data,
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	f107 0208 	add.w	r2, r7, #8
 8002dea:	2100      	movs	r1, #0
 8002dec:	482d      	ldr	r0, [pc, #180]	; (8002ea4 <Test_Fram+0x11c>)
 8002dee:	f7fe fbb5 	bl	800155c <FRAM_Encode_Write_Block>
			&write_second_data);

//	uint8_t read_data = 0;
//	FRAM_Seq_Read(&Fram, 0, before_flip, 9);

	printf("This is the data after we encode.            0x");
 8002df2:	482d      	ldr	r0, [pc, #180]	; (8002ea8 <Test_Fram+0x120>)
 8002df4:	f017 fb5a 	bl	801a4ac <iprintf>
	for (int i = 0; i < 9; i++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dfc:	e00b      	b.n	8002e16 <Test_Fram+0x8e>
		printf("%x", before_flip[i]);
 8002dfe:	f107 020c 	add.w	r2, r7, #12
 8002e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4828      	ldr	r0, [pc, #160]	; (8002eac <Test_Fram+0x124>)
 8002e0c:	f017 fb4e 	bl	801a4ac <iprintf>
	for (int i = 0; i < 9; i++) {
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	3301      	adds	r3, #1
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	ddf0      	ble.n	8002dfe <Test_Fram+0x76>
	}
	printf("\n");
 8002e1c:	200a      	movs	r0, #10
 8002e1e:	f017 fb5d 	bl	801a4dc <putchar>
	// read -> flip 1 bit of data -> write
//	FRAM_Read(&Fram, 2, &read_data);
//	read_data ^= 0x08;
//	FRAM_Write(&Fram, 2, &read_data);
//	FRAM_Seq_Read(&Fram, 0, after_flip, 9);
	before_flip[2] ^= 0x08;
 8002e22:	7bbb      	ldrb	r3, [r7, #14]
 8002e24:	f083 0308 	eor.w	r3, r3, #8
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	73bb      	strb	r3, [r7, #14]
	printf("This is the encode data after we flip 1 bit. 0x");
 8002e2c:	4820      	ldr	r0, [pc, #128]	; (8002eb0 <Test_Fram+0x128>)
 8002e2e:	f017 fb3d 	bl	801a4ac <iprintf>
	for (int i = 0; i < 9; i++) {
 8002e32:	2300      	movs	r3, #0
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e36:	e00b      	b.n	8002e50 <Test_Fram+0xc8>
		printf("%x", before_flip[i]);
 8002e38:	f107 020c 	add.w	r2, r7, #12
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	4413      	add	r3, r2
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	4619      	mov	r1, r3
 8002e44:	4819      	ldr	r0, [pc, #100]	; (8002eac <Test_Fram+0x124>)
 8002e46:	f017 fb31 	bl	801a4ac <iprintf>
	for (int i = 0; i < 9; i++) {
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	ddf0      	ble.n	8002e38 <Test_Fram+0xb0>
	}
	printf("\n");
 8002e56:	200a      	movs	r0, #10
 8002e58:	f017 fb40 	bl	801a4dc <putchar>
	//read -> decode
	FRAM_Encode_Read_Block(&Fram, 0, 0, (uint32_t*) &read_first_data);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	480f      	ldr	r0, [pc, #60]	; (8002ea4 <Test_Fram+0x11c>)
 8002e66:	f7fe fbb4 	bl	80015d2 <FRAM_Encode_Read_Block>
	FRAM_Encode_Read_Block(&Fram, 0, 1, &read_second_data);
 8002e6a:	f107 0320 	add.w	r3, r7, #32
 8002e6e:	2201      	movs	r2, #1
 8002e70:	2100      	movs	r1, #0
 8002e72:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <Test_Fram+0x11c>)
 8002e74:	f7fe fbad 	bl	80015d2 <FRAM_Encode_Read_Block>
	printf("This is the data after we decode. %f, %u\n", write_first_data,
 8002e78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	ec53 2b17 	vmov	r2, r3, d7
 8002e88:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <Test_Fram+0x12c>)
 8002e8a:	f017 fb0f 	bl	801a4ac <iprintf>
//		}
//		if (i % 9 == 8) {
//			printf("%d ----------------------------------\n", i);
//		}
//	}
}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	0801d334 	.word	0x0801d334
 8002e9c:	42f6e666 	.word	0x42f6e666
 8002ea0:	0801d274 	.word	0x0801d274
 8002ea4:	24000670 	.word	0x24000670
 8002ea8:	0801d2a4 	.word	0x0801d2a4
 8002eac:	0801d2d4 	.word	0x0801d2d4
 8002eb0:	0801d2d8 	.word	0x0801d2d8
 8002eb4:	0801d308 	.word	0x0801d308

08002eb8 <__io_putchar>:

PUTCHAR_PROTOTYPE {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 1);
 8002ec0:	1d39      	adds	r1, r7, #4
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <__io_putchar+0x20>)
 8002ec8:	f00e fae4 	bl	8011494 <HAL_UART_Transmit>

	return ch;
 8002ecc:	687b      	ldr	r3, [r7, #4]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	24000cd4 	.word	0x24000cd4

08002edc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002edc:	b4b0      	push	{r4, r5, r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	if (htim == &htim7) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a09      	ldr	r2, [pc, #36]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d10a      	bne.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8002eec:	4b08      	ldr	r3, [pc, #32]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ef6:	1854      	adds	r4, r2, r1
 8002ef8:	f143 0500 	adc.w	r5, r3, #0
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002efe:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bcb0      	pop	{r4, r5, r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	24000ae8 	.word	0x24000ae8
 8002f10:	24000728 	.word	0x24000728

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f18:	b672      	cpsid	i
}
 8002f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f1c:	e7fe      	b.n	8002f1c <Error_Handler+0x8>
	...

08002f20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f26:	1d3b      	adds	r3, r7, #4
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	605a      	str	r2, [r3, #4]
 8002f2e:	609a      	str	r2, [r3, #8]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002f34:	2300      	movs	r3, #0
 8002f36:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f38:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f3a:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <MX_RTC_Init+0xb4>)
 8002f3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f46:	227f      	movs	r2, #127	; 0x7f
 8002f48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f4c:	22ff      	movs	r2, #255	; 0xff
 8002f4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f62:	4b1b      	ldr	r3, [pc, #108]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f68:	4819      	ldr	r0, [pc, #100]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f6a:	f00a f80d 	bl	800cf88 <HAL_RTC_Init>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002f74:	f7ff ffce 	bl	8002f14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8002f78:	2310      	movs	r3, #16
 8002f7a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8002f80:	2330      	movs	r3, #48	; 0x30
 8002f82:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002f8c:	1d3b      	adds	r3, r7, #4
 8002f8e:	2201      	movs	r2, #1
 8002f90:	4619      	mov	r1, r3
 8002f92:	480f      	ldr	r0, [pc, #60]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002f94:	f00a f870 	bl	800d078 <HAL_RTC_SetTime>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002f9e:	f7ff ffb9 	bl	8002f14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8002fa6:	2305      	movs	r3, #5
 8002fa8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8002faa:	2312      	movs	r3, #18
 8002fac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8002fae:	2322      	movs	r3, #34	; 0x22
 8002fb0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <MX_RTC_Init+0xb0>)
 8002fba:	f00a f957 	bl	800d26c <HAL_RTC_SetDate>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002fc4:	f7ff ffa6 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	24000730 	.word	0x24000730
 8002fd4:	58004000 	.word	0x58004000

08002fd8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b0b2      	sub	sp, #200	; 0xc8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fe0:	f107 030c 	add.w	r3, r7, #12
 8002fe4:	22bc      	movs	r2, #188	; 0xbc
 8002fe6:	2100      	movs	r1, #0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f016 fe13 	bl	8019c14 <memset>
  if(rtcHandle->Instance==RTC)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_RTC_MspInit+0x58>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d116      	bne.n	8003026 <HAL_RTC_MspInit+0x4e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ffc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003006:	f107 030c 	add.w	r3, r7, #12
 800300a:	4618      	mov	r0, r3
 800300c:	f007 fe30 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003016:	f7ff ff7d 	bl	8002f14 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_RTC_MspInit+0x5c>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	4a05      	ldr	r2, [pc, #20]	; (8003034 <HAL_RTC_MspInit+0x5c>)
 8003020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003024:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003026:	bf00      	nop
 8003028:	37c8      	adds	r7, #200	; 0xc8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	58004000 	.word	0x58004000
 8003034:	58024400 	.word	0x58024400

08003038 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <MX_SDMMC1_SD_Init+0x34>)
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <MX_SDMMC1_SD_Init+0x38>)
 8003040:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <MX_SDMMC1_SD_Init+0x34>)
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <MX_SDMMC1_SD_Init+0x34>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <MX_SDMMC1_SD_Init+0x34>)
 8003050:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003054:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <MX_SDMMC1_SD_Init+0x34>)
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <MX_SDMMC1_SD_Init+0x34>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	24000754 	.word	0x24000754
 8003070:	52007000 	.word	0x52007000

08003074 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b0ba      	sub	sp, #232	; 0xe8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800308c:	f107 0318 	add.w	r3, r7, #24
 8003090:	22bc      	movs	r2, #188	; 0xbc
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f016 fdbd 	bl	8019c14 <memset>
  if(sdHandle->Instance==SDMMC1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a3b      	ldr	r2, [pc, #236]	; (800318c <HAL_SD_MspInit+0x118>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d16e      	bne.n	8003182 <HAL_SD_MspInit+0x10e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80030a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80030aa:	2300      	movs	r3, #0
 80030ac:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ae:	f107 0318 	add.w	r3, r7, #24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f007 fddc 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 80030be:	f7ff ff29 	bl	8002f14 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80030c2:	4b33      	ldr	r3, [pc, #204]	; (8003190 <HAL_SD_MspInit+0x11c>)
 80030c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030c8:	4a31      	ldr	r2, [pc, #196]	; (8003190 <HAL_SD_MspInit+0x11c>)
 80030ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ce:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <HAL_SD_MspInit+0x11c>)
 80030d4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80030d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_SD_MspInit+0x11c>)
 80030e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e6:	4a2a      	ldr	r2, [pc, #168]	; (8003190 <HAL_SD_MspInit+0x11c>)
 80030e8:	f043 0304 	orr.w	r3, r3, #4
 80030ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_SD_MspInit+0x11c>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_SD_MspInit+0x11c>)
 8003100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <HAL_SD_MspInit+0x11c>)
 8003106:	f043 0308 	orr.w	r3, r3, #8
 800310a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800310e:	4b20      	ldr	r3, [pc, #128]	; (8003190 <HAL_SD_MspInit+0x11c>)
 8003110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800311c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003124:	2302      	movs	r3, #2
 8003126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003130:	2303      	movs	r3, #3
 8003132:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003136:	230c      	movs	r3, #12
 8003138:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800313c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003140:	4619      	mov	r1, r3
 8003142:	4814      	ldr	r0, [pc, #80]	; (8003194 <HAL_SD_MspInit+0x120>)
 8003144:	f004 fa8e 	bl	8007664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003148:	2304      	movs	r3, #4
 800314a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314e:	2302      	movs	r3, #2
 8003150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800315a:	2303      	movs	r3, #3
 800315c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003160:	230c      	movs	r3, #12
 8003162:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003166:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800316a:	4619      	mov	r1, r3
 800316c:	480a      	ldr	r0, [pc, #40]	; (8003198 <HAL_SD_MspInit+0x124>)
 800316e:	f004 fa79 	bl	8007664 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003172:	2200      	movs	r2, #0
 8003174:	2100      	movs	r1, #0
 8003176:	2031      	movs	r0, #49	; 0x31
 8003178:	f002 fb7f 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800317c:	2031      	movs	r0, #49	; 0x31
 800317e:	f002 fb96 	bl	80058ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003182:	bf00      	nop
 8003184:	37e8      	adds	r7, #232	; 0xe8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	52007000 	.word	0x52007000
 8003190:	58024400 	.word	0x58024400
 8003194:	58020800 	.word	0x58020800
 8003198:	58020c00 	.word	0x58020c00

0800319c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi6;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80031a0:	4b28      	ldr	r3, [pc, #160]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031a2:	4a29      	ldr	r2, [pc, #164]	; (8003248 <MX_SPI1_Init+0xac>)
 80031a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031b4:	4b23      	ldr	r3, [pc, #140]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031b6:	2207      	movs	r2, #7
 80031b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80031c0:	4b20      	ldr	r3, [pc, #128]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80031d0:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80031d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031d8:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031da:	2200      	movs	r2, #0
 80031dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <MX_SPI1_Init+0xa8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_SPI1_Init+0xa8>)
 8003200:	2200      	movs	r2, #0
 8003202:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <MX_SPI1_Init+0xa8>)
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_SPI1_Init+0xa8>)
 800320c:	2200      	movs	r2, #0
 800320e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <MX_SPI1_Init+0xa8>)
 8003212:	2200      	movs	r2, #0
 8003214:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_SPI1_Init+0xa8>)
 8003218:	2200      	movs	r2, #0
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <MX_SPI1_Init+0xa8>)
 800321e:	2200      	movs	r2, #0
 8003220:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <MX_SPI1_Init+0xa8>)
 8003224:	2200      	movs	r2, #0
 8003226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_SPI1_Init+0xa8>)
 800322a:	2200      	movs	r2, #0
 800322c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <MX_SPI1_Init+0xa8>)
 8003230:	f00b fe22 	bl	800ee78 <HAL_SPI_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800323a:	f7ff fe6b 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	240007d0 	.word	0x240007d0
 8003248:	40013000 	.word	0x40013000

0800324c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003252:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <MX_SPI2_Init+0xa8>)
 8003254:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003258:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800325c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003266:	2207      	movs	r2, #7
 8003268:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800326a:	4b21      	ldr	r3, [pc, #132]	; (80032f0 <MX_SPI2_Init+0xa4>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003270:	4b1f      	ldr	r3, [pc, #124]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003272:	2200      	movs	r2, #0
 8003274:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003276:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003278:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800327c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800327e:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003280:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003284:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003286:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003288:	2200      	movs	r2, #0
 800328a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <MX_SPI2_Init+0xa4>)
 800328e:	2200      	movs	r2, #0
 8003290:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003292:	4b17      	ldr	r3, [pc, #92]	; (80032f0 <MX_SPI2_Init+0xa4>)
 8003294:	2200      	movs	r2, #0
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8003298:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <MX_SPI2_Init+0xa4>)
 800329a:	2200      	movs	r2, #0
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80032ac:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80032b8:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80032be:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032d8:	2200      	movs	r2, #0
 80032da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80032dc:	4804      	ldr	r0, [pc, #16]	; (80032f0 <MX_SPI2_Init+0xa4>)
 80032de:	f00b fdcb 	bl	800ee78 <HAL_SPI_Init>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80032e8:	f7ff fe14 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80032ec:	bf00      	nop
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	24000858 	.word	0x24000858
 80032f4:	40003800 	.word	0x40003800

080032f8 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI6_Init 0 */

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  hspi6.Instance = SPI6;
 80032fc:	4b28      	ldr	r3, [pc, #160]	; (80033a0 <MX_SPI6_Init+0xa8>)
 80032fe:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <MX_SPI6_Init+0xac>)
 8003300:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8003302:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003304:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003308:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 800330a:	4b25      	ldr	r3, [pc, #148]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_8BIT;
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003312:	2207      	movs	r2, #7
 8003314:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003316:	4b22      	ldr	r3, [pc, #136]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_2EDGE;
 800331c:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800331e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003322:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8003324:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003326:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800332a:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800332c:	4b1c      	ldr	r3, [pc, #112]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800332e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003332:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003334:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003336:	2200      	movs	r2, #0
 8003338:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800333c:	2200      	movs	r2, #0
 800333e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003342:	2200      	movs	r2, #0
 8003344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8003346:	4b16      	ldr	r3, [pc, #88]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003348:	2200      	movs	r2, #0
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800334c:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800334e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003352:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003356:	2200      	movs	r2, #0
 8003358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003362:	2200      	movs	r2, #0
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003368:	2200      	movs	r2, #0
 800336a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800336e:	2200      	movs	r2, #0
 8003370:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003374:	2200      	movs	r2, #0
 8003376:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800337a:	2200      	movs	r2, #0
 800337c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800337e:	4b08      	ldr	r3, [pc, #32]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003380:	2200      	movs	r2, #0
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <MX_SPI6_Init+0xa8>)
 8003386:	2200      	movs	r2, #0
 8003388:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800338a:	4805      	ldr	r0, [pc, #20]	; (80033a0 <MX_SPI6_Init+0xa8>)
 800338c:	f00b fd74 	bl	800ee78 <HAL_SPI_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_SPI6_Init+0xa2>
  {
    Error_Handler();
 8003396:	f7ff fdbd 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	240008e0 	.word	0x240008e0
 80033a4:	58001400 	.word	0x58001400

080033a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b0bc      	sub	sp, #240	; 0xf0
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033c0:	f107 0320 	add.w	r3, r7, #32
 80033c4:	22bc      	movs	r2, #188	; 0xbc
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f016 fc23 	bl	8019c14 <memset>
  if(spiHandle->Instance==SPI1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_SPI_MspInit+0x1e4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d142      	bne.n	800345e <HAL_SPI_MspInit+0xb6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80033d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80033de:	2300      	movs	r3, #0
 80033e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e2:	f107 0320 	add.w	r3, r7, #32
 80033e6:	4618      	mov	r0, r3
 80033e8:	f007 fc42 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80033f2:	f7ff fd8f 	bl	8002f14 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033f6:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 80033f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fc:	4a64      	ldr	r2, [pc, #400]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 80033fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003402:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800340c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341a:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003424:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003432:	23e0      	movs	r3, #224	; 0xe0
 8003434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800344a:	2305      	movs	r3, #5
 800344c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003454:	4619      	mov	r1, r3
 8003456:	484f      	ldr	r0, [pc, #316]	; (8003594 <HAL_SPI_MspInit+0x1ec>)
 8003458:	f004 f904 	bl	8007664 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800345c:	e091      	b.n	8003582 <HAL_SPI_MspInit+0x1da>
  else if(spiHandle->Instance==SPI2)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a4d      	ldr	r2, [pc, #308]	; (8003598 <HAL_SPI_MspInit+0x1f0>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d143      	bne.n	80034f0 <HAL_SPI_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8003468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800346e:	2300      	movs	r3, #0
 8003470:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003472:	f107 0320 	add.w	r3, r7, #32
 8003476:	4618      	mov	r0, r3
 8003478:	f007 fbfa 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_SPI_MspInit+0xde>
      Error_Handler();
 8003482:	f7ff fd47 	bl	8002f14 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003486:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800348c:	4a40      	ldr	r2, [pc, #256]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 800348e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003492:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003496:	4b3e      	ldr	r3, [pc, #248]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a4:	4b3a      	ldr	r3, [pc, #232]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 80034a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034aa:	4a39      	ldr	r2, [pc, #228]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 80034ac:	f043 0302 	orr.w	r3, r3, #2
 80034b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80034c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80034c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ca:	2302      	movs	r3, #2
 80034cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80034dc:	2305      	movs	r3, #5
 80034de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80034e6:	4619      	mov	r1, r3
 80034e8:	482c      	ldr	r0, [pc, #176]	; (800359c <HAL_SPI_MspInit+0x1f4>)
 80034ea:	f004 f8bb 	bl	8007664 <HAL_GPIO_Init>
}
 80034ee:	e048      	b.n	8003582 <HAL_SPI_MspInit+0x1da>
  else if(spiHandle->Instance==SPI6)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	; (80035a0 <HAL_SPI_MspInit+0x1f8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d143      	bne.n	8003582 <HAL_SPI_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80034fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034fe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003506:	f107 0320 	add.w	r3, r7, #32
 800350a:	4618      	mov	r0, r3
 800350c:	f007 fbb0 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <HAL_SPI_MspInit+0x172>
      Error_Handler();
 8003516:	f7ff fcfd 	bl	8002f14 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800351a:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 800351c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003522:	f043 0320 	orr.w	r3, r3, #32
 8003526:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800352a:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 800352c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003538:	4b15      	ldr	r3, [pc, #84]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 800353a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353e:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 8003540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_SPI_MspInit+0x1e8>)
 800354a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003556:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800355a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355e:	2302      	movs	r3, #2
 8003560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2300      	movs	r3, #0
 800356c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8003570:	2305      	movs	r3, #5
 8003572:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003576:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800357a:	4619      	mov	r1, r3
 800357c:	4809      	ldr	r0, [pc, #36]	; (80035a4 <HAL_SPI_MspInit+0x1fc>)
 800357e:	f004 f871 	bl	8007664 <HAL_GPIO_Init>
}
 8003582:	bf00      	nop
 8003584:	37f0      	adds	r7, #240	; 0xf0
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40013000 	.word	0x40013000
 8003590:	58024400 	.word	0x58024400
 8003594:	58020000 	.word	0x58020000
 8003598:	40003800 	.word	0x40003800
 800359c:	58020400 	.word	0x58020400
 80035a0:	58001400 	.word	0x58001400
 80035a4:	58021800 	.word	0x58021800

080035a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_MspInit+0x30>)
 80035b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035b4:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_MspInit+0x30>)
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_MspInit+0x30>)
 80035c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	607b      	str	r3, [r7, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr
 80035d8:	58024400 	.word	0x58024400

080035dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <NMI_Handler+0x4>

080035e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <HardFault_Handler+0x4>

080035e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <MemManage_Handler+0x4>

080035ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <BusFault_Handler+0x4>

080035f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <UsageFault_Handler+0x4>

080035fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003628:	f000 ff70 	bl	800450c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800362c:	bf00      	nop
 800362e:	bd80      	pop	{r7, pc}

08003630 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <DMA1_Stream0_IRQHandler+0x10>)
 8003636:	f002 feaf 	bl	8006398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	24000bcc 	.word	0x24000bcc

08003644 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <DMA1_Stream1_IRQHandler+0x10>)
 800364a:	f002 fea5 	bl	8006398 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	24000354 	.word	0x24000354

08003658 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <SDMMC1_IRQHandler+0x10>)
 800365e:	f00a fa17 	bl	800da90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	24000754 	.word	0x24000754

0800366c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003670:	4802      	ldr	r0, [pc, #8]	; (800367c <TIM7_IRQHandler+0x10>)
 8003672:	f00c fe8b 	bl	801038c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000ae8 	.word	0x24000ae8

08003680 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003684:	4802      	ldr	r0, [pc, #8]	; (8003690 <OTG_FS_IRQHandler+0x10>)
 8003686:	f005 f960 	bl	800894a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	240026ec 	.word	0x240026ec

08003694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	return 1;
 8003698:	2301      	movs	r3, #1
}
 800369a:	4618      	mov	r0, r3
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_kill>:

int _kill(int pid, int sig)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80036ae:	f016 fa87 	bl	8019bc0 <__errno>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2216      	movs	r2, #22
 80036b6:	601a      	str	r2, [r3, #0]
	return -1;
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <_exit>:

void _exit (int status)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80036cc:	f04f 31ff 	mov.w	r1, #4294967295
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ffe7 	bl	80036a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80036d6:	e7fe      	b.n	80036d6 <_exit+0x12>

080036d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	617b      	str	r3, [r7, #20]
 80036e8:	e00a      	b.n	8003700 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036ea:	f3af 8000 	nop.w
 80036ee:	4601      	mov	r1, r0
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	60ba      	str	r2, [r7, #8]
 80036f6:	b2ca      	uxtb	r2, r1
 80036f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	3301      	adds	r3, #1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	dbf0      	blt.n	80036ea <_read+0x12>
	}

return len;
 8003708:	687b      	ldr	r3, [r7, #4]
}
 800370a:	4618      	mov	r0, r3
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e009      	b.n	8003738 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	60ba      	str	r2, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff fbc3 	bl	8002eb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3301      	adds	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	429a      	cmp	r2, r3
 800373e:	dbf1      	blt.n	8003724 <_write+0x12>
	}
	return len;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <_close>:

int _close(int file)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
	return -1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003772:	605a      	str	r2, [r3, #4]
	return 0;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <_isatty>:

int _isatty(int file)
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
	return 1;
 800378a:	2301      	movs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
	return 0;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037bc:	4a14      	ldr	r2, [pc, #80]	; (8003810 <_sbrk+0x5c>)
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <_sbrk+0x60>)
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037c8:	4b13      	ldr	r3, [pc, #76]	; (8003818 <_sbrk+0x64>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d102      	bne.n	80037d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <_sbrk+0x64>)
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <_sbrk+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <_sbrk+0x64>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4413      	add	r3, r2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d207      	bcs.n	80037f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037e4:	f016 f9ec 	bl	8019bc0 <__errno>
 80037e8:	4603      	mov	r3, r0
 80037ea:	220c      	movs	r2, #12
 80037ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	e009      	b.n	8003808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037f4:	4b08      	ldr	r3, [pc, #32]	; (8003818 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <_sbrk+0x64>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	4a05      	ldr	r2, [pc, #20]	; (8003818 <_sbrk+0x64>)
 8003804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	24080000 	.word	0x24080000
 8003814:	00000400 	.word	0x00000400
 8003818:	24000968 	.word	0x24000968
 800381c:	24002e28 	.word	0x24002e28

08003820 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003824:	4b37      	ldr	r3, [pc, #220]	; (8003904 <SystemInit+0xe4>)
 8003826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800382a:	4a36      	ldr	r2, [pc, #216]	; (8003904 <SystemInit+0xe4>)
 800382c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003830:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003834:	4b34      	ldr	r3, [pc, #208]	; (8003908 <SystemInit+0xe8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 030f 	and.w	r3, r3, #15
 800383c:	2b06      	cmp	r3, #6
 800383e:	d807      	bhi.n	8003850 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003840:	4b31      	ldr	r3, [pc, #196]	; (8003908 <SystemInit+0xe8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f023 030f 	bic.w	r3, r3, #15
 8003848:	4a2f      	ldr	r2, [pc, #188]	; (8003908 <SystemInit+0xe8>)
 800384a:	f043 0307 	orr.w	r3, r3, #7
 800384e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <SystemInit+0xec>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2d      	ldr	r2, [pc, #180]	; (800390c <SystemInit+0xec>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800385c:	4b2b      	ldr	r3, [pc, #172]	; (800390c <SystemInit+0xec>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <SystemInit+0xec>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4929      	ldr	r1, [pc, #164]	; (800390c <SystemInit+0xec>)
 8003868:	4b29      	ldr	r3, [pc, #164]	; (8003910 <SystemInit+0xf0>)
 800386a:	4013      	ands	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800386e:	4b26      	ldr	r3, [pc, #152]	; (8003908 <SystemInit+0xe8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800387a:	4b23      	ldr	r3, [pc, #140]	; (8003908 <SystemInit+0xe8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 030f 	bic.w	r3, r3, #15
 8003882:	4a21      	ldr	r2, [pc, #132]	; (8003908 <SystemInit+0xe8>)
 8003884:	f043 0307 	orr.w	r3, r3, #7
 8003888:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <SystemInit+0xec>)
 800388c:	2200      	movs	r2, #0
 800388e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003890:	4b1e      	ldr	r3, [pc, #120]	; (800390c <SystemInit+0xec>)
 8003892:	2200      	movs	r2, #0
 8003894:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <SystemInit+0xec>)
 8003898:	2200      	movs	r2, #0
 800389a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800389c:	4b1b      	ldr	r3, [pc, #108]	; (800390c <SystemInit+0xec>)
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <SystemInit+0xf4>)
 80038a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	; (800390c <SystemInit+0xec>)
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <SystemInit+0xf8>)
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038a8:	4b18      	ldr	r3, [pc, #96]	; (800390c <SystemInit+0xec>)
 80038aa:	4a1c      	ldr	r2, [pc, #112]	; (800391c <SystemInit+0xfc>)
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <SystemInit+0xec>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038b4:	4b15      	ldr	r3, [pc, #84]	; (800390c <SystemInit+0xec>)
 80038b6:	4a19      	ldr	r2, [pc, #100]	; (800391c <SystemInit+0xfc>)
 80038b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <SystemInit+0xec>)
 80038bc:	2200      	movs	r2, #0
 80038be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <SystemInit+0xec>)
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <SystemInit+0xfc>)
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <SystemInit+0xec>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <SystemInit+0xec>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0e      	ldr	r2, [pc, #56]	; (800390c <SystemInit+0xec>)
 80038d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038d8:	4b0c      	ldr	r3, [pc, #48]	; (800390c <SystemInit+0xec>)
 80038da:	2200      	movs	r2, #0
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <SystemInit+0x100>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <SystemInit+0x104>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ea:	d202      	bcs.n	80038f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <SystemInit+0x108>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <SystemInit+0x10c>)
 80038f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00
 8003908:	52002000 	.word	0x52002000
 800390c:	58024400 	.word	0x58024400
 8003910:	eaf6ed7f 	.word	0xeaf6ed7f
 8003914:	02020200 	.word	0x02020200
 8003918:	01ff0000 	.word	0x01ff0000
 800391c:	01010280 	.word	0x01010280
 8003920:	5c001000 	.word	0x5c001000
 8003924:	ffff0000 	.word	0xffff0000
 8003928:	51008108 	.word	0x51008108
 800392c:	52004000 	.word	0x52004000

08003930 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08c      	sub	sp, #48	; 0x30
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003936:	f107 030c 	add.w	r3, r7, #12
 800393a:	2224      	movs	r2, #36	; 0x24
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f016 f968 	bl	8019c14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003944:	463b      	mov	r3, r7
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <MX_TIM1_Init+0xac>)
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <MX_TIM1_Init+0xb0>)
 8003952:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <MX_TIM1_Init+0xac>)
 8003956:	2200      	movs	r2, #0
 8003958:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <MX_TIM1_Init+0xac>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <MX_TIM1_Init+0xac>)
 8003962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003966:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003968:	4b1c      	ldr	r3, [pc, #112]	; (80039dc <MX_TIM1_Init+0xac>)
 800396a:	2200      	movs	r2, #0
 800396c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800396e:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <MX_TIM1_Init+0xac>)
 8003970:	2200      	movs	r2, #0
 8003972:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003974:	4b19      	ldr	r3, [pc, #100]	; (80039dc <MX_TIM1_Init+0xac>)
 8003976:	2280      	movs	r2, #128	; 0x80
 8003978:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800397a:	2303      	movs	r3, #3
 800397c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003982:	2301      	movs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800398a:	230a      	movs	r3, #10
 800398c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003992:	2301      	movs	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003996:	2300      	movs	r3, #0
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800399e:	f107 030c 	add.w	r3, r7, #12
 80039a2:	4619      	mov	r1, r3
 80039a4:	480d      	ldr	r0, [pc, #52]	; (80039dc <MX_TIM1_Init+0xac>)
 80039a6:	f00c fc4b 	bl	8010240 <HAL_TIM_Encoder_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80039b0:	f7ff fab0 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039bc:	2300      	movs	r3, #0
 80039be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039c0:	463b      	mov	r3, r7
 80039c2:	4619      	mov	r1, r3
 80039c4:	4805      	ldr	r0, [pc, #20]	; (80039dc <MX_TIM1_Init+0xac>)
 80039c6:	f00d fc69 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80039d0:	f7ff faa0 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80039d4:	bf00      	nop
 80039d6:	3730      	adds	r7, #48	; 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	2400096c 	.word	0x2400096c
 80039e0:	40010000 	.word	0x40010000

080039e4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08e      	sub	sp, #56	; 0x38
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f8:	f107 031c 	add.w	r3, r7, #28
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a04:	463b      	mov	r3, r7
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	60da      	str	r2, [r3, #12]
 8003a10:	611a      	str	r2, [r3, #16]
 8003a12:	615a      	str	r2, [r3, #20]
 8003a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a16:	4b2d      	ldr	r3, [pc, #180]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a24:	4b29      	ldr	r3, [pc, #164]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300 - 1;
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a2c:	f240 122b 	movw	r2, #299	; 0x12b
 8003a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a32:	4b26      	ldr	r3, [pc, #152]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a38:	4b24      	ldr	r3, [pc, #144]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a3e:	4823      	ldr	r0, [pc, #140]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a40:	f00c f9bf 	bl	800fdc2 <HAL_TIM_Base_Init>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003a4a:	f7ff fa63 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a58:	4619      	mov	r1, r3
 8003a5a:	481c      	ldr	r0, [pc, #112]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a5c:	f00c feca 	bl	80107f4 <HAL_TIM_ConfigClockSource>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003a66:	f7ff fa55 	bl	8002f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003a6a:	4818      	ldr	r0, [pc, #96]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a6c:	f00c fa78 	bl	800ff60 <HAL_TIM_PWM_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003a76:	f7ff fa4d 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a82:	f107 031c 	add.w	r3, r7, #28
 8003a86:	4619      	mov	r1, r3
 8003a88:	4810      	ldr	r0, [pc, #64]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003a8a:	f00d fc07 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003a94:	f7ff fa3e 	bl	8002f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a98:	2360      	movs	r3, #96	; 0x60
 8003a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4619      	mov	r1, r3
 8003aae:	4807      	ldr	r0, [pc, #28]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003ab0:	f00c fd8c 	bl	80105cc <HAL_TIM_PWM_ConfigChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8003aba:	f7ff fa2b 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003abe:	4803      	ldr	r0, [pc, #12]	; (8003acc <MX_TIM2_Init+0xe8>)
 8003ac0:	f000 fb04 	bl	80040cc <HAL_TIM_MspPostInit>

}
 8003ac4:	bf00      	nop
 8003ac6:	3738      	adds	r7, #56	; 0x38
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	240009b8 	.word	0x240009b8

08003ad0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	; 0x30
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	2100      	movs	r1, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f016 f898 	bl	8019c14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ae4:	463b      	mov	r3, r7
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003aee:	4b21      	ldr	r3, [pc, #132]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <MX_TIM3_Init+0xa8>)
 8003af2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afa:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b14:	2303      	movs	r3, #3
 8003b16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8003b24:	230a      	movs	r3, #10
 8003b26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	480d      	ldr	r0, [pc, #52]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003b40:	f00c fb7e 	bl	8010240 <HAL_TIM_Encoder_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003b4a:	f7ff f9e3 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b56:	463b      	mov	r3, r7
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4806      	ldr	r0, [pc, #24]	; (8003b74 <MX_TIM3_Init+0xa4>)
 8003b5c:	f00d fb9e 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003b66:	f7ff f9d5 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003b6a:	bf00      	nop
 8003b6c:	3730      	adds	r7, #48	; 0x30
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	24000a04 	.word	0x24000a04
 8003b78:	40000400 	.word	0x40000400

08003b7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08e      	sub	sp, #56	; 0x38
 8003b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b90:	f107 031c 	add.w	r3, r7, #28
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b9c:	463b      	mov	r3, r7
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	605a      	str	r2, [r3, #4]
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	615a      	str	r2, [r3, #20]
 8003bac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003bae:	4b2c      	ldr	r3, [pc, #176]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bb0:	4a2c      	ldr	r2, [pc, #176]	; (8003c64 <MX_TIM4_Init+0xe8>)
 8003bb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240 - 1;
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bb6:	22ef      	movs	r2, #239	; 0xef
 8003bb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bd0:	2280      	movs	r2, #128	; 0x80
 8003bd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003bd4:	4822      	ldr	r0, [pc, #136]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bd6:	f00c f8f4 	bl	800fdc2 <HAL_TIM_Base_Init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8003be0:	f7ff f998 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bee:	4619      	mov	r1, r3
 8003bf0:	481b      	ldr	r0, [pc, #108]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003bf2:	f00c fdff 	bl	80107f4 <HAL_TIM_ConfigClockSource>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003bfc:	f7ff f98a 	bl	8002f14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003c00:	4817      	ldr	r0, [pc, #92]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003c02:	f00c f9ad 	bl	800ff60 <HAL_TIM_PWM_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003c0c:	f7ff f982 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003c10:	2320      	movs	r3, #32
 8003c12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c18:	f107 031c 	add.w	r3, r7, #28
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4810      	ldr	r0, [pc, #64]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003c20:	f00d fb3c 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003c2a:	f7ff f973 	bl	8002f14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c2e:	2360      	movs	r3, #96	; 0x60
 8003c30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8003c32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c36:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c40:	463b      	mov	r3, r7
 8003c42:	2200      	movs	r2, #0
 8003c44:	4619      	mov	r1, r3
 8003c46:	4806      	ldr	r0, [pc, #24]	; (8003c60 <MX_TIM4_Init+0xe4>)
 8003c48:	f00c fcc0 	bl	80105cc <HAL_TIM_PWM_ConfigChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8003c52:	f7ff f95f 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c56:	bf00      	nop
 8003c58:	3738      	adds	r7, #56	; 0x38
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	24000a50 	.word	0x24000a50
 8003c64:	40000800 	.word	0x40000800

08003c68 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6e:	1d3b      	adds	r3, r7, #4
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	605a      	str	r2, [r3, #4]
 8003c76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c78:	4b14      	ldr	r3, [pc, #80]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <MX_TIM6_Init+0x68>)
 8003c7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 240-1;
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003c80:	22ef      	movs	r2, #239	; 0xef
 8003c82:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c90:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003c9a:	f00c f892 	bl	800fdc2 <HAL_TIM_Base_Init>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003ca4:	f7ff f936 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003cb0:	1d3b      	adds	r3, r7, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_TIM6_Init+0x64>)
 8003cb6:	f00d faf1 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003cc0:	f7ff f928 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	24000a9c 	.word	0x24000a9c
 8003cd0:	40001000 	.word	0x40001000

08003cd4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cda:	1d3b      	adds	r3, r7, #4
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ce4:	4b14      	ldr	r3, [pc, #80]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <MX_TIM7_Init+0x68>)
 8003ce8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240 - 1;
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003cec:	22ef      	movs	r2, #239	; 0xef
 8003cee:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003d06:	f00c f85c 	bl	800fdc2 <HAL_TIM_Base_Init>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003d10:	f7ff f900 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_TIM7_Init+0x64>)
 8003d22:	f00d fabb 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003d2c:	f7ff f8f2 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	24000ae8 	.word	0x24000ae8
 8003d3c:	40001400 	.word	0x40001400

08003d40 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <MX_TIM15_Init+0xa0>)
 8003d62:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d76:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003d8a:	4814      	ldr	r0, [pc, #80]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003d8c:	f00c f819 	bl	800fdc2 <HAL_TIM_Base_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003d96:	f7ff f8bd 	bl	8002f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003da0:	f107 0310 	add.w	r3, r7, #16
 8003da4:	4619      	mov	r1, r3
 8003da6:	480d      	ldr	r0, [pc, #52]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003da8:	f00c fd24 	bl	80107f4 <HAL_TIM_ConfigClockSource>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8003db2:	f7ff f8af 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db6:	2300      	movs	r3, #0
 8003db8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003dbe:	1d3b      	adds	r3, r7, #4
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4806      	ldr	r0, [pc, #24]	; (8003ddc <MX_TIM15_Init+0x9c>)
 8003dc4:	f00d fa6a 	bl	801129c <HAL_TIMEx_MasterConfigSynchronization>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8003dce:	f7ff f8a1 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003dd2:	bf00      	nop
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	24000b34 	.word	0x24000b34
 8003de0:	40014000 	.word	0x40014000

08003de4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <MX_TIM17_Init+0x48>)
 8003dec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 240 - 1;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003df0:	22ef      	movs	r2, #239	; 0xef
 8003df2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 40 - 1;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003dfc:	2227      	movs	r2, #39	; 0x27
 8003dfe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003e0e:	2280      	movs	r2, #128	; 0x80
 8003e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <MX_TIM17_Init+0x44>)
 8003e14:	f00b ffd5 	bl	800fdc2 <HAL_TIM_Base_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003e1e:	f7ff f879 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	24000b80 	.word	0x24000b80
 8003e2c:	40014800 	.word	0x40014800

08003e30 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	; 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a34      	ldr	r2, [pc, #208]	; (8003f20 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d12f      	bne.n	8003eb2 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e52:	4b34      	ldr	r3, [pc, #208]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e58:	4a32      	ldr	r2, [pc, #200]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e62:	4b30      	ldr	r3, [pc, #192]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e70:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e76:	4a2b      	ldr	r2, [pc, #172]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e78:	f043 0310 	orr.w	r3, r3, #16
 8003e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e80:	4b28      	ldr	r3, [pc, #160]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8003e8e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	2302      	movs	r3, #2
 8003e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ea4:	f107 031c 	add.w	r3, r7, #28
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	481f      	ldr	r0, [pc, #124]	; (8003f28 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003eac:	f003 fbda 	bl	8007664 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003eb0:	e032      	b.n	8003f18 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(tim_encoderHandle->Instance==TIM3)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d12d      	bne.n	8003f18 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ec4:	f043 0302 	orr.w	r3, r3, #2
 8003ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	613b      	str	r3, [r7, #16]
 8003ed8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee0:	4a10      	ldr	r2, [pc, #64]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003ee2:	f043 0302 	orr.w	r3, r3, #2
 8003ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eea:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003ef8:	2330      	movs	r3, #48	; 0x30
 8003efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003efc:	2302      	movs	r3, #2
 8003efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f04:	2300      	movs	r3, #0
 8003f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f0c:	f107 031c 	add.w	r3, r7, #28
 8003f10:	4619      	mov	r1, r3
 8003f12:	4807      	ldr	r0, [pc, #28]	; (8003f30 <HAL_TIM_Encoder_MspInit+0x100>)
 8003f14:	f003 fba6 	bl	8007664 <HAL_GPIO_Init>
}
 8003f18:	bf00      	nop
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40010000 	.word	0x40010000
 8003f24:	58024400 	.word	0x58024400
 8003f28:	58021000 	.word	0x58021000
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	58020400 	.word	0x58020400

08003f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d13e      	bne.n	8003fc4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f46:	4b59      	ldr	r3, [pc, #356]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f4c:	4a57      	ldr	r2, [pc, #348]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f56:	4b55      	ldr	r3, [pc, #340]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	61fb      	str	r3, [r7, #28]
 8003f62:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream0;
 8003f64:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f66:	4a53      	ldr	r2, [pc, #332]	; (80040b4 <HAL_TIM_Base_MspInit+0x180>)
 8003f68:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8003f6a:	4b51      	ldr	r3, [pc, #324]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f6c:	2212      	movs	r2, #18
 8003f6e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f70:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f72:	2240      	movs	r2, #64	; 0x40
 8003f74:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f76:	4b4e      	ldr	r3, [pc, #312]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f7c:	4b4c      	ldr	r3, [pc, #304]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f82:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003f84:	4b4a      	ldr	r3, [pc, #296]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f8a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f8c:	4b48      	ldr	r3, [pc, #288]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f92:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f9a:	4b45      	ldr	r3, [pc, #276]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003fa6:	4842      	ldr	r0, [pc, #264]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003fa8:	f001 fe9a 	bl	8005ce0 <HAL_DMA_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003fb2:	f7fe ffaf 	bl	8002f14 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003fba:	625a      	str	r2, [r3, #36]	; 0x24
 8003fbc:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <HAL_TIM_Base_MspInit+0x17c>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003fc2:	e06f      	b.n	80040a4 <HAL_TIM_Base_MspInit+0x170>
  else if(tim_baseHandle->Instance==TIM4)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <HAL_TIM_Base_MspInit+0x184>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10f      	bne.n	8003fee <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fd4:	4a35      	ldr	r2, [pc, #212]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003fd6:	f043 0304 	orr.w	r3, r3, #4
 8003fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	69bb      	ldr	r3, [r7, #24]
}
 8003fec:	e05a      	b.n	80040a4 <HAL_TIM_Base_MspInit+0x170>
  else if(tim_baseHandle->Instance==TIM6)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a32      	ldr	r2, [pc, #200]	; (80040bc <HAL_TIM_Base_MspInit+0x188>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10f      	bne.n	8004018 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ff8:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8003ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ffe:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8004000:	f043 0310 	orr.w	r3, r3, #16
 8004004:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004008:	4b28      	ldr	r3, [pc, #160]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 800400a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800400e:	f003 0310 	and.w	r3, r3, #16
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
}
 8004016:	e045      	b.n	80040a4 <HAL_TIM_Base_MspInit+0x170>
  else if(tim_baseHandle->Instance==TIM7)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a28      	ldr	r2, [pc, #160]	; (80040c0 <HAL_TIM_Base_MspInit+0x18c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d117      	bne.n	8004052 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8004024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004028:	4a20      	ldr	r2, [pc, #128]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 800402a:	f043 0320 	orr.w	r3, r3, #32
 800402e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004032:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8004034:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004040:	2200      	movs	r2, #0
 8004042:	2100      	movs	r1, #0
 8004044:	2037      	movs	r0, #55	; 0x37
 8004046:	f001 fc18 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800404a:	2037      	movs	r0, #55	; 0x37
 800404c:	f001 fc2f 	bl	80058ae <HAL_NVIC_EnableIRQ>
}
 8004050:	e028      	b.n	80040a4 <HAL_TIM_Base_MspInit+0x170>
  else if(tim_baseHandle->Instance==TIM15)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <HAL_TIM_Base_MspInit+0x190>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10f      	bne.n	800407c <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800405c:	4b13      	ldr	r3, [pc, #76]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 800405e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 800406e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
}
 800407a:	e013      	b.n	80040a4 <HAL_TIM_Base_MspInit+0x170>
  else if(tim_baseHandle->Instance==TIM17)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <HAL_TIM_Base_MspInit+0x194>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d10e      	bne.n	80040a4 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004086:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8004088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800408c:	4a07      	ldr	r2, [pc, #28]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 800408e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_TIM_Base_MspInit+0x178>)
 8004098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800409c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a0:	60bb      	str	r3, [r7, #8]
 80040a2:	68bb      	ldr	r3, [r7, #8]
}
 80040a4:	bf00      	nop
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	58024400 	.word	0x58024400
 80040b0:	24000bcc 	.word	0x24000bcc
 80040b4:	40020010 	.word	0x40020010
 80040b8:	40000800 	.word	0x40000800
 80040bc:	40001000 	.word	0x40001000
 80040c0:	40001400 	.word	0x40001400
 80040c4:	40014000 	.word	0x40014000
 80040c8:	40014800 	.word	0x40014800

080040cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d11f      	bne.n	800412e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <HAL_TIM_MspPostInit+0x6c>)
 80040f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f4:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_TIM_MspPostInit+0x6c>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <HAL_TIM_MspPostInit+0x6c>)
 8004100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800410c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004110:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411a:	2300      	movs	r3, #0
 800411c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800411e:	2301      	movs	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004122:	f107 030c 	add.w	r3, r7, #12
 8004126:	4619      	mov	r1, r3
 8004128:	4804      	ldr	r0, [pc, #16]	; (800413c <HAL_TIM_MspPostInit+0x70>)
 800412a:	f003 fa9b 	bl	8007664 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800412e:	bf00      	nop
 8004130:	3720      	adds	r7, #32
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	58024400 	.word	0x58024400
 800413c:	58020000 	.word	0x58020000

08004140 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004144:	4b22      	ldr	r3, [pc, #136]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004146:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <MX_USART2_UART_Init+0x94>)
 8004148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800414a:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 800414c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004152:	4b1f      	ldr	r3, [pc, #124]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004154:	2200      	movs	r2, #0
 8004156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004158:	4b1d      	ldr	r3, [pc, #116]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800415e:	4b1c      	ldr	r3, [pc, #112]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004160:	2200      	movs	r2, #0
 8004162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004166:	220c      	movs	r2, #12
 8004168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004170:	4b17      	ldr	r3, [pc, #92]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004178:	2200      	movs	r2, #0
 800417a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800417c:	4b14      	ldr	r3, [pc, #80]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 800417e:	2200      	movs	r2, #0
 8004180:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 8004184:	2200      	movs	r2, #0
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004188:	4811      	ldr	r0, [pc, #68]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 800418a:	f00d f933 	bl	80113f4 <HAL_UART_Init>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004194:	f7fe febe 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004198:	2100      	movs	r1, #0
 800419a:	480d      	ldr	r0, [pc, #52]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 800419c:	f00e f966 	bl	801246c <HAL_UARTEx_SetTxFifoThreshold>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80041a6:	f7fe feb5 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041aa:	2100      	movs	r1, #0
 80041ac:	4808      	ldr	r0, [pc, #32]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 80041ae:	f00e f99b 	bl	80124e8 <HAL_UARTEx_SetRxFifoThreshold>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80041b8:	f7fe feac 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80041bc:	4804      	ldr	r0, [pc, #16]	; (80041d0 <MX_USART2_UART_Init+0x90>)
 80041be:	f00e f91c 	bl	80123fa <HAL_UARTEx_DisableFifoMode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80041c8:	f7fe fea4 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	24000c44 	.word	0x24000c44
 80041d4:	40004400 	.word	0x40004400

080041d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80041dc:	4b22      	ldr	r3, [pc, #136]	; (8004268 <MX_USART3_UART_Init+0x90>)
 80041de:	4a23      	ldr	r2, [pc, #140]	; (800426c <MX_USART3_UART_Init+0x94>)
 80041e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80041e2:	4b21      	ldr	r3, [pc, #132]	; (8004268 <MX_USART3_UART_Init+0x90>)
 80041e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80041ea:	4b1f      	ldr	r3, [pc, #124]	; (8004268 <MX_USART3_UART_Init+0x90>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <MX_USART3_UART_Init+0x90>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80041f6:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <MX_USART3_UART_Init+0x90>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <MX_USART3_UART_Init+0x90>)
 80041fe:	220c      	movs	r2, #12
 8004200:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004204:	2200      	movs	r2, #0
 8004206:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <MX_USART3_UART_Init+0x90>)
 800420a:	2200      	movs	r2, #0
 800420c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004210:	2200      	movs	r2, #0
 8004212:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004216:	2200      	movs	r2, #0
 8004218:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800421a:	4b13      	ldr	r3, [pc, #76]	; (8004268 <MX_USART3_UART_Init+0x90>)
 800421c:	2200      	movs	r2, #0
 800421e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004220:	4811      	ldr	r0, [pc, #68]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004222:	f00d f8e7 	bl	80113f4 <HAL_UART_Init>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800422c:	f7fe fe72 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004230:	2100      	movs	r1, #0
 8004232:	480d      	ldr	r0, [pc, #52]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004234:	f00e f91a 	bl	801246c <HAL_UARTEx_SetTxFifoThreshold>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800423e:	f7fe fe69 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004242:	2100      	movs	r1, #0
 8004244:	4808      	ldr	r0, [pc, #32]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004246:	f00e f94f 	bl	80124e8 <HAL_UARTEx_SetRxFifoThreshold>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004250:	f7fe fe60 	bl	8002f14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004254:	4804      	ldr	r0, [pc, #16]	; (8004268 <MX_USART3_UART_Init+0x90>)
 8004256:	f00e f8d0 	bl	80123fa <HAL_UARTEx_DisableFifoMode>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d001      	beq.n	8004264 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004260:	f7fe fe58 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	24000cd4 	.word	0x24000cd4
 800426c:	40004800 	.word	0x40004800

08004270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b0ba      	sub	sp, #232	; 0xe8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004288:	f107 0318 	add.w	r3, r7, #24
 800428c:	22bc      	movs	r2, #188	; 0xbc
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f015 fcbf 	bl	8019c14 <memset>
  if(uartHandle->Instance==USART2)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a49      	ldr	r2, [pc, #292]	; (80043c0 <HAL_UART_MspInit+0x150>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d142      	bne.n	8004326 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042a0:	2302      	movs	r3, #2
 80042a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042aa:	f107 0318 	add.w	r3, r7, #24
 80042ae:	4618      	mov	r0, r3
 80042b0:	f006 fcde 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80042ba:	f7fe fe2b 	bl	8002f14 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <HAL_UART_MspInit+0x154>)
 80042c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042c4:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <HAL_UART_MspInit+0x154>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042ce:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_UART_MspInit+0x154>)
 80042d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_UART_MspInit+0x154>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <HAL_UART_MspInit+0x154>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_UART_MspInit+0x154>)
 80042ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042fa:	230c      	movs	r3, #12
 80042fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004312:	2307      	movs	r3, #7
 8004314:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004318:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800431c:	4619      	mov	r1, r3
 800431e:	482a      	ldr	r0, [pc, #168]	; (80043c8 <HAL_UART_MspInit+0x158>)
 8004320:	f003 f9a0 	bl	8007664 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004324:	e047      	b.n	80043b6 <HAL_UART_MspInit+0x146>
  else if(uartHandle->Instance==USART3)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a28      	ldr	r2, [pc, #160]	; (80043cc <HAL_UART_MspInit+0x15c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d142      	bne.n	80043b6 <HAL_UART_MspInit+0x146>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004330:	2302      	movs	r3, #2
 8004332:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800433a:	f107 0318 	add.w	r3, r7, #24
 800433e:	4618      	mov	r0, r3
 8004340:	f006 fc96 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_UART_MspInit+0xde>
      Error_Handler();
 800434a:	f7fe fde3 	bl	8002f14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <HAL_UART_MspInit+0x154>)
 8004350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <HAL_UART_MspInit+0x154>)
 8004356:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800435a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_UART_MspInit+0x154>)
 8004360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004364:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <HAL_UART_MspInit+0x154>)
 800436e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <HAL_UART_MspInit+0x154>)
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_UART_MspInit+0x154>)
 800437e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	60bb      	str	r3, [r7, #8]
 8004388:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800438a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800438e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	2302      	movs	r3, #2
 8004394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043a4:	2307      	movs	r3, #7
 80043a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4807      	ldr	r0, [pc, #28]	; (80043d0 <HAL_UART_MspInit+0x160>)
 80043b2:	f003 f957 	bl	8007664 <HAL_GPIO_Init>
}
 80043b6:	bf00      	nop
 80043b8:	37e8      	adds	r7, #232	; 0xe8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40004400 	.word	0x40004400
 80043c4:	58024400 	.word	0x58024400
 80043c8:	58020000 	.word	0x58020000
 80043cc:	40004800 	.word	0x40004800
 80043d0:	58020400 	.word	0x58020400

080043d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80043d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800440c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043d8:	f7ff fa22 	bl	8003820 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043dc:	480c      	ldr	r0, [pc, #48]	; (8004410 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043de:	490d      	ldr	r1, [pc, #52]	; (8004414 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043e4:	e002      	b.n	80043ec <LoopCopyDataInit>

080043e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ea:	3304      	adds	r3, #4

080043ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043f0:	d3f9      	bcc.n	80043e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043f4:	4c0a      	ldr	r4, [pc, #40]	; (8004420 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043f8:	e001      	b.n	80043fe <LoopFillZerobss>

080043fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043fc:	3204      	adds	r2, #4

080043fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004400:	d3fb      	bcc.n	80043fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004402:	f015 fbe3 	bl	8019bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004406:	f7fe fb03 	bl	8002a10 <main>
  bx  lr
 800440a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800440c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004410:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004414:	240002d0 	.word	0x240002d0
  ldr r2, =_sidata
 8004418:	0801f140 	.word	0x0801f140
  ldr r2, =_sbss
 800441c:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8004420:	24002e28 	.word	0x24002e28

08004424 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004424:	e7fe      	b.n	8004424 <ADC3_IRQHandler>
	...

08004428 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800442e:	2003      	movs	r0, #3
 8004430:	f001 fa18 	bl	8005864 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004434:	f006 fa46 	bl	800a8c4 <HAL_RCC_GetSysClockFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_Init+0x68>)
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	0a1b      	lsrs	r3, r3, #8
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	4913      	ldr	r1, [pc, #76]	; (8004494 <HAL_Init+0x6c>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004452:	4b0f      	ldr	r3, [pc, #60]	; (8004490 <HAL_Init+0x68>)
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <HAL_Init+0x6c>)
 800445c:	5cd3      	ldrb	r3, [r2, r3]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
 8004468:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <HAL_Init+0x70>)
 800446a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_Init+0x74>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004472:	200f      	movs	r0, #15
 8004474:	f000 f814 	bl	80044a0 <HAL_InitTick>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e002      	b.n	8004488 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004482:	f7ff f891 	bl	80035a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	58024400 	.word	0x58024400
 8004494:	0801d3c8 	.word	0x0801d3c8
 8004498:	24000004 	.word	0x24000004
 800449c:	24000000 	.word	0x24000000

080044a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_InitTick+0x60>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e021      	b.n	80044f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <HAL_InitTick+0x64>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b11      	ldr	r3, [pc, #68]	; (8004500 <HAL_InitTick+0x60>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	4618      	mov	r0, r3
 80044cc:	f001 f9fd 	bl	80058ca <HAL_SYSTICK_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00e      	b.n	80044f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b0f      	cmp	r3, #15
 80044de:	d80a      	bhi.n	80044f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e0:	2200      	movs	r2, #0
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f001 f9c7 	bl	800587a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044ec:	4a06      	ldr	r2, [pc, #24]	; (8004508 <HAL_InitTick+0x68>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	2400000c 	.word	0x2400000c
 8004504:	24000000 	.word	0x24000000
 8004508:	24000008 	.word	0x24000008

0800450c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_IncTick+0x20>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_IncTick+0x24>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4413      	add	r3, r2
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <HAL_IncTick+0x24>)
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	2400000c 	.word	0x2400000c
 8004530:	24000d64 	.word	0x24000d64

08004534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return uwTick;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_GetTick+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	24000d64 	.word	0x24000d64

0800454c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7ff ffee 	bl	8004534 <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d005      	beq.n	8004572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_Delay+0x44>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004572:	bf00      	nop
 8004574:	f7ff ffde 	bl	8004534 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d8f7      	bhi.n	8004574 <HAL_Delay+0x28>
  {
  }
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2400000c 	.word	0x2400000c

08004594 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004598:	4b03      	ldr	r3, [pc, #12]	; (80045a8 <HAL_GetREVID+0x14>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0c1b      	lsrs	r3, r3, #16
}
 800459e:	4618      	mov	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	5c001000 	.word	0x5c001000

080045ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	609a      	str	r2, [r3, #8]
}
 80045c6:	bf00      	nop
 80045c8:	370c      	adds	r7, #12
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b083      	sub	sp, #12
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	609a      	str	r2, [r3, #8]
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3360      	adds	r3, #96	; 0x60
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	430b      	orrs	r3, r1
 8004642:	431a      	orrs	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	611a      	str	r2, [r3, #16]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004686:	b480      	push	{r7}
 8004688:	b087      	sub	sp, #28
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3360      	adds	r3, #96	; 0x60
 8004696:	461a      	mov	r2, r3
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	601a      	str	r2, [r3, #0]
  }
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3330      	adds	r3, #48	; 0x30
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	0a1b      	lsrs	r3, r3, #8
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	4413      	add	r3, r2
 80046da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	211f      	movs	r1, #31
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	0e9b      	lsrs	r3, r3, #26
 80046f4:	f003 011f 	and.w	r1, r3, #31
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	431a      	orrs	r2, r3
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3314      	adds	r3, #20
 8004724:	461a      	mov	r2, r3
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0e5b      	lsrs	r3, r3, #25
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	4413      	add	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	0d1b      	lsrs	r3, r3, #20
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	2107      	movs	r1, #7
 8004742:	fa01 f303 	lsl.w	r3, r1, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	401a      	ands	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	0d1b      	lsrs	r3, r3, #20
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	431a      	orrs	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004784:	43db      	mvns	r3, r3
 8004786:	401a      	ands	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0318 	and.w	r3, r3, #24
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004790:	40d9      	lsrs	r1, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	400b      	ands	r3, r1
 8004796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800479a:	431a      	orrs	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	000fffff 	.word	0x000fffff

080047b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6093      	str	r3, [r2, #8]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	5fffffc0 	.word	0x5fffffc0

080047d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047ec:	d101      	bne.n	80047f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	4b05      	ldr	r3, [pc, #20]	; (8004824 <LL_ADC_EnableInternalRegulator+0x24>)
 800480e:	4013      	ands	r3, r2
 8004810:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	6fffffc0 	.word	0x6fffffc0

08004828 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483c:	d101      	bne.n	8004842 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800483e:	2301      	movs	r3, #1
 8004840:	e000      	b.n	8004844 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <LL_ADC_IsEnabled+0x18>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <LL_ADC_IsEnabled+0x1a>
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d101      	bne.n	800488e <LL_ADC_REG_IsConversionOngoing+0x18>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f003 0308 	and.w	r3, r3, #8
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d101      	bne.n	80048b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
	...

080048c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b089      	sub	sp, #36	; 0x24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e18f      	b.n	8004bfe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d109      	bne.n	8004900 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd fc9d 	bl	800222c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff ff67 	bl	80047d8 <LL_ADC_IsDeepPowerDownEnabled>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d004      	beq.n	800491a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff4d 	bl	80047b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff82 	bl	8004828 <LL_ADC_IsInternalRegulatorEnabled>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d114      	bne.n	8004954 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff ff66 	bl	8004800 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004934:	4b87      	ldr	r3, [pc, #540]	; (8004b54 <HAL_ADC_Init+0x290>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	099b      	lsrs	r3, r3, #6
 800493a:	4a87      	ldr	r2, [pc, #540]	; (8004b58 <HAL_ADC_Init+0x294>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	3301      	adds	r3, #1
 8004944:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004946:	e002      	b.n	800494e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3b01      	subs	r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1f9      	bne.n	8004948 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff ff65 	bl	8004828 <LL_ADC_IsInternalRegulatorEnabled>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10d      	bne.n	8004980 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	f043 0210 	orr.w	r2, r3, #16
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	f043 0201 	orr.w	r2, r3, #1
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff ff76 	bl	8004876 <LL_ADC_REG_IsConversionOngoing>
 800498a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	f040 8129 	bne.w	8004bec <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 8125 	bne.w	8004bec <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80049aa:	f043 0202 	orr.w	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ff4a 	bl	8004850 <LL_ADC_IsEnabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d136      	bne.n	8004a30 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a65      	ldr	r2, [pc, #404]	; (8004b5c <HAL_ADC_Init+0x298>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_ADC_Init+0x112>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a63      	ldr	r2, [pc, #396]	; (8004b60 <HAL_ADC_Init+0x29c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10e      	bne.n	80049f4 <HAL_ADC_Init+0x130>
 80049d6:	4861      	ldr	r0, [pc, #388]	; (8004b5c <HAL_ADC_Init+0x298>)
 80049d8:	f7ff ff3a 	bl	8004850 <LL_ADC_IsEnabled>
 80049dc:	4604      	mov	r4, r0
 80049de:	4860      	ldr	r0, [pc, #384]	; (8004b60 <HAL_ADC_Init+0x29c>)
 80049e0:	f7ff ff36 	bl	8004850 <LL_ADC_IsEnabled>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4323      	orrs	r3, r4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	e008      	b.n	8004a06 <HAL_ADC_Init+0x142>
 80049f4:	485b      	ldr	r0, [pc, #364]	; (8004b64 <HAL_ADC_Init+0x2a0>)
 80049f6:	f7ff ff2b 	bl	8004850 <LL_ADC_IsEnabled>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d012      	beq.n	8004a30 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a53      	ldr	r2, [pc, #332]	; (8004b5c <HAL_ADC_Init+0x298>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d004      	beq.n	8004a1e <HAL_ADC_Init+0x15a>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a51      	ldr	r2, [pc, #324]	; (8004b60 <HAL_ADC_Init+0x29c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d101      	bne.n	8004a22 <HAL_ADC_Init+0x15e>
 8004a1e:	4a52      	ldr	r2, [pc, #328]	; (8004b68 <HAL_ADC_Init+0x2a4>)
 8004a20:	e000      	b.n	8004a24 <HAL_ADC_Init+0x160>
 8004a22:	4a52      	ldr	r2, [pc, #328]	; (8004b6c <HAL_ADC_Init+0x2a8>)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7ff fdbe 	bl	80045ac <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004a30:	f7ff fdb0 	bl	8004594 <HAL_GetREVID>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d914      	bls.n	8004a68 <HAL_ADC_Init+0x1a4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d110      	bne.n	8004a68 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	7d5b      	ldrb	r3, [r3, #21]
 8004a4a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a50:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a56:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	7f1b      	ldrb	r3, [r3, #28]
 8004a5c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004a5e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a60:	f043 030c 	orr.w	r3, r3, #12
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	e00d      	b.n	8004a84 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	7d5b      	ldrb	r3, [r3, #21]
 8004a6c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a72:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004a78:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	7f1b      	ldrb	r3, [r3, #28]
 8004a7e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7f1b      	ldrb	r3, [r3, #28]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	045b      	lsls	r3, r3, #17
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <HAL_ADC_Init+0x2ac>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	69b9      	ldr	r1, [r7, #24]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fed1 	bl	8004876 <LL_ADC_REG_IsConversionOngoing>
 8004ad4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff fede 	bl	800489c <LL_ADC_INJ_IsConversionOngoing>
 8004ae0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d15f      	bne.n	8004ba8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d15c      	bne.n	8004ba8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	7d1b      	ldrb	r3, [r3, #20]
 8004af2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <HAL_ADC_Init+0x2b0>)
 8004b04:	4013      	ands	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d130      	bne.n	8004b7c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <HAL_ADC_Init+0x2b4>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	0411      	lsls	r1, r2, #16
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b3c:	4311      	orrs	r1, r2
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004b42:	430a      	orrs	r2, r1
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	611a      	str	r2, [r3, #16]
 8004b50:	e01c      	b.n	8004b8c <HAL_ADC_Init+0x2c8>
 8004b52:	bf00      	nop
 8004b54:	24000000 	.word	0x24000000
 8004b58:	053e2d63 	.word	0x053e2d63
 8004b5c:	40022000 	.word	0x40022000
 8004b60:	40022100 	.word	0x40022100
 8004b64:	58026000 	.word	0x58026000
 8004b68:	40022300 	.word	0x40022300
 8004b6c:	58026300 	.word	0x58026300
 8004b70:	fff0c003 	.word	0xfff0c003
 8004b74:	ffffbffc 	.word	0xffffbffc
 8004b78:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fb80 	bl	80052a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10c      	bne.n	8004bca <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f023 010f 	bic.w	r1, r3, #15
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc8:	e007      	b.n	8004bda <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 020f 	bic.w	r2, r2, #15
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	655a      	str	r2, [r3, #84]	; 0x54
 8004bea:	e007      	b.n	8004bfc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	f043 0210 	orr.w	r2, r3, #16
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3724      	adds	r7, #36	; 0x24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd90      	pop	{r4, r7, pc}
 8004c06:	bf00      	nop

08004c08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c08:	b590      	push	{r4, r7, lr}
 8004c0a:	b0a1      	sub	sp, #132	; 0x84
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	4a9d      	ldr	r2, [pc, #628]	; (8004e98 <HAL_ADC_ConfigChannel+0x290>)
 8004c22:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x2a>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e321      	b.n	8005276 <HAL_ADC_ConfigChannel+0x66e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fe19 	bl	8004876 <LL_ADC_REG_IsConversionOngoing>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f040 8306 	bne.w	8005258 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d108      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x62>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	0e9b      	lsrs	r3, r3, #26
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	e016      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x90>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c7a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004c82:	2320      	movs	r3, #32
 8004c84:	e003      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c88:	fab3 f383 	clz	r3, r3
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2201      	movs	r2, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	69d1      	ldr	r1, [r2, #28]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6812      	ldr	r2, [r2, #0]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f7ff fd02 	bl	80046bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fdda 	bl	8004876 <LL_ADC_REG_IsConversionOngoing>
 8004cc2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fde7 	bl	800489c <LL_ADC_INJ_IsConversionOngoing>
 8004cce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 80b3 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f040 80af 	bne.w	8004e3e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f7ff fd11 	bl	8004714 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004cf2:	4b6a      	ldr	r3, [pc, #424]	; (8004e9c <HAL_ADC_ConfigChannel+0x294>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cfe:	d10b      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x110>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	e01d      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x14c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x136>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	695a      	ldr	r2, [r3, #20]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	e00a      	b.n	8004d54 <HAL_ADC_ConfigChannel+0x14c>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d027      	beq.n	8004dae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6919      	ldr	r1, [r3, #16]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6c:	f7ff fc52 	bl	8004614 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6919      	ldr	r1, [r3, #16]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	7e5b      	ldrb	r3, [r3, #25]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0x17e>
 8004d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d84:	e000      	b.n	8004d88 <HAL_ADC_ConfigChannel+0x180>
 8004d86:	2300      	movs	r3, #0
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f7ff fc7c 	bl	8004686 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6919      	ldr	r1, [r3, #16]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	7e1b      	ldrb	r3, [r3, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d102      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x19c>
 8004d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004da2:	e000      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x19e>
 8004da4:	2300      	movs	r3, #0
 8004da6:	461a      	mov	r2, r3
 8004da8:	f7ff fc54 	bl	8004654 <LL_ADC_SetDataRightShift>
 8004dac:	e047      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	069b      	lsls	r3, r3, #26
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d107      	bne.n	8004dd2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	069b      	lsls	r3, r3, #26
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d107      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004df4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dfc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	069b      	lsls	r3, r3, #26
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d107      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e18:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	069b      	lsls	r3, r3, #26
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d107      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004e3c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fd04 	bl	8004850 <LL_ADC_IsEnabled>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 820d 	bne.w	800526a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	f7ff fc85 	bl	800476c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <HAL_ADC_ConfigChannel+0x290>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	f040 8133 	bne.w	80050d4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d110      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x298>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	0e9b      	lsrs	r3, r3, #26
 8004e84:	3301      	adds	r3, #1
 8004e86:	f003 031f 	and.w	r3, r3, #31
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	bf94      	ite	ls
 8004e8e:	2301      	movls	r3, #1
 8004e90:	2300      	movhi	r3, #0
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	e01e      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x2cc>
 8004e96:	bf00      	nop
 8004e98:	47ff0000 	.word	0x47ff0000
 8004e9c:	5c001000 	.word	0x5c001000
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea8:	fa93 f3a3 	rbit	r3, r3
 8004eac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004eb8:	2320      	movs	r3, #32
 8004eba:	e003      	b.n	8004ec4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2b09      	cmp	r3, #9
 8004ecc:	bf94      	ite	ls
 8004ece:	2301      	movls	r3, #1
 8004ed0:	2300      	movhi	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d079      	beq.n	8004fcc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x2ec>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	0e9b      	lsrs	r3, r3, #26
 8004eea:	3301      	adds	r3, #1
 8004eec:	069b      	lsls	r3, r3, #26
 8004eee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ef2:	e015      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x318>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efc:	fa93 f3a3 	rbit	r3, r3
 8004f00:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f04:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	e003      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f12:	fab3 f383 	clz	r3, r3
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	069b      	lsls	r3, r3, #26
 8004f1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d109      	bne.n	8004f40 <HAL_ADC_ConfigChannel+0x338>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	0e9b      	lsrs	r3, r3, #26
 8004f32:	3301      	adds	r3, #1
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2101      	movs	r1, #1
 8004f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f3e:	e017      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x368>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f48:	fa93 f3a3 	rbit	r3, r3
 8004f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004f52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004f58:	2320      	movs	r3, #32
 8004f5a:	e003      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	fab3 f383 	clz	r3, r3
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	3301      	adds	r3, #1
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f70:	ea42 0103 	orr.w	r1, r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x38e>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	3301      	adds	r3, #1
 8004f88:	f003 021f 	and.w	r2, r3, #31
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4413      	add	r3, r2
 8004f92:	051b      	lsls	r3, r3, #20
 8004f94:	e018      	b.n	8004fc8 <HAL_ADC_ConfigChannel+0x3c0>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004fae:	2320      	movs	r3, #32
 8004fb0:	e003      	b.n	8004fba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	fab3 f383 	clz	r3, r3
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	3301      	adds	r3, #1
 8004fbc:	f003 021f 	and.w	r2, r3, #31
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	e07e      	b.n	80050ca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x3e0>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0e9b      	lsrs	r3, r3, #26
 8004fde:	3301      	adds	r3, #1
 8004fe0:	069b      	lsls	r3, r3, #26
 8004fe2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fe6:	e015      	b.n	8005014 <HAL_ADC_ConfigChannel+0x40c>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	fa93 f3a3 	rbit	r3, r3
 8004ff4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005000:	2320      	movs	r3, #32
 8005002:	e003      	b.n	800500c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	fab3 f383 	clz	r3, r3
 800500a:	b2db      	uxtb	r3, r3
 800500c:	3301      	adds	r3, #1
 800500e:	069b      	lsls	r3, r3, #26
 8005010:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x42c>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	0e9b      	lsrs	r3, r3, #26
 8005026:	3301      	adds	r3, #1
 8005028:	f003 031f 	and.w	r3, r3, #31
 800502c:	2101      	movs	r1, #1
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	e017      	b.n	8005064 <HAL_ADC_ConfigChannel+0x45c>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	61bb      	str	r3, [r7, #24]
  return result;
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800504c:	2320      	movs	r3, #32
 800504e:	e003      	b.n	8005058 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	3301      	adds	r3, #1
 800505a:	f003 031f 	and.w	r3, r3, #31
 800505e:	2101      	movs	r1, #1
 8005060:	fa01 f303 	lsl.w	r3, r1, r3
 8005064:	ea42 0103 	orr.w	r1, r2, r3
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005070:	2b00      	cmp	r3, #0
 8005072:	d10d      	bne.n	8005090 <HAL_ADC_ConfigChannel+0x488>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0e9b      	lsrs	r3, r3, #26
 800507a:	3301      	adds	r3, #1
 800507c:	f003 021f 	and.w	r2, r3, #31
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	3b1e      	subs	r3, #30
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800508e:	e01b      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x4c0>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	60fb      	str	r3, [r7, #12]
  return result;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80050a8:	2320      	movs	r3, #32
 80050aa:	e003      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	fab3 f383 	clz	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	3301      	adds	r3, #1
 80050b6:	f003 021f 	and.w	r2, r3, #31
 80050ba:	4613      	mov	r3, r2
 80050bc:	005b      	lsls	r3, r3, #1
 80050be:	4413      	add	r3, r2
 80050c0:	3b1e      	subs	r3, #30
 80050c2:	051b      	lsls	r3, r3, #20
 80050c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050c8:	430b      	orrs	r3, r1
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	6892      	ldr	r2, [r2, #8]
 80050ce:	4619      	mov	r1, r3
 80050d0:	f7ff fb20 	bl	8004714 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f280 80c6 	bge.w	800526a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a67      	ldr	r2, [pc, #412]	; (8005280 <HAL_ADC_ConfigChannel+0x678>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_ADC_ConfigChannel+0x4ea>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a65      	ldr	r2, [pc, #404]	; (8005284 <HAL_ADC_ConfigChannel+0x67c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d101      	bne.n	80050f6 <HAL_ADC_ConfigChannel+0x4ee>
 80050f2:	4b65      	ldr	r3, [pc, #404]	; (8005288 <HAL_ADC_ConfigChannel+0x680>)
 80050f4:	e000      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x4f0>
 80050f6:	4b65      	ldr	r3, [pc, #404]	; (800528c <HAL_ADC_ConfigChannel+0x684>)
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fa7d 	bl	80045f8 <LL_ADC_GetCommonPathInternalCh>
 80050fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a5e      	ldr	r2, [pc, #376]	; (8005280 <HAL_ADC_ConfigChannel+0x678>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d004      	beq.n	8005114 <HAL_ADC_ConfigChannel+0x50c>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a5d      	ldr	r2, [pc, #372]	; (8005284 <HAL_ADC_ConfigChannel+0x67c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10e      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x52a>
 8005114:	485a      	ldr	r0, [pc, #360]	; (8005280 <HAL_ADC_ConfigChannel+0x678>)
 8005116:	f7ff fb9b 	bl	8004850 <LL_ADC_IsEnabled>
 800511a:	4604      	mov	r4, r0
 800511c:	4859      	ldr	r0, [pc, #356]	; (8005284 <HAL_ADC_ConfigChannel+0x67c>)
 800511e:	f7ff fb97 	bl	8004850 <LL_ADC_IsEnabled>
 8005122:	4603      	mov	r3, r0
 8005124:	4323      	orrs	r3, r4
 8005126:	2b00      	cmp	r3, #0
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e008      	b.n	8005144 <HAL_ADC_ConfigChannel+0x53c>
 8005132:	4857      	ldr	r0, [pc, #348]	; (8005290 <HAL_ADC_ConfigChannel+0x688>)
 8005134:	f7ff fb8c 	bl	8004850 <LL_ADC_IsEnabled>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d07d      	beq.n	8005244 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a51      	ldr	r2, [pc, #324]	; (8005294 <HAL_ADC_ConfigChannel+0x68c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d130      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x5ac>
 8005152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d12b      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a4b      	ldr	r2, [pc, #300]	; (8005290 <HAL_ADC_ConfigChannel+0x688>)
 8005162:	4293      	cmp	r3, r2
 8005164:	f040 8081 	bne.w	800526a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a44      	ldr	r2, [pc, #272]	; (8005280 <HAL_ADC_ConfigChannel+0x678>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_ADC_ConfigChannel+0x574>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a43      	ldr	r2, [pc, #268]	; (8005284 <HAL_ADC_ConfigChannel+0x67c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d101      	bne.n	8005180 <HAL_ADC_ConfigChannel+0x578>
 800517c:	4a42      	ldr	r2, [pc, #264]	; (8005288 <HAL_ADC_ConfigChannel+0x680>)
 800517e:	e000      	b.n	8005182 <HAL_ADC_ConfigChannel+0x57a>
 8005180:	4a42      	ldr	r2, [pc, #264]	; (800528c <HAL_ADC_ConfigChannel+0x684>)
 8005182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f7ff fa21 	bl	80045d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005190:	4b41      	ldr	r3, [pc, #260]	; (8005298 <HAL_ADC_ConfigChannel+0x690>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	099b      	lsrs	r3, r3, #6
 8005196:	4a41      	ldr	r2, [pc, #260]	; (800529c <HAL_ADC_ConfigChannel+0x694>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	099b      	lsrs	r3, r3, #6
 800519e:	3301      	adds	r3, #1
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80051a4:	e002      	b.n	80051ac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1f9      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051b2:	e05a      	b.n	800526a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_ADC_ConfigChannel+0x698>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d11e      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x5f4>
 80051be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d119      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a30      	ldr	r2, [pc, #192]	; (8005290 <HAL_ADC_ConfigChannel+0x688>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d14b      	bne.n	800526a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <HAL_ADC_ConfigChannel+0x678>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_ADC_ConfigChannel+0x5de>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a28      	ldr	r2, [pc, #160]	; (8005284 <HAL_ADC_ConfigChannel+0x67c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x5e2>
 80051e6:	4a28      	ldr	r2, [pc, #160]	; (8005288 <HAL_ADC_ConfigChannel+0x680>)
 80051e8:	e000      	b.n	80051ec <HAL_ADC_ConfigChannel+0x5e4>
 80051ea:	4a28      	ldr	r2, [pc, #160]	; (800528c <HAL_ADC_ConfigChannel+0x684>)
 80051ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7ff f9ec 	bl	80045d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051fa:	e036      	b.n	800526a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a28      	ldr	r2, [pc, #160]	; (80052a4 <HAL_ADC_ConfigChannel+0x69c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d131      	bne.n	800526a <HAL_ADC_ConfigChannel+0x662>
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d12c      	bne.n	800526a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <HAL_ADC_ConfigChannel+0x688>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d127      	bne.n	800526a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a18      	ldr	r2, [pc, #96]	; (8005280 <HAL_ADC_ConfigChannel+0x678>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d004      	beq.n	800522e <HAL_ADC_ConfigChannel+0x626>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a16      	ldr	r2, [pc, #88]	; (8005284 <HAL_ADC_ConfigChannel+0x67c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d101      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x62a>
 800522e:	4a16      	ldr	r2, [pc, #88]	; (8005288 <HAL_ADC_ConfigChannel+0x680>)
 8005230:	e000      	b.n	8005234 <HAL_ADC_ConfigChannel+0x62c>
 8005232:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_ADC_ConfigChannel+0x684>)
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800523a:	4619      	mov	r1, r3
 800523c:	4610      	mov	r0, r2
 800523e:	f7ff f9c8 	bl	80045d2 <LL_ADC_SetCommonPathInternalCh>
 8005242:	e012      	b.n	800526a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005256:	e008      	b.n	800526a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005272:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005276:	4618      	mov	r0, r3
 8005278:	3784      	adds	r7, #132	; 0x84
 800527a:	46bd      	mov	sp, r7
 800527c:	bd90      	pop	{r4, r7, pc}
 800527e:	bf00      	nop
 8005280:	40022000 	.word	0x40022000
 8005284:	40022100 	.word	0x40022100
 8005288:	40022300 	.word	0x40022300
 800528c:	58026300 	.word	0x58026300
 8005290:	58026000 	.word	0x58026000
 8005294:	cb840000 	.word	0xcb840000
 8005298:	24000000 	.word	0x24000000
 800529c:	053e2d63 	.word	0x053e2d63
 80052a0:	c7520000 	.word	0xc7520000
 80052a4:	cfb80000 	.word	0xcfb80000

080052a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a79      	ldr	r2, [pc, #484]	; (800549c <ADC_ConfigureBoostMode+0x1f4>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <ADC_ConfigureBoostMode+0x1c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a78      	ldr	r2, [pc, #480]	; (80054a0 <ADC_ConfigureBoostMode+0x1f8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d109      	bne.n	80052d8 <ADC_ConfigureBoostMode+0x30>
 80052c4:	4b77      	ldr	r3, [pc, #476]	; (80054a4 <ADC_ConfigureBoostMode+0x1fc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e008      	b.n	80052ea <ADC_ConfigureBoostMode+0x42>
 80052d8:	4b73      	ldr	r3, [pc, #460]	; (80054a8 <ADC_ConfigureBoostMode+0x200>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf14      	ite	ne
 80052e4:	2301      	movne	r3, #1
 80052e6:	2300      	moveq	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01c      	beq.n	8005328 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80052ee:	f005 fc63 	bl	800abb8 <HAL_RCC_GetHCLKFreq>
 80052f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052fc:	d010      	beq.n	8005320 <ADC_ConfigureBoostMode+0x78>
 80052fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005302:	d871      	bhi.n	80053e8 <ADC_ConfigureBoostMode+0x140>
 8005304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005308:	d002      	beq.n	8005310 <ADC_ConfigureBoostMode+0x68>
 800530a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800530e:	d16b      	bne.n	80053e8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	60fb      	str	r3, [r7, #12]
        break;
 800531e:	e066      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	60fb      	str	r3, [r7, #12]
        break;
 8005326:	e062      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005328:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800532c:	f006 fbe6 	bl	800bafc <HAL_RCCEx_GetPeriphCLKFreq>
 8005330:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800533a:	d051      	beq.n	80053e0 <ADC_ConfigureBoostMode+0x138>
 800533c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005340:	d854      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 8005342:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005346:	d047      	beq.n	80053d8 <ADC_ConfigureBoostMode+0x130>
 8005348:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800534c:	d84e      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 800534e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005352:	d03d      	beq.n	80053d0 <ADC_ConfigureBoostMode+0x128>
 8005354:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005358:	d848      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 800535a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800535e:	d033      	beq.n	80053c8 <ADC_ConfigureBoostMode+0x120>
 8005360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005364:	d842      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 8005366:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800536a:	d029      	beq.n	80053c0 <ADC_ConfigureBoostMode+0x118>
 800536c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005370:	d83c      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 8005372:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005376:	d01a      	beq.n	80053ae <ADC_ConfigureBoostMode+0x106>
 8005378:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800537c:	d836      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 800537e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005382:	d014      	beq.n	80053ae <ADC_ConfigureBoostMode+0x106>
 8005384:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005388:	d830      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 800538a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800538e:	d00e      	beq.n	80053ae <ADC_ConfigureBoostMode+0x106>
 8005390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005394:	d82a      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 8005396:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800539a:	d008      	beq.n	80053ae <ADC_ConfigureBoostMode+0x106>
 800539c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053a0:	d824      	bhi.n	80053ec <ADC_ConfigureBoostMode+0x144>
 80053a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053a6:	d002      	beq.n	80053ae <ADC_ConfigureBoostMode+0x106>
 80053a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053ac:	d11e      	bne.n	80053ec <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	0c9b      	lsrs	r3, r3, #18
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053bc:	60fb      	str	r3, [r7, #12]
        break;
 80053be:	e016      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	091b      	lsrs	r3, r3, #4
 80053c4:	60fb      	str	r3, [r7, #12]
        break;
 80053c6:	e012      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	60fb      	str	r3, [r7, #12]
        break;
 80053ce:	e00e      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	099b      	lsrs	r3, r3, #6
 80053d4:	60fb      	str	r3, [r7, #12]
        break;
 80053d6:	e00a      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	09db      	lsrs	r3, r3, #7
 80053dc:	60fb      	str	r3, [r7, #12]
        break;
 80053de:	e006      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	60fb      	str	r3, [r7, #12]
        break;
 80053e6:	e002      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
        break;
 80053e8:	bf00      	nop
 80053ea:	e000      	b.n	80053ee <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80053ec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80053ee:	f7ff f8d1 	bl	8004594 <HAL_GetREVID>
 80053f2:	4603      	mov	r3, r0
 80053f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d815      	bhi.n	8005428 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4a2b      	ldr	r2, [pc, #172]	; (80054ac <ADC_ConfigureBoostMode+0x204>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d908      	bls.n	8005416 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005412:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005414:	e03e      	b.n	8005494 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005424:	609a      	str	r2, [r3, #8]
}
 8005426:	e035      	b.n	8005494 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <ADC_ConfigureBoostMode+0x208>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d808      	bhi.n	8005448 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005444:	609a      	str	r2, [r3, #8]
}
 8005446:	e025      	b.n	8005494 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <ADC_ConfigureBoostMode+0x20c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d80a      	bhi.n	8005466 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	e016      	b.n	8005494 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <ADC_ConfigureBoostMode+0x210>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d80a      	bhi.n	8005484 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005480:	609a      	str	r2, [r3, #8]
}
 8005482:	e007      	b.n	8005494 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005492:	609a      	str	r2, [r3, #8]
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40022000 	.word	0x40022000
 80054a0:	40022100 	.word	0x40022100
 80054a4:	40022300 	.word	0x40022300
 80054a8:	58026300 	.word	0x58026300
 80054ac:	01312d00 	.word	0x01312d00
 80054b0:	005f5e10 	.word	0x005f5e10
 80054b4:	00bebc20 	.word	0x00bebc20
 80054b8:	017d7840 	.word	0x017d7840

080054bc <LL_ADC_IsEnabled>:
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <LL_ADC_IsEnabled+0x18>
 80054d0:	2301      	movs	r3, #1
 80054d2:	e000      	b.n	80054d6 <LL_ADC_IsEnabled+0x1a>
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80054e2:	b480      	push	{r7}
 80054e4:	b083      	sub	sp, #12
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d101      	bne.n	80054fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b09f      	sub	sp, #124	; 0x7c
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800551e:	2b01      	cmp	r3, #1
 8005520:	d101      	bne.n	8005526 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005522:	2302      	movs	r3, #2
 8005524:	e0be      	b.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800552e:	2300      	movs	r3, #0
 8005530:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005532:	2300      	movs	r3, #0
 8005534:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a5c      	ldr	r2, [pc, #368]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d102      	bne.n	8005546 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005540:	4b5b      	ldr	r3, [pc, #364]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	e001      	b.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10b      	bne.n	8005568 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005554:	f043 0220 	orr.w	r2, r3, #32
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e09d      	b.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff ffb9 	bl	80054e2 <LL_ADC_REG_IsConversionOngoing>
 8005570:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ffb3 	bl	80054e2 <LL_ADC_REG_IsConversionOngoing>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d17f      	bne.n	8005682 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005584:	2b00      	cmp	r3, #0
 8005586:	d17c      	bne.n	8005682 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a47      	ldr	r2, [pc, #284]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d004      	beq.n	800559c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a46      	ldr	r2, [pc, #280]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d101      	bne.n	80055a0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800559e:	e000      	b.n	80055a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80055a0:	4b45      	ldr	r3, [pc, #276]	; (80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d039      	beq.n	8005620 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80055ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055bc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a38      	ldr	r2, [pc, #224]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10e      	bne.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80055d2:	4836      	ldr	r0, [pc, #216]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055d4:	f7ff ff72 	bl	80054bc <LL_ADC_IsEnabled>
 80055d8:	4604      	mov	r4, r0
 80055da:	4835      	ldr	r0, [pc, #212]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055dc:	f7ff ff6e 	bl	80054bc <LL_ADC_IsEnabled>
 80055e0:	4603      	mov	r3, r0
 80055e2:	4323      	orrs	r3, r4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf0c      	ite	eq
 80055e8:	2301      	moveq	r3, #1
 80055ea:	2300      	movne	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80055f0:	4832      	ldr	r0, [pc, #200]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80055f2:	f7ff ff63 	bl	80054bc <LL_ADC_IsEnabled>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d047      	beq.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800560c:	4013      	ands	r3, r2
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	6892      	ldr	r2, [r2, #8]
 8005616:	430a      	orrs	r2, r1
 8005618:	431a      	orrs	r2, r3
 800561a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800561e:	e03a      	b.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800562a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1e      	ldr	r2, [pc, #120]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10e      	bne.n	800565e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005640:	481a      	ldr	r0, [pc, #104]	; (80056ac <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005642:	f7ff ff3b 	bl	80054bc <LL_ADC_IsEnabled>
 8005646:	4604      	mov	r4, r0
 8005648:	4819      	ldr	r0, [pc, #100]	; (80056b0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800564a:	f7ff ff37 	bl	80054bc <LL_ADC_IsEnabled>
 800564e:	4603      	mov	r3, r0
 8005650:	4323      	orrs	r3, r4
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf0c      	ite	eq
 8005656:	2301      	moveq	r3, #1
 8005658:	2300      	movne	r3, #0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	e008      	b.n	8005670 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800565e:	4817      	ldr	r0, [pc, #92]	; (80056bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005660:	f7ff ff2c 	bl	80054bc <LL_ADC_IsEnabled>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf0c      	ite	eq
 800566a:	2301      	moveq	r3, #1
 800566c:	2300      	movne	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d010      	beq.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800567a:	4013      	ands	r3, r2
 800567c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800567e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005680:	e009      	b.n	8005696 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005694:	e000      	b.n	8005698 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005696:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	377c      	adds	r7, #124	; 0x7c
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd90      	pop	{r4, r7, pc}
 80056ac:	40022000 	.word	0x40022000
 80056b0:	40022100 	.word	0x40022100
 80056b4:	40022300 	.word	0x40022300
 80056b8:	58026300 	.word	0x58026300
 80056bc:	58026000 	.word	0x58026000
 80056c0:	fffff0e0 	.word	0xfffff0e0

080056c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <__NVIC_SetPriorityGrouping+0x40>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056e0:	4013      	ands	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80056ec:	4b06      	ldr	r3, [pc, #24]	; (8005708 <__NVIC_SetPriorityGrouping+0x44>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056f2:	4a04      	ldr	r2, [pc, #16]	; (8005704 <__NVIC_SetPriorityGrouping+0x40>)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	60d3      	str	r3, [r2, #12]
}
 80056f8:	bf00      	nop
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	e000ed00 	.word	0xe000ed00
 8005708:	05fa0000 	.word	0x05fa0000

0800570c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005710:	4b04      	ldr	r3, [pc, #16]	; (8005724 <__NVIC_GetPriorityGrouping+0x18>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	0a1b      	lsrs	r3, r3, #8
 8005716:	f003 0307 	and.w	r3, r3, #7
}
 800571a:	4618      	mov	r0, r3
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00

08005728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005736:	2b00      	cmp	r3, #0
 8005738:	db0b      	blt.n	8005752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	f003 021f 	and.w	r2, r3, #31
 8005740:	4907      	ldr	r1, [pc, #28]	; (8005760 <__NVIC_EnableIRQ+0x38>)
 8005742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2001      	movs	r0, #1
 800574a:	fa00 f202 	lsl.w	r2, r0, r2
 800574e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000e100 	.word	0xe000e100

08005764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	; (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f1c3 0307 	rsb	r3, r3, #7
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	bf28      	it	cs
 80057d6:	2304      	movcs	r3, #4
 80057d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3304      	adds	r3, #4
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d902      	bls.n	80057e8 <NVIC_EncodePriority+0x30>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3b03      	subs	r3, #3
 80057e6:	e000      	b.n	80057ea <NVIC_EncodePriority+0x32>
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	401a      	ands	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005800:	f04f 31ff 	mov.w	r1, #4294967295
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43d9      	mvns	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005810:	4313      	orrs	r3, r2
         );
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3b01      	subs	r3, #1
 800582c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005830:	d301      	bcc.n	8005836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005832:	2301      	movs	r3, #1
 8005834:	e00f      	b.n	8005856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <SysTick_Config+0x40>)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3b01      	subs	r3, #1
 800583c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800583e:	210f      	movs	r1, #15
 8005840:	f04f 30ff 	mov.w	r0, #4294967295
 8005844:	f7ff ff8e 	bl	8005764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <SysTick_Config+0x40>)
 800584a:	2200      	movs	r2, #0
 800584c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800584e:	4b04      	ldr	r3, [pc, #16]	; (8005860 <SysTick_Config+0x40>)
 8005850:	2207      	movs	r2, #7
 8005852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000e010 	.word	0xe000e010

08005864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7ff ff29 	bl	80056c4 <__NVIC_SetPriorityGrouping>
}
 8005872:	bf00      	nop
 8005874:	3708      	adds	r7, #8
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b086      	sub	sp, #24
 800587e:	af00      	add	r7, sp, #0
 8005880:	4603      	mov	r3, r0
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
 8005886:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005888:	f7ff ff40 	bl	800570c <__NVIC_GetPriorityGrouping>
 800588c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f7ff ff90 	bl	80057b8 <NVIC_EncodePriority>
 8005898:	4602      	mov	r2, r0
 800589a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff5f 	bl	8005764 <__NVIC_SetPriority>
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4603      	mov	r3, r0
 80058b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff ff33 	bl	8005728 <__NVIC_EnableIRQ>
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ffa4 	bl	8005820 <SysTick_Config>
 80058d8:	4603      	mov	r3, r0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e054      	b.n	80059a0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7f5b      	ldrb	r3, [r3, #29]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d105      	bne.n	800590c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc fd36 	bl	8002378 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	791b      	ldrb	r3, [r3, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10c      	bne.n	8005934 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a22      	ldr	r2, [pc, #136]	; (80059a8 <HAL_CRC_Init+0xc4>)
 8005920:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0218 	bic.w	r2, r2, #24
 8005930:	609a      	str	r2, [r3, #8]
 8005932:	e00c      	b.n	800594e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6899      	ldr	r1, [r3, #8]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	461a      	mov	r2, r3
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 f948 	bl	8005bd4 <HAL_CRCEx_Polynomial_Set>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e028      	b.n	80059a0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	795b      	ldrb	r3, [r3, #5]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	611a      	str	r2, [r3, #16]
 8005960:	e004      	b.n	800596c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6912      	ldr	r2, [r2, #16]
 800596a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695a      	ldr	r2, [r3, #20]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699a      	ldr	r2, [r3, #24]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	04c11db7 	.word	0x04c11db7

080059ac <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2202      	movs	r2, #2
 80059c0:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f042 0201 	orr.w	r2, r2, #1
 80059d0:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d006      	beq.n	80059e8 <HAL_CRC_Calculate+0x3c>
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d829      	bhi.n	8005a32 <HAL_CRC_Calculate+0x86>
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d019      	beq.n	8005a16 <HAL_CRC_Calculate+0x6a>
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d01e      	beq.n	8005a24 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80059e6:	e024      	b.n	8005a32 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e00a      	b.n	8005a04 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	441a      	add	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6812      	ldr	r2, [r2, #0]
 80059fc:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3301      	adds	r3, #1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d3f0      	bcc.n	80059ee <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	613b      	str	r3, [r7, #16]
      break;
 8005a14:	e00e      	b.n	8005a34 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f812 	bl	8005a44 <CRC_Handle_8>
 8005a20:	6138      	str	r0, [r7, #16]
      break;
 8005a22:	e007      	b.n	8005a34 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f899 	bl	8005b60 <CRC_Handle_16>
 8005a2e:	6138      	str	r0, [r7, #16]
      break;
 8005a30:	e000      	b.n	8005a34 <HAL_CRC_Calculate+0x88>
      break;
 8005a32:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005a3a:	693b      	ldr	r3, [r7, #16]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b089      	sub	sp, #36	; 0x24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005a50:	2300      	movs	r3, #0
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	e023      	b.n	8005a9e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	3301      	adds	r3, #1
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	440b      	add	r3, r1
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005a70:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	3302      	adds	r3, #2
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	440b      	add	r3, r1
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005a80:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	3303      	adds	r3, #3
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	440b      	add	r3, r1
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005a94:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005a96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	089b      	lsrs	r3, r3, #2
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d3d6      	bcc.n	8005a56 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d04d      	beq.n	8005b4e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f003 0303 	and.w	r3, r3, #3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d107      	bne.n	8005acc <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	6812      	ldr	r2, [r2, #0]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d116      	bne.n	8005b04 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4413      	add	r3, r2
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	b21a      	sxth	r2, r3
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	3301      	adds	r3, #1
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	440b      	add	r3, r1
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b21b      	sxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	8b7a      	ldrh	r2, [r7, #26]
 8005b02:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	d11f      	bne.n	8005b4e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	b21a      	sxth	r2, r3
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	3301      	adds	r3, #1
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	440b      	add	r3, r1
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b21b      	sxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	8b7a      	ldrh	r2, [r7, #26]
 8005b3a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	3302      	adds	r3, #2
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	4413      	add	r3, r2
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3724      	adds	r7, #36	; 0x24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e013      	b.n	8005b9a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4413      	add	r3, r2
 8005b7a:	881b      	ldrh	r3, [r3, #0]
 8005b7c:	041a      	lsls	r2, r3, #16
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	3302      	adds	r3, #2
 8005b84:	68b9      	ldr	r1, [r7, #8]
 8005b86:	440b      	add	r3, r1
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	3301      	adds	r3, #1
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d3e6      	bcc.n	8005b72 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d009      	beq.n	8005bc2 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	4413      	add	r3, r2
 8005bbc:	881a      	ldrh	r2, [r3, #0]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005be4:	231f      	movs	r3, #31
 8005be6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005be8:	bf00      	nop
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1e5a      	subs	r2, r3, #1
 8005bee:	613a      	str	r2, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <HAL_CRCEx_Polynomial_Set+0x34>
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b18      	cmp	r3, #24
 8005c0c:	d846      	bhi.n	8005c9c <HAL_CRCEx_Polynomial_Set+0xc8>
 8005c0e:	a201      	add	r2, pc, #4	; (adr r2, 8005c14 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c14:	08005ca3 	.word	0x08005ca3
 8005c18:	08005c9d 	.word	0x08005c9d
 8005c1c:	08005c9d 	.word	0x08005c9d
 8005c20:	08005c9d 	.word	0x08005c9d
 8005c24:	08005c9d 	.word	0x08005c9d
 8005c28:	08005c9d 	.word	0x08005c9d
 8005c2c:	08005c9d 	.word	0x08005c9d
 8005c30:	08005c9d 	.word	0x08005c9d
 8005c34:	08005c91 	.word	0x08005c91
 8005c38:	08005c9d 	.word	0x08005c9d
 8005c3c:	08005c9d 	.word	0x08005c9d
 8005c40:	08005c9d 	.word	0x08005c9d
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005c9d 	.word	0x08005c9d
 8005c50:	08005c9d 	.word	0x08005c9d
 8005c54:	08005c85 	.word	0x08005c85
 8005c58:	08005c9d 	.word	0x08005c9d
 8005c5c:	08005c9d 	.word	0x08005c9d
 8005c60:	08005c9d 	.word	0x08005c9d
 8005c64:	08005c9d 	.word	0x08005c9d
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005c9d 	.word	0x08005c9d
 8005c70:	08005c9d 	.word	0x08005c9d
 8005c74:	08005c79 	.word	0x08005c79
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2b06      	cmp	r3, #6
 8005c7c:	d913      	bls.n	8005ca6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c82:	e010      	b.n	8005ca6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b07      	cmp	r3, #7
 8005c88:	d90f      	bls.n	8005caa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c8e:	e00c      	b.n	8005caa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d90b      	bls.n	8005cae <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c9a:	e008      	b.n	8005cae <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca0:	e006      	b.n	8005cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ca2:	bf00      	nop
 8005ca4:	e004      	b.n	8005cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ca6:	bf00      	nop
 8005ca8:	e002      	b.n	8005cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005caa:	bf00      	nop
 8005cac:	e000      	b.n	8005cb0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cae:	bf00      	nop
  }
  if (status == HAL_OK)
 8005cb0:	7dfb      	ldrb	r3, [r7, #23]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f023 0118 	bic.w	r1, r3, #24
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005ce8:	f7fe fc24 	bl	8004534 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e316      	b.n	8006326 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a66      	ldr	r2, [pc, #408]	; (8005e98 <HAL_DMA_Init+0x1b8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d04a      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a65      	ldr	r2, [pc, #404]	; (8005e9c <HAL_DMA_Init+0x1bc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d045      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a63      	ldr	r2, [pc, #396]	; (8005ea0 <HAL_DMA_Init+0x1c0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a62      	ldr	r2, [pc, #392]	; (8005ea4 <HAL_DMA_Init+0x1c4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d03b      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a60      	ldr	r2, [pc, #384]	; (8005ea8 <HAL_DMA_Init+0x1c8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d036      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a5f      	ldr	r2, [pc, #380]	; (8005eac <HAL_DMA_Init+0x1cc>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d031      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a5d      	ldr	r2, [pc, #372]	; (8005eb0 <HAL_DMA_Init+0x1d0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02c      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5c      	ldr	r2, [pc, #368]	; (8005eb4 <HAL_DMA_Init+0x1d4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d027      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5a      	ldr	r2, [pc, #360]	; (8005eb8 <HAL_DMA_Init+0x1d8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a59      	ldr	r2, [pc, #356]	; (8005ebc <HAL_DMA_Init+0x1dc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a57      	ldr	r2, [pc, #348]	; (8005ec0 <HAL_DMA_Init+0x1e0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a56      	ldr	r2, [pc, #344]	; (8005ec4 <HAL_DMA_Init+0x1e4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a54      	ldr	r2, [pc, #336]	; (8005ec8 <HAL_DMA_Init+0x1e8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a53      	ldr	r2, [pc, #332]	; (8005ecc <HAL_DMA_Init+0x1ec>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a51      	ldr	r2, [pc, #324]	; (8005ed0 <HAL_DMA_Init+0x1f0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_Init+0xb8>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a50      	ldr	r2, [pc, #320]	; (8005ed4 <HAL_DMA_Init+0x1f4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d101      	bne.n	8005d9c <HAL_DMA_Init+0xbc>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <HAL_DMA_Init+0xbe>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 813b 	beq.w	800601a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <HAL_DMA_Init+0x1b8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d04a      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a36      	ldr	r2, [pc, #216]	; (8005e9c <HAL_DMA_Init+0x1bc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d045      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a34      	ldr	r2, [pc, #208]	; (8005ea0 <HAL_DMA_Init+0x1c0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d040      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a33      	ldr	r2, [pc, #204]	; (8005ea4 <HAL_DMA_Init+0x1c4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d03b      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a31      	ldr	r2, [pc, #196]	; (8005ea8 <HAL_DMA_Init+0x1c8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d036      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a30      	ldr	r2, [pc, #192]	; (8005eac <HAL_DMA_Init+0x1cc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d031      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2e      	ldr	r2, [pc, #184]	; (8005eb0 <HAL_DMA_Init+0x1d0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02c      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2d      	ldr	r2, [pc, #180]	; (8005eb4 <HAL_DMA_Init+0x1d4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d027      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a2b      	ldr	r2, [pc, #172]	; (8005eb8 <HAL_DMA_Init+0x1d8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d022      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <HAL_DMA_Init+0x1dc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d01d      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <HAL_DMA_Init+0x1e0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d018      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <HAL_DMA_Init+0x1e4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a25      	ldr	r2, [pc, #148]	; (8005ec8 <HAL_DMA_Init+0x1e8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d00e      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a24      	ldr	r2, [pc, #144]	; (8005ecc <HAL_DMA_Init+0x1ec>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a22      	ldr	r2, [pc, #136]	; (8005ed0 <HAL_DMA_Init+0x1f0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d004      	beq.n	8005e54 <HAL_DMA_Init+0x174>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <HAL_DMA_Init+0x1f4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d108      	bne.n	8005e66 <HAL_DMA_Init+0x186>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	e007      	b.n	8005e76 <HAL_DMA_Init+0x196>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e76:	e02f      	b.n	8005ed8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e78:	f7fe fb5c 	bl	8004534 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d928      	bls.n	8005ed8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2203      	movs	r2, #3
 8005e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e246      	b.n	8006326 <HAL_DMA_Init+0x646>
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1c8      	bne.n	8005e78 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	4b83      	ldr	r3, [pc, #524]	; (8006100 <HAL_DMA_Init+0x420>)
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005efe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f0a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f16:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d107      	bne.n	8005f3c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	4313      	orrs	r3, r2
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f3c:	4b71      	ldr	r3, [pc, #452]	; (8006104 <HAL_DMA_Init+0x424>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b71      	ldr	r3, [pc, #452]	; (8006108 <HAL_DMA_Init+0x428>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f48:	d328      	bcc.n	8005f9c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b28      	cmp	r3, #40	; 0x28
 8005f50:	d903      	bls.n	8005f5a <HAL_DMA_Init+0x27a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b2e      	cmp	r3, #46	; 0x2e
 8005f58:	d917      	bls.n	8005f8a <HAL_DMA_Init+0x2aa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f60:	d903      	bls.n	8005f6a <HAL_DMA_Init+0x28a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b42      	cmp	r3, #66	; 0x42
 8005f68:	d90f      	bls.n	8005f8a <HAL_DMA_Init+0x2aa>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b46      	cmp	r3, #70	; 0x46
 8005f70:	d903      	bls.n	8005f7a <HAL_DMA_Init+0x29a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b48      	cmp	r3, #72	; 0x48
 8005f78:	d907      	bls.n	8005f8a <HAL_DMA_Init+0x2aa>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b4e      	cmp	r3, #78	; 0x4e
 8005f80:	d905      	bls.n	8005f8e <HAL_DMA_Init+0x2ae>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b52      	cmp	r3, #82	; 0x52
 8005f88:	d801      	bhi.n	8005f8e <HAL_DMA_Init+0x2ae>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <HAL_DMA_Init+0x2b0>
 8005f8e:	2300      	movs	r3, #0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f9a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0307 	bic.w	r3, r3, #7
 8005fb2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b04      	cmp	r3, #4
 8005fc4:	d117      	bne.n	8005ff6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00e      	beq.n	8005ff6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f001 f9b9 	bl	8007350 <DMA_CheckFifoParam>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2240      	movs	r2, #64	; 0x40
 8005fe8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e197      	b.n	8006326 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 f8f4 	bl	80071ec <DMA_CalcBaseAndBitshift>
 8006004:	4603      	mov	r3, r0
 8006006:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	223f      	movs	r2, #63	; 0x3f
 8006012:	409a      	lsls	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	609a      	str	r2, [r3, #8]
 8006018:	e0cd      	b.n	80061b6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <HAL_DMA_Init+0x42c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d022      	beq.n	800606a <HAL_DMA_Init+0x38a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a39      	ldr	r2, [pc, #228]	; (8006110 <HAL_DMA_Init+0x430>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01d      	beq.n	800606a <HAL_DMA_Init+0x38a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a38      	ldr	r2, [pc, #224]	; (8006114 <HAL_DMA_Init+0x434>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_DMA_Init+0x38a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a36      	ldr	r2, [pc, #216]	; (8006118 <HAL_DMA_Init+0x438>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_DMA_Init+0x38a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a35      	ldr	r2, [pc, #212]	; (800611c <HAL_DMA_Init+0x43c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_DMA_Init+0x38a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a33      	ldr	r2, [pc, #204]	; (8006120 <HAL_DMA_Init+0x440>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_DMA_Init+0x38a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a32      	ldr	r2, [pc, #200]	; (8006124 <HAL_DMA_Init+0x444>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_DMA_Init+0x38a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a30      	ldr	r2, [pc, #192]	; (8006128 <HAL_DMA_Init+0x448>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d101      	bne.n	800606e <HAL_DMA_Init+0x38e>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <HAL_DMA_Init+0x390>
 800606e:	2300      	movs	r3, #0
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 8097 	beq.w	80061a4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a24      	ldr	r2, [pc, #144]	; (800610c <HAL_DMA_Init+0x42c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d021      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a22      	ldr	r2, [pc, #136]	; (8006110 <HAL_DMA_Init+0x430>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d01c      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_DMA_Init+0x434>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d017      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_DMA_Init+0x438>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d012      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_DMA_Init+0x43c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00d      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <HAL_DMA_Init+0x440>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d008      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_DMA_Init+0x444>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <HAL_DMA_Init+0x3e4>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a19      	ldr	r2, [pc, #100]	; (8006128 <HAL_DMA_Init+0x448>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_DMA_Init+0x44c>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d020      	beq.n	8006130 <HAL_DMA_Init+0x450>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b80      	cmp	r3, #128	; 0x80
 80060f4:	d102      	bne.n	80060fc <HAL_DMA_Init+0x41c>
 80060f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060fa:	e01a      	b.n	8006132 <HAL_DMA_Init+0x452>
 80060fc:	2300      	movs	r3, #0
 80060fe:	e018      	b.n	8006132 <HAL_DMA_Init+0x452>
 8006100:	fe10803f 	.word	0xfe10803f
 8006104:	5c001000 	.word	0x5c001000
 8006108:	ffff0000 	.word	0xffff0000
 800610c:	58025408 	.word	0x58025408
 8006110:	5802541c 	.word	0x5802541c
 8006114:	58025430 	.word	0x58025430
 8006118:	58025444 	.word	0x58025444
 800611c:	58025458 	.word	0x58025458
 8006120:	5802546c 	.word	0x5802546c
 8006124:	58025480 	.word	0x58025480
 8006128:	58025494 	.word	0x58025494
 800612c:	fffe000f 	.word	0xfffe000f
 8006130:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68d2      	ldr	r2, [r2, #12]
 8006136:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006140:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006148:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006150:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006158:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006160:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	4b6e      	ldr	r3, [pc, #440]	; (8006330 <HAL_DMA_Init+0x650>)
 8006178:	4413      	add	r3, r2
 800617a:	4a6e      	ldr	r2, [pc, #440]	; (8006334 <HAL_DMA_Init+0x654>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	091b      	lsrs	r3, r3, #4
 8006182:	009a      	lsls	r2, r3, #2
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 f82f 	bl	80071ec <DMA_CalcBaseAndBitshift>
 800618e:	4603      	mov	r3, r0
 8006190:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	2201      	movs	r2, #1
 800619c:	409a      	lsls	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	e008      	b.n	80061b6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2240      	movs	r2, #64	; 0x40
 80061a8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2203      	movs	r2, #3
 80061ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e0b7      	b.n	8006326 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a5f      	ldr	r2, [pc, #380]	; (8006338 <HAL_DMA_Init+0x658>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d072      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5d      	ldr	r2, [pc, #372]	; (800633c <HAL_DMA_Init+0x65c>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d06d      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a5c      	ldr	r2, [pc, #368]	; (8006340 <HAL_DMA_Init+0x660>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d068      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a5a      	ldr	r2, [pc, #360]	; (8006344 <HAL_DMA_Init+0x664>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d063      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a59      	ldr	r2, [pc, #356]	; (8006348 <HAL_DMA_Init+0x668>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d05e      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a57      	ldr	r2, [pc, #348]	; (800634c <HAL_DMA_Init+0x66c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d059      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a56      	ldr	r2, [pc, #344]	; (8006350 <HAL_DMA_Init+0x670>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d054      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a54      	ldr	r2, [pc, #336]	; (8006354 <HAL_DMA_Init+0x674>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d04f      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a53      	ldr	r2, [pc, #332]	; (8006358 <HAL_DMA_Init+0x678>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d04a      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a51      	ldr	r2, [pc, #324]	; (800635c <HAL_DMA_Init+0x67c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d045      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a50      	ldr	r2, [pc, #320]	; (8006360 <HAL_DMA_Init+0x680>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d040      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4e      	ldr	r2, [pc, #312]	; (8006364 <HAL_DMA_Init+0x684>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d03b      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4d      	ldr	r2, [pc, #308]	; (8006368 <HAL_DMA_Init+0x688>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d036      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4b      	ldr	r2, [pc, #300]	; (800636c <HAL_DMA_Init+0x68c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d031      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a4a      	ldr	r2, [pc, #296]	; (8006370 <HAL_DMA_Init+0x690>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d02c      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a48      	ldr	r2, [pc, #288]	; (8006374 <HAL_DMA_Init+0x694>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d027      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a47      	ldr	r2, [pc, #284]	; (8006378 <HAL_DMA_Init+0x698>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d022      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a45      	ldr	r2, [pc, #276]	; (800637c <HAL_DMA_Init+0x69c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01d      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a44      	ldr	r2, [pc, #272]	; (8006380 <HAL_DMA_Init+0x6a0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d018      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a42      	ldr	r2, [pc, #264]	; (8006384 <HAL_DMA_Init+0x6a4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a41      	ldr	r2, [pc, #260]	; (8006388 <HAL_DMA_Init+0x6a8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00e      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a3f      	ldr	r2, [pc, #252]	; (800638c <HAL_DMA_Init+0x6ac>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d009      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a3e      	ldr	r2, [pc, #248]	; (8006390 <HAL_DMA_Init+0x6b0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d004      	beq.n	80062a6 <HAL_DMA_Init+0x5c6>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a3c      	ldr	r2, [pc, #240]	; (8006394 <HAL_DMA_Init+0x6b4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d101      	bne.n	80062aa <HAL_DMA_Init+0x5ca>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <HAL_DMA_Init+0x5cc>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d032      	beq.n	8006316 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f001 f8c9 	bl	8007448 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d102      	bne.n	80062c4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062d8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d010      	beq.n	8006304 <HAL_DMA_Init+0x624>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d80c      	bhi.n	8006304 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 f946 	bl	800757c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	e008      	b.n	8006316 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	a7fdabf8 	.word	0xa7fdabf8
 8006334:	cccccccd 	.word	0xcccccccd
 8006338:	40020010 	.word	0x40020010
 800633c:	40020028 	.word	0x40020028
 8006340:	40020040 	.word	0x40020040
 8006344:	40020058 	.word	0x40020058
 8006348:	40020070 	.word	0x40020070
 800634c:	40020088 	.word	0x40020088
 8006350:	400200a0 	.word	0x400200a0
 8006354:	400200b8 	.word	0x400200b8
 8006358:	40020410 	.word	0x40020410
 800635c:	40020428 	.word	0x40020428
 8006360:	40020440 	.word	0x40020440
 8006364:	40020458 	.word	0x40020458
 8006368:	40020470 	.word	0x40020470
 800636c:	40020488 	.word	0x40020488
 8006370:	400204a0 	.word	0x400204a0
 8006374:	400204b8 	.word	0x400204b8
 8006378:	58025408 	.word	0x58025408
 800637c:	5802541c 	.word	0x5802541c
 8006380:	58025430 	.word	0x58025430
 8006384:	58025444 	.word	0x58025444
 8006388:	58025458 	.word	0x58025458
 800638c:	5802546c 	.word	0x5802546c
 8006390:	58025480 	.word	0x58025480
 8006394:	58025494 	.word	0x58025494

08006398 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063a4:	4b67      	ldr	r3, [pc, #412]	; (8006544 <HAL_DMA_IRQHandler+0x1ac>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a67      	ldr	r2, [pc, #412]	; (8006548 <HAL_DMA_IRQHandler+0x1b0>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0a9b      	lsrs	r3, r3, #10
 80063b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a5f      	ldr	r2, [pc, #380]	; (800654c <HAL_DMA_IRQHandler+0x1b4>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a5d      	ldr	r2, [pc, #372]	; (8006550 <HAL_DMA_IRQHandler+0x1b8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a5c      	ldr	r2, [pc, #368]	; (8006554 <HAL_DMA_IRQHandler+0x1bc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d040      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a5a      	ldr	r2, [pc, #360]	; (8006558 <HAL_DMA_IRQHandler+0x1c0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a59      	ldr	r2, [pc, #356]	; (800655c <HAL_DMA_IRQHandler+0x1c4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d036      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a57      	ldr	r2, [pc, #348]	; (8006560 <HAL_DMA_IRQHandler+0x1c8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a56      	ldr	r2, [pc, #344]	; (8006564 <HAL_DMA_IRQHandler+0x1cc>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d02c      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a54      	ldr	r2, [pc, #336]	; (8006568 <HAL_DMA_IRQHandler+0x1d0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d027      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a53      	ldr	r2, [pc, #332]	; (800656c <HAL_DMA_IRQHandler+0x1d4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a51      	ldr	r2, [pc, #324]	; (8006570 <HAL_DMA_IRQHandler+0x1d8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a50      	ldr	r2, [pc, #320]	; (8006574 <HAL_DMA_IRQHandler+0x1dc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d018      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a4e      	ldr	r2, [pc, #312]	; (8006578 <HAL_DMA_IRQHandler+0x1e0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a4d      	ldr	r2, [pc, #308]	; (800657c <HAL_DMA_IRQHandler+0x1e4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a4b      	ldr	r2, [pc, #300]	; (8006580 <HAL_DMA_IRQHandler+0x1e8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a4a      	ldr	r2, [pc, #296]	; (8006584 <HAL_DMA_IRQHandler+0x1ec>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_DMA_IRQHandler+0xd2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a48      	ldr	r2, [pc, #288]	; (8006588 <HAL_DMA_IRQHandler+0x1f0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d101      	bne.n	800646e <HAL_DMA_IRQHandler+0xd6>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <HAL_DMA_IRQHandler+0xd8>
 800646e:	2300      	movs	r3, #0
 8006470:	2b00      	cmp	r3, #0
 8006472:	f000 842b 	beq.w	8006ccc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800647a:	f003 031f 	and.w	r3, r3, #31
 800647e:	2208      	movs	r2, #8
 8006480:	409a      	lsls	r2, r3
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	4013      	ands	r3, r2
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 80a2 	beq.w	80065d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2e      	ldr	r2, [pc, #184]	; (800654c <HAL_DMA_IRQHandler+0x1b4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d04a      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <HAL_DMA_IRQHandler+0x1b8>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d045      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a2b      	ldr	r2, [pc, #172]	; (8006554 <HAL_DMA_IRQHandler+0x1bc>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d040      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <HAL_DMA_IRQHandler+0x1c0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d03b      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a28      	ldr	r2, [pc, #160]	; (800655c <HAL_DMA_IRQHandler+0x1c4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d036      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a27      	ldr	r2, [pc, #156]	; (8006560 <HAL_DMA_IRQHandler+0x1c8>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d031      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a25      	ldr	r2, [pc, #148]	; (8006564 <HAL_DMA_IRQHandler+0x1cc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d02c      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a24      	ldr	r2, [pc, #144]	; (8006568 <HAL_DMA_IRQHandler+0x1d0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d027      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a22      	ldr	r2, [pc, #136]	; (800656c <HAL_DMA_IRQHandler+0x1d4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d022      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a21      	ldr	r2, [pc, #132]	; (8006570 <HAL_DMA_IRQHandler+0x1d8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d01d      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <HAL_DMA_IRQHandler+0x1dc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d018      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <HAL_DMA_IRQHandler+0x1e0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d013      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a1c      	ldr	r2, [pc, #112]	; (800657c <HAL_DMA_IRQHandler+0x1e4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d00e      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <HAL_DMA_IRQHandler+0x1e8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d009      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a19      	ldr	r2, [pc, #100]	; (8006584 <HAL_DMA_IRQHandler+0x1ec>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d004      	beq.n	800652c <HAL_DMA_IRQHandler+0x194>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_DMA_IRQHandler+0x1f0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d12f      	bne.n	800658c <HAL_DMA_IRQHandler+0x1f4>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	e02e      	b.n	80065a0 <HAL_DMA_IRQHandler+0x208>
 8006542:	bf00      	nop
 8006544:	24000000 	.word	0x24000000
 8006548:	1b4e81b5 	.word	0x1b4e81b5
 800654c:	40020010 	.word	0x40020010
 8006550:	40020028 	.word	0x40020028
 8006554:	40020040 	.word	0x40020040
 8006558:	40020058 	.word	0x40020058
 800655c:	40020070 	.word	0x40020070
 8006560:	40020088 	.word	0x40020088
 8006564:	400200a0 	.word	0x400200a0
 8006568:	400200b8 	.word	0x400200b8
 800656c:	40020410 	.word	0x40020410
 8006570:	40020428 	.word	0x40020428
 8006574:	40020440 	.word	0x40020440
 8006578:	40020458 	.word	0x40020458
 800657c:	40020470 	.word	0x40020470
 8006580:	40020488 	.word	0x40020488
 8006584:	400204a0 	.word	0x400204a0
 8006588:	400204b8 	.word	0x400204b8
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0308 	and.w	r3, r3, #8
 8006596:	2b00      	cmp	r3, #0
 8006598:	bf14      	ite	ne
 800659a:	2301      	movne	r3, #1
 800659c:	2300      	moveq	r3, #0
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d015      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0204 	bic.w	r2, r2, #4
 80065b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2208      	movs	r2, #8
 80065be:	409a      	lsls	r2, r3
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	f043 0201 	orr.w	r2, r3, #1
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	fa22 f303 	lsr.w	r3, r2, r3
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d06e      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a69      	ldr	r2, [pc, #420]	; (8006790 <HAL_DMA_IRQHandler+0x3f8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d04a      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a67      	ldr	r2, [pc, #412]	; (8006794 <HAL_DMA_IRQHandler+0x3fc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d045      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a66      	ldr	r2, [pc, #408]	; (8006798 <HAL_DMA_IRQHandler+0x400>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d040      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a64      	ldr	r2, [pc, #400]	; (800679c <HAL_DMA_IRQHandler+0x404>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d03b      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a63      	ldr	r2, [pc, #396]	; (80067a0 <HAL_DMA_IRQHandler+0x408>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d036      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a61      	ldr	r2, [pc, #388]	; (80067a4 <HAL_DMA_IRQHandler+0x40c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d031      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a60      	ldr	r2, [pc, #384]	; (80067a8 <HAL_DMA_IRQHandler+0x410>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d02c      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a5e      	ldr	r2, [pc, #376]	; (80067ac <HAL_DMA_IRQHandler+0x414>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d027      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a5d      	ldr	r2, [pc, #372]	; (80067b0 <HAL_DMA_IRQHandler+0x418>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a5b      	ldr	r2, [pc, #364]	; (80067b4 <HAL_DMA_IRQHandler+0x41c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a5a      	ldr	r2, [pc, #360]	; (80067b8 <HAL_DMA_IRQHandler+0x420>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a58      	ldr	r2, [pc, #352]	; (80067bc <HAL_DMA_IRQHandler+0x424>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a57      	ldr	r2, [pc, #348]	; (80067c0 <HAL_DMA_IRQHandler+0x428>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a55      	ldr	r2, [pc, #340]	; (80067c4 <HAL_DMA_IRQHandler+0x42c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a54      	ldr	r2, [pc, #336]	; (80067c8 <HAL_DMA_IRQHandler+0x430>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_DMA_IRQHandler+0x2ee>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a52      	ldr	r2, [pc, #328]	; (80067cc <HAL_DMA_IRQHandler+0x434>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10a      	bne.n	800669c <HAL_DMA_IRQHandler+0x304>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e003      	b.n	80066a4 <HAL_DMA_IRQHandler+0x30c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00d      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2201      	movs	r2, #1
 80066b2:	409a      	lsls	r2, r3
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066bc:	f043 0202 	orr.w	r2, r3, #2
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	2204      	movs	r2, #4
 80066ce:	409a      	lsls	r2, r3
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	4013      	ands	r3, r2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 808f 	beq.w	80067f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2c      	ldr	r2, [pc, #176]	; (8006790 <HAL_DMA_IRQHandler+0x3f8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d04a      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <HAL_DMA_IRQHandler+0x3fc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d045      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a29      	ldr	r2, [pc, #164]	; (8006798 <HAL_DMA_IRQHandler+0x400>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d040      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a27      	ldr	r2, [pc, #156]	; (800679c <HAL_DMA_IRQHandler+0x404>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d03b      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a26      	ldr	r2, [pc, #152]	; (80067a0 <HAL_DMA_IRQHandler+0x408>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d036      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <HAL_DMA_IRQHandler+0x40c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d031      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a23      	ldr	r2, [pc, #140]	; (80067a8 <HAL_DMA_IRQHandler+0x410>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d02c      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a21      	ldr	r2, [pc, #132]	; (80067ac <HAL_DMA_IRQHandler+0x414>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d027      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a20      	ldr	r2, [pc, #128]	; (80067b0 <HAL_DMA_IRQHandler+0x418>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1e      	ldr	r2, [pc, #120]	; (80067b4 <HAL_DMA_IRQHandler+0x41c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01d      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1d      	ldr	r2, [pc, #116]	; (80067b8 <HAL_DMA_IRQHandler+0x420>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d018      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a1b      	ldr	r2, [pc, #108]	; (80067bc <HAL_DMA_IRQHandler+0x424>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1a      	ldr	r2, [pc, #104]	; (80067c0 <HAL_DMA_IRQHandler+0x428>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a18      	ldr	r2, [pc, #96]	; (80067c4 <HAL_DMA_IRQHandler+0x42c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a17      	ldr	r2, [pc, #92]	; (80067c8 <HAL_DMA_IRQHandler+0x430>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_DMA_IRQHandler+0x3e2>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a15      	ldr	r2, [pc, #84]	; (80067cc <HAL_DMA_IRQHandler+0x434>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d12a      	bne.n	80067d0 <HAL_DMA_IRQHandler+0x438>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e023      	b.n	80067d8 <HAL_DMA_IRQHandler+0x440>
 8006790:	40020010 	.word	0x40020010
 8006794:	40020028 	.word	0x40020028
 8006798:	40020040 	.word	0x40020040
 800679c:	40020058 	.word	0x40020058
 80067a0:	40020070 	.word	0x40020070
 80067a4:	40020088 	.word	0x40020088
 80067a8:	400200a0 	.word	0x400200a0
 80067ac:	400200b8 	.word	0x400200b8
 80067b0:	40020410 	.word	0x40020410
 80067b4:	40020428 	.word	0x40020428
 80067b8:	40020440 	.word	0x40020440
 80067bc:	40020458 	.word	0x40020458
 80067c0:	40020470 	.word	0x40020470
 80067c4:	40020488 	.word	0x40020488
 80067c8:	400204a0 	.word	0x400204a0
 80067cc:	400204b8 	.word	0x400204b8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00d      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	f003 031f 	and.w	r3, r3, #31
 80067e4:	2204      	movs	r2, #4
 80067e6:	409a      	lsls	r2, r3
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f0:	f043 0204 	orr.w	r2, r3, #4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	f003 031f 	and.w	r3, r3, #31
 8006800:	2210      	movs	r2, #16
 8006802:	409a      	lsls	r2, r3
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	4013      	ands	r3, r2
 8006808:	2b00      	cmp	r3, #0
 800680a:	f000 80a6 	beq.w	800695a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a85      	ldr	r2, [pc, #532]	; (8006a28 <HAL_DMA_IRQHandler+0x690>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d04a      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a83      	ldr	r2, [pc, #524]	; (8006a2c <HAL_DMA_IRQHandler+0x694>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d045      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a82      	ldr	r2, [pc, #520]	; (8006a30 <HAL_DMA_IRQHandler+0x698>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d040      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a80      	ldr	r2, [pc, #512]	; (8006a34 <HAL_DMA_IRQHandler+0x69c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d03b      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a7f      	ldr	r2, [pc, #508]	; (8006a38 <HAL_DMA_IRQHandler+0x6a0>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d036      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a7d      	ldr	r2, [pc, #500]	; (8006a3c <HAL_DMA_IRQHandler+0x6a4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d031      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7c      	ldr	r2, [pc, #496]	; (8006a40 <HAL_DMA_IRQHandler+0x6a8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d02c      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a7a      	ldr	r2, [pc, #488]	; (8006a44 <HAL_DMA_IRQHandler+0x6ac>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d027      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a79      	ldr	r2, [pc, #484]	; (8006a48 <HAL_DMA_IRQHandler+0x6b0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a77      	ldr	r2, [pc, #476]	; (8006a4c <HAL_DMA_IRQHandler+0x6b4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01d      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a76      	ldr	r2, [pc, #472]	; (8006a50 <HAL_DMA_IRQHandler+0x6b8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a74      	ldr	r2, [pc, #464]	; (8006a54 <HAL_DMA_IRQHandler+0x6bc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a73      	ldr	r2, [pc, #460]	; (8006a58 <HAL_DMA_IRQHandler+0x6c0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a71      	ldr	r2, [pc, #452]	; (8006a5c <HAL_DMA_IRQHandler+0x6c4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a70      	ldr	r2, [pc, #448]	; (8006a60 <HAL_DMA_IRQHandler+0x6c8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <HAL_DMA_IRQHandler+0x516>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a6e      	ldr	r2, [pc, #440]	; (8006a64 <HAL_DMA_IRQHandler+0x6cc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d10a      	bne.n	80068c4 <HAL_DMA_IRQHandler+0x52c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	bf14      	ite	ne
 80068bc:	2301      	movne	r3, #1
 80068be:	2300      	moveq	r3, #0
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	e009      	b.n	80068d8 <HAL_DMA_IRQHandler+0x540>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	bf14      	ite	ne
 80068d2:	2301      	movne	r3, #1
 80068d4:	2300      	moveq	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d03e      	beq.n	800695a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2210      	movs	r2, #16
 80068e6:	409a      	lsls	r2, r3
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d018      	beq.n	800692c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d108      	bne.n	800691a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d024      	beq.n	800695a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	4798      	blx	r3
 8006918:	e01f      	b.n	800695a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01b      	beq.n	800695a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
 800692a:	e016      	b.n	800695a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d107      	bne.n	800694a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0208 	bic.w	r2, r2, #8
 8006948:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800695e:	f003 031f 	and.w	r3, r3, #31
 8006962:	2220      	movs	r2, #32
 8006964:	409a      	lsls	r2, r3
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	4013      	ands	r3, r2
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8110 	beq.w	8006b90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a2c      	ldr	r2, [pc, #176]	; (8006a28 <HAL_DMA_IRQHandler+0x690>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d04a      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a2b      	ldr	r2, [pc, #172]	; (8006a2c <HAL_DMA_IRQHandler+0x694>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d045      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a29      	ldr	r2, [pc, #164]	; (8006a30 <HAL_DMA_IRQHandler+0x698>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d040      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a28      	ldr	r2, [pc, #160]	; (8006a34 <HAL_DMA_IRQHandler+0x69c>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d03b      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a26      	ldr	r2, [pc, #152]	; (8006a38 <HAL_DMA_IRQHandler+0x6a0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d036      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a25      	ldr	r2, [pc, #148]	; (8006a3c <HAL_DMA_IRQHandler+0x6a4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d031      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <HAL_DMA_IRQHandler+0x6a8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d02c      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a22      	ldr	r2, [pc, #136]	; (8006a44 <HAL_DMA_IRQHandler+0x6ac>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d027      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a20      	ldr	r2, [pc, #128]	; (8006a48 <HAL_DMA_IRQHandler+0x6b0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d022      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1f      	ldr	r2, [pc, #124]	; (8006a4c <HAL_DMA_IRQHandler+0x6b4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01d      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a1d      	ldr	r2, [pc, #116]	; (8006a50 <HAL_DMA_IRQHandler+0x6b8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d018      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <HAL_DMA_IRQHandler+0x6bc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a1a      	ldr	r2, [pc, #104]	; (8006a58 <HAL_DMA_IRQHandler+0x6c0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00e      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a19      	ldr	r2, [pc, #100]	; (8006a5c <HAL_DMA_IRQHandler+0x6c4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d009      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a17      	ldr	r2, [pc, #92]	; (8006a60 <HAL_DMA_IRQHandler+0x6c8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <HAL_DMA_IRQHandler+0x678>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a16      	ldr	r2, [pc, #88]	; (8006a64 <HAL_DMA_IRQHandler+0x6cc>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d12b      	bne.n	8006a68 <HAL_DMA_IRQHandler+0x6d0>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0310 	and.w	r3, r3, #16
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	bf14      	ite	ne
 8006a1e:	2301      	movne	r3, #1
 8006a20:	2300      	moveq	r3, #0
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	e02a      	b.n	8006a7c <HAL_DMA_IRQHandler+0x6e4>
 8006a26:	bf00      	nop
 8006a28:	40020010 	.word	0x40020010
 8006a2c:	40020028 	.word	0x40020028
 8006a30:	40020040 	.word	0x40020040
 8006a34:	40020058 	.word	0x40020058
 8006a38:	40020070 	.word	0x40020070
 8006a3c:	40020088 	.word	0x40020088
 8006a40:	400200a0 	.word	0x400200a0
 8006a44:	400200b8 	.word	0x400200b8
 8006a48:	40020410 	.word	0x40020410
 8006a4c:	40020428 	.word	0x40020428
 8006a50:	40020440 	.word	0x40020440
 8006a54:	40020458 	.word	0x40020458
 8006a58:	40020470 	.word	0x40020470
 8006a5c:	40020488 	.word	0x40020488
 8006a60:	400204a0 	.word	0x400204a0
 8006a64:	400204b8 	.word	0x400204b8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	bf14      	ite	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	2300      	moveq	r3, #0
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8087 	beq.w	8006b90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	409a      	lsls	r2, r3
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d139      	bne.n	8006b12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0216 	bic.w	r2, r2, #22
 8006aac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695a      	ldr	r2, [r3, #20]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006abc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <HAL_DMA_IRQHandler+0x736>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0208 	bic.w	r2, r2, #8
 8006adc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	223f      	movs	r2, #63	; 0x3f
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 834a 	beq.w	800719c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
          }
          return;
 8006b10:	e344      	b.n	800719c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d018      	beq.n	8006b52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d108      	bne.n	8006b40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d02c      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
 8006b3e:	e027      	b.n	8006b90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d023      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	4798      	blx	r3
 8006b50:	e01e      	b.n	8006b90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10f      	bne.n	8006b80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0210 	bic.w	r2, r2, #16
 8006b6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d003      	beq.n	8006b90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8306 	beq.w	80071a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8088 	beq.w	8006cb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2204      	movs	r2, #4
 8006bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a7a      	ldr	r2, [pc, #488]	; (8006da0 <HAL_DMA_IRQHandler+0xa08>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d04a      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a79      	ldr	r2, [pc, #484]	; (8006da4 <HAL_DMA_IRQHandler+0xa0c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d045      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a77      	ldr	r2, [pc, #476]	; (8006da8 <HAL_DMA_IRQHandler+0xa10>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d040      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a76      	ldr	r2, [pc, #472]	; (8006dac <HAL_DMA_IRQHandler+0xa14>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d03b      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a74      	ldr	r2, [pc, #464]	; (8006db0 <HAL_DMA_IRQHandler+0xa18>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d036      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a73      	ldr	r2, [pc, #460]	; (8006db4 <HAL_DMA_IRQHandler+0xa1c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d031      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a71      	ldr	r2, [pc, #452]	; (8006db8 <HAL_DMA_IRQHandler+0xa20>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d02c      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a70      	ldr	r2, [pc, #448]	; (8006dbc <HAL_DMA_IRQHandler+0xa24>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d027      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a6e      	ldr	r2, [pc, #440]	; (8006dc0 <HAL_DMA_IRQHandler+0xa28>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d022      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a6d      	ldr	r2, [pc, #436]	; (8006dc4 <HAL_DMA_IRQHandler+0xa2c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d01d      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a6b      	ldr	r2, [pc, #428]	; (8006dc8 <HAL_DMA_IRQHandler+0xa30>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d018      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a6a      	ldr	r2, [pc, #424]	; (8006dcc <HAL_DMA_IRQHandler+0xa34>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d013      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a68      	ldr	r2, [pc, #416]	; (8006dd0 <HAL_DMA_IRQHandler+0xa38>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d00e      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a67      	ldr	r2, [pc, #412]	; (8006dd4 <HAL_DMA_IRQHandler+0xa3c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d009      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a65      	ldr	r2, [pc, #404]	; (8006dd8 <HAL_DMA_IRQHandler+0xa40>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d004      	beq.n	8006c50 <HAL_DMA_IRQHandler+0x8b8>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a64      	ldr	r2, [pc, #400]	; (8006ddc <HAL_DMA_IRQHandler+0xa44>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d108      	bne.n	8006c62 <HAL_DMA_IRQHandler+0x8ca>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0201 	bic.w	r2, r2, #1
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	e007      	b.n	8006c72 <HAL_DMA_IRQHandler+0x8da>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d307      	bcc.n	8006c8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f2      	bne.n	8006c72 <HAL_DMA_IRQHandler+0x8da>
 8006c8c:	e000      	b.n	8006c90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d004      	beq.n	8006ca8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006ca6:	e003      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8272 	beq.w	80071a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	4798      	blx	r3
 8006cca:	e26c      	b.n	80071a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a43      	ldr	r2, [pc, #268]	; (8006de0 <HAL_DMA_IRQHandler+0xa48>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d022      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a42      	ldr	r2, [pc, #264]	; (8006de4 <HAL_DMA_IRQHandler+0xa4c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d01d      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <HAL_DMA_IRQHandler+0xa50>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a3f      	ldr	r2, [pc, #252]	; (8006dec <HAL_DMA_IRQHandler+0xa54>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d013      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a3d      	ldr	r2, [pc, #244]	; (8006df0 <HAL_DMA_IRQHandler+0xa58>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a3c      	ldr	r2, [pc, #240]	; (8006df4 <HAL_DMA_IRQHandler+0xa5c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <HAL_DMA_IRQHandler+0xa60>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_DMA_IRQHandler+0x984>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a39      	ldr	r2, [pc, #228]	; (8006dfc <HAL_DMA_IRQHandler+0xa64>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d101      	bne.n	8006d20 <HAL_DMA_IRQHandler+0x988>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <HAL_DMA_IRQHandler+0x98a>
 8006d20:	2300      	movs	r3, #0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 823f 	beq.w	80071a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d34:	f003 031f 	and.w	r3, r3, #31
 8006d38:	2204      	movs	r2, #4
 8006d3a:	409a      	lsls	r2, r3
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80cd 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0xb48>
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80c7 	beq.w	8006ee0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d56:	f003 031f 	and.w	r3, r3, #31
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	409a      	lsls	r2, r3
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d049      	beq.n	8006e00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d109      	bne.n	8006d8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8210 	beq.w	80071a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d88:	e20a      	b.n	80071a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 8206 	beq.w	80071a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d9c:	e200      	b.n	80071a0 <HAL_DMA_IRQHandler+0xe08>
 8006d9e:	bf00      	nop
 8006da0:	40020010 	.word	0x40020010
 8006da4:	40020028 	.word	0x40020028
 8006da8:	40020040 	.word	0x40020040
 8006dac:	40020058 	.word	0x40020058
 8006db0:	40020070 	.word	0x40020070
 8006db4:	40020088 	.word	0x40020088
 8006db8:	400200a0 	.word	0x400200a0
 8006dbc:	400200b8 	.word	0x400200b8
 8006dc0:	40020410 	.word	0x40020410
 8006dc4:	40020428 	.word	0x40020428
 8006dc8:	40020440 	.word	0x40020440
 8006dcc:	40020458 	.word	0x40020458
 8006dd0:	40020470 	.word	0x40020470
 8006dd4:	40020488 	.word	0x40020488
 8006dd8:	400204a0 	.word	0x400204a0
 8006ddc:	400204b8 	.word	0x400204b8
 8006de0:	58025408 	.word	0x58025408
 8006de4:	5802541c 	.word	0x5802541c
 8006de8:	58025430 	.word	0x58025430
 8006dec:	58025444 	.word	0x58025444
 8006df0:	58025458 	.word	0x58025458
 8006df4:	5802546c 	.word	0x5802546c
 8006df8:	58025480 	.word	0x58025480
 8006dfc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d160      	bne.n	8006ecc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a7f      	ldr	r2, [pc, #508]	; (800700c <HAL_DMA_IRQHandler+0xc74>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d04a      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7d      	ldr	r2, [pc, #500]	; (8007010 <HAL_DMA_IRQHandler+0xc78>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d045      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a7c      	ldr	r2, [pc, #496]	; (8007014 <HAL_DMA_IRQHandler+0xc7c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d040      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a7a      	ldr	r2, [pc, #488]	; (8007018 <HAL_DMA_IRQHandler+0xc80>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d03b      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a79      	ldr	r2, [pc, #484]	; (800701c <HAL_DMA_IRQHandler+0xc84>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d036      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a77      	ldr	r2, [pc, #476]	; (8007020 <HAL_DMA_IRQHandler+0xc88>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d031      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a76      	ldr	r2, [pc, #472]	; (8007024 <HAL_DMA_IRQHandler+0xc8c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d02c      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a74      	ldr	r2, [pc, #464]	; (8007028 <HAL_DMA_IRQHandler+0xc90>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d027      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a73      	ldr	r2, [pc, #460]	; (800702c <HAL_DMA_IRQHandler+0xc94>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d022      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a71      	ldr	r2, [pc, #452]	; (8007030 <HAL_DMA_IRQHandler+0xc98>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01d      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a70      	ldr	r2, [pc, #448]	; (8007034 <HAL_DMA_IRQHandler+0xc9c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <HAL_DMA_IRQHandler+0xca0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6d      	ldr	r2, [pc, #436]	; (800703c <HAL_DMA_IRQHandler+0xca4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d00e      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6b      	ldr	r2, [pc, #428]	; (8007040 <HAL_DMA_IRQHandler+0xca8>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d009      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6a      	ldr	r2, [pc, #424]	; (8007044 <HAL_DMA_IRQHandler+0xcac>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d004      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xb12>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a68      	ldr	r2, [pc, #416]	; (8007048 <HAL_DMA_IRQHandler+0xcb0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d108      	bne.n	8006ebc <HAL_DMA_IRQHandler+0xb24>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0208 	bic.w	r2, r2, #8
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e007      	b.n	8006ecc <HAL_DMA_IRQHandler+0xb34>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0204 	bic.w	r2, r2, #4
 8006eca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 8165 	beq.w	80071a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ede:	e15f      	b.n	80071a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	2202      	movs	r2, #2
 8006eea:	409a      	lsls	r2, r3
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80c5 	beq.w	8007080 <HAL_DMA_IRQHandler+0xce8>
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f003 0302 	and.w	r3, r3, #2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80bf 	beq.w	8007080 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d018      	beq.n	8006f4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 813a 	beq.w	80071a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f38:	e134      	b.n	80071a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8130 	beq.w	80071a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f4c:	e12a      	b.n	80071a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f003 0320 	and.w	r3, r3, #32
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 8089 	bne.w	800706c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a2b      	ldr	r2, [pc, #172]	; (800700c <HAL_DMA_IRQHandler+0xc74>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d04a      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <HAL_DMA_IRQHandler+0xc78>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d045      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a28      	ldr	r2, [pc, #160]	; (8007014 <HAL_DMA_IRQHandler+0xc7c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d040      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a26      	ldr	r2, [pc, #152]	; (8007018 <HAL_DMA_IRQHandler+0xc80>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d03b      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a25      	ldr	r2, [pc, #148]	; (800701c <HAL_DMA_IRQHandler+0xc84>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d036      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a23      	ldr	r2, [pc, #140]	; (8007020 <HAL_DMA_IRQHandler+0xc88>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d031      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a22      	ldr	r2, [pc, #136]	; (8007024 <HAL_DMA_IRQHandler+0xc8c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d02c      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a20      	ldr	r2, [pc, #128]	; (8007028 <HAL_DMA_IRQHandler+0xc90>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d027      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <HAL_DMA_IRQHandler+0xc94>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d022      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_DMA_IRQHandler+0xc98>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01d      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <HAL_DMA_IRQHandler+0xc9c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d018      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1a      	ldr	r2, [pc, #104]	; (8007038 <HAL_DMA_IRQHandler+0xca0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a19      	ldr	r2, [pc, #100]	; (800703c <HAL_DMA_IRQHandler+0xca4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00e      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <HAL_DMA_IRQHandler+0xca8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a16      	ldr	r2, [pc, #88]	; (8007044 <HAL_DMA_IRQHandler+0xcac>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <HAL_DMA_IRQHandler+0xc62>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a14      	ldr	r2, [pc, #80]	; (8007048 <HAL_DMA_IRQHandler+0xcb0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d128      	bne.n	800704c <HAL_DMA_IRQHandler+0xcb4>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0214 	bic.w	r2, r2, #20
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	e027      	b.n	800705c <HAL_DMA_IRQHandler+0xcc4>
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 020a 	bic.w	r2, r2, #10
 800705a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8097 	beq.w	80071a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800707e:	e091      	b.n	80071a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007084:	f003 031f 	and.w	r3, r3, #31
 8007088:	2208      	movs	r2, #8
 800708a:	409a      	lsls	r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4013      	ands	r3, r2
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8088 	beq.w	80071a6 <HAL_DMA_IRQHandler+0xe0e>
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8082 	beq.w	80071a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a41      	ldr	r2, [pc, #260]	; (80071ac <HAL_DMA_IRQHandler+0xe14>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d04a      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a3f      	ldr	r2, [pc, #252]	; (80071b0 <HAL_DMA_IRQHandler+0xe18>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d045      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a3e      	ldr	r2, [pc, #248]	; (80071b4 <HAL_DMA_IRQHandler+0xe1c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d040      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a3c      	ldr	r2, [pc, #240]	; (80071b8 <HAL_DMA_IRQHandler+0xe20>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d03b      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a3b      	ldr	r2, [pc, #236]	; (80071bc <HAL_DMA_IRQHandler+0xe24>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d036      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a39      	ldr	r2, [pc, #228]	; (80071c0 <HAL_DMA_IRQHandler+0xe28>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d031      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a38      	ldr	r2, [pc, #224]	; (80071c4 <HAL_DMA_IRQHandler+0xe2c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d02c      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a36      	ldr	r2, [pc, #216]	; (80071c8 <HAL_DMA_IRQHandler+0xe30>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d027      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a35      	ldr	r2, [pc, #212]	; (80071cc <HAL_DMA_IRQHandler+0xe34>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d022      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a33      	ldr	r2, [pc, #204]	; (80071d0 <HAL_DMA_IRQHandler+0xe38>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01d      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a32      	ldr	r2, [pc, #200]	; (80071d4 <HAL_DMA_IRQHandler+0xe3c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d018      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a30      	ldr	r2, [pc, #192]	; (80071d8 <HAL_DMA_IRQHandler+0xe40>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d013      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2f      	ldr	r2, [pc, #188]	; (80071dc <HAL_DMA_IRQHandler+0xe44>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d00e      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a2d      	ldr	r2, [pc, #180]	; (80071e0 <HAL_DMA_IRQHandler+0xe48>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d009      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a2c      	ldr	r2, [pc, #176]	; (80071e4 <HAL_DMA_IRQHandler+0xe4c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d004      	beq.n	8007142 <HAL_DMA_IRQHandler+0xdaa>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2a      	ldr	r2, [pc, #168]	; (80071e8 <HAL_DMA_IRQHandler+0xe50>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d108      	bne.n	8007154 <HAL_DMA_IRQHandler+0xdbc>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 021c 	bic.w	r2, r2, #28
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	e007      	b.n	8007164 <HAL_DMA_IRQHandler+0xdcc>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 020e 	bic.w	r2, r2, #14
 8007162:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2201      	movs	r2, #1
 800716e:	409a      	lsls	r2, r3
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d009      	beq.n	80071a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	4798      	blx	r3
 800719a:	e004      	b.n	80071a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800719c:	bf00      	nop
 800719e:	e002      	b.n	80071a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a0:	bf00      	nop
 80071a2:	e000      	b.n	80071a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071a6:	3728      	adds	r7, #40	; 0x28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	40020010 	.word	0x40020010
 80071b0:	40020028 	.word	0x40020028
 80071b4:	40020040 	.word	0x40020040
 80071b8:	40020058 	.word	0x40020058
 80071bc:	40020070 	.word	0x40020070
 80071c0:	40020088 	.word	0x40020088
 80071c4:	400200a0 	.word	0x400200a0
 80071c8:	400200b8 	.word	0x400200b8
 80071cc:	40020410 	.word	0x40020410
 80071d0:	40020428 	.word	0x40020428
 80071d4:	40020440 	.word	0x40020440
 80071d8:	40020458 	.word	0x40020458
 80071dc:	40020470 	.word	0x40020470
 80071e0:	40020488 	.word	0x40020488
 80071e4:	400204a0 	.word	0x400204a0
 80071e8:	400204b8 	.word	0x400204b8

080071ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a42      	ldr	r2, [pc, #264]	; (8007304 <DMA_CalcBaseAndBitshift+0x118>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d04a      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a41      	ldr	r2, [pc, #260]	; (8007308 <DMA_CalcBaseAndBitshift+0x11c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d045      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a3f      	ldr	r2, [pc, #252]	; (800730c <DMA_CalcBaseAndBitshift+0x120>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d040      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a3e      	ldr	r2, [pc, #248]	; (8007310 <DMA_CalcBaseAndBitshift+0x124>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d03b      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a3c      	ldr	r2, [pc, #240]	; (8007314 <DMA_CalcBaseAndBitshift+0x128>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d036      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3b      	ldr	r2, [pc, #236]	; (8007318 <DMA_CalcBaseAndBitshift+0x12c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d031      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a39      	ldr	r2, [pc, #228]	; (800731c <DMA_CalcBaseAndBitshift+0x130>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d02c      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a38      	ldr	r2, [pc, #224]	; (8007320 <DMA_CalcBaseAndBitshift+0x134>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d027      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a36      	ldr	r2, [pc, #216]	; (8007324 <DMA_CalcBaseAndBitshift+0x138>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d022      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a35      	ldr	r2, [pc, #212]	; (8007328 <DMA_CalcBaseAndBitshift+0x13c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d01d      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a33      	ldr	r2, [pc, #204]	; (800732c <DMA_CalcBaseAndBitshift+0x140>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d018      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a32      	ldr	r2, [pc, #200]	; (8007330 <DMA_CalcBaseAndBitshift+0x144>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d013      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a30      	ldr	r2, [pc, #192]	; (8007334 <DMA_CalcBaseAndBitshift+0x148>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d00e      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a2f      	ldr	r2, [pc, #188]	; (8007338 <DMA_CalcBaseAndBitshift+0x14c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d009      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a2d      	ldr	r2, [pc, #180]	; (800733c <DMA_CalcBaseAndBitshift+0x150>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d004      	beq.n	8007294 <DMA_CalcBaseAndBitshift+0xa8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2c      	ldr	r2, [pc, #176]	; (8007340 <DMA_CalcBaseAndBitshift+0x154>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d101      	bne.n	8007298 <DMA_CalcBaseAndBitshift+0xac>
 8007294:	2301      	movs	r3, #1
 8007296:	e000      	b.n	800729a <DMA_CalcBaseAndBitshift+0xae>
 8007298:	2300      	movs	r3, #0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d024      	beq.n	80072e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	3b10      	subs	r3, #16
 80072a6:	4a27      	ldr	r2, [pc, #156]	; (8007344 <DMA_CalcBaseAndBitshift+0x158>)
 80072a8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ac:	091b      	lsrs	r3, r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f003 0307 	and.w	r3, r3, #7
 80072b6:	4a24      	ldr	r2, [pc, #144]	; (8007348 <DMA_CalcBaseAndBitshift+0x15c>)
 80072b8:	5cd3      	ldrb	r3, [r2, r3]
 80072ba:	461a      	mov	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d908      	bls.n	80072d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	4b1f      	ldr	r3, [pc, #124]	; (800734c <DMA_CalcBaseAndBitshift+0x160>)
 80072ce:	4013      	ands	r3, r2
 80072d0:	1d1a      	adds	r2, r3, #4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	659a      	str	r2, [r3, #88]	; 0x58
 80072d6:	e00d      	b.n	80072f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	4b1b      	ldr	r3, [pc, #108]	; (800734c <DMA_CalcBaseAndBitshift+0x160>)
 80072e0:	4013      	ands	r3, r2
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6593      	str	r3, [r2, #88]	; 0x58
 80072e6:	e005      	b.n	80072f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40020010 	.word	0x40020010
 8007308:	40020028 	.word	0x40020028
 800730c:	40020040 	.word	0x40020040
 8007310:	40020058 	.word	0x40020058
 8007314:	40020070 	.word	0x40020070
 8007318:	40020088 	.word	0x40020088
 800731c:	400200a0 	.word	0x400200a0
 8007320:	400200b8 	.word	0x400200b8
 8007324:	40020410 	.word	0x40020410
 8007328:	40020428 	.word	0x40020428
 800732c:	40020440 	.word	0x40020440
 8007330:	40020458 	.word	0x40020458
 8007334:	40020470 	.word	0x40020470
 8007338:	40020488 	.word	0x40020488
 800733c:	400204a0 	.word	0x400204a0
 8007340:	400204b8 	.word	0x400204b8
 8007344:	aaaaaaab 	.word	0xaaaaaaab
 8007348:	0801d3d8 	.word	0x0801d3d8
 800734c:	fffffc00 	.word	0xfffffc00

08007350 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d120      	bne.n	80073a6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	2b03      	cmp	r3, #3
 800736a:	d858      	bhi.n	800741e <DMA_CheckFifoParam+0xce>
 800736c:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <DMA_CheckFifoParam+0x24>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	08007385 	.word	0x08007385
 8007378:	08007397 	.word	0x08007397
 800737c:	08007385 	.word	0x08007385
 8007380:	0800741f 	.word	0x0800741f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d048      	beq.n	8007422 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007394:	e045      	b.n	8007422 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800739e:	d142      	bne.n	8007426 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073a4:	e03f      	b.n	8007426 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ae:	d123      	bne.n	80073f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	2b03      	cmp	r3, #3
 80073b6:	d838      	bhi.n	800742a <DMA_CheckFifoParam+0xda>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <DMA_CheckFifoParam+0x70>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073d1 	.word	0x080073d1
 80073c4:	080073d7 	.word	0x080073d7
 80073c8:	080073d1 	.word	0x080073d1
 80073cc:	080073e9 	.word	0x080073e9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	73fb      	strb	r3, [r7, #15]
        break;
 80073d4:	e030      	b.n	8007438 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d025      	beq.n	800742e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073e6:	e022      	b.n	800742e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073f0:	d11f      	bne.n	8007432 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073f6:	e01c      	b.n	8007432 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	2b02      	cmp	r3, #2
 80073fe:	d902      	bls.n	8007406 <DMA_CheckFifoParam+0xb6>
 8007400:	2b03      	cmp	r3, #3
 8007402:	d003      	beq.n	800740c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007404:	e018      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]
        break;
 800740a:	e015      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00e      	beq.n	8007436 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
    break;
 800741c:	e00b      	b.n	8007436 <DMA_CheckFifoParam+0xe6>
        break;
 800741e:	bf00      	nop
 8007420:	e00a      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        break;
 8007422:	bf00      	nop
 8007424:	e008      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        break;
 8007426:	bf00      	nop
 8007428:	e006      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        break;
 800742a:	bf00      	nop
 800742c:	e004      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        break;
 800742e:	bf00      	nop
 8007430:	e002      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
        break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <DMA_CheckFifoParam+0xe8>
    break;
 8007436:	bf00      	nop
    }
  }

  return status;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop

08007448 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a38      	ldr	r2, [pc, #224]	; (800753c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d022      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a36      	ldr	r2, [pc, #216]	; (8007540 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01d      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a35      	ldr	r2, [pc, #212]	; (8007544 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d018      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a33      	ldr	r2, [pc, #204]	; (8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d013      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a32      	ldr	r2, [pc, #200]	; (800754c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d00e      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a30      	ldr	r2, [pc, #192]	; (8007550 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d009      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d004      	beq.n	80074a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a2d      	ldr	r2, [pc, #180]	; (8007558 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d101      	bne.n	80074aa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074aa:	2300      	movs	r3, #0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01a      	beq.n	80074e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	3b08      	subs	r3, #8
 80074b8:	4a28      	ldr	r2, [pc, #160]	; (800755c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80074ba:	fba2 2303 	umull	r2, r3, r2, r3
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4b26      	ldr	r3, [pc, #152]	; (8007560 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a24      	ldr	r2, [pc, #144]	; (8007564 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80074d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 031f 	and.w	r3, r3, #31
 80074dc:	2201      	movs	r2, #1
 80074de:	409a      	lsls	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80074e4:	e024      	b.n	8007530 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	3b10      	subs	r3, #16
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	091b      	lsrs	r3, r3, #4
 80074f6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4a1c      	ldr	r2, [pc, #112]	; (800756c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d806      	bhi.n	800750e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a1b      	ldr	r2, [pc, #108]	; (8007570 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d902      	bls.n	800750e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	3308      	adds	r3, #8
 800750c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4b18      	ldr	r3, [pc, #96]	; (8007574 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	461a      	mov	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a16      	ldr	r2, [pc, #88]	; (8007578 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007520:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 031f 	and.w	r3, r3, #31
 8007528:	2201      	movs	r2, #1
 800752a:	409a      	lsls	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007530:	bf00      	nop
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	58025408 	.word	0x58025408
 8007540:	5802541c 	.word	0x5802541c
 8007544:	58025430 	.word	0x58025430
 8007548:	58025444 	.word	0x58025444
 800754c:	58025458 	.word	0x58025458
 8007550:	5802546c 	.word	0x5802546c
 8007554:	58025480 	.word	0x58025480
 8007558:	58025494 	.word	0x58025494
 800755c:	cccccccd 	.word	0xcccccccd
 8007560:	16009600 	.word	0x16009600
 8007564:	58025880 	.word	0x58025880
 8007568:	aaaaaaab 	.word	0xaaaaaaab
 800756c:	400204b8 	.word	0x400204b8
 8007570:	4002040f 	.word	0x4002040f
 8007574:	10008200 	.word	0x10008200
 8007578:	40020880 	.word	0x40020880

0800757c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d04a      	beq.n	8007628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b08      	cmp	r3, #8
 8007596:	d847      	bhi.n	8007628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a25      	ldr	r2, [pc, #148]	; (8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d022      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a24      	ldr	r2, [pc, #144]	; (8007638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d01d      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a22      	ldr	r2, [pc, #136]	; (800763c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d018      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a21      	ldr	r2, [pc, #132]	; (8007640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d013      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1f      	ldr	r2, [pc, #124]	; (8007644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00e      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a1e      	ldr	r2, [pc, #120]	; (8007648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d009      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a1c      	ldr	r2, [pc, #112]	; (800764c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a1b      	ldr	r2, [pc, #108]	; (8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d101      	bne.n	80075ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80075ec:	2300      	movs	r3, #0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4b17      	ldr	r3, [pc, #92]	; (8007654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007604:	671a      	str	r2, [r3, #112]	; 0x70
 8007606:	e009      	b.n	800761c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4b14      	ldr	r3, [pc, #80]	; (800765c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	461a      	mov	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a11      	ldr	r2, [pc, #68]	; (8007660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800761a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3b01      	subs	r3, #1
 8007620:	2201      	movs	r2, #1
 8007622:	409a      	lsls	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007628:	bf00      	nop
 800762a:	3714      	adds	r7, #20
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	58025408 	.word	0x58025408
 8007638:	5802541c 	.word	0x5802541c
 800763c:	58025430 	.word	0x58025430
 8007640:	58025444 	.word	0x58025444
 8007644:	58025458 	.word	0x58025458
 8007648:	5802546c 	.word	0x5802546c
 800764c:	58025480 	.word	0x58025480
 8007650:	58025494 	.word	0x58025494
 8007654:	1600963f 	.word	0x1600963f
 8007658:	58025940 	.word	0x58025940
 800765c:	1000823f 	.word	0x1000823f
 8007660:	40020940 	.word	0x40020940

08007664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007664:	b480      	push	{r7}
 8007666:	b089      	sub	sp, #36	; 0x24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800766e:	2300      	movs	r3, #0
 8007670:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007672:	4b89      	ldr	r3, [pc, #548]	; (8007898 <HAL_GPIO_Init+0x234>)
 8007674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007676:	e194      	b.n	80079a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	2101      	movs	r1, #1
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	fa01 f303 	lsl.w	r3, r1, r3
 8007684:	4013      	ands	r3, r2
 8007686:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 8186 	beq.w	800799c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	2b01      	cmp	r3, #1
 800769a:	d005      	beq.n	80076a8 <HAL_GPIO_Init+0x44>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d130      	bne.n	800770a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	2203      	movs	r2, #3
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	43db      	mvns	r3, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4013      	ands	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076de:	2201      	movs	r2, #1
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	43db      	mvns	r3, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	4013      	ands	r3, r2
 80076ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	091b      	lsrs	r3, r3, #4
 80076f4:	f003 0201 	and.w	r2, r3, #1
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	fa02 f303 	lsl.w	r3, r2, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4313      	orrs	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b03      	cmp	r3, #3
 8007714:	d017      	beq.n	8007746 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	2203      	movs	r2, #3
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	43db      	mvns	r3, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4013      	ands	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	4313      	orrs	r3, r2
 800773e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d123      	bne.n	800779a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	08da      	lsrs	r2, r3, #3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3208      	adds	r2, #8
 800775a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800775e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f003 0307 	and.w	r3, r3, #7
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	220f      	movs	r2, #15
 800776a:	fa02 f303 	lsl.w	r3, r2, r3
 800776e:	43db      	mvns	r3, r3
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	4013      	ands	r3, r2
 8007774:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	08da      	lsrs	r2, r3, #3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3208      	adds	r2, #8
 8007794:	69b9      	ldr	r1, [r7, #24]
 8007796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80077a0:	69fb      	ldr	r3, [r7, #28]
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	2203      	movs	r2, #3
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	43db      	mvns	r3, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	4013      	ands	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f003 0203 	and.w	r2, r3, #3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	005b      	lsls	r3, r3, #1
 80077be:	fa02 f303 	lsl.w	r3, r2, r3
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f000 80e0 	beq.w	800799c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077dc:	4b2f      	ldr	r3, [pc, #188]	; (800789c <HAL_GPIO_Init+0x238>)
 80077de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077e2:	4a2e      	ldr	r2, [pc, #184]	; (800789c <HAL_GPIO_Init+0x238>)
 80077e4:	f043 0302 	orr.w	r3, r3, #2
 80077e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80077ec:	4b2b      	ldr	r3, [pc, #172]	; (800789c <HAL_GPIO_Init+0x238>)
 80077ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077f2:	f003 0302 	and.w	r3, r3, #2
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077fa:	4a29      	ldr	r2, [pc, #164]	; (80078a0 <HAL_GPIO_Init+0x23c>)
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	089b      	lsrs	r3, r3, #2
 8007800:	3302      	adds	r3, #2
 8007802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007806:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	220f      	movs	r2, #15
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	43db      	mvns	r3, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	4013      	ands	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a20      	ldr	r2, [pc, #128]	; (80078a4 <HAL_GPIO_Init+0x240>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d052      	beq.n	80078cc <HAL_GPIO_Init+0x268>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a1f      	ldr	r2, [pc, #124]	; (80078a8 <HAL_GPIO_Init+0x244>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d031      	beq.n	8007892 <HAL_GPIO_Init+0x22e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	4a1e      	ldr	r2, [pc, #120]	; (80078ac <HAL_GPIO_Init+0x248>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d02b      	beq.n	800788e <HAL_GPIO_Init+0x22a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a1d      	ldr	r2, [pc, #116]	; (80078b0 <HAL_GPIO_Init+0x24c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d025      	beq.n	800788a <HAL_GPIO_Init+0x226>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a1c      	ldr	r2, [pc, #112]	; (80078b4 <HAL_GPIO_Init+0x250>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d01f      	beq.n	8007886 <HAL_GPIO_Init+0x222>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a1b      	ldr	r2, [pc, #108]	; (80078b8 <HAL_GPIO_Init+0x254>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d019      	beq.n	8007882 <HAL_GPIO_Init+0x21e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1a      	ldr	r2, [pc, #104]	; (80078bc <HAL_GPIO_Init+0x258>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <HAL_GPIO_Init+0x21a>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a19      	ldr	r2, [pc, #100]	; (80078c0 <HAL_GPIO_Init+0x25c>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00d      	beq.n	800787a <HAL_GPIO_Init+0x216>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <HAL_GPIO_Init+0x260>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d007      	beq.n	8007876 <HAL_GPIO_Init+0x212>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a17      	ldr	r2, [pc, #92]	; (80078c8 <HAL_GPIO_Init+0x264>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d101      	bne.n	8007872 <HAL_GPIO_Init+0x20e>
 800786e:	2309      	movs	r3, #9
 8007870:	e02d      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 8007872:	230a      	movs	r3, #10
 8007874:	e02b      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 8007876:	2308      	movs	r3, #8
 8007878:	e029      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 800787a:	2307      	movs	r3, #7
 800787c:	e027      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 800787e:	2306      	movs	r3, #6
 8007880:	e025      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 8007882:	2305      	movs	r3, #5
 8007884:	e023      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 8007886:	2304      	movs	r3, #4
 8007888:	e021      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 800788a:	2303      	movs	r3, #3
 800788c:	e01f      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 800788e:	2302      	movs	r3, #2
 8007890:	e01d      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 8007892:	2301      	movs	r3, #1
 8007894:	e01b      	b.n	80078ce <HAL_GPIO_Init+0x26a>
 8007896:	bf00      	nop
 8007898:	58000080 	.word	0x58000080
 800789c:	58024400 	.word	0x58024400
 80078a0:	58000400 	.word	0x58000400
 80078a4:	58020000 	.word	0x58020000
 80078a8:	58020400 	.word	0x58020400
 80078ac:	58020800 	.word	0x58020800
 80078b0:	58020c00 	.word	0x58020c00
 80078b4:	58021000 	.word	0x58021000
 80078b8:	58021400 	.word	0x58021400
 80078bc:	58021800 	.word	0x58021800
 80078c0:	58021c00 	.word	0x58021c00
 80078c4:	58022000 	.word	0x58022000
 80078c8:	58022400 	.word	0x58022400
 80078cc:	2300      	movs	r3, #0
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	f002 0203 	and.w	r2, r2, #3
 80078d4:	0092      	lsls	r2, r2, #2
 80078d6:	4093      	lsls	r3, r2
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	4313      	orrs	r3, r2
 80078dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80078de:	4938      	ldr	r1, [pc, #224]	; (80079c0 <HAL_GPIO_Init+0x35c>)
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	3302      	adds	r3, #2
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80078ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	43db      	mvns	r3, r3
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	4013      	ands	r3, r2
 80078fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800791a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	43db      	mvns	r3, r3
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4013      	ands	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	43db      	mvns	r3, r3
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4013      	ands	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d003      	beq.n	800796c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	4313      	orrs	r3, r2
 800796a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	43db      	mvns	r3, r3
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4013      	ands	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	3301      	adds	r3, #1
 80079a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f47f ae63 	bne.w	8007678 <HAL_GPIO_Init+0x14>
  }
}
 80079b2:	bf00      	nop
 80079b4:	bf00      	nop
 80079b6:	3724      	adds	r7, #36	; 0x24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	58000400 	.word	0x58000400

080079c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691a      	ldr	r2, [r3, #16]
 80079d4:	887b      	ldrh	r3, [r7, #2]
 80079d6:	4013      	ands	r3, r2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80079dc:	2301      	movs	r3, #1
 80079de:	73fb      	strb	r3, [r7, #15]
 80079e0:	e001      	b.n	80079e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	807b      	strh	r3, [r7, #2]
 8007a00:	4613      	mov	r3, r2
 8007a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a04:	787b      	ldrb	r3, [r7, #1]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a0a:	887a      	ldrh	r2, [r7, #2]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a10:	e003      	b.n	8007a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a12:	887b      	ldrh	r3, [r7, #2]
 8007a14:	041a      	lsls	r2, r3, #16
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	619a      	str	r2, [r3, #24]
}
 8007a1a:	bf00      	nop
 8007a1c:	370c      	adds	r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr

08007a26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a26:	b480      	push	{r7}
 8007a28:	b085      	sub	sp, #20
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	695b      	ldr	r3, [r3, #20]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007a38:	887a      	ldrh	r2, [r7, #2]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	041a      	lsls	r2, r3, #16
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	43d9      	mvns	r1, r3
 8007a44:	887b      	ldrh	r3, [r7, #2]
 8007a46:	400b      	ands	r3, r1
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	619a      	str	r2, [r3, #24]
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
	...

08007a5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e07f      	b.n	8007b6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fa fec8 	bl	8002818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2224      	movs	r2, #36	; 0x24
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685a      	ldr	r2, [r3, #4]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007aac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007abc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d107      	bne.n	8007ad6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ad2:	609a      	str	r2, [r3, #8]
 8007ad4:	e006      	b.n	8007ae4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ae2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d104      	bne.n	8007af6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6859      	ldr	r1, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <HAL_I2C_Init+0x11c>)
 8007b02:	430b      	orrs	r3, r1
 8007b04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68da      	ldr	r2, [r3, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691a      	ldr	r2, [r3, #16]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1a      	ldr	r2, [r3, #32]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0201 	orr.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	02008000 	.word	0x02008000

08007b7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	817b      	strh	r3, [r7, #10]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	813b      	strh	r3, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	f040 80f9 	bne.w	8007d96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_I2C_Mem_Write+0x34>
 8007baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d105      	bne.n	8007bbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e0ed      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d101      	bne.n	8007bca <HAL_I2C_Mem_Write+0x4e>
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	e0e6      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007bd2:	f7fc fcaf 	bl	8004534 <HAL_GetTick>
 8007bd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	2319      	movs	r3, #25
 8007bde:	2201      	movs	r2, #1
 8007be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fac3 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e0d1      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2221      	movs	r2, #33	; 0x21
 8007bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2240      	movs	r2, #64	; 0x40
 8007c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6a3a      	ldr	r2, [r7, #32]
 8007c0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007c1c:	88f8      	ldrh	r0, [r7, #6]
 8007c1e:	893a      	ldrh	r2, [r7, #8]
 8007c20:	8979      	ldrh	r1, [r7, #10]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f9d3 	bl	8007fd8 <I2C_RequestMemoryWrite>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e0a9      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2bff      	cmp	r3, #255	; 0xff
 8007c4c:	d90e      	bls.n	8007c6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	22ff      	movs	r2, #255	; 0xff
 8007c52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	8979      	ldrh	r1, [r7, #10]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 fc2b 	bl	80084c0 <I2C_TransferConfig>
 8007c6a:	e00f      	b.n	8007c8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	8979      	ldrh	r1, [r7, #10]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 fc1a 	bl	80084c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c90:	68f8      	ldr	r0, [r7, #12]
 8007c92:	f000 faad 	bl	80081f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e07b      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	781a      	ldrb	r2, [r3, #0]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d034      	beq.n	8007d44 <HAL_I2C_Mem_Write+0x1c8>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d130      	bne.n	8007d44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa3f 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e04d      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2bff      	cmp	r3, #255	; 0xff
 8007d04:	d90e      	bls.n	8007d24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	22ff      	movs	r2, #255	; 0xff
 8007d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	8979      	ldrh	r1, [r7, #10]
 8007d14:	2300      	movs	r3, #0
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fbcf 	bl	80084c0 <I2C_TransferConfig>
 8007d22:	e00f      	b.n	8007d44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	8979      	ldrh	r1, [r7, #10]
 8007d36:	2300      	movs	r3, #0
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fbbe 	bl	80084c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d19e      	bne.n	8007c8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fa8c 	bl	8008270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e01a      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2220      	movs	r2, #32
 8007d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6859      	ldr	r1, [r3, #4]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	4b0a      	ldr	r3, [pc, #40]	; (8007da0 <HAL_I2C_Mem_Write+0x224>)
 8007d76:	400b      	ands	r3, r1
 8007d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e000      	b.n	8007d98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007d96:	2302      	movs	r3, #2
  }
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	fe00e800 	.word	0xfe00e800

08007da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af02      	add	r7, sp, #8
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	4608      	mov	r0, r1
 8007dae:	4611      	mov	r1, r2
 8007db0:	461a      	mov	r2, r3
 8007db2:	4603      	mov	r3, r0
 8007db4:	817b      	strh	r3, [r7, #10]
 8007db6:	460b      	mov	r3, r1
 8007db8:	813b      	strh	r3, [r7, #8]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	f040 80fd 	bne.w	8007fc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <HAL_I2C_Mem_Read+0x34>
 8007dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d105      	bne.n	8007de4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0f1      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_I2C_Mem_Read+0x4e>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e0ea      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007dfa:	f7fc fb9b 	bl	8004534 <HAL_GetTick>
 8007dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	9300      	str	r3, [sp, #0]
 8007e04:	2319      	movs	r3, #25
 8007e06:	2201      	movs	r2, #1
 8007e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 f9af 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0d5      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2222      	movs	r2, #34	; 0x22
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2240      	movs	r2, #64	; 0x40
 8007e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a3a      	ldr	r2, [r7, #32]
 8007e36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e44:	88f8      	ldrh	r0, [r7, #6]
 8007e46:	893a      	ldrh	r2, [r7, #8]
 8007e48:	8979      	ldrh	r1, [r7, #10]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	9301      	str	r3, [sp, #4]
 8007e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	4603      	mov	r3, r0
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	f000 f913 	bl	8008080 <I2C_RequestMemoryRead>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e0ad      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2bff      	cmp	r3, #255	; 0xff
 8007e74:	d90e      	bls.n	8007e94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	22ff      	movs	r2, #255	; 0xff
 8007e7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	8979      	ldrh	r1, [r7, #10]
 8007e84:	4b52      	ldr	r3, [pc, #328]	; (8007fd0 <HAL_I2C_Mem_Read+0x22c>)
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fb17 	bl	80084c0 <I2C_TransferConfig>
 8007e92:	e00f      	b.n	8007eb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	8979      	ldrh	r1, [r7, #10]
 8007ea6:	4b4a      	ldr	r3, [pc, #296]	; (8007fd0 <HAL_I2C_Mem_Read+0x22c>)
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fb06 	bl	80084c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 f956 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e07c      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eea:	3b01      	subs	r3, #1
 8007eec:	b29a      	uxth	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d034      	beq.n	8007f74 <HAL_I2C_Mem_Read+0x1d0>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d130      	bne.n	8007f74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	9300      	str	r3, [sp, #0]
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2180      	movs	r1, #128	; 0x80
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 f927 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e04d      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	2bff      	cmp	r3, #255	; 0xff
 8007f34:	d90e      	bls.n	8007f54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	22ff      	movs	r2, #255	; 0xff
 8007f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f40:	b2da      	uxtb	r2, r3
 8007f42:	8979      	ldrh	r1, [r7, #10]
 8007f44:	2300      	movs	r3, #0
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fab7 	bl	80084c0 <I2C_TransferConfig>
 8007f52:	e00f      	b.n	8007f74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	8979      	ldrh	r1, [r7, #10]
 8007f66:	2300      	movs	r3, #0
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 faa6 	bl	80084c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d19a      	bne.n	8007eb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f974 	bl	8008270 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e01a      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2220      	movs	r2, #32
 8007f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6859      	ldr	r1, [r3, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <HAL_I2C_Mem_Read+0x230>)
 8007fa6:	400b      	ands	r3, r1
 8007fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e000      	b.n	8007fc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007fc6:	2302      	movs	r3, #2
  }
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3718      	adds	r7, #24
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	80002400 	.word	0x80002400
 8007fd4:	fe00e800 	.word	0xfe00e800

08007fd8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	817b      	strh	r3, [r7, #10]
 8007fea:	460b      	mov	r3, r1
 8007fec:	813b      	strh	r3, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	8979      	ldrh	r1, [r7, #10]
 8007ff8:	4b20      	ldr	r3, [pc, #128]	; (800807c <I2C_RequestMemoryWrite+0xa4>)
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f000 fa5d 	bl	80084c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	69b9      	ldr	r1, [r7, #24]
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 f8f0 	bl	80081f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e02c      	b.n	8008074 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d105      	bne.n	800802c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008020:	893b      	ldrh	r3, [r7, #8]
 8008022:	b2da      	uxtb	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	629a      	str	r2, [r3, #40]	; 0x28
 800802a:	e015      	b.n	8008058 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800802c:	893b      	ldrh	r3, [r7, #8]
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	b29b      	uxth	r3, r3
 8008032:	b2da      	uxtb	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f8d6 	bl	80081f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e012      	b.n	8008074 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800804e:	893b      	ldrh	r3, [r7, #8]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2200      	movs	r2, #0
 8008060:	2180      	movs	r1, #128	; 0x80
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 f884 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}
 800807c:	80002000 	.word	0x80002000

08008080 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af02      	add	r7, sp, #8
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	4608      	mov	r0, r1
 800808a:	4611      	mov	r1, r2
 800808c:	461a      	mov	r2, r3
 800808e:	4603      	mov	r3, r0
 8008090:	817b      	strh	r3, [r7, #10]
 8008092:	460b      	mov	r3, r1
 8008094:	813b      	strh	r3, [r7, #8]
 8008096:	4613      	mov	r3, r2
 8008098:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800809a:	88fb      	ldrh	r3, [r7, #6]
 800809c:	b2da      	uxtb	r2, r3
 800809e:	8979      	ldrh	r1, [r7, #10]
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <I2C_RequestMemoryRead+0xa4>)
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	2300      	movs	r3, #0
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fa0a 	bl	80084c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	69b9      	ldr	r1, [r7, #24]
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 f89d 	bl	80081f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e02c      	b.n	800811a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080c0:	88fb      	ldrh	r3, [r7, #6]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d105      	bne.n	80080d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080c6:	893b      	ldrh	r3, [r7, #8]
 80080c8:	b2da      	uxtb	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	629a      	str	r2, [r3, #40]	; 0x28
 80080d0:	e015      	b.n	80080fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80080d2:	893b      	ldrh	r3, [r7, #8]
 80080d4:	0a1b      	lsrs	r3, r3, #8
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	69b9      	ldr	r1, [r7, #24]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f883 	bl	80081f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e012      	b.n	800811a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080f4:	893b      	ldrh	r3, [r7, #8]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2200      	movs	r2, #0
 8008106:	2140      	movs	r1, #64	; 0x40
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f831 	bl	8008170 <I2C_WaitOnFlagUntilTimeout>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e000      	b.n	800811a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	80002000 	.word	0x80002000

08008128 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699b      	ldr	r3, [r3, #24]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b02      	cmp	r3, #2
 800813c:	d103      	bne.n	8008146 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2200      	movs	r2, #0
 8008144:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	699b      	ldr	r3, [r3, #24]
 800814c:	f003 0301 	and.w	r3, r3, #1
 8008150:	2b01      	cmp	r3, #1
 8008152:	d007      	beq.n	8008164 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	619a      	str	r2, [r3, #24]
  }
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008180:	e022      	b.n	80081c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d01e      	beq.n	80081c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800818a:	f7fc f9d3 	bl	8004534 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d302      	bcc.n	80081a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d113      	bne.n	80081c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a4:	f043 0220 	orr.w	r2, r3, #32
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e00f      	b.n	80081e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	699a      	ldr	r2, [r3, #24]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4013      	ands	r3, r2
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	bf0c      	ite	eq
 80081d8:	2301      	moveq	r3, #1
 80081da:	2300      	movne	r3, #0
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d0cd      	beq.n	8008182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081fc:	e02c      	b.n	8008258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	68b9      	ldr	r1, [r7, #8]
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f870 	bl	80082e8 <I2C_IsErrorOccurred>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e02a      	b.n	8008268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d01e      	beq.n	8008258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821a:	f7fc f98b 	bl	8004534 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d113      	bne.n	8008258 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008234:	f043 0220 	orr.w	r2, r3, #32
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e007      	b.n	8008268 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	2b02      	cmp	r3, #2
 8008264:	d1cb      	bne.n	80081fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800827c:	e028      	b.n	80082d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f830 	bl	80082e8 <I2C_IsErrorOccurred>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e026      	b.n	80082e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008292:	f7fc f94f 	bl	8004534 <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d302      	bcc.n	80082a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d113      	bne.n	80082d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ac:	f043 0220 	orr.w	r2, r3, #32
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	e007      	b.n	80082e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d1cf      	bne.n	800827e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008302:	2300      	movs	r3, #0
 8008304:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	2b00      	cmp	r3, #0
 8008312:	d075      	beq.n	8008400 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2210      	movs	r2, #16
 800831a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800831c:	e056      	b.n	80083cc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008324:	d052      	beq.n	80083cc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008326:	f7fc f905 	bl	8004534 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	429a      	cmp	r2, r3
 8008334:	d302      	bcc.n	800833c <I2C_IsErrorOccurred+0x54>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d147      	bne.n	80083cc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008346:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800834e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800835a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800835e:	d12e      	bne.n	80083be <I2C_IsErrorOccurred+0xd6>
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008366:	d02a      	beq.n	80083be <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8008368:	7cfb      	ldrb	r3, [r7, #19]
 800836a:	2b20      	cmp	r3, #32
 800836c:	d027      	beq.n	80083be <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800837c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800837e:	f7fc f8d9 	bl	8004534 <HAL_GetTick>
 8008382:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008384:	e01b      	b.n	80083be <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008386:	f7fc f8d5 	bl	8004534 <HAL_GetTick>
 800838a:	4602      	mov	r2, r0
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b19      	cmp	r3, #25
 8008392:	d914      	bls.n	80083be <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008398:	f043 0220 	orr.w	r2, r3, #32
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d1dc      	bne.n	8008386 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	f003 0320 	and.w	r3, r3, #32
 80083d6:	2b20      	cmp	r3, #32
 80083d8:	d003      	beq.n	80083e2 <I2C_IsErrorOccurred+0xfa>
 80083da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d09d      	beq.n	800831e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80083e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d103      	bne.n	80083f2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2220      	movs	r2, #32
 80083f0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f043 0304 	orr.w	r3, r3, #4
 80083f8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008412:	6a3b      	ldr	r3, [r7, #32]
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	f043 0308 	orr.w	r3, r3, #8
 800843a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008444:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00b      	beq.n	800846e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	f043 0302 	orr.w	r3, r3, #2
 800845c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008466:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800846e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008472:	2b00      	cmp	r3, #0
 8008474:	d01c      	beq.n	80084b0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fe56 	bl	8008128 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6859      	ldr	r1, [r3, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b0d      	ldr	r3, [pc, #52]	; (80084bc <I2C_IsErrorOccurred+0x1d4>)
 8008488:	400b      	ands	r3, r1
 800848a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	431a      	orrs	r2, r3
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80084b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3728      	adds	r7, #40	; 0x28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	fe00e800 	.word	0xfe00e800

080084c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	607b      	str	r3, [r7, #4]
 80084ca:	460b      	mov	r3, r1
 80084cc:	817b      	strh	r3, [r7, #10]
 80084ce:	4613      	mov	r3, r2
 80084d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084d2:	897b      	ldrh	r3, [r7, #10]
 80084d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084d8:	7a7b      	ldrb	r3, [r7, #9]
 80084da:	041b      	lsls	r3, r3, #16
 80084dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084e0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084ee:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	0d5b      	lsrs	r3, r3, #21
 80084fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80084fe:	4b08      	ldr	r3, [pc, #32]	; (8008520 <I2C_TransferConfig+0x60>)
 8008500:	430b      	orrs	r3, r1
 8008502:	43db      	mvns	r3, r3
 8008504:	ea02 0103 	and.w	r1, r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008512:	bf00      	nop
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	03ff63ff 	.word	0x03ff63ff

08008524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b20      	cmp	r3, #32
 8008538:	d138      	bne.n	80085ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008544:	2302      	movs	r3, #2
 8008546:	e032      	b.n	80085ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2224      	movs	r2, #36	; 0x24
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6819      	ldr	r1, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b085      	sub	sp, #20
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d139      	bne.n	8008644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80085da:	2302      	movs	r3, #2
 80085dc:	e033      	b.n	8008646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2224      	movs	r2, #36	; 0x24
 80085ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0201 	bic.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800860c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4313      	orrs	r3, r2
 8008616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2220      	movs	r2, #32
 8008634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	e000      	b.n	8008646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008644:	2302      	movs	r3, #2
  }
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
	...

08008654 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8008654:	b480      	push	{r7}
 8008656:	b085      	sub	sp, #20
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800865c:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800865e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008662:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008664:	f043 0302 	orr.w	r3, r3, #2
 8008668:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800866c:	4b09      	ldr	r3, [pc, #36]	; (8008694 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800866e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	4906      	ldr	r1, [pc, #24]	; (8008698 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4313      	orrs	r3, r2
 8008684:	604b      	str	r3, [r1, #4]
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	58024400 	.word	0x58024400
 8008698:	58000400 	.word	0x58000400

0800869c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869e:	b08f      	sub	sp, #60	; 0x3c
 80086a0:	af0a      	add	r7, sp, #40	; 0x28
 80086a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e116      	b.n	80088dc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f010 ff35 	bl	8019538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2203      	movs	r2, #3
 80086d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d102      	bne.n	80086e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f00a fe72 	bl	80133d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	603b      	str	r3, [r7, #0]
 80086f8:	687e      	ldr	r6, [r7, #4]
 80086fa:	466d      	mov	r5, sp
 80086fc:	f106 0410 	add.w	r4, r6, #16
 8008700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800870c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008710:	1d33      	adds	r3, r6, #4
 8008712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008714:	6838      	ldr	r0, [r7, #0]
 8008716:	f00a fd3d 	bl	8013194 <USB_CoreInit>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2202      	movs	r2, #2
 8008724:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e0d7      	b.n	80088dc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f00a fe60 	bl	80133f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
 800873c:	e04a      	b.n	80087d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800873e:	7bfa      	ldrb	r2, [r7, #15]
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	333d      	adds	r3, #61	; 0x3d
 800874e:	2201      	movs	r2, #1
 8008750:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008752:	7bfa      	ldrb	r2, [r7, #15]
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	4613      	mov	r3, r2
 8008758:	00db      	lsls	r3, r3, #3
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	333c      	adds	r3, #60	; 0x3c
 8008762:	7bfa      	ldrb	r2, [r7, #15]
 8008764:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008766:	7bfa      	ldrb	r2, [r7, #15]
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	b298      	uxth	r0, r3
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	3344      	adds	r3, #68	; 0x44
 800877a:	4602      	mov	r2, r0
 800877c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800877e:	7bfa      	ldrb	r2, [r7, #15]
 8008780:	6879      	ldr	r1, [r7, #4]
 8008782:	4613      	mov	r3, r2
 8008784:	00db      	lsls	r3, r3, #3
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	440b      	add	r3, r1
 800878c:	3340      	adds	r3, #64	; 0x40
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008792:	7bfa      	ldrb	r2, [r7, #15]
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	4613      	mov	r3, r2
 8008798:	00db      	lsls	r3, r3, #3
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	440b      	add	r3, r1
 80087a0:	3348      	adds	r3, #72	; 0x48
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087a6:	7bfa      	ldrb	r2, [r7, #15]
 80087a8:	6879      	ldr	r1, [r7, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	00db      	lsls	r3, r3, #3
 80087ae:	4413      	add	r3, r2
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	334c      	adds	r3, #76	; 0x4c
 80087b6:	2200      	movs	r2, #0
 80087b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087ba:	7bfa      	ldrb	r2, [r7, #15]
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	3354      	adds	r3, #84	; 0x54
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ce:	7bfb      	ldrb	r3, [r7, #15]
 80087d0:	3301      	adds	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	7bfa      	ldrb	r2, [r7, #15]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d3af      	bcc.n	800873e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087de:	2300      	movs	r3, #0
 80087e0:	73fb      	strb	r3, [r7, #15]
 80087e2:	e044      	b.n	800886e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80087e4:	7bfa      	ldrb	r2, [r7, #15]
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4613      	mov	r3, r2
 80087ea:	00db      	lsls	r3, r3, #3
 80087ec:	4413      	add	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	440b      	add	r3, r1
 80087f2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80087fa:	7bfa      	ldrb	r2, [r7, #15]
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	00db      	lsls	r3, r3, #3
 8008802:	4413      	add	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800880c:	7bfa      	ldrb	r2, [r7, #15]
 800880e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008810:	7bfa      	ldrb	r2, [r7, #15]
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	00db      	lsls	r3, r3, #3
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008822:	2200      	movs	r2, #0
 8008824:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008826:	7bfa      	ldrb	r2, [r7, #15]
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800883c:	7bfa      	ldrb	r2, [r7, #15]
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	4613      	mov	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	440b      	add	r3, r1
 800884a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008852:	7bfa      	ldrb	r2, [r7, #15]
 8008854:	6879      	ldr	r1, [r7, #4]
 8008856:	4613      	mov	r3, r2
 8008858:	00db      	lsls	r3, r3, #3
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	440b      	add	r3, r1
 8008860:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	3301      	adds	r3, #1
 800886c:	73fb      	strb	r3, [r7, #15]
 800886e:	7bfa      	ldrb	r2, [r7, #15]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	429a      	cmp	r2, r3
 8008876:	d3b5      	bcc.n	80087e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	603b      	str	r3, [r7, #0]
 800887e:	687e      	ldr	r6, [r7, #4]
 8008880:	466d      	mov	r5, sp
 8008882:	f106 0410 	add.w	r4, r6, #16
 8008886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800888a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800888c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800888e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008892:	e885 0003 	stmia.w	r5, {r0, r1}
 8008896:	1d33      	adds	r3, r6, #4
 8008898:	cb0e      	ldmia	r3, {r1, r2, r3}
 800889a:	6838      	ldr	r0, [r7, #0]
 800889c:	f00a fdf8 	bl	8013490 <USB_DevInit>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d005      	beq.n	80088b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e014      	b.n	80088dc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d102      	bne.n	80088d0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 f98c 	bl	8009be8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f00b ff46 	bl	8014766 <USB_DevDisconnect>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080088e4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d101      	bne.n	8008900 <HAL_PCD_Start+0x1c>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e020      	b.n	8008942 <HAL_PCD_Start+0x5e>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	2b01      	cmp	r3, #1
 800890e:	d109      	bne.n	8008924 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008914:	2b01      	cmp	r3, #1
 8008916:	d005      	beq.n	8008924 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f00a fd43 	bl	80133b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f00b fef6 	bl	8014724 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800894a:	b590      	push	{r4, r7, lr}
 800894c:	b08d      	sub	sp, #52	; 0x34
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f00b ffb4 	bl	80148ce <USB_GetMode>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 84b7 	bne.w	80092dc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f00b ff18 	bl	80147a8 <USB_ReadInterrupts>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 84ad 	beq.w	80092da <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f00b ff05 	bl	80147a8 <USB_ReadInterrupts>
 800899e:	4603      	mov	r3, r0
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d107      	bne.n	80089b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695a      	ldr	r2, [r3, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f002 0202 	and.w	r2, r2, #2
 80089b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f00b fef3 	bl	80147a8 <USB_ReadInterrupts>
 80089c2:	4603      	mov	r3, r0
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d161      	bne.n	8008a90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f022 0210 	bic.w	r2, r2, #16
 80089da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	f003 020f 	and.w	r2, r3, #15
 80089e8:	4613      	mov	r3, r2
 80089ea:	00db      	lsls	r3, r3, #3
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	4413      	add	r3, r2
 80089f8:	3304      	adds	r3, #4
 80089fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	0c5b      	lsrs	r3, r3, #17
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d124      	bne.n	8008a52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a0e:	4013      	ands	r3, r2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d035      	beq.n	8008a80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	6a38      	ldr	r0, [r7, #32]
 8008a28:	f00b fd2a 	bl	8014480 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	091b      	lsrs	r3, r3, #4
 8008a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a38:	441a      	add	r2, r3
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6a1a      	ldr	r2, [r3, #32]
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	091b      	lsrs	r3, r3, #4
 8008a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a4a:	441a      	add	r2, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	621a      	str	r2, [r3, #32]
 8008a50:	e016      	b.n	8008a80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	0c5b      	lsrs	r3, r3, #17
 8008a56:	f003 030f 	and.w	r3, r3, #15
 8008a5a:	2b06      	cmp	r3, #6
 8008a5c:	d110      	bne.n	8008a80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a64:	2208      	movs	r2, #8
 8008a66:	4619      	mov	r1, r3
 8008a68:	6a38      	ldr	r0, [r7, #32]
 8008a6a:	f00b fd09 	bl	8014480 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	6a1a      	ldr	r2, [r3, #32]
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	091b      	lsrs	r3, r3, #4
 8008a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a7a:	441a      	add	r2, r3
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	699a      	ldr	r2, [r3, #24]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0210 	orr.w	r2, r2, #16
 8008a8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f00b fe87 	bl	80147a8 <USB_ReadInterrupts>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008aa4:	f040 80a7 	bne.w	8008bf6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f00b fe8c 	bl	80147ce <USB_ReadDevAllOutEpInterrupt>
 8008ab6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008ab8:	e099      	b.n	8008bee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 808e 	beq.w	8008be2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008acc:	b2d2      	uxtb	r2, r2
 8008ace:	4611      	mov	r1, r2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f00b feb0 	bl	8014836 <USB_ReadDevOutEPInterrupt>
 8008ad6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00c      	beq.n	8008afc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aee:	461a      	mov	r2, r3
 8008af0:	2301      	movs	r3, #1
 8008af2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008af4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fef0 	bl	80098dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f003 0308 	and.w	r3, r3, #8
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00c      	beq.n	8008b20 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	461a      	mov	r2, r3
 8008b14:	2308      	movs	r3, #8
 8008b16:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 ffc6 	bl	8009aac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f003 0310 	and.w	r3, r3, #16
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d008      	beq.n	8008b3c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	461a      	mov	r2, r3
 8008b38:	2310      	movs	r3, #16
 8008b3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d030      	beq.n	8008ba8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b4e:	2b80      	cmp	r3, #128	; 0x80
 8008b50:	d109      	bne.n	8008b66 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b64:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b68:	4613      	mov	r3, r2
 8008b6a:	00db      	lsls	r3, r3, #3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	3304      	adds	r3, #4
 8008b7a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	78db      	ldrb	r3, [r3, #3]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d108      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2200      	movs	r2, #0
 8008b88:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f010 fe03 	bl	801979c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	015a      	lsls	r2, r3, #5
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bda:	461a      	mov	r2, r3
 8008bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008be0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	3301      	adds	r3, #1
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	085b      	lsrs	r3, r3, #1
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f47f af62 	bne.w	8008aba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f00b fdd4 	bl	80147a8 <USB_ReadInterrupts>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c0a:	f040 80db 	bne.w	8008dc4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f00b fdf5 	bl	8014802 <USB_ReadDevAllInEpInterrupt>
 8008c18:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c1e:	e0cd      	b.n	8008dbc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80c2 	beq.w	8008db0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f00b fe1b 	bl	8014872 <USB_ReadDevInEPInterrupt>
 8008c3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f003 0301 	and.w	r3, r3, #1
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d057      	beq.n	8008cf8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	f003 030f 	and.w	r3, r3, #15
 8008c4e:	2201      	movs	r2, #1
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	69f9      	ldr	r1, [r7, #28]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4013      	ands	r3, r2
 8008c6a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c78:	461a      	mov	r2, r3
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d132      	bne.n	8008cec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008c86:	6879      	ldr	r1, [r7, #4]
 8008c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	334c      	adds	r3, #76	; 0x4c
 8008c96:	6819      	ldr	r1, [r3, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	00db      	lsls	r3, r3, #3
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4403      	add	r3, r0
 8008ca6:	3348      	adds	r3, #72	; 0x48
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4419      	add	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	4413      	add	r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	4403      	add	r3, r0
 8008cba:	334c      	adds	r3, #76	; 0x4c
 8008cbc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d113      	bne.n	8008cec <HAL_PCD_IRQHandler+0x3a2>
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc8:	4613      	mov	r3, r2
 8008cca:	00db      	lsls	r3, r3, #3
 8008ccc:	4413      	add	r3, r2
 8008cce:	009b      	lsls	r3, r3, #2
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3354      	adds	r3, #84	; 0x54
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d108      	bne.n	8008cec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6818      	ldr	r0, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	f00b fe24 	bl	8014934 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f010 fccd 	bl	8019692 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d008      	beq.n	8008d14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0e:	461a      	mov	r2, r3
 8008d10:	2308      	movs	r3, #8
 8008d12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d008      	beq.n	8008d30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d008      	beq.n	8008d4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d46:	461a      	mov	r2, r3
 8008d48:	2340      	movs	r3, #64	; 0x40
 8008d4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d023      	beq.n	8008d9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d58:	6a38      	ldr	r0, [r7, #32]
 8008d5a:	f00a fcf7 	bl	801374c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d60:	4613      	mov	r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	3338      	adds	r3, #56	; 0x38
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	3304      	adds	r3, #4
 8008d70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	78db      	ldrb	r3, [r3, #3]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d108      	bne.n	8008d8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f010 fd1a 	bl	80197c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	015a      	lsls	r2, r3, #5
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	4413      	add	r3, r2
 8008d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d98:	461a      	mov	r2, r3
 8008d9a:	2302      	movs	r3, #2
 8008d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008da8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fd08 	bl	80097c0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	3301      	adds	r3, #1
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	085b      	lsrs	r3, r3, #1
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f47f af2e 	bne.w	8008c20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f00b fced 	bl	80147a8 <USB_ReadInterrupts>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dd8:	d122      	bne.n	8008e20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d108      	bne.n	8008e0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 ff14 	bl	8009c30 <HAL_PCDEx_LPM_Callback>
 8008e08:	e002      	b.n	8008e10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f010 fcb8 	bl	8019780 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695a      	ldr	r2, [r3, #20]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f00b fcbf 	bl	80147a8 <USB_ReadInterrupts>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e34:	d112      	bne.n	8008e5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d102      	bne.n	8008e4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f010 fc74 	bl	8019734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	695a      	ldr	r2, [r3, #20]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4618      	mov	r0, r3
 8008e62:	f00b fca1 	bl	80147a8 <USB_ReadInterrupts>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e70:	d121      	bne.n	8008eb6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695a      	ldr	r2, [r3, #20]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008e80:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d111      	bne.n	8008eb0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	089b      	lsrs	r3, r3, #2
 8008e9c:	f003 020f 	and.w	r2, r3, #15
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fec1 	bl	8009c30 <HAL_PCDEx_LPM_Callback>
 8008eae:	e002      	b.n	8008eb6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f010 fc3f 	bl	8019734 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f00b fc74 	bl	80147a8 <USB_ReadInterrupts>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eca:	f040 80b7 	bne.w	800903c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	69fa      	ldr	r2, [r7, #28]
 8008ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008edc:	f023 0301 	bic.w	r3, r3, #1
 8008ee0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f00a fc2f 	bl	801374c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008eee:	2300      	movs	r3, #0
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ef2:	e046      	b.n	8008f82 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f00:	461a      	mov	r2, r3
 8008f02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	015a      	lsls	r2, r3, #5
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	4413      	add	r3, r2
 8008f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f34:	461a      	mov	r2, r3
 8008f36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f4c:	0151      	lsls	r1, r2, #5
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	440a      	add	r2, r1
 8008f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	3301      	adds	r3, #1
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d3b3      	bcc.n	8008ef4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f9a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008f9e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d016      	beq.n	8008fd6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb8:	f043 030b 	orr.w	r3, r3, #11
 8008fbc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fce:	f043 030b 	orr.w	r3, r3, #11
 8008fd2:	6453      	str	r3, [r2, #68]	; 0x44
 8008fd4:	e015      	b.n	8009002 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fdc:	695a      	ldr	r2, [r3, #20]
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	f242 032b 	movw	r3, #8235	; 0x202b
 8008fea:	4313      	orrs	r3, r2
 8008fec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ffc:	f043 030b 	orr.w	r3, r3, #11
 8009000:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009002:	69fb      	ldr	r3, [r7, #28]
 8009004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009010:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009014:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009026:	461a      	mov	r2, r3
 8009028:	f00b fc84 	bl	8014934 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695a      	ldr	r2, [r3, #20]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800903a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f00b fbb1 	bl	80147a8 <USB_ReadInterrupts>
 8009046:	4603      	mov	r3, r0
 8009048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800904c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009050:	d124      	bne.n	800909c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f00b fc48 	bl	80148ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4618      	mov	r0, r3
 8009062:	f00a fbf0 	bl	8013846 <USB_GetDevSpeed>
 8009066:	4603      	mov	r3, r0
 8009068:	461a      	mov	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681c      	ldr	r4, [r3, #0]
 8009072:	f001 fda1 	bl	800abb8 <HAL_RCC_GetHCLKFreq>
 8009076:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800907c:	b2db      	uxtb	r3, r3
 800907e:	461a      	mov	r2, r3
 8009080:	4620      	mov	r0, r4
 8009082:	f00a f8f5 	bl	8013270 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f010 fb2b 	bl	80196e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800909a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f00b fb81 	bl	80147a8 <USB_ReadInterrupts>
 80090a6:	4603      	mov	r3, r0
 80090a8:	f003 0308 	and.w	r3, r3, #8
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d10a      	bne.n	80090c6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f010 fb08 	bl	80196c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f002 0208 	and.w	r2, r2, #8
 80090c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f00b fb6c 	bl	80147a8 <USB_ReadInterrupts>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d6:	2b80      	cmp	r3, #128	; 0x80
 80090d8:	d122      	bne.n	8009120 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090e6:	2301      	movs	r3, #1
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ea:	e014      	b.n	8009116 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f0:	4613      	mov	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d105      	bne.n	8009110 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	b2db      	uxtb	r3, r3
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb27 	bl	800975e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	3301      	adds	r3, #1
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800911c:	429a      	cmp	r2, r3
 800911e:	d3e5      	bcc.n	80090ec <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f00b fb3f 	bl	80147a8 <USB_ReadInterrupts>
 800912a:	4603      	mov	r3, r0
 800912c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009134:	d13b      	bne.n	80091ae <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009136:	2301      	movs	r3, #1
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
 800913a:	e02b      	b.n	8009194 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800913c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009150:	4613      	mov	r3, r2
 8009152:	00db      	lsls	r3, r3, #3
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	3340      	adds	r3, #64	; 0x40
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d115      	bne.n	800918e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009162:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009164:	2b00      	cmp	r3, #0
 8009166:	da12      	bge.n	800918e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916c:	4613      	mov	r3, r2
 800916e:	00db      	lsls	r3, r3, #3
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	333f      	adds	r3, #63	; 0x3f
 8009178:	2201      	movs	r2, #1
 800917a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009184:	b2db      	uxtb	r3, r3
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fae8 	bl	800975e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	3301      	adds	r3, #1
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919a:	429a      	cmp	r2, r3
 800919c:	d3ce      	bcc.n	800913c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695a      	ldr	r2, [r3, #20]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80091ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f00b faf8 	bl	80147a8 <USB_ReadInterrupts>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091c2:	d155      	bne.n	8009270 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091c4:	2301      	movs	r3, #1
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
 80091c8:	e045      	b.n	8009256 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	4613      	mov	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4413      	add	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d12e      	bne.n	8009250 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80091f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	da2b      	bge.n	8009250 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009204:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009208:	429a      	cmp	r2, r3
 800920a:	d121      	bne.n	8009250 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009210:	4613      	mov	r3, r2
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	4413      	add	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	440b      	add	r3, r1
 800921a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800921e:	2201      	movs	r2, #1
 8009220:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800922e:	6a3b      	ldr	r3, [r7, #32]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10a      	bne.n	8009250 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	69fa      	ldr	r2, [r7, #28]
 8009244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800924c:	6053      	str	r3, [r2, #4]
            break;
 800924e:	e007      	b.n	8009260 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	3301      	adds	r3, #1
 8009254:	627b      	str	r3, [r7, #36]	; 0x24
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	685b      	ldr	r3, [r3, #4]
 800925a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925c:	429a      	cmp	r2, r3
 800925e:	d3b4      	bcc.n	80091ca <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695a      	ldr	r2, [r3, #20]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800926e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4618      	mov	r0, r3
 8009276:	f00b fa97 	bl	80147a8 <USB_ReadInterrupts>
 800927a:	4603      	mov	r3, r0
 800927c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009284:	d10a      	bne.n	800929c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f010 faac 	bl	80197e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	695a      	ldr	r2, [r3, #20]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800929a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f00b fa81 	bl	80147a8 <USB_ReadInterrupts>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f003 0304 	and.w	r3, r3, #4
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d115      	bne.n	80092dc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d002      	beq.n	80092c8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f010 fa9c 	bl	8019800 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6859      	ldr	r1, [r3, #4]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	605a      	str	r2, [r3, #4]
 80092d8:	e000      	b.n	80092dc <HAL_PCD_IRQHandler+0x992>
      return;
 80092da:	bf00      	nop
    }
  }
}
 80092dc:	3734      	adds	r7, #52	; 0x34
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd90      	pop	{r4, r7, pc}

080092e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d101      	bne.n	80092fc <HAL_PCD_SetAddress+0x1a>
 80092f8:	2302      	movs	r3, #2
 80092fa:	e013      	b.n	8009324 <HAL_PCD_SetAddress+0x42>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	4611      	mov	r1, r2
 8009314:	4618      	mov	r0, r3
 8009316:	f00b f9df 	bl	80146d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b084      	sub	sp, #16
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	4608      	mov	r0, r1
 8009336:	4611      	mov	r1, r2
 8009338:	461a      	mov	r2, r3
 800933a:	4603      	mov	r3, r0
 800933c:	70fb      	strb	r3, [r7, #3]
 800933e:	460b      	mov	r3, r1
 8009340:	803b      	strh	r3, [r7, #0]
 8009342:	4613      	mov	r3, r2
 8009344:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800934a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800934e:	2b00      	cmp	r3, #0
 8009350:	da0f      	bge.n	8009372 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	f003 020f 	and.w	r2, r3, #15
 8009358:	4613      	mov	r3, r2
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	3338      	adds	r3, #56	; 0x38
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	4413      	add	r3, r2
 8009366:	3304      	adds	r3, #4
 8009368:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2201      	movs	r2, #1
 800936e:	705a      	strb	r2, [r3, #1]
 8009370:	e00f      	b.n	8009392 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	f003 020f 	and.w	r2, r3, #15
 8009378:	4613      	mov	r3, r2
 800937a:	00db      	lsls	r3, r3, #3
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	4413      	add	r3, r2
 8009388:	3304      	adds	r3, #4
 800938a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009392:	78fb      	ldrb	r3, [r7, #3]
 8009394:	f003 030f 	and.w	r3, r3, #15
 8009398:	b2da      	uxtb	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800939e:	883a      	ldrh	r2, [r7, #0]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	78ba      	ldrb	r2, [r7, #2]
 80093a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	785b      	ldrb	r3, [r3, #1]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80093bc:	78bb      	ldrb	r3, [r7, #2]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d102      	bne.n	80093c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_PCD_EP_Open+0xaa>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e00e      	b.n	80093f4 <HAL_PCD_EP_Open+0xc8>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	68f9      	ldr	r1, [r7, #12]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f00a fa53 	bl	8013890 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80093f2:	7afb      	ldrb	r3, [r7, #11]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	da0f      	bge.n	8009430 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	f003 020f 	and.w	r2, r3, #15
 8009416:	4613      	mov	r3, r2
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	3338      	adds	r3, #56	; 0x38
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	4413      	add	r3, r2
 8009424:	3304      	adds	r3, #4
 8009426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2201      	movs	r2, #1
 800942c:	705a      	strb	r2, [r3, #1]
 800942e:	e00f      	b.n	8009450 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	4613      	mov	r3, r2
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009450:	78fb      	ldrb	r3, [r7, #3]
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	b2da      	uxtb	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009462:	2b01      	cmp	r3, #1
 8009464:	d101      	bne.n	800946a <HAL_PCD_EP_Close+0x6e>
 8009466:	2302      	movs	r3, #2
 8009468:	e00e      	b.n	8009488 <HAL_PCD_EP_Close+0x8c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	4618      	mov	r0, r3
 800947a:	f00a fa91 	bl	80139a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	460b      	mov	r3, r1
 800949e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094a0:	7afb      	ldrb	r3, [r7, #11]
 80094a2:	f003 020f 	and.w	r2, r3, #15
 80094a6:	4613      	mov	r3, r2
 80094a8:	00db      	lsls	r3, r3, #3
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	3304      	adds	r3, #4
 80094b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2200      	movs	r2, #0
 80094ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2200      	movs	r2, #0
 80094d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094d2:	7afb      	ldrb	r3, [r7, #11]
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d102      	bne.n	80094ec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	461a      	mov	r2, r3
 8009502:	6979      	ldr	r1, [r7, #20]
 8009504:	f00a fd78 	bl	8013ff8 <USB_EP0StartXfer>
 8009508:	e008      	b.n	800951c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	6979      	ldr	r1, [r7, #20]
 8009518:	f00a fb1e 	bl	8013b58 <USB_EPStartXfer>
  }

  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3718      	adds	r7, #24
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	460b      	mov	r3, r1
 8009530:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009532:	78fb      	ldrb	r3, [r7, #3]
 8009534:	f003 020f 	and.w	r2, r3, #15
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	4613      	mov	r3, r2
 800953c:	00db      	lsls	r3, r3, #3
 800953e:	4413      	add	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	440b      	add	r3, r1
 8009544:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8009548:	681b      	ldr	r3, [r3, #0]
}
 800954a:	4618      	mov	r0, r3
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	60f8      	str	r0, [r7, #12]
 800955e:	607a      	str	r2, [r7, #4]
 8009560:	603b      	str	r3, [r7, #0]
 8009562:	460b      	mov	r3, r1
 8009564:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009566:	7afb      	ldrb	r3, [r7, #11]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	3338      	adds	r3, #56	; 0x38
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	3304      	adds	r3, #4
 800957c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2200      	movs	r2, #0
 800958e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2201      	movs	r2, #1
 8009594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	b2da      	uxtb	r2, r3
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d102      	bne.n	80095b0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095aa:	687a      	ldr	r2, [r7, #4]
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80095b0:	7afb      	ldrb	r3, [r7, #11]
 80095b2:	f003 030f 	and.w	r3, r3, #15
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d109      	bne.n	80095ce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	691b      	ldr	r3, [r3, #16]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	461a      	mov	r2, r3
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	f00a fd16 	bl	8013ff8 <USB_EP0StartXfer>
 80095cc:	e008      	b.n	80095e0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6818      	ldr	r0, [r3, #0]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	461a      	mov	r2, r3
 80095da:	6979      	ldr	r1, [r7, #20]
 80095dc:	f00a fabc 	bl	8013b58 <USB_EPStartXfer>
  }

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b084      	sub	sp, #16
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	f003 020f 	and.w	r2, r3, #15
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d901      	bls.n	8009608 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e050      	b.n	80096aa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800960c:	2b00      	cmp	r3, #0
 800960e:	da0f      	bge.n	8009630 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009610:	78fb      	ldrb	r3, [r7, #3]
 8009612:	f003 020f 	and.w	r2, r3, #15
 8009616:	4613      	mov	r3, r2
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	3338      	adds	r3, #56	; 0x38
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	3304      	adds	r3, #4
 8009626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2201      	movs	r2, #1
 800962c:	705a      	strb	r2, [r3, #1]
 800962e:	e00d      	b.n	800964c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	4613      	mov	r3, r2
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	4413      	add	r3, r2
 8009642:	3304      	adds	r3, #4
 8009644:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2201      	movs	r2, #1
 8009650:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	b2da      	uxtb	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009664:	2b01      	cmp	r3, #1
 8009666:	d101      	bne.n	800966c <HAL_PCD_EP_SetStall+0x82>
 8009668:	2302      	movs	r3, #2
 800966a:	e01e      	b.n	80096aa <HAL_PCD_EP_SetStall+0xc0>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68f9      	ldr	r1, [r7, #12]
 800967a:	4618      	mov	r0, r3
 800967c:	f00a ff58 	bl	8014530 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	f003 030f 	and.w	r3, r3, #15
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	b2d9      	uxtb	r1, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800969a:	461a      	mov	r2, r3
 800969c:	f00b f94a 	bl	8014934 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b084      	sub	sp, #16
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
 80096ba:	460b      	mov	r3, r1
 80096bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	f003 020f 	and.w	r2, r3, #15
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d901      	bls.n	80096d0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e042      	b.n	8009756 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	da0f      	bge.n	80096f8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	f003 020f 	and.w	r2, r3, #15
 80096de:	4613      	mov	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	4413      	add	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	3338      	adds	r3, #56	; 0x38
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	4413      	add	r3, r2
 80096ec:	3304      	adds	r3, #4
 80096ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2201      	movs	r2, #1
 80096f4:	705a      	strb	r2, [r3, #1]
 80096f6:	e00f      	b.n	8009718 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	f003 020f 	and.w	r2, r3, #15
 80096fe:	4613      	mov	r3, r2
 8009700:	00db      	lsls	r3, r3, #3
 8009702:	4413      	add	r3, r2
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	4413      	add	r3, r2
 800970e:	3304      	adds	r3, #4
 8009710:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	b2da      	uxtb	r2, r3
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009730:	2b01      	cmp	r3, #1
 8009732:	d101      	bne.n	8009738 <HAL_PCD_EP_ClrStall+0x86>
 8009734:	2302      	movs	r3, #2
 8009736:	e00e      	b.n	8009756 <HAL_PCD_EP_ClrStall+0xa4>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68f9      	ldr	r1, [r7, #12]
 8009746:	4618      	mov	r0, r3
 8009748:	f00a ff60 	bl	801460c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3710      	adds	r7, #16
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}

0800975e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800975e:	b580      	push	{r7, lr}
 8009760:	b084      	sub	sp, #16
 8009762:	af00      	add	r7, sp, #0
 8009764:	6078      	str	r0, [r7, #4]
 8009766:	460b      	mov	r3, r1
 8009768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800976a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800976e:	2b00      	cmp	r3, #0
 8009770:	da0c      	bge.n	800978c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	f003 020f 	and.w	r2, r3, #15
 8009778:	4613      	mov	r3, r2
 800977a:	00db      	lsls	r3, r3, #3
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	3338      	adds	r3, #56	; 0x38
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	4413      	add	r3, r2
 8009786:	3304      	adds	r3, #4
 8009788:	60fb      	str	r3, [r7, #12]
 800978a:	e00c      	b.n	80097a6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	f003 020f 	and.w	r2, r3, #15
 8009792:	4613      	mov	r3, r2
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4413      	add	r3, r2
 80097a2:	3304      	adds	r3, #4
 80097a4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68f9      	ldr	r1, [r7, #12]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f00a fd7f 	bl	80142b0 <USB_EPStopXfer>
 80097b2:	4603      	mov	r3, r0
 80097b4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80097b6:	7afb      	ldrb	r3, [r7, #11]
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08a      	sub	sp, #40	; 0x28
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	4613      	mov	r3, r2
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	4413      	add	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	3338      	adds	r3, #56	; 0x38
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4413      	add	r3, r2
 80097e4:	3304      	adds	r3, #4
 80097e6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	6a1a      	ldr	r2, [r3, #32]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d901      	bls.n	80097f8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e06c      	b.n	80098d2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	699a      	ldr	r2, [r3, #24]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	69fa      	ldr	r2, [r7, #28]
 800980a:	429a      	cmp	r2, r3
 800980c:	d902      	bls.n	8009814 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	3303      	adds	r3, #3
 8009818:	089b      	lsrs	r3, r3, #2
 800981a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800981c:	e02b      	b.n	8009876 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	699a      	ldr	r2, [r3, #24]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	429a      	cmp	r2, r3
 8009832:	d902      	bls.n	800983a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3303      	adds	r3, #3
 800983e:	089b      	lsrs	r3, r3, #2
 8009840:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6919      	ldr	r1, [r3, #16]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	b2da      	uxtb	r2, r3
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009852:	b2db      	uxtb	r3, r3
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	4603      	mov	r3, r0
 8009858:	6978      	ldr	r0, [r7, #20]
 800985a:	f00a fdd3 	bl	8014404 <USB_WritePacket>

    ep->xfer_buff  += len;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	441a      	add	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6a1a      	ldr	r2, [r3, #32]
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	441a      	add	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	4413      	add	r3, r2
 800987e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	b29b      	uxth	r3, r3
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	429a      	cmp	r2, r3
 800988a:	d809      	bhi.n	80098a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1a      	ldr	r2, [r3, #32]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009894:	429a      	cmp	r2, r3
 8009896:	d203      	bcs.n	80098a0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1be      	bne.n	800981e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	699a      	ldr	r2, [r3, #24]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d811      	bhi.n	80098d0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	2201      	movs	r2, #1
 80098b4:	fa02 f303 	lsl.w	r3, r2, r3
 80098b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	43db      	mvns	r3, r3
 80098c6:	6939      	ldr	r1, [r7, #16]
 80098c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098cc:	4013      	ands	r3, r2
 80098ce:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3720      	adds	r7, #32
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	333c      	adds	r3, #60	; 0x3c
 80098f4:	3304      	adds	r3, #4
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d17b      	bne.n	8009a0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b00      	cmp	r3, #0
 800991a:	d015      	beq.n	8009948 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	4a61      	ldr	r2, [pc, #388]	; (8009aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009920:	4293      	cmp	r3, r2
 8009922:	f240 80b9 	bls.w	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 80b3 	beq.w	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	015a      	lsls	r2, r3, #5
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	4413      	add	r3, r2
 800993a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800993e:	461a      	mov	r2, r3
 8009940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009944:	6093      	str	r3, [r2, #8]
 8009946:	e0a7      	b.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b00      	cmp	r3, #0
 8009950:	d009      	beq.n	8009966 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800995e:	461a      	mov	r2, r3
 8009960:	2320      	movs	r3, #32
 8009962:	6093      	str	r3, [r2, #8]
 8009964:	e098      	b.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800996c:	2b00      	cmp	r3, #0
 800996e:	f040 8093 	bne.w	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	4a4b      	ldr	r2, [pc, #300]	; (8009aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d90f      	bls.n	800999a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00a      	beq.n	800999a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	4413      	add	r3, r2
 800998c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009990:	461a      	mov	r2, r3
 8009992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009996:	6093      	str	r3, [r2, #8]
 8009998:	e07e      	b.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	4613      	mov	r3, r2
 800999e:	00db      	lsls	r3, r3, #3
 80099a0:	4413      	add	r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	4413      	add	r3, r2
 80099ac:	3304      	adds	r3, #4
 80099ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	69da      	ldr	r2, [r3, #28]
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	0159      	lsls	r1, r3, #5
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	440b      	add	r3, r1
 80099bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099c6:	1ad2      	subs	r2, r2, r3
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d114      	bne.n	80099fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d109      	bne.n	80099ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099e4:	461a      	mov	r2, r3
 80099e6:	2101      	movs	r1, #1
 80099e8:	f00a ffa4 	bl	8014934 <USB_EP0_OutStart>
 80099ec:	e006      	b.n	80099fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	691a      	ldr	r2, [r3, #16]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	441a      	add	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f00f fe2a 	bl	801965c <HAL_PCD_DataOutStageCallback>
 8009a08:	e046      	b.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	4a26      	ldr	r2, [pc, #152]	; (8009aa8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d124      	bne.n	8009a5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00a      	beq.n	8009a32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a28:	461a      	mov	r2, r3
 8009a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a2e:	6093      	str	r3, [r2, #8]
 8009a30:	e032      	b.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	f003 0320 	and.w	r3, r3, #32
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d008      	beq.n	8009a4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a48:	461a      	mov	r2, r3
 8009a4a:	2320      	movs	r3, #32
 8009a4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f00f fe01 	bl	801965c <HAL_PCD_DataOutStageCallback>
 8009a5a:	e01d      	b.n	8009a98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d114      	bne.n	8009a8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009a62:	6879      	ldr	r1, [r7, #4]
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	4613      	mov	r3, r2
 8009a68:	00db      	lsls	r3, r3, #3
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	440b      	add	r3, r1
 8009a70:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d108      	bne.n	8009a8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a84:	461a      	mov	r2, r3
 8009a86:	2100      	movs	r1, #0
 8009a88:	f00a ff54 	bl	8014934 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f00f fde2 	bl	801965c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	4f54300a 	.word	0x4f54300a
 8009aa8:	4f54310a 	.word	0x4f54310a

08009aac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	333c      	adds	r3, #60	; 0x3c
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	015a      	lsls	r2, r3, #5
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4a15      	ldr	r2, [pc, #84]	; (8009b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d90e      	bls.n	8009b00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d009      	beq.n	8009b00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af8:	461a      	mov	r2, r3
 8009afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009afe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f00f fd99 	bl	8019638 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4a0a      	ldr	r2, [pc, #40]	; (8009b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d90c      	bls.n	8009b28 <PCD_EP_OutSetupPacket_int+0x7c>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	691b      	ldr	r3, [r3, #16]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d108      	bne.n	8009b28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b20:	461a      	mov	r2, r3
 8009b22:	2101      	movs	r1, #1
 8009b24:	f00a ff06 	bl	8014934 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	4f54300a 	.word	0x4f54300a

08009b38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b085      	sub	sp, #20
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	460b      	mov	r3, r1
 8009b42:	70fb      	strb	r3, [r7, #3]
 8009b44:	4613      	mov	r3, r2
 8009b46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d107      	bne.n	8009b66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009b56:	883b      	ldrh	r3, [r7, #0]
 8009b58:	0419      	lsls	r1, r3, #16
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	629a      	str	r2, [r3, #40]	; 0x28
 8009b64:	e028      	b.n	8009bb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	0c1b      	lsrs	r3, r3, #16
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	4413      	add	r3, r2
 8009b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]
 8009b78:	e00d      	b.n	8009b96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	3340      	adds	r3, #64	; 0x40
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	4413      	add	r3, r2
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	0c1b      	lsrs	r3, r3, #16
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	3301      	adds	r3, #1
 8009b94:	73fb      	strb	r3, [r7, #15]
 8009b96:	7bfa      	ldrb	r2, [r7, #15]
 8009b98:	78fb      	ldrb	r3, [r7, #3]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d3ec      	bcc.n	8009b7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009ba0:	883b      	ldrh	r3, [r7, #0]
 8009ba2:	0418      	lsls	r0, r3, #16
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6819      	ldr	r1, [r3, #0]
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	4302      	orrs	r2, r0
 8009bb0:	3340      	adds	r3, #64	; 0x40
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	887a      	ldrh	r2, [r7, #2]
 8009bd8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c16:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <HAL_PCDEx_ActivateLPM+0x44>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3714      	adds	r7, #20
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr
 8009c2c:	10000003 	.word	0x10000003

08009c30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c3c:	bf00      	nop
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a04      	ldr	r2, [pc, #16]	; (8009c64 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c56:	6013      	str	r3, [r2, #0]
}
 8009c58:	bf00      	nop
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	58024800 	.word	0x58024800

08009c68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c70:	4b19      	ldr	r3, [pc, #100]	; (8009cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d00a      	beq.n	8009c92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c7c:	4b16      	ldr	r3, [pc, #88]	; (8009cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f003 0307 	and.w	r3, r3, #7
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d001      	beq.n	8009c8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e01f      	b.n	8009cce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	e01d      	b.n	8009cce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c92:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	f023 0207 	bic.w	r2, r3, #7
 8009c9a:	490f      	ldr	r1, [pc, #60]	; (8009cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ca2:	f7fa fc47 	bl	8004534 <HAL_GetTick>
 8009ca6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ca8:	e009      	b.n	8009cbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009caa:	f7fa fc43 	bl	8004534 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cb8:	d901      	bls.n	8009cbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e007      	b.n	8009cce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cbe:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <HAL_PWREx_ConfigSupply+0x70>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cca:	d1ee      	bne.n	8009caa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	58024800 	.word	0x58024800

08009cdc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009ce0:	4b05      	ldr	r3, [pc, #20]	; (8009cf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	4a04      	ldr	r2, [pc, #16]	; (8009cf8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cea:	60d3      	str	r3, [r2, #12]
}
 8009cec:	bf00      	nop
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	58024800 	.word	0x58024800

08009cfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d102      	bne.n	8009d10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f000 bc1d 	b.w	800a54a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 8087 	beq.w	8009e2c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d1e:	4b99      	ldr	r3, [pc, #612]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d28:	4b96      	ldr	r3, [pc, #600]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	2b10      	cmp	r3, #16
 8009d32:	d007      	beq.n	8009d44 <HAL_RCC_OscConfig+0x48>
 8009d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d36:	2b18      	cmp	r3, #24
 8009d38:	d110      	bne.n	8009d5c <HAL_RCC_OscConfig+0x60>
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d10b      	bne.n	8009d5c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d44:	4b8f      	ldr	r3, [pc, #572]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d06c      	beq.n	8009e2a <HAL_RCC_OscConfig+0x12e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d168      	bne.n	8009e2a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e3f6      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d64:	d106      	bne.n	8009d74 <HAL_RCC_OscConfig+0x78>
 8009d66:	4b87      	ldr	r3, [pc, #540]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a86      	ldr	r2, [pc, #536]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	e02e      	b.n	8009dd2 <HAL_RCC_OscConfig+0xd6>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10c      	bne.n	8009d96 <HAL_RCC_OscConfig+0x9a>
 8009d7c:	4b81      	ldr	r3, [pc, #516]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a80      	ldr	r2, [pc, #512]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	4b7e      	ldr	r3, [pc, #504]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a7d      	ldr	r2, [pc, #500]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d92:	6013      	str	r3, [r2, #0]
 8009d94:	e01d      	b.n	8009dd2 <HAL_RCC_OscConfig+0xd6>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d9e:	d10c      	bne.n	8009dba <HAL_RCC_OscConfig+0xbe>
 8009da0:	4b78      	ldr	r3, [pc, #480]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a77      	ldr	r2, [pc, #476]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009da6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	4b75      	ldr	r3, [pc, #468]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a74      	ldr	r2, [pc, #464]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	e00b      	b.n	8009dd2 <HAL_RCC_OscConfig+0xd6>
 8009dba:	4b72      	ldr	r3, [pc, #456]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a71      	ldr	r2, [pc, #452]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	4b6f      	ldr	r3, [pc, #444]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a6e      	ldr	r2, [pc, #440]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009dcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dd0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d013      	beq.n	8009e02 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dda:	f7fa fbab 	bl	8004534 <HAL_GetTick>
 8009dde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009de0:	e008      	b.n	8009df4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009de2:	f7fa fba7 	bl	8004534 <HAL_GetTick>
 8009de6:	4602      	mov	r2, r0
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	1ad3      	subs	r3, r2, r3
 8009dec:	2b64      	cmp	r3, #100	; 0x64
 8009dee:	d901      	bls.n	8009df4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e3aa      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009df4:	4b63      	ldr	r3, [pc, #396]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0f0      	beq.n	8009de2 <HAL_RCC_OscConfig+0xe6>
 8009e00:	e014      	b.n	8009e2c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e02:	f7fa fb97 	bl	8004534 <HAL_GetTick>
 8009e06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e08:	e008      	b.n	8009e1c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e0a:	f7fa fb93 	bl	8004534 <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	2b64      	cmp	r3, #100	; 0x64
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e396      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e1c:	4b59      	ldr	r3, [pc, #356]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1f0      	bne.n	8009e0a <HAL_RCC_OscConfig+0x10e>
 8009e28:	e000      	b.n	8009e2c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e2a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f003 0302 	and.w	r3, r3, #2
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 80cb 	beq.w	8009fd0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e3a:	4b52      	ldr	r3, [pc, #328]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e42:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e44:	4b4f      	ldr	r3, [pc, #316]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e4a:	6a3b      	ldr	r3, [r7, #32]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d007      	beq.n	8009e60 <HAL_RCC_OscConfig+0x164>
 8009e50:	6a3b      	ldr	r3, [r7, #32]
 8009e52:	2b18      	cmp	r3, #24
 8009e54:	d156      	bne.n	8009f04 <HAL_RCC_OscConfig+0x208>
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d151      	bne.n	8009f04 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e60:	4b48      	ldr	r3, [pc, #288]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f003 0304 	and.w	r3, r3, #4
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d005      	beq.n	8009e78 <HAL_RCC_OscConfig+0x17c>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e368      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e78:	4b42      	ldr	r3, [pc, #264]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f023 0219 	bic.w	r2, r3, #25
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	493f      	ldr	r1, [pc, #252]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009e86:	4313      	orrs	r3, r2
 8009e88:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009e8a:	f7fa fb53 	bl	8004534 <HAL_GetTick>
 8009e8e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e90:	e008      	b.n	8009ea4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009e92:	f7fa fb4f 	bl	8004534 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d901      	bls.n	8009ea4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e352      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ea4:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d0f0      	beq.n	8009e92 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eb0:	f7fa fb70 	bl	8004594 <HAL_GetREVID>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d817      	bhi.n	8009eee <HAL_RCC_OscConfig+0x1f2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b40      	cmp	r3, #64	; 0x40
 8009ec4:	d108      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x1dc>
 8009ec6:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009ece:	4a2d      	ldr	r2, [pc, #180]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ed6:	e07b      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed8:	4b2a      	ldr	r3, [pc, #168]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	031b      	lsls	r3, r3, #12
 8009ee6:	4927      	ldr	r1, [pc, #156]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eec:	e070      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eee:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	061b      	lsls	r3, r3, #24
 8009efc:	4921      	ldr	r1, [pc, #132]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f02:	e065      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d048      	beq.n	8009f9e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f0c:	4b1d      	ldr	r3, [pc, #116]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f023 0219 	bic.w	r2, r3, #25
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	491a      	ldr	r1, [pc, #104]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f1e:	f7fa fb09 	bl	8004534 <HAL_GetTick>
 8009f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f24:	e008      	b.n	8009f38 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f26:	f7fa fb05 	bl	8004534 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d901      	bls.n	8009f38 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e308      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f38:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0f0      	beq.n	8009f26 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f44:	f7fa fb26 	bl	8004594 <HAL_GetREVID>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d81a      	bhi.n	8009f88 <HAL_RCC_OscConfig+0x28c>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	691b      	ldr	r3, [r3, #16]
 8009f56:	2b40      	cmp	r3, #64	; 0x40
 8009f58:	d108      	bne.n	8009f6c <HAL_RCC_OscConfig+0x270>
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f62:	4a08      	ldr	r2, [pc, #32]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f68:	6053      	str	r3, [r2, #4]
 8009f6a:	e031      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2d4>
 8009f6c:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	031b      	lsls	r3, r3, #12
 8009f7a:	4902      	ldr	r1, [pc, #8]	; (8009f84 <HAL_RCC_OscConfig+0x288>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	604b      	str	r3, [r1, #4]
 8009f80:	e026      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2d4>
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	4b9a      	ldr	r3, [pc, #616]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	061b      	lsls	r3, r3, #24
 8009f96:	4997      	ldr	r1, [pc, #604]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	604b      	str	r3, [r1, #4]
 8009f9c:	e018      	b.n	8009fd0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f9e:	4b95      	ldr	r3, [pc, #596]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a94      	ldr	r2, [pc, #592]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009fa4:	f023 0301 	bic.w	r3, r3, #1
 8009fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009faa:	f7fa fac3 	bl	8004534 <HAL_GetTick>
 8009fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fb0:	e008      	b.n	8009fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fb2:	f7fa fabf 	bl	8004534 <HAL_GetTick>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	d901      	bls.n	8009fc4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e2c2      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fc4:	4b8b      	ldr	r3, [pc, #556]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1f0      	bne.n	8009fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 80a9 	beq.w	800a130 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fde:	4b85      	ldr	r3, [pc, #532]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fe6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fe8:	4b82      	ldr	r3, [pc, #520]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 8009fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b08      	cmp	r3, #8
 8009ff2:	d007      	beq.n	800a004 <HAL_RCC_OscConfig+0x308>
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2b18      	cmp	r3, #24
 8009ff8:	d13a      	bne.n	800a070 <HAL_RCC_OscConfig+0x374>
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f003 0303 	and.w	r3, r3, #3
 800a000:	2b01      	cmp	r3, #1
 800a002:	d135      	bne.n	800a070 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a004:	4b7b      	ldr	r3, [pc, #492]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d005      	beq.n	800a01c <HAL_RCC_OscConfig+0x320>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	2b80      	cmp	r3, #128	; 0x80
 800a016:	d001      	beq.n	800a01c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e296      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a01c:	f7fa faba 	bl	8004594 <HAL_GetREVID>
 800a020:	4603      	mov	r3, r0
 800a022:	f241 0203 	movw	r2, #4099	; 0x1003
 800a026:	4293      	cmp	r3, r2
 800a028:	d817      	bhi.n	800a05a <HAL_RCC_OscConfig+0x35e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d108      	bne.n	800a044 <HAL_RCC_OscConfig+0x348>
 800a032:	4b70      	ldr	r3, [pc, #448]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a03a:	4a6e      	ldr	r2, [pc, #440]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a03c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a040:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a042:	e075      	b.n	800a130 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a044:	4b6b      	ldr	r3, [pc, #428]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6a1b      	ldr	r3, [r3, #32]
 800a050:	069b      	lsls	r3, r3, #26
 800a052:	4968      	ldr	r1, [pc, #416]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a054:	4313      	orrs	r3, r2
 800a056:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a058:	e06a      	b.n	800a130 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a05a:	4b66      	ldr	r3, [pc, #408]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	061b      	lsls	r3, r3, #24
 800a068:	4962      	ldr	r1, [pc, #392]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a06e:	e05f      	b.n	800a130 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d042      	beq.n	800a0fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a078:	4b5e      	ldr	r3, [pc, #376]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a5d      	ldr	r2, [pc, #372]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a07e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a084:	f7fa fa56 	bl	8004534 <HAL_GetTick>
 800a088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a08a:	e008      	b.n	800a09e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a08c:	f7fa fa52 	bl	8004534 <HAL_GetTick>
 800a090:	4602      	mov	r2, r0
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	1ad3      	subs	r3, r2, r3
 800a096:	2b02      	cmp	r3, #2
 800a098:	d901      	bls.n	800a09e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e255      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a09e:	4b55      	ldr	r3, [pc, #340]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0f0      	beq.n	800a08c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0aa:	f7fa fa73 	bl	8004594 <HAL_GetREVID>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d817      	bhi.n	800a0e8 <HAL_RCC_OscConfig+0x3ec>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a1b      	ldr	r3, [r3, #32]
 800a0bc:	2b20      	cmp	r3, #32
 800a0be:	d108      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x3d6>
 800a0c0:	4b4c      	ldr	r3, [pc, #304]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a0c8:	4a4a      	ldr	r2, [pc, #296]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0ce:	6053      	str	r3, [r2, #4]
 800a0d0:	e02e      	b.n	800a130 <HAL_RCC_OscConfig+0x434>
 800a0d2:	4b48      	ldr	r3, [pc, #288]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	069b      	lsls	r3, r3, #26
 800a0e0:	4944      	ldr	r1, [pc, #272]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	604b      	str	r3, [r1, #4]
 800a0e6:	e023      	b.n	800a130 <HAL_RCC_OscConfig+0x434>
 800a0e8:	4b42      	ldr	r3, [pc, #264]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6a1b      	ldr	r3, [r3, #32]
 800a0f4:	061b      	lsls	r3, r3, #24
 800a0f6:	493f      	ldr	r1, [pc, #252]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	60cb      	str	r3, [r1, #12]
 800a0fc:	e018      	b.n	800a130 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0fe:	4b3d      	ldr	r3, [pc, #244]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a3c      	ldr	r2, [pc, #240]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a104:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a10a:	f7fa fa13 	bl	8004534 <HAL_GetTick>
 800a10e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a110:	e008      	b.n	800a124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a112:	f7fa fa0f 	bl	8004534 <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d901      	bls.n	800a124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e212      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a124:	4b33      	ldr	r3, [pc, #204]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1f0      	bne.n	800a112 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f003 0308 	and.w	r3, r3, #8
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d036      	beq.n	800a1aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	695b      	ldr	r3, [r3, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d019      	beq.n	800a178 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a144:	4b2b      	ldr	r3, [pc, #172]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a148:	4a2a      	ldr	r2, [pc, #168]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a150:	f7fa f9f0 	bl	8004534 <HAL_GetTick>
 800a154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a156:	e008      	b.n	800a16a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a158:	f7fa f9ec 	bl	8004534 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	2b02      	cmp	r3, #2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e1ef      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a16a:	4b22      	ldr	r3, [pc, #136]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0f0      	beq.n	800a158 <HAL_RCC_OscConfig+0x45c>
 800a176:	e018      	b.n	800a1aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a178:	4b1e      	ldr	r3, [pc, #120]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a17a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a17c:	4a1d      	ldr	r2, [pc, #116]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a17e:	f023 0301 	bic.w	r3, r3, #1
 800a182:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a184:	f7fa f9d6 	bl	8004534 <HAL_GetTick>
 800a188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a18a:	e008      	b.n	800a19e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a18c:	f7fa f9d2 	bl	8004534 <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	2b02      	cmp	r3, #2
 800a198:	d901      	bls.n	800a19e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e1d5      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a19e:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a1a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1a2:	f003 0302 	and.w	r3, r3, #2
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1f0      	bne.n	800a18c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d039      	beq.n	800a22a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	699b      	ldr	r3, [r3, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d01c      	beq.n	800a1f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1be:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a0c      	ldr	r2, [pc, #48]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a1c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1ca:	f7fa f9b3 	bl	8004534 <HAL_GetTick>
 800a1ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1d0:	e008      	b.n	800a1e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a1d2:	f7fa f9af 	bl	8004534 <HAL_GetTick>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	1ad3      	subs	r3, r2, r3
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d901      	bls.n	800a1e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e1b2      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1e4:	4b03      	ldr	r3, [pc, #12]	; (800a1f4 <HAL_RCC_OscConfig+0x4f8>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d0f0      	beq.n	800a1d2 <HAL_RCC_OscConfig+0x4d6>
 800a1f0:	e01b      	b.n	800a22a <HAL_RCC_OscConfig+0x52e>
 800a1f2:	bf00      	nop
 800a1f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1f8:	4b9b      	ldr	r3, [pc, #620]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a9a      	ldr	r2, [pc, #616]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a202:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a204:	f7fa f996 	bl	8004534 <HAL_GetTick>
 800a208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a20a:	e008      	b.n	800a21e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a20c:	f7fa f992 	bl	8004534 <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d901      	bls.n	800a21e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e195      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a21e:	4b92      	ldr	r3, [pc, #584]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f0      	bne.n	800a20c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 0304 	and.w	r3, r3, #4
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 8081 	beq.w	800a33a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a238:	4b8c      	ldr	r3, [pc, #560]	; (800a46c <HAL_RCC_OscConfig+0x770>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a8b      	ldr	r2, [pc, #556]	; (800a46c <HAL_RCC_OscConfig+0x770>)
 800a23e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a244:	f7fa f976 	bl	8004534 <HAL_GetTick>
 800a248:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a24a:	e008      	b.n	800a25e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a24c:	f7fa f972 	bl	8004534 <HAL_GetTick>
 800a250:	4602      	mov	r2, r0
 800a252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a254:	1ad3      	subs	r3, r2, r3
 800a256:	2b64      	cmp	r3, #100	; 0x64
 800a258:	d901      	bls.n	800a25e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e175      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a25e:	4b83      	ldr	r3, [pc, #524]	; (800a46c <HAL_RCC_OscConfig+0x770>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0f0      	beq.n	800a24c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	689b      	ldr	r3, [r3, #8]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d106      	bne.n	800a280 <HAL_RCC_OscConfig+0x584>
 800a272:	4b7d      	ldr	r3, [pc, #500]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a276:	4a7c      	ldr	r2, [pc, #496]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	6713      	str	r3, [r2, #112]	; 0x70
 800a27e:	e02d      	b.n	800a2dc <HAL_RCC_OscConfig+0x5e0>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d10c      	bne.n	800a2a2 <HAL_RCC_OscConfig+0x5a6>
 800a288:	4b77      	ldr	r3, [pc, #476]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28c:	4a76      	ldr	r2, [pc, #472]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a28e:	f023 0301 	bic.w	r3, r3, #1
 800a292:	6713      	str	r3, [r2, #112]	; 0x70
 800a294:	4b74      	ldr	r3, [pc, #464]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a298:	4a73      	ldr	r2, [pc, #460]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a29a:	f023 0304 	bic.w	r3, r3, #4
 800a29e:	6713      	str	r3, [r2, #112]	; 0x70
 800a2a0:	e01c      	b.n	800a2dc <HAL_RCC_OscConfig+0x5e0>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	2b05      	cmp	r3, #5
 800a2a8:	d10c      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x5c8>
 800a2aa:	4b6f      	ldr	r3, [pc, #444]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ae:	4a6e      	ldr	r2, [pc, #440]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2b0:	f043 0304 	orr.w	r3, r3, #4
 800a2b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2b6:	4b6c      	ldr	r3, [pc, #432]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	4a6b      	ldr	r2, [pc, #428]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6713      	str	r3, [r2, #112]	; 0x70
 800a2c2:	e00b      	b.n	800a2dc <HAL_RCC_OscConfig+0x5e0>
 800a2c4:	4b68      	ldr	r3, [pc, #416]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c8:	4a67      	ldr	r2, [pc, #412]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2ca:	f023 0301 	bic.w	r3, r3, #1
 800a2ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a2d0:	4b65      	ldr	r3, [pc, #404]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d4:	4a64      	ldr	r2, [pc, #400]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a2d6:	f023 0304 	bic.w	r3, r3, #4
 800a2da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d015      	beq.n	800a310 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2e4:	f7fa f926 	bl	8004534 <HAL_GetTick>
 800a2e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2ea:	e00a      	b.n	800a302 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2ec:	f7fa f922 	bl	8004534 <HAL_GetTick>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f4:	1ad3      	subs	r3, r2, r3
 800a2f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d901      	bls.n	800a302 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e123      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a302:	4b59      	ldr	r3, [pc, #356]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d0ee      	beq.n	800a2ec <HAL_RCC_OscConfig+0x5f0>
 800a30e:	e014      	b.n	800a33a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a310:	f7fa f910 	bl	8004534 <HAL_GetTick>
 800a314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a316:	e00a      	b.n	800a32e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a318:	f7fa f90c 	bl	8004534 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	f241 3288 	movw	r2, #5000	; 0x1388
 800a326:	4293      	cmp	r3, r2
 800a328:	d901      	bls.n	800a32e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e10d      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a32e:	4b4e      	ldr	r3, [pc, #312]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1ee      	bne.n	800a318 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8102 	beq.w	800a548 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a344:	4b48      	ldr	r3, [pc, #288]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a34c:	2b18      	cmp	r3, #24
 800a34e:	f000 80bd 	beq.w	800a4cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b02      	cmp	r3, #2
 800a358:	f040 809e 	bne.w	800a498 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a35c:	4b42      	ldr	r3, [pc, #264]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a41      	ldr	r2, [pc, #260]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a368:	f7fa f8e4 	bl	8004534 <HAL_GetTick>
 800a36c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a36e:	e008      	b.n	800a382 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a370:	f7fa f8e0 	bl	8004534 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d901      	bls.n	800a382 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e0e3      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a382:	4b39      	ldr	r3, [pc, #228]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d1f0      	bne.n	800a370 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a38e:	4b36      	ldr	r3, [pc, #216]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a392:	4b37      	ldr	r3, [pc, #220]	; (800a470 <HAL_RCC_OscConfig+0x774>)
 800a394:	4013      	ands	r3, r2
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a39e:	0112      	lsls	r2, r2, #4
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	4931      	ldr	r1, [pc, #196]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	628b      	str	r3, [r1, #40]	; 0x28
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	025b      	lsls	r3, r3, #9
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	431a      	orrs	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	041b      	lsls	r3, r3, #16
 800a3c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	061b      	lsls	r3, r3, #24
 800a3d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3d8:	4923      	ldr	r1, [pc, #140]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a3de:	4b22      	ldr	r3, [pc, #136]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e2:	4a21      	ldr	r2, [pc, #132]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a3e4:	f023 0301 	bic.w	r3, r3, #1
 800a3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3ea:	4b1f      	ldr	r3, [pc, #124]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a3ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ee:	4b21      	ldr	r3, [pc, #132]	; (800a474 <HAL_RCC_OscConfig+0x778>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3f6:	00d2      	lsls	r2, r2, #3
 800a3f8:	491b      	ldr	r1, [pc, #108]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3fe:	4b1a      	ldr	r3, [pc, #104]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a402:	f023 020c 	bic.w	r2, r3, #12
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	4917      	ldr	r1, [pc, #92]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a40c:	4313      	orrs	r3, r2
 800a40e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a410:	4b15      	ldr	r3, [pc, #84]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a414:	f023 0202 	bic.w	r2, r3, #2
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41c:	4912      	ldr	r1, [pc, #72]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a422:	4b11      	ldr	r3, [pc, #68]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	4a10      	ldr	r2, [pc, #64]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a42c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	4a0d      	ldr	r2, [pc, #52]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43e:	4a0a      	ldr	r2, [pc, #40]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a446:	4b08      	ldr	r3, [pc, #32]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	4a07      	ldr	r2, [pc, #28]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a44c:	f043 0301 	orr.w	r3, r3, #1
 800a450:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a452:	4b05      	ldr	r3, [pc, #20]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a04      	ldr	r2, [pc, #16]	; (800a468 <HAL_RCC_OscConfig+0x76c>)
 800a458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a45c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a45e:	f7fa f869 	bl	8004534 <HAL_GetTick>
 800a462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a464:	e011      	b.n	800a48a <HAL_RCC_OscConfig+0x78e>
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
 800a46c:	58024800 	.word	0x58024800
 800a470:	fffffc0c 	.word	0xfffffc0c
 800a474:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a478:	f7fa f85c 	bl	8004534 <HAL_GetTick>
 800a47c:	4602      	mov	r2, r0
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	2b02      	cmp	r3, #2
 800a484:	d901      	bls.n	800a48a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a486:	2303      	movs	r3, #3
 800a488:	e05f      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a48a:	4b32      	ldr	r3, [pc, #200]	; (800a554 <HAL_RCC_OscConfig+0x858>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a492:	2b00      	cmp	r3, #0
 800a494:	d0f0      	beq.n	800a478 <HAL_RCC_OscConfig+0x77c>
 800a496:	e057      	b.n	800a548 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a498:	4b2e      	ldr	r3, [pc, #184]	; (800a554 <HAL_RCC_OscConfig+0x858>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a2d      	ldr	r2, [pc, #180]	; (800a554 <HAL_RCC_OscConfig+0x858>)
 800a49e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a4a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a4:	f7fa f846 	bl	8004534 <HAL_GetTick>
 800a4a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4ac:	f7fa f842 	bl	8004534 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e045      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4be:	4b25      	ldr	r3, [pc, #148]	; (800a554 <HAL_RCC_OscConfig+0x858>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1f0      	bne.n	800a4ac <HAL_RCC_OscConfig+0x7b0>
 800a4ca:	e03d      	b.n	800a548 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4cc:	4b21      	ldr	r3, [pc, #132]	; (800a554 <HAL_RCC_OscConfig+0x858>)
 800a4ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4d2:	4b20      	ldr	r3, [pc, #128]	; (800a554 <HAL_RCC_OscConfig+0x858>)
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d031      	beq.n	800a544 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f003 0203 	and.w	r2, r3, #3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d12a      	bne.n	800a544 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	091b      	lsrs	r3, r3, #4
 800a4f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d122      	bne.n	800a544 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d11a      	bne.n	800a544 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	0a5b      	lsrs	r3, r3, #9
 800a512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a51a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d111      	bne.n	800a544 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	0c1b      	lsrs	r3, r3, #16
 800a524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a52e:	429a      	cmp	r2, r3
 800a530:	d108      	bne.n	800a544 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	0e1b      	lsrs	r3, r3, #24
 800a536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a53e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a540:	429a      	cmp	r2, r3
 800a542:	d001      	beq.n	800a548 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	e000      	b.n	800a54a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3730      	adds	r7, #48	; 0x30
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	58024400 	.word	0x58024400

0800a558 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e19c      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a56c:	4b8a      	ldr	r3, [pc, #552]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 030f 	and.w	r3, r3, #15
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d910      	bls.n	800a59c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a57a:	4b87      	ldr	r3, [pc, #540]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f023 020f 	bic.w	r2, r3, #15
 800a582:	4985      	ldr	r1, [pc, #532]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	4313      	orrs	r3, r2
 800a588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a58a:	4b83      	ldr	r3, [pc, #524]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 030f 	and.w	r3, r3, #15
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	429a      	cmp	r2, r3
 800a596:	d001      	beq.n	800a59c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	e184      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d010      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691a      	ldr	r2, [r3, #16]
 800a5ac:	4b7b      	ldr	r3, [pc, #492]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d908      	bls.n	800a5ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5b8:	4b78      	ldr	r3, [pc, #480]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	691b      	ldr	r3, [r3, #16]
 800a5c4:	4975      	ldr	r1, [pc, #468]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0308 	and.w	r3, r3, #8
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d010      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	695a      	ldr	r2, [r3, #20]
 800a5da:	4b70      	ldr	r3, [pc, #448]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d908      	bls.n	800a5f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5e6:	4b6d      	ldr	r3, [pc, #436]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a5e8:	69db      	ldr	r3, [r3, #28]
 800a5ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	496a      	ldr	r1, [pc, #424]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b00      	cmp	r3, #0
 800a602:	d010      	beq.n	800a626 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699a      	ldr	r2, [r3, #24]
 800a608:	4b64      	ldr	r3, [pc, #400]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a60a:	69db      	ldr	r3, [r3, #28]
 800a60c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a610:	429a      	cmp	r2, r3
 800a612:	d908      	bls.n	800a626 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a614:	4b61      	ldr	r3, [pc, #388]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a616:	69db      	ldr	r3, [r3, #28]
 800a618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	495e      	ldr	r1, [pc, #376]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a622:	4313      	orrs	r3, r2
 800a624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d010      	beq.n	800a654 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	69da      	ldr	r2, [r3, #28]
 800a636:	4b59      	ldr	r3, [pc, #356]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a63e:	429a      	cmp	r2, r3
 800a640:	d908      	bls.n	800a654 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a642:	4b56      	ldr	r3, [pc, #344]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69db      	ldr	r3, [r3, #28]
 800a64e:	4953      	ldr	r1, [pc, #332]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a650:	4313      	orrs	r3, r2
 800a652:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0302 	and.w	r3, r3, #2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d010      	beq.n	800a682 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68da      	ldr	r2, [r3, #12]
 800a664:	4b4d      	ldr	r3, [pc, #308]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d908      	bls.n	800a682 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a670:	4b4a      	ldr	r3, [pc, #296]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	f023 020f 	bic.w	r2, r3, #15
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	4947      	ldr	r1, [pc, #284]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d055      	beq.n	800a73a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a68e:	4b43      	ldr	r3, [pc, #268]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	689b      	ldr	r3, [r3, #8]
 800a69a:	4940      	ldr	r1, [pc, #256]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	685b      	ldr	r3, [r3, #4]
 800a6a4:	2b02      	cmp	r3, #2
 800a6a6:	d107      	bne.n	800a6b8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6a8:	4b3c      	ldr	r3, [pc, #240]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d121      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0f6      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	2b03      	cmp	r3, #3
 800a6be:	d107      	bne.n	800a6d0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6c0:	4b36      	ldr	r3, [pc, #216]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d115      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0ea      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d107      	bne.n	800a6e8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6d8:	4b30      	ldr	r3, [pc, #192]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d109      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e0de      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6e8:	4b2c      	ldr	r3, [pc, #176]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d101      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e0d6      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6f8:	4b28      	ldr	r3, [pc, #160]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a6fa:	691b      	ldr	r3, [r3, #16]
 800a6fc:	f023 0207 	bic.w	r2, r3, #7
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4925      	ldr	r1, [pc, #148]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a706:	4313      	orrs	r3, r2
 800a708:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a70a:	f7f9 ff13 	bl	8004534 <HAL_GetTick>
 800a70e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a710:	e00a      	b.n	800a728 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a712:	f7f9 ff0f 	bl	8004534 <HAL_GetTick>
 800a716:	4602      	mov	r2, r0
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a720:	4293      	cmp	r3, r2
 800a722:	d901      	bls.n	800a728 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e0be      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a728:	4b1c      	ldr	r3, [pc, #112]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	429a      	cmp	r2, r3
 800a738:	d1eb      	bne.n	800a712 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d010      	beq.n	800a768 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	4b14      	ldr	r3, [pc, #80]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	f003 030f 	and.w	r3, r3, #15
 800a752:	429a      	cmp	r2, r3
 800a754:	d208      	bcs.n	800a768 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a756:	4b11      	ldr	r3, [pc, #68]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	f023 020f 	bic.w	r2, r3, #15
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	490e      	ldr	r1, [pc, #56]	; (800a79c <HAL_RCC_ClockConfig+0x244>)
 800a764:	4313      	orrs	r3, r2
 800a766:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a768:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	683a      	ldr	r2, [r7, #0]
 800a772:	429a      	cmp	r2, r3
 800a774:	d214      	bcs.n	800a7a0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a776:	4b08      	ldr	r3, [pc, #32]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f023 020f 	bic.w	r2, r3, #15
 800a77e:	4906      	ldr	r1, [pc, #24]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	4313      	orrs	r3, r2
 800a784:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a786:	4b04      	ldr	r3, [pc, #16]	; (800a798 <HAL_RCC_ClockConfig+0x240>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 030f 	and.w	r3, r3, #15
 800a78e:	683a      	ldr	r2, [r7, #0]
 800a790:	429a      	cmp	r2, r3
 800a792:	d005      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e086      	b.n	800a8a6 <HAL_RCC_ClockConfig+0x34e>
 800a798:	52002000 	.word	0x52002000
 800a79c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0304 	and.w	r3, r3, #4
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d010      	beq.n	800a7ce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	691a      	ldr	r2, [r3, #16]
 800a7b0:	4b3f      	ldr	r3, [pc, #252]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d208      	bcs.n	800a7ce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7bc:	4b3c      	ldr	r3, [pc, #240]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	4939      	ldr	r1, [pc, #228]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a7ca:	4313      	orrs	r3, r2
 800a7cc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 0308 	and.w	r3, r3, #8
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d010      	beq.n	800a7fc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	695a      	ldr	r2, [r3, #20]
 800a7de:	4b34      	ldr	r3, [pc, #208]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a7e0:	69db      	ldr	r3, [r3, #28]
 800a7e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d208      	bcs.n	800a7fc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a7ea:	4b31      	ldr	r3, [pc, #196]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a7ec:	69db      	ldr	r3, [r3, #28]
 800a7ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	695b      	ldr	r3, [r3, #20]
 800a7f6:	492e      	ldr	r1, [pc, #184]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0310 	and.w	r3, r3, #16
 800a804:	2b00      	cmp	r3, #0
 800a806:	d010      	beq.n	800a82a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	699a      	ldr	r2, [r3, #24]
 800a80c:	4b28      	ldr	r3, [pc, #160]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a80e:	69db      	ldr	r3, [r3, #28]
 800a810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a814:	429a      	cmp	r2, r3
 800a816:	d208      	bcs.n	800a82a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a818:	4b25      	ldr	r3, [pc, #148]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	4922      	ldr	r1, [pc, #136]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a826:	4313      	orrs	r3, r2
 800a828:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 0320 	and.w	r3, r3, #32
 800a832:	2b00      	cmp	r3, #0
 800a834:	d010      	beq.n	800a858 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	69da      	ldr	r2, [r3, #28]
 800a83a:	4b1d      	ldr	r3, [pc, #116]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a842:	429a      	cmp	r2, r3
 800a844:	d208      	bcs.n	800a858 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a846:	4b1a      	ldr	r3, [pc, #104]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	4917      	ldr	r1, [pc, #92]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a854:	4313      	orrs	r3, r2
 800a856:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a858:	f000 f834 	bl	800a8c4 <HAL_RCC_GetSysClockFreq>
 800a85c:	4602      	mov	r2, r0
 800a85e:	4b14      	ldr	r3, [pc, #80]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	0a1b      	lsrs	r3, r3, #8
 800a864:	f003 030f 	and.w	r3, r3, #15
 800a868:	4912      	ldr	r1, [pc, #72]	; (800a8b4 <HAL_RCC_ClockConfig+0x35c>)
 800a86a:	5ccb      	ldrb	r3, [r1, r3]
 800a86c:	f003 031f 	and.w	r3, r3, #31
 800a870:	fa22 f303 	lsr.w	r3, r2, r3
 800a874:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a876:	4b0e      	ldr	r3, [pc, #56]	; (800a8b0 <HAL_RCC_ClockConfig+0x358>)
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	f003 030f 	and.w	r3, r3, #15
 800a87e:	4a0d      	ldr	r2, [pc, #52]	; (800a8b4 <HAL_RCC_ClockConfig+0x35c>)
 800a880:	5cd3      	ldrb	r3, [r2, r3]
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	693a      	ldr	r2, [r7, #16]
 800a888:	fa22 f303 	lsr.w	r3, r2, r3
 800a88c:	4a0a      	ldr	r2, [pc, #40]	; (800a8b8 <HAL_RCC_ClockConfig+0x360>)
 800a88e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a890:	4a0a      	ldr	r2, [pc, #40]	; (800a8bc <HAL_RCC_ClockConfig+0x364>)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a896:	4b0a      	ldr	r3, [pc, #40]	; (800a8c0 <HAL_RCC_ClockConfig+0x368>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f7f9 fe00 	bl	80044a0 <HAL_InitTick>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	58024400 	.word	0x58024400
 800a8b4:	0801d3c8 	.word	0x0801d3c8
 800a8b8:	24000004 	.word	0x24000004
 800a8bc:	24000000 	.word	0x24000000
 800a8c0:	24000008 	.word	0x24000008

0800a8c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b089      	sub	sp, #36	; 0x24
 800a8c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8ca:	4bb3      	ldr	r3, [pc, #716]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8d2:	2b18      	cmp	r3, #24
 800a8d4:	f200 8155 	bhi.w	800ab82 <HAL_RCC_GetSysClockFreq+0x2be>
 800a8d8:	a201      	add	r2, pc, #4	; (adr r2, 800a8e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8de:	bf00      	nop
 800a8e0:	0800a945 	.word	0x0800a945
 800a8e4:	0800ab83 	.word	0x0800ab83
 800a8e8:	0800ab83 	.word	0x0800ab83
 800a8ec:	0800ab83 	.word	0x0800ab83
 800a8f0:	0800ab83 	.word	0x0800ab83
 800a8f4:	0800ab83 	.word	0x0800ab83
 800a8f8:	0800ab83 	.word	0x0800ab83
 800a8fc:	0800ab83 	.word	0x0800ab83
 800a900:	0800a96b 	.word	0x0800a96b
 800a904:	0800ab83 	.word	0x0800ab83
 800a908:	0800ab83 	.word	0x0800ab83
 800a90c:	0800ab83 	.word	0x0800ab83
 800a910:	0800ab83 	.word	0x0800ab83
 800a914:	0800ab83 	.word	0x0800ab83
 800a918:	0800ab83 	.word	0x0800ab83
 800a91c:	0800ab83 	.word	0x0800ab83
 800a920:	0800a971 	.word	0x0800a971
 800a924:	0800ab83 	.word	0x0800ab83
 800a928:	0800ab83 	.word	0x0800ab83
 800a92c:	0800ab83 	.word	0x0800ab83
 800a930:	0800ab83 	.word	0x0800ab83
 800a934:	0800ab83 	.word	0x0800ab83
 800a938:	0800ab83 	.word	0x0800ab83
 800a93c:	0800ab83 	.word	0x0800ab83
 800a940:	0800a977 	.word	0x0800a977
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a944:	4b94      	ldr	r3, [pc, #592]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0320 	and.w	r3, r3, #32
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d009      	beq.n	800a964 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a950:	4b91      	ldr	r3, [pc, #580]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	08db      	lsrs	r3, r3, #3
 800a956:	f003 0303 	and.w	r3, r3, #3
 800a95a:	4a90      	ldr	r2, [pc, #576]	; (800ab9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a95c:	fa22 f303 	lsr.w	r3, r2, r3
 800a960:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a962:	e111      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a964:	4b8d      	ldr	r3, [pc, #564]	; (800ab9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a966:	61bb      	str	r3, [r7, #24]
    break;
 800a968:	e10e      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a96a:	4b8d      	ldr	r3, [pc, #564]	; (800aba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a96c:	61bb      	str	r3, [r7, #24]
    break;
 800a96e:	e10b      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a970:	4b8c      	ldr	r3, [pc, #560]	; (800aba4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a972:	61bb      	str	r3, [r7, #24]
    break;
 800a974:	e108      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a976:	4b88      	ldr	r3, [pc, #544]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	f003 0303 	and.w	r3, r3, #3
 800a97e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a980:	4b85      	ldr	r3, [pc, #532]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a984:	091b      	lsrs	r3, r3, #4
 800a986:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a98a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a98c:	4b82      	ldr	r3, [pc, #520]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a996:	4b80      	ldr	r3, [pc, #512]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a99a:	08db      	lsrs	r3, r3, #3
 800a99c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
 800a9a6:	ee07 3a90 	vmov	s15, r3
 800a9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f000 80e1 	beq.w	800ab7c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	f000 8083 	beq.w	800aac8 <HAL_RCC_GetSysClockFreq+0x204>
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2b02      	cmp	r3, #2
 800a9c6:	f200 80a1 	bhi.w	800ab0c <HAL_RCC_GetSysClockFreq+0x248>
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x114>
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d056      	beq.n	800aa84 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9d6:	e099      	b.n	800ab0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9d8:	4b6f      	ldr	r3, [pc, #444]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0320 	and.w	r3, r3, #32
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d02d      	beq.n	800aa40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9e4:	4b6c      	ldr	r3, [pc, #432]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	08db      	lsrs	r3, r3, #3
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	4a6b      	ldr	r2, [pc, #428]	; (800ab9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	ee07 3a90 	vmov	s15, r3
 800a9fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0e:	4b62      	ldr	r3, [pc, #392]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa16:	ee07 3a90 	vmov	s15, r3
 800aa1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa22:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800aa3e:	e087      	b.n	800ab50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800abac <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa52:	4b51      	ldr	r3, [pc, #324]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa62:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa66:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa82:	e065      	b.n	800ab50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800abb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aa92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa96:	4b40      	ldr	r3, [pc, #256]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa6:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaaa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aac6:	e043      	b.n	800ab50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800abb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b2f      	ldr	r3, [pc, #188]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a02 	vldr	s12, [r7, #8]
 800aaee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0a:	e021      	b.n	800ab50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab16:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1e:	4b1e      	ldr	r3, [pc, #120]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab26:	ee07 3a90 	vmov	s15, r3
 800ab2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aba8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800ab50:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab54:	0a5b      	lsrs	r3, r3, #9
 800ab56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab74:	ee17 3a90 	vmov	r3, s15
 800ab78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800ab7a:	e005      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61bb      	str	r3, [r7, #24]
    break;
 800ab80:	e002      	b.n	800ab88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ab82:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ab84:	61bb      	str	r3, [r7, #24]
    break;
 800ab86:	bf00      	nop
  }

  return sysclockfreq;
 800ab88:	69bb      	ldr	r3, [r7, #24]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3724      	adds	r7, #36	; 0x24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	58024400 	.word	0x58024400
 800ab9c:	03d09000 	.word	0x03d09000
 800aba0:	003d0900 	.word	0x003d0900
 800aba4:	00f42400 	.word	0x00f42400
 800aba8:	46000000 	.word	0x46000000
 800abac:	4c742400 	.word	0x4c742400
 800abb0:	4a742400 	.word	0x4a742400
 800abb4:	4b742400 	.word	0x4b742400

0800abb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abbe:	f7ff fe81 	bl	800a8c4 <HAL_RCC_GetSysClockFreq>
 800abc2:	4602      	mov	r2, r0
 800abc4:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <HAL_RCC_GetHCLKFreq+0x50>)
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	0a1b      	lsrs	r3, r3, #8
 800abca:	f003 030f 	and.w	r3, r3, #15
 800abce:	490f      	ldr	r1, [pc, #60]	; (800ac0c <HAL_RCC_GetHCLKFreq+0x54>)
 800abd0:	5ccb      	ldrb	r3, [r1, r3]
 800abd2:	f003 031f 	and.w	r3, r3, #31
 800abd6:	fa22 f303 	lsr.w	r3, r2, r3
 800abda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abdc:	4b0a      	ldr	r3, [pc, #40]	; (800ac08 <HAL_RCC_GetHCLKFreq+0x50>)
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	4a09      	ldr	r2, [pc, #36]	; (800ac0c <HAL_RCC_GetHCLKFreq+0x54>)
 800abe6:	5cd3      	ldrb	r3, [r2, r3]
 800abe8:	f003 031f 	and.w	r3, r3, #31
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	fa22 f303 	lsr.w	r3, r2, r3
 800abf2:	4a07      	ldr	r2, [pc, #28]	; (800ac10 <HAL_RCC_GetHCLKFreq+0x58>)
 800abf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abf6:	4a07      	ldr	r2, [pc, #28]	; (800ac14 <HAL_RCC_GetHCLKFreq+0x5c>)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800abfc:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <HAL_RCC_GetHCLKFreq+0x58>)
 800abfe:	681b      	ldr	r3, [r3, #0]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	58024400 	.word	0x58024400
 800ac0c:	0801d3c8 	.word	0x0801d3c8
 800ac10:	24000004 	.word	0x24000004
 800ac14:	24000000 	.word	0x24000000

0800ac18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac1c:	f7ff ffcc 	bl	800abb8 <HAL_RCC_GetHCLKFreq>
 800ac20:	4602      	mov	r2, r0
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	091b      	lsrs	r3, r3, #4
 800ac28:	f003 0307 	and.w	r3, r3, #7
 800ac2c:	4904      	ldr	r1, [pc, #16]	; (800ac40 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac2e:	5ccb      	ldrb	r3, [r1, r3]
 800ac30:	f003 031f 	and.w	r3, r3, #31
 800ac34:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	58024400 	.word	0x58024400
 800ac40:	0801d3c8 	.word	0x0801d3c8

0800ac44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac48:	f7ff ffb6 	bl	800abb8 <HAL_RCC_GetHCLKFreq>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	0a1b      	lsrs	r3, r3, #8
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	4904      	ldr	r1, [pc, #16]	; (800ac6c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac5a:	5ccb      	ldrb	r3, [r1, r3]
 800ac5c:	f003 031f 	and.w	r3, r3, #31
 800ac60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	58024400 	.word	0x58024400
 800ac6c:	0801d3c8 	.word	0x0801d3c8

0800ac70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d03f      	beq.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac94:	d02a      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ac96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac9a:	d824      	bhi.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ac9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aca0:	d018      	beq.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aca6:	d81e      	bhi.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800acac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acb0:	d007      	beq.n	800acc2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800acb2:	e018      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb4:	4ba3      	ldr	r3, [pc, #652]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	4aa2      	ldr	r2, [pc, #648]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800acc0:	e015      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3304      	adds	r3, #4
 800acc6:	2102      	movs	r1, #2
 800acc8:	4618      	mov	r0, r3
 800acca:	f001 fff9 	bl	800ccc0 <RCCEx_PLL2_Config>
 800acce:	4603      	mov	r3, r0
 800acd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800acd2:	e00c      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3324      	adds	r3, #36	; 0x24
 800acd8:	2102      	movs	r1, #2
 800acda:	4618      	mov	r0, r3
 800acdc:	f002 f8a2 	bl	800ce24 <RCCEx_PLL3_Config>
 800ace0:	4603      	mov	r3, r0
 800ace2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ace4:	e003      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	75fb      	strb	r3, [r7, #23]
      break;
 800acea:	e000      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800acec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d109      	bne.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800acf4:	4b93      	ldr	r3, [pc, #588]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800acf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad00:	4990      	ldr	r1, [pc, #576]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	650b      	str	r3, [r1, #80]	; 0x50
 800ad06:	e001      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad08:	7dfb      	ldrb	r3, [r7, #23]
 800ad0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d03d      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d826      	bhi.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800ad20:	a201      	add	r2, pc, #4	; (adr r2, 800ad28 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800ad22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad26:	bf00      	nop
 800ad28:	0800ad3d 	.word	0x0800ad3d
 800ad2c:	0800ad4b 	.word	0x0800ad4b
 800ad30:	0800ad5d 	.word	0x0800ad5d
 800ad34:	0800ad75 	.word	0x0800ad75
 800ad38:	0800ad75 	.word	0x0800ad75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad3c:	4b81      	ldr	r3, [pc, #516]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a80      	ldr	r2, [pc, #512]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad48:	e015      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	3304      	adds	r3, #4
 800ad4e:	2100      	movs	r1, #0
 800ad50:	4618      	mov	r0, r3
 800ad52:	f001 ffb5 	bl	800ccc0 <RCCEx_PLL2_Config>
 800ad56:	4603      	mov	r3, r0
 800ad58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad5a:	e00c      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	3324      	adds	r3, #36	; 0x24
 800ad60:	2100      	movs	r1, #0
 800ad62:	4618      	mov	r0, r3
 800ad64:	f002 f85e 	bl	800ce24 <RCCEx_PLL3_Config>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ad6c:	e003      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	75fb      	strb	r3, [r7, #23]
      break;
 800ad72:	e000      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ad74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d109      	bne.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ad7c:	4b71      	ldr	r3, [pc, #452]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad80:	f023 0207 	bic.w	r2, r3, #7
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad88:	496e      	ldr	r1, [pc, #440]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	650b      	str	r3, [r1, #80]	; 0x50
 800ad8e:	e001      	b.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d042      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada8:	d02b      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800adaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adae:	d825      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800adb0:	2bc0      	cmp	r3, #192	; 0xc0
 800adb2:	d028      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800adb4:	2bc0      	cmp	r3, #192	; 0xc0
 800adb6:	d821      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800adb8:	2b80      	cmp	r3, #128	; 0x80
 800adba:	d016      	beq.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800adbc:	2b80      	cmp	r3, #128	; 0x80
 800adbe:	d81d      	bhi.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800adc4:	2b40      	cmp	r3, #64	; 0x40
 800adc6:	d007      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800adc8:	e018      	b.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adca:	4b5e      	ldr	r3, [pc, #376]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	4a5d      	ldr	r2, [pc, #372]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800add0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800add6:	e017      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	3304      	adds	r3, #4
 800addc:	2100      	movs	r1, #0
 800adde:	4618      	mov	r0, r3
 800ade0:	f001 ff6e 	bl	800ccc0 <RCCEx_PLL2_Config>
 800ade4:	4603      	mov	r3, r0
 800ade6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800ade8:	e00e      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	3324      	adds	r3, #36	; 0x24
 800adee:	2100      	movs	r1, #0
 800adf0:	4618      	mov	r0, r3
 800adf2:	f002 f817 	bl	800ce24 <RCCEx_PLL3_Config>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800adfa:	e005      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ae00:	e002      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ae02:	bf00      	nop
 800ae04:	e000      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800ae06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae08:	7dfb      	ldrb	r3, [r7, #23]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d109      	bne.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ae0e:	4b4d      	ldr	r3, [pc, #308]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae12:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae1a:	494a      	ldr	r1, [pc, #296]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	650b      	str	r3, [r1, #80]	; 0x50
 800ae20:	e001      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae22:	7dfb      	ldrb	r3, [r7, #23]
 800ae24:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d049      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae3c:	d030      	beq.n	800aea0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ae3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae42:	d82a      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae48:	d02c      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800ae4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae4e:	d824      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae54:	d018      	beq.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800ae56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae5a:	d81e      	bhi.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800ae60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae64:	d007      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae66:	e018      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae68:	4b36      	ldr	r3, [pc, #216]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6c:	4a35      	ldr	r2, [pc, #212]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae74:	e017      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f001 ff1f 	bl	800ccc0 <RCCEx_PLL2_Config>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ae86:	e00e      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3324      	adds	r3, #36	; 0x24
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 ffc8 	bl	800ce24 <RCCEx_PLL3_Config>
 800ae94:	4603      	mov	r3, r0
 800ae96:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ae98:	e005      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ae9e:	e002      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aea0:	bf00      	nop
 800aea2:	e000      	b.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800aea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aeac:	4b25      	ldr	r3, [pc, #148]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aeae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aeba:	4922      	ldr	r1, [pc, #136]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	658b      	str	r3, [r1, #88]	; 0x58
 800aec0:	e001      	b.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec2:	7dfb      	ldrb	r3, [r7, #23]
 800aec4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d04b      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aedc:	d030      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800aede:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aee2:	d82a      	bhi.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aee8:	d02e      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800aeea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aeee:	d824      	bhi.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aef0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aef4:	d018      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800aef6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aefa:	d81e      	bhi.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af04:	d007      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800af06:	e018      	b.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af08:	4b0e      	ldr	r3, [pc, #56]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0c:	4a0d      	ldr	r2, [pc, #52]	; (800af44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af14:	e019      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3304      	adds	r3, #4
 800af1a:	2100      	movs	r1, #0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 fecf 	bl	800ccc0 <RCCEx_PLL2_Config>
 800af22:	4603      	mov	r3, r0
 800af24:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800af26:	e010      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3324      	adds	r3, #36	; 0x24
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f001 ff78 	bl	800ce24 <RCCEx_PLL3_Config>
 800af34:	4603      	mov	r3, r0
 800af36:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800af38:	e007      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	75fb      	strb	r3, [r7, #23]
      break;
 800af3e:	e004      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800af40:	bf00      	nop
 800af42:	e002      	b.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800af44:	58024400 	.word	0x58024400
      break;
 800af48:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10a      	bne.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af50:	4b99      	ldr	r3, [pc, #612]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af54:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af5e:	4996      	ldr	r1, [pc, #600]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af60:	4313      	orrs	r3, r2
 800af62:	658b      	str	r3, [r1, #88]	; 0x58
 800af64:	e001      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d032      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af7a:	2b30      	cmp	r3, #48	; 0x30
 800af7c:	d01c      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800af7e:	2b30      	cmp	r3, #48	; 0x30
 800af80:	d817      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800af82:	2b20      	cmp	r3, #32
 800af84:	d00c      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800af86:	2b20      	cmp	r3, #32
 800af88:	d813      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d016      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800af8e:	2b10      	cmp	r3, #16
 800af90:	d10f      	bne.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af92:	4b89      	ldr	r3, [pc, #548]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af96:	4a88      	ldr	r2, [pc, #544]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800af98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800af9e:	e00e      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	3304      	adds	r3, #4
 800afa4:	2102      	movs	r1, #2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 fe8a 	bl	800ccc0 <RCCEx_PLL2_Config>
 800afac:	4603      	mov	r3, r0
 800afae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800afb0:	e005      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	75fb      	strb	r3, [r7, #23]
      break;
 800afb6:	e002      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800afb8:	bf00      	nop
 800afba:	e000      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800afbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afbe:	7dfb      	ldrb	r3, [r7, #23]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d109      	bne.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800afc4:	4b7c      	ldr	r3, [pc, #496]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800afc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afd0:	4979      	ldr	r1, [pc, #484]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800afd6:	e001      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d047      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aff0:	d030      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800aff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aff6:	d82a      	bhi.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800aff8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800affc:	d02c      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800affe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b002:	d824      	bhi.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b008:	d018      	beq.n	800b03c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00e:	d81e      	bhi.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b018:	d007      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b01a:	e018      	b.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b01c:	4b66      	ldr	r3, [pc, #408]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b020:	4a65      	ldr	r2, [pc, #404]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b028:	e017      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3304      	adds	r3, #4
 800b02e:	2100      	movs	r1, #0
 800b030:	4618      	mov	r0, r3
 800b032:	f001 fe45 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b036:	4603      	mov	r3, r0
 800b038:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b03a:	e00e      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3324      	adds	r3, #36	; 0x24
 800b040:	2100      	movs	r1, #0
 800b042:	4618      	mov	r0, r3
 800b044:	f001 feee 	bl	800ce24 <RCCEx_PLL3_Config>
 800b048:	4603      	mov	r3, r0
 800b04a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b04c:	e005      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	75fb      	strb	r3, [r7, #23]
      break;
 800b052:	e002      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b054:	bf00      	nop
 800b056:	e000      	b.n	800b05a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b058:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d109      	bne.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b060:	4b55      	ldr	r3, [pc, #340]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b064:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b06c:	4952      	ldr	r1, [pc, #328]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	650b      	str	r3, [r1, #80]	; 0x50
 800b072:	e001      	b.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b074:	7dfb      	ldrb	r3, [r7, #23]
 800b076:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d049      	beq.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b08c:	d02e      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b08e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b092:	d828      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b098:	d02a      	beq.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b09a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b09e:	d822      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b0a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0a4:	d026      	beq.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b0a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b0aa:	d81c      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b0ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b0:	d010      	beq.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b0b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b6:	d816      	bhi.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d01d      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b0bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c0:	d111      	bne.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3304      	adds	r3, #4
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 fdf9 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b0d2:	e012      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3324      	adds	r3, #36	; 0x24
 800b0d8:	2101      	movs	r1, #1
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f001 fea2 	bl	800ce24 <RCCEx_PLL3_Config>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b0e4:	e009      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ea:	e006      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b0ec:	bf00      	nop
 800b0ee:	e004      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b0f0:	bf00      	nop
 800b0f2:	e002      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b0f4:	bf00      	nop
 800b0f6:	e000      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b0f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d109      	bne.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b100:	4b2d      	ldr	r3, [pc, #180]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b104:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b10c:	492a      	ldr	r1, [pc, #168]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	650b      	str	r3, [r1, #80]	; 0x50
 800b112:	e001      	b.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b120:	2b00      	cmp	r3, #0
 800b122:	d04d      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b12a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b12e:	d02e      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b134:	d828      	bhi.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b13a:	d02a      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b140:	d822      	bhi.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b146:	d026      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b148:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b14c:	d81c      	bhi.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b152:	d010      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b158:	d816      	bhi.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d01d      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b15e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b162:	d111      	bne.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	3304      	adds	r3, #4
 800b168:	2101      	movs	r1, #1
 800b16a:	4618      	mov	r0, r3
 800b16c:	f001 fda8 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b174:	e012      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3324      	adds	r3, #36	; 0x24
 800b17a:	2101      	movs	r1, #1
 800b17c:	4618      	mov	r0, r3
 800b17e:	f001 fe51 	bl	800ce24 <RCCEx_PLL3_Config>
 800b182:	4603      	mov	r3, r0
 800b184:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b186:	e009      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	75fb      	strb	r3, [r7, #23]
      break;
 800b18c:	e006      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b18e:	bf00      	nop
 800b190:	e004      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b192:	bf00      	nop
 800b194:	e002      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b196:	bf00      	nop
 800b198:	e000      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b19a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b19c:	7dfb      	ldrb	r3, [r7, #23]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10c      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b1a2:	4b05      	ldr	r3, [pc, #20]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1b0:	4901      	ldr	r1, [pc, #4]	; (800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	658b      	str	r3, [r1, #88]	; 0x58
 800b1b6:	e003      	b.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b1b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d02f      	beq.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d4:	d00e      	beq.n	800b1f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1da:	d814      	bhi.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d015      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b1e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1e4:	d10f      	bne.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1e6:	4baf      	ldr	r3, [pc, #700]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	4aae      	ldr	r2, [pc, #696]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b1ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b1f2:	e00c      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f001 fd60 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b204:	e003      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	75fb      	strb	r3, [r7, #23]
      break;
 800b20a:	e000      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b20c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b20e:	7dfb      	ldrb	r3, [r7, #23]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d109      	bne.n	800b228 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b214:	4ba3      	ldr	r3, [pc, #652]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b218:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b220:	49a0      	ldr	r1, [pc, #640]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b222:	4313      	orrs	r3, r2
 800b224:	650b      	str	r3, [r1, #80]	; 0x50
 800b226:	e001      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d032      	beq.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23c:	2b03      	cmp	r3, #3
 800b23e:	d81b      	bhi.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b240:	a201      	add	r2, pc, #4	; (adr r2, 800b248 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b246:	bf00      	nop
 800b248:	0800b27f 	.word	0x0800b27f
 800b24c:	0800b259 	.word	0x0800b259
 800b250:	0800b267 	.word	0x0800b267
 800b254:	0800b27f 	.word	0x0800b27f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b258:	4b92      	ldr	r3, [pc, #584]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25c:	4a91      	ldr	r2, [pc, #580]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b25e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b264:	e00c      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3304      	adds	r3, #4
 800b26a:	2102      	movs	r1, #2
 800b26c:	4618      	mov	r0, r3
 800b26e:	f001 fd27 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b276:	e003      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	75fb      	strb	r3, [r7, #23]
      break;
 800b27c:	e000      	b.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b27e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d109      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b286:	4b87      	ldr	r3, [pc, #540]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b28a:	f023 0203 	bic.w	r2, r3, #3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b292:	4984      	ldr	r1, [pc, #528]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b294:	4313      	orrs	r3, r2
 800b296:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b298:	e001      	b.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 8086 	beq.w	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2ac:	4b7e      	ldr	r3, [pc, #504]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a7d      	ldr	r2, [pc, #500]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2b8:	f7f9 f93c 	bl	8004534 <HAL_GetTick>
 800b2bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2be:	e009      	b.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2c0:	f7f9 f938 	bl	8004534 <HAL_GetTick>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	1ad3      	subs	r3, r2, r3
 800b2ca:	2b64      	cmp	r3, #100	; 0x64
 800b2cc:	d902      	bls.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	75fb      	strb	r3, [r7, #23]
        break;
 800b2d2:	e005      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2d4:	4b74      	ldr	r3, [pc, #464]	; (800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d0ef      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d166      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b2e6:	4b6f      	ldr	r3, [pc, #444]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b2e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2f0:	4053      	eors	r3, r2
 800b2f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d013      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b2fa:	4b6a      	ldr	r3, [pc, #424]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b302:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b304:	4b67      	ldr	r3, [pc, #412]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b308:	4a66      	ldr	r2, [pc, #408]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b30a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b30e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b310:	4b64      	ldr	r3, [pc, #400]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b314:	4a63      	ldr	r2, [pc, #396]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b31a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b31c:	4a61      	ldr	r2, [pc, #388]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b32c:	d115      	bne.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b32e:	f7f9 f901 	bl	8004534 <HAL_GetTick>
 800b332:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b334:	e00b      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b336:	f7f9 f8fd 	bl	8004534 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	f241 3288 	movw	r2, #5000	; 0x1388
 800b344:	4293      	cmp	r3, r2
 800b346:	d902      	bls.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b348:	2303      	movs	r3, #3
 800b34a:	75fb      	strb	r3, [r7, #23]
            break;
 800b34c:	e005      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b34e:	4b55      	ldr	r3, [pc, #340]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	f003 0302 	and.w	r3, r3, #2
 800b356:	2b00      	cmp	r3, #0
 800b358:	d0ed      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d126      	bne.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b36a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b36e:	d10d      	bne.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b370:	4b4c      	ldr	r3, [pc, #304]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b37e:	0919      	lsrs	r1, r3, #4
 800b380:	4b4a      	ldr	r3, [pc, #296]	; (800b4ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b382:	400b      	ands	r3, r1
 800b384:	4947      	ldr	r1, [pc, #284]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b386:	4313      	orrs	r3, r2
 800b388:	610b      	str	r3, [r1, #16]
 800b38a:	e005      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b38c:	4b45      	ldr	r3, [pc, #276]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	4a44      	ldr	r2, [pc, #272]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b396:	6113      	str	r3, [r2, #16]
 800b398:	4b42      	ldr	r3, [pc, #264]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b39a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b3a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3a6:	493f      	ldr	r1, [pc, #252]	; (800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	670b      	str	r3, [r1, #112]	; 0x70
 800b3ac:	e004      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	75bb      	strb	r3, [r7, #22]
 800b3b2:	e001      	b.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	f000 8085 	beq.w	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b3ca:	2b28      	cmp	r3, #40	; 0x28
 800b3cc:	d866      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b3ce:	a201      	add	r2, pc, #4	; (adr r2, 800b3d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3d4:	0800b4b1 	.word	0x0800b4b1
 800b3d8:	0800b49d 	.word	0x0800b49d
 800b3dc:	0800b49d 	.word	0x0800b49d
 800b3e0:	0800b49d 	.word	0x0800b49d
 800b3e4:	0800b49d 	.word	0x0800b49d
 800b3e8:	0800b49d 	.word	0x0800b49d
 800b3ec:	0800b49d 	.word	0x0800b49d
 800b3f0:	0800b49d 	.word	0x0800b49d
 800b3f4:	0800b479 	.word	0x0800b479
 800b3f8:	0800b49d 	.word	0x0800b49d
 800b3fc:	0800b49d 	.word	0x0800b49d
 800b400:	0800b49d 	.word	0x0800b49d
 800b404:	0800b49d 	.word	0x0800b49d
 800b408:	0800b49d 	.word	0x0800b49d
 800b40c:	0800b49d 	.word	0x0800b49d
 800b410:	0800b49d 	.word	0x0800b49d
 800b414:	0800b48b 	.word	0x0800b48b
 800b418:	0800b49d 	.word	0x0800b49d
 800b41c:	0800b49d 	.word	0x0800b49d
 800b420:	0800b49d 	.word	0x0800b49d
 800b424:	0800b49d 	.word	0x0800b49d
 800b428:	0800b49d 	.word	0x0800b49d
 800b42c:	0800b49d 	.word	0x0800b49d
 800b430:	0800b49d 	.word	0x0800b49d
 800b434:	0800b4b1 	.word	0x0800b4b1
 800b438:	0800b49d 	.word	0x0800b49d
 800b43c:	0800b49d 	.word	0x0800b49d
 800b440:	0800b49d 	.word	0x0800b49d
 800b444:	0800b49d 	.word	0x0800b49d
 800b448:	0800b49d 	.word	0x0800b49d
 800b44c:	0800b49d 	.word	0x0800b49d
 800b450:	0800b49d 	.word	0x0800b49d
 800b454:	0800b4b1 	.word	0x0800b4b1
 800b458:	0800b49d 	.word	0x0800b49d
 800b45c:	0800b49d 	.word	0x0800b49d
 800b460:	0800b49d 	.word	0x0800b49d
 800b464:	0800b49d 	.word	0x0800b49d
 800b468:	0800b49d 	.word	0x0800b49d
 800b46c:	0800b49d 	.word	0x0800b49d
 800b470:	0800b49d 	.word	0x0800b49d
 800b474:	0800b4b1 	.word	0x0800b4b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	3304      	adds	r3, #4
 800b47c:	2101      	movs	r1, #1
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 fc1e 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b488:	e013      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	3324      	adds	r3, #36	; 0x24
 800b48e:	2101      	movs	r1, #1
 800b490:	4618      	mov	r0, r3
 800b492:	f001 fcc7 	bl	800ce24 <RCCEx_PLL3_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b49a:	e00a      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	75fb      	strb	r3, [r7, #23]
      break;
 800b4a0:	e007      	b.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800b4a2:	bf00      	nop
 800b4a4:	58024400 	.word	0x58024400
 800b4a8:	58024800 	.word	0x58024800
 800b4ac:	00ffffcf 	.word	0x00ffffcf
      break;
 800b4b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4b2:	7dfb      	ldrb	r3, [r7, #23]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d109      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b4b8:	4b96      	ldr	r3, [pc, #600]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b4ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4c4:	4993      	ldr	r1, [pc, #588]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	654b      	str	r3, [r1, #84]	; 0x54
 800b4ca:	e001      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d038      	beq.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4e0:	2b05      	cmp	r3, #5
 800b4e2:	d821      	bhi.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800b4e4:	a201      	add	r2, pc, #4	; (adr r2, 800b4ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800b4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ea:	bf00      	nop
 800b4ec:	0800b52f 	.word	0x0800b52f
 800b4f0:	0800b505 	.word	0x0800b505
 800b4f4:	0800b517 	.word	0x0800b517
 800b4f8:	0800b52f 	.word	0x0800b52f
 800b4fc:	0800b52f 	.word	0x0800b52f
 800b500:	0800b52f 	.word	0x0800b52f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3304      	adds	r3, #4
 800b508:	2101      	movs	r1, #1
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fbd8 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b514:	e00c      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3324      	adds	r3, #36	; 0x24
 800b51a:	2101      	movs	r1, #1
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 fc81 	bl	800ce24 <RCCEx_PLL3_Config>
 800b522:	4603      	mov	r3, r0
 800b524:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b526:	e003      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	75fb      	strb	r3, [r7, #23]
      break;
 800b52c:	e000      	b.n	800b530 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800b52e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b536:	4b77      	ldr	r3, [pc, #476]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53a:	f023 0207 	bic.w	r2, r3, #7
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b542:	4974      	ldr	r1, [pc, #464]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b544:	4313      	orrs	r3, r2
 800b546:	654b      	str	r3, [r1, #84]	; 0x54
 800b548:	e001      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f003 0304 	and.w	r3, r3, #4
 800b556:	2b00      	cmp	r3, #0
 800b558:	d03a      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b560:	2b05      	cmp	r3, #5
 800b562:	d821      	bhi.n	800b5a8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b564:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b5af 	.word	0x0800b5af
 800b570:	0800b585 	.word	0x0800b585
 800b574:	0800b597 	.word	0x0800b597
 800b578:	0800b5af 	.word	0x0800b5af
 800b57c:	0800b5af 	.word	0x0800b5af
 800b580:	0800b5af 	.word	0x0800b5af
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3304      	adds	r3, #4
 800b588:	2101      	movs	r1, #1
 800b58a:	4618      	mov	r0, r3
 800b58c:	f001 fb98 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b590:	4603      	mov	r3, r0
 800b592:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b594:	e00c      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3324      	adds	r3, #36	; 0x24
 800b59a:	2101      	movs	r1, #1
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fc41 	bl	800ce24 <RCCEx_PLL3_Config>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b5a6:	e003      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b5ac:	e000      	b.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b5ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b5b0:	7dfb      	ldrb	r3, [r7, #23]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10a      	bne.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5b6:	4b57      	ldr	r3, [pc, #348]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ba:	f023 0207 	bic.w	r2, r3, #7
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c4:	4953      	ldr	r1, [pc, #332]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	658b      	str	r3, [r1, #88]	; 0x58
 800b5ca:	e001      	b.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d04b      	beq.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5e6:	d02e      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b5e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5ec:	d828      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f2:	d02a      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f8:	d822      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b5fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5fe:	d026      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b600:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b604:	d81c      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60a:	d010      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b60c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b610:	d816      	bhi.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b612:	2b00      	cmp	r3, #0
 800b614:	d01d      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b61a:	d111      	bne.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3304      	adds	r3, #4
 800b620:	2100      	movs	r1, #0
 800b622:	4618      	mov	r0, r3
 800b624:	f001 fb4c 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b628:	4603      	mov	r3, r0
 800b62a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b62c:	e012      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3324      	adds	r3, #36	; 0x24
 800b632:	2102      	movs	r1, #2
 800b634:	4618      	mov	r0, r3
 800b636:	f001 fbf5 	bl	800ce24 <RCCEx_PLL3_Config>
 800b63a:	4603      	mov	r3, r0
 800b63c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b63e:	e009      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	75fb      	strb	r3, [r7, #23]
      break;
 800b644:	e006      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b646:	bf00      	nop
 800b648:	e004      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b64a:	bf00      	nop
 800b64c:	e002      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b652:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b654:	7dfb      	ldrb	r3, [r7, #23]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10a      	bne.n	800b670 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b65a:	4b2e      	ldr	r3, [pc, #184]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b668:	492a      	ldr	r1, [pc, #168]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b66a:	4313      	orrs	r3, r2
 800b66c:	654b      	str	r3, [r1, #84]	; 0x54
 800b66e:	e001      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d04d      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b686:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b68a:	d02e      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b68c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b690:	d828      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b696:	d02a      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b69c:	d822      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b69e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6a2:	d026      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b6a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6a8:	d81c      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b6aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6ae:	d010      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b6b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6b4:	d816      	bhi.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d01d      	beq.n	800b6f6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b6ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6be:	d111      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f001 fafa 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b6d0:	e012      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3324      	adds	r3, #36	; 0x24
 800b6d6:	2102      	movs	r1, #2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 fba3 	bl	800ce24 <RCCEx_PLL3_Config>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b6e2:	e009      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6e8:	e006      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b6ea:	bf00      	nop
 800b6ec:	e004      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b6ee:	bf00      	nop
 800b6f0:	e002      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b6f2:	bf00      	nop
 800b6f4:	e000      	b.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b6f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6f8:	7dfb      	ldrb	r3, [r7, #23]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10c      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b702:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b70c:	4901      	ldr	r1, [pc, #4]	; (800b714 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b70e:	4313      	orrs	r3, r2
 800b710:	658b      	str	r3, [r1, #88]	; 0x58
 800b712:	e003      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b714:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b724:	2b00      	cmp	r3, #0
 800b726:	d04b      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b72e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b732:	d02e      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b734:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b738:	d828      	bhi.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b73a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b73e:	d02a      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b744:	d822      	bhi.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b746:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b74a:	d026      	beq.n	800b79a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b74c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b750:	d81c      	bhi.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b756:	d010      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b75c:	d816      	bhi.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01d      	beq.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b766:	d111      	bne.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	3304      	adds	r3, #4
 800b76c:	2100      	movs	r1, #0
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 faa6 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b774:	4603      	mov	r3, r0
 800b776:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b778:	e012      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3324      	adds	r3, #36	; 0x24
 800b77e:	2102      	movs	r1, #2
 800b780:	4618      	mov	r0, r3
 800b782:	f001 fb4f 	bl	800ce24 <RCCEx_PLL3_Config>
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b78a:	e009      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	75fb      	strb	r3, [r7, #23]
      break;
 800b790:	e006      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b792:	bf00      	nop
 800b794:	e004      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b796:	bf00      	nop
 800b798:	e002      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b79a:	bf00      	nop
 800b79c:	e000      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b79e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7a0:	7dfb      	ldrb	r3, [r7, #23]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10a      	bne.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7a6:	4b9d      	ldr	r3, [pc, #628]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b4:	4999      	ldr	r1, [pc, #612]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	658b      	str	r3, [r1, #88]	; 0x58
 800b7ba:	e001      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7bc:	7dfb      	ldrb	r3, [r7, #23]
 800b7be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 0308 	and.w	r3, r3, #8
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01a      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d6:	d10a      	bne.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3324      	adds	r3, #36	; 0x24
 800b7dc:	2102      	movs	r1, #2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f001 fb20 	bl	800ce24 <RCCEx_PLL3_Config>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b7ee:	4b8b      	ldr	r3, [pc, #556]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7fc:	4987      	ldr	r1, [pc, #540]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 0310 	and.w	r3, r3, #16
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01a      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b818:	d10a      	bne.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3324      	adds	r3, #36	; 0x24
 800b81e:	2102      	movs	r1, #2
 800b820:	4618      	mov	r0, r3
 800b822:	f001 faff 	bl	800ce24 <RCCEx_PLL3_Config>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b830:	4b7a      	ldr	r3, [pc, #488]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b83e:	4977      	ldr	r1, [pc, #476]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b840:	4313      	orrs	r3, r2
 800b842:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d034      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b85a:	d01d      	beq.n	800b898 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b85c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b860:	d817      	bhi.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b862:	2b00      	cmp	r3, #0
 800b864:	d003      	beq.n	800b86e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86a:	d009      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b86c:	e011      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3304      	adds	r3, #4
 800b872:	2100      	movs	r1, #0
 800b874:	4618      	mov	r0, r3
 800b876:	f001 fa23 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b87a:	4603      	mov	r3, r0
 800b87c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b87e:	e00c      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	3324      	adds	r3, #36	; 0x24
 800b884:	2102      	movs	r1, #2
 800b886:	4618      	mov	r0, r3
 800b888:	f001 facc 	bl	800ce24 <RCCEx_PLL3_Config>
 800b88c:	4603      	mov	r3, r0
 800b88e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b890:	e003      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	75fb      	strb	r3, [r7, #23]
      break;
 800b896:	e000      	b.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d10a      	bne.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8a0:	4b5e      	ldr	r3, [pc, #376]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8ae:	495b      	ldr	r1, [pc, #364]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	658b      	str	r3, [r1, #88]	; 0x58
 800b8b4:	e001      	b.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d033      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8d0:	d01c      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b8d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b8d6:	d816      	bhi.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b8d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b8dc:	d003      	beq.n	800b8e6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e2:	d007      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b8e4:	e00f      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8e6:	4b4d      	ldr	r3, [pc, #308]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ea:	4a4c      	ldr	r2, [pc, #304]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b8ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b8f2:	e00c      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	3324      	adds	r3, #36	; 0x24
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f001 fa92 	bl	800ce24 <RCCEx_PLL3_Config>
 800b900:	4603      	mov	r3, r0
 800b902:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b904:	e003      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b906:	2301      	movs	r3, #1
 800b908:	75fb      	strb	r3, [r7, #23]
      break;
 800b90a:	e000      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b90c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b914:	4b41      	ldr	r3, [pc, #260]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b922:	493e      	ldr	r1, [pc, #248]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b924:	4313      	orrs	r3, r2
 800b926:	654b      	str	r3, [r1, #84]	; 0x54
 800b928:	e001      	b.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92a:	7dfb      	ldrb	r3, [r7, #23]
 800b92c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b936:	2b00      	cmp	r3, #0
 800b938:	d029      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b946:	d007      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b948:	e00f      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b94a:	4b34      	ldr	r3, [pc, #208]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b94e:	4a33      	ldr	r2, [pc, #204]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b954:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b956:	e00b      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	3304      	adds	r3, #4
 800b95c:	2102      	movs	r1, #2
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 f9ae 	bl	800ccc0 <RCCEx_PLL2_Config>
 800b964:	4603      	mov	r3, r0
 800b966:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b968:	e002      	b.n	800b970 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
      break;
 800b96e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b970:	7dfb      	ldrb	r3, [r7, #23]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b976:	4b29      	ldr	r3, [pc, #164]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b97a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b982:	4926      	ldr	r1, [pc, #152]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b984:	4313      	orrs	r3, r2
 800b986:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b988:	e001      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3324      	adds	r3, #36	; 0x24
 800b99e:	2102      	movs	r1, #2
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f001 fa3f 	bl	800ce24 <RCCEx_PLL3_Config>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d033      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9c4:	d017      	beq.n	800b9f6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b9c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b9ca:	d811      	bhi.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d0:	d013      	beq.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b9d6:	d80b      	bhi.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d010      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9e0:	d106      	bne.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9e2:	4b0e      	ldr	r3, [pc, #56]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e6:	4a0d      	ldr	r2, [pc, #52]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b9e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b9ee:	e007      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	75fb      	strb	r3, [r7, #23]
      break;
 800b9f4:	e004      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b9f6:	bf00      	nop
 800b9f8:	e002      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b9fa:	bf00      	nop
 800b9fc:	e000      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b9fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba00:	7dfb      	ldrb	r3, [r7, #23]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10c      	bne.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba06:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba12:	4902      	ldr	r1, [pc, #8]	; (800ba1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ba14:	4313      	orrs	r3, r2
 800ba16:	654b      	str	r3, [r1, #84]	; 0x54
 800ba18:	e004      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800ba1a:	bf00      	nop
 800ba1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d008      	beq.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ba30:	4b31      	ldr	r3, [pc, #196]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3c:	492e      	ldr	r1, [pc, #184]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d009      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ba4e:	4b2a      	ldr	r3, [pc, #168]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba5c:	4926      	ldr	r1, [pc, #152]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d008      	beq.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba6e:	4b22      	ldr	r3, [pc, #136]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba7a:	491f      	ldr	r1, [pc, #124]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00d      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba8c:	4b1a      	ldr	r3, [pc, #104]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	4a19      	ldr	r2, [pc, #100]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba96:	6113      	str	r3, [r2, #16]
 800ba98:	4b17      	ldr	r3, [pc, #92]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800ba9a:	691a      	ldr	r2, [r3, #16]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800baa2:	4915      	ldr	r1, [pc, #84]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da08      	bge.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bab4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800babc:	490e      	ldr	r1, [pc, #56]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d009      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bace:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800badc:	4906      	ldr	r1, [pc, #24]	; (800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bade:	4313      	orrs	r3, r2
 800bae0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800bae2:	7dbb      	ldrb	r3, [r7, #22]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d101      	bne.n	800baec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800bae8:	2300      	movs	r3, #0
 800baea:	e000      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3718      	adds	r7, #24
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	58024400 	.word	0x58024400

0800bafc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b090      	sub	sp, #64	; 0x40
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb0a:	f040 8095 	bne.w	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bb0e:	4b97      	ldr	r3, [pc, #604]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bb10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb12:	f003 0307 	and.w	r3, r3, #7
 800bb16:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	f200 8088 	bhi.w	800bc30 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bb20:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800bb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb26:	bf00      	nop
 800bb28:	0800bb3d 	.word	0x0800bb3d
 800bb2c:	0800bb65 	.word	0x0800bb65
 800bb30:	0800bb8d 	.word	0x0800bb8d
 800bb34:	0800bc29 	.word	0x0800bc29
 800bb38:	0800bbb5 	.word	0x0800bbb5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb3c:	4b8b      	ldr	r3, [pc, #556]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb48:	d108      	bne.n	800bb5c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 ff64 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb58:	f000 bc94 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb60:	f000 bc90 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb64:	4b81      	ldr	r3, [pc, #516]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb70:	d108      	bne.n	800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb72:	f107 0318 	add.w	r3, r7, #24
 800bb76:	4618      	mov	r0, r3
 800bb78:	f000 fca8 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bb80:	f000 bc80 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bb88:	f000 bc7c 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb8c:	4b77      	ldr	r3, [pc, #476]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb98:	d108      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb9a:	f107 030c 	add.w	r3, r7, #12
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 fde8 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bba8:	f000 bc6c 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bbb0:	f000 bc68 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bbb4:	4b6d      	ldr	r3, [pc, #436]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bbb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbbc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bbbe:	4b6b      	ldr	r3, [pc, #428]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0304 	and.w	r3, r3, #4
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	d10c      	bne.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800bbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bbd0:	4b66      	ldr	r3, [pc, #408]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	08db      	lsrs	r3, r3, #3
 800bbd6:	f003 0303 	and.w	r3, r3, #3
 800bbda:	4a65      	ldr	r2, [pc, #404]	; (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bbdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bbe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbe2:	e01f      	b.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bbe4:	4b61      	ldr	r3, [pc, #388]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbf0:	d106      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800bbf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbf8:	d102      	bne.n	800bc00 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bbfa:	4b5e      	ldr	r3, [pc, #376]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbfe:	e011      	b.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc00:	4b5a      	ldr	r3, [pc, #360]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc0c:	d106      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800bc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc14:	d102      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bc16:	4b58      	ldr	r3, [pc, #352]	; (800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bc18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc1a:	e003      	b.n	800bc24 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bc20:	f000 bc30 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bc24:	f000 bc2e 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bc28:	4b54      	ldr	r3, [pc, #336]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc2c:	f000 bc2a 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bc34:	f000 bc26 	b.w	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc3e:	f040 809f 	bne.w	800bd80 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800bc42:	4b4a      	ldr	r3, [pc, #296]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc46:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bc4a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc52:	d04d      	beq.n	800bcf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc5a:	f200 8084 	bhi.w	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc60:	2bc0      	cmp	r3, #192	; 0xc0
 800bc62:	d07d      	beq.n	800bd60 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800bc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc66:	2bc0      	cmp	r3, #192	; 0xc0
 800bc68:	d87d      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	2b80      	cmp	r3, #128	; 0x80
 800bc6e:	d02d      	beq.n	800bccc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800bc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc72:	2b80      	cmp	r3, #128	; 0x80
 800bc74:	d877      	bhi.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d003      	beq.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7e:	2b40      	cmp	r3, #64	; 0x40
 800bc80:	d012      	beq.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800bc82:	e070      	b.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc84:	4b39      	ldr	r3, [pc, #228]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc90:	d107      	bne.n	800bca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc96:	4618      	mov	r0, r3
 800bc98:	f000 fec0 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bca0:	e3f0      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bca6:	e3ed      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bca8:	4b30      	ldr	r3, [pc, #192]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcb4:	d107      	bne.n	800bcc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcb6:	f107 0318 	add.w	r3, r7, #24
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f000 fc06 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bcc4:	e3de      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcca:	e3db      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bccc:	4b27      	ldr	r3, [pc, #156]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcd8:	d107      	bne.n	800bcea <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bcda:	f107 030c 	add.w	r3, r7, #12
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fd48 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bce8:	e3cc      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bcea:	2300      	movs	r3, #0
 800bcec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bcee:	e3c9      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bcf0:	4b1e      	ldr	r3, [pc, #120]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcfa:	4b1c      	ldr	r3, [pc, #112]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f003 0304 	and.w	r3, r3, #4
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d10c      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800bd06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d109      	bne.n	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bd0c:	4b17      	ldr	r3, [pc, #92]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	08db      	lsrs	r3, r3, #3
 800bd12:	f003 0303 	and.w	r3, r3, #3
 800bd16:	4a16      	ldr	r2, [pc, #88]	; (800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bd18:	fa22 f303 	lsr.w	r3, r2, r3
 800bd1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd1e:	e01e      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd20:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd2c:	d106      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800bd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd34:	d102      	bne.n	800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bd36:	4b0f      	ldr	r3, [pc, #60]	; (800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bd38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd3a:	e010      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd3c:	4b0b      	ldr	r3, [pc, #44]	; (800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd48:	d106      	bne.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800bd4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd50:	d102      	bne.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bd52:	4b09      	ldr	r3, [pc, #36]	; (800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bd54:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd56:	e002      	b.n	800bd5e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bd5c:	e392      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bd5e:	e391      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd60:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd64:	e38e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800bd66:	2300      	movs	r3, #0
 800bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd6a:	e38b      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bd6c:	58024400 	.word	0x58024400
 800bd70:	03d09000 	.word	0x03d09000
 800bd74:	003d0900 	.word	0x003d0900
 800bd78:	00f42400 	.word	0x00f42400
 800bd7c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd86:	f040 809c 	bne.w	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800bd8a:	4b9d      	ldr	r3, [pc, #628]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bd8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd8e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bd92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd9a:	d054      	beq.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bda2:	f200 808b 	bhi.w	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdac:	f000 8083 	beq.w	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdb6:	f200 8081 	bhi.w	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800bdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdc0:	d02f      	beq.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800bdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdc8:	d878      	bhi.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d004      	beq.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdd6:	d012      	beq.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800bdd8:	e070      	b.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdda:	4b89      	ldr	r3, [pc, #548]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bde2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bde6:	d107      	bne.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bde8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fe15 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bdf6:	e345      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdfc:	e342      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdfe:	4b80      	ldr	r3, [pc, #512]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be0a:	d107      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be0c:	f107 0318 	add.w	r3, r7, #24
 800be10:	4618      	mov	r0, r3
 800be12:	f000 fb5b 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be1a:	e333      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be20:	e330      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be22:	4b77      	ldr	r3, [pc, #476]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be2e:	d107      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be30:	f107 030c 	add.w	r3, r7, #12
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fc9d 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800be3e:	e321      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be44:	e31e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800be46:	4b6e      	ldr	r3, [pc, #440]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be4e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be50:	4b6b      	ldr	r3, [pc, #428]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f003 0304 	and.w	r3, r3, #4
 800be58:	2b04      	cmp	r3, #4
 800be5a:	d10c      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800be5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d109      	bne.n	800be76 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800be62:	4b67      	ldr	r3, [pc, #412]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	08db      	lsrs	r3, r3, #3
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	4a65      	ldr	r2, [pc, #404]	; (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800be6e:	fa22 f303 	lsr.w	r3, r2, r3
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be74:	e01e      	b.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be76:	4b62      	ldr	r3, [pc, #392]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be82:	d106      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be8a:	d102      	bne.n	800be92 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800be8c:	4b5e      	ldr	r3, [pc, #376]	; (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be90:	e010      	b.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be92:	4b5b      	ldr	r3, [pc, #364]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be9e:	d106      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bea6:	d102      	bne.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bea8:	4b58      	ldr	r3, [pc, #352]	; (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beac:	e002      	b.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800beae:	2300      	movs	r3, #0
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800beb2:	e2e7      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800beb4:	e2e6      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800beb6:	4b56      	ldr	r3, [pc, #344]	; (800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800beb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800beba:	e2e3      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bec0:	e2e0      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bec8:	f040 80a7 	bne.w	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800becc:	4b4c      	ldr	r3, [pc, #304]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bed0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bed4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bedc:	d055      	beq.n	800bf8a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800bede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bee4:	f200 8096 	bhi.w	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800bee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800beee:	f000 8084 	beq.w	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bef8:	f200 808c 	bhi.w	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf02:	d030      	beq.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800bf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf0a:	f200 8083 	bhi.w	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800bf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d004      	beq.n	800bf1e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf1a:	d012      	beq.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800bf1c:	e07a      	b.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf1e:	4b38      	ldr	r3, [pc, #224]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf2a:	d107      	bne.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf30:	4618      	mov	r0, r3
 800bf32:	f000 fd73 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf3a:	e2a3      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf40:	e2a0      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf42:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf4e:	d107      	bne.n	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf50:	f107 0318 	add.w	r3, r7, #24
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 fab9 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800bf5e:	e291      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf64:	e28e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf66:	4b26      	ldr	r3, [pc, #152]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf72:	d107      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fbfb 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800bf82:	e27f      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf88:	e27c      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf8a:	4b1d      	ldr	r3, [pc, #116]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bf8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf92:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf94:	4b1a      	ldr	r3, [pc, #104]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 0304 	and.w	r3, r3, #4
 800bf9c:	2b04      	cmp	r3, #4
 800bf9e:	d10c      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800bfa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d109      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bfa6:	4b16      	ldr	r3, [pc, #88]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	08db      	lsrs	r3, r3, #3
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	4a14      	ldr	r2, [pc, #80]	; (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800bfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	e01e      	b.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfba:	4b11      	ldr	r3, [pc, #68]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfc6:	d106      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800bfc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bfce:	d102      	bne.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800bfd0:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800bfd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfd4:	e010      	b.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe2:	d106      	bne.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800bfe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfea:	d102      	bne.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800bfec:	4b07      	ldr	r3, [pc, #28]	; (800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800bfee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff0:	e002      	b.n	800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800bff6:	e245      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800bff8:	e244      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bffa:	4b05      	ldr	r3, [pc, #20]	; (800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bffe:	e241      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c000:	58024400 	.word	0x58024400
 800c004:	03d09000 	.word	0x03d09000
 800c008:	003d0900 	.word	0x003d0900
 800c00c:	00f42400 	.word	0x00f42400
 800c010:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c018:	e234      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c020:	f040 809c 	bne.w	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800c024:	4b9b      	ldr	r3, [pc, #620]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c028:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c02c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c034:	d054      	beq.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800c036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c03c:	f200 808b 	bhi.w	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c046:	f000 8083 	beq.w	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800c04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c050:	f200 8081 	bhi.w	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c05a:	d02f      	beq.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800c05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c062:	d878      	bhi.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	2b00      	cmp	r3, #0
 800c068:	d004      	beq.n	800c074 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c070:	d012      	beq.n	800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800c072:	e070      	b.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c074:	4b87      	ldr	r3, [pc, #540]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c07c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c080:	d107      	bne.n	800c092 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fcc8 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c090:	e1f8      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c092:	2300      	movs	r3, #0
 800c094:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c096:	e1f5      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c098:	4b7e      	ldr	r3, [pc, #504]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0a4:	d107      	bne.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0a6:	f107 0318 	add.w	r3, r7, #24
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fa0e 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0b4:	e1e6      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0ba:	e1e3      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0bc:	4b75      	ldr	r3, [pc, #468]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c8:	d107      	bne.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ca:	f107 030c 	add.w	r3, r7, #12
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 fb50 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c0d8:	e1d4      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0de:	e1d1      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c0e0:	4b6c      	ldr	r3, [pc, #432]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0e8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0ea:	4b6a      	ldr	r3, [pc, #424]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 0304 	and.w	r3, r3, #4
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	d10c      	bne.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d109      	bne.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c0fc:	4b65      	ldr	r3, [pc, #404]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	08db      	lsrs	r3, r3, #3
 800c102:	f003 0303 	and.w	r3, r3, #3
 800c106:	4a64      	ldr	r2, [pc, #400]	; (800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800c108:	fa22 f303 	lsr.w	r3, r2, r3
 800c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c10e:	e01e      	b.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c110:	4b60      	ldr	r3, [pc, #384]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c11c:	d106      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800c11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c124:	d102      	bne.n	800c12c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c126:	4b5d      	ldr	r3, [pc, #372]	; (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800c128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c12a:	e010      	b.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c12c:	4b59      	ldr	r3, [pc, #356]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c138:	d106      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800c13a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c13c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c140:	d102      	bne.n	800c148 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c142:	4b57      	ldr	r3, [pc, #348]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800c144:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c146:	e002      	b.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c148:	2300      	movs	r3, #0
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c14c:	e19a      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c14e:	e199      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c150:	4b54      	ldr	r3, [pc, #336]	; (800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c154:	e196      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c15a:	e193      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c162:	d173      	bne.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c164:	4b4b      	ldr	r3, [pc, #300]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c16c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c170:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c174:	d02f      	beq.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800c176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c17c:	d863      	bhi.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800c17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c180:	2b00      	cmp	r3, #0
 800c182:	d004      	beq.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800c184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c18a:	d012      	beq.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800c18c:	e05b      	b.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c18e:	4b41      	ldr	r3, [pc, #260]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c19a:	d107      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c19c:	f107 0318 	add.w	r3, r7, #24
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f000 f993 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c1aa:	e16b      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1b0:	e168      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1b2:	4b38      	ldr	r3, [pc, #224]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1be:	d107      	bne.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c0:	f107 030c 	add.w	r3, r7, #12
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fad5 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c1ce:	e159      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1d4:	e156      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c1d6:	4b2f      	ldr	r3, [pc, #188]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1de:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1e0:	4b2c      	ldr	r3, [pc, #176]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b04      	cmp	r3, #4
 800c1ea:	d10c      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c1f2:	4b28      	ldr	r3, [pc, #160]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	08db      	lsrs	r3, r3, #3
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	4a26      	ldr	r2, [pc, #152]	; (800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800c1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c204:	e01e      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c206:	4b23      	ldr	r3, [pc, #140]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c212:	d106      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800c214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c21a:	d102      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800c21c:	4b1f      	ldr	r3, [pc, #124]	; (800c29c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c220:	e010      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c222:	4b1c      	ldr	r3, [pc, #112]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c22e:	d106      	bne.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800c230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c236:	d102      	bne.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800c238:	4b19      	ldr	r3, [pc, #100]	; (800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c23c:	e002      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800c242:	e11f      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c244:	e11e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800c246:	2300      	movs	r3, #0
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c24a:	e11b      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c252:	d13e      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c254:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c25c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c260:	2b00      	cmp	r3, #0
 800c262:	d004      	beq.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c26a:	d01d      	beq.n	800c2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800c26c:	e02e      	b.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c26e:	4b09      	ldr	r3, [pc, #36]	; (800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c27a:	d107      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c27c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c280:	4618      	mov	r0, r3
 800c282:	f000 fbcb 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c28a:	e0fb      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c290:	e0f8      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800c292:	bf00      	nop
 800c294:	58024400 	.word	0x58024400
 800c298:	03d09000 	.word	0x03d09000
 800c29c:	003d0900 	.word	0x003d0900
 800c2a0:	00f42400 	.word	0x00f42400
 800c2a4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2a8:	4b79      	ldr	r3, [pc, #484]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2b4:	d107      	bne.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2b6:	f107 0318 	add.w	r3, r7, #24
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f906 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c2c0:	6a3b      	ldr	r3, [r7, #32]
 800c2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c2c4:	e0de      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2ca:	e0db      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c2d0:	e0d8      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c2d8:	f040 8085 	bne.w	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c2dc:	4b6c      	ldr	r3, [pc, #432]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2e0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c2e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2ec:	d06b      	beq.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2f4:	d874      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fc:	d056      	beq.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c304:	d86c      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c30c:	d03b      	beq.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c314:	d864      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31c:	d021      	beq.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800c31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c324:	d85c      	bhi.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d004      	beq.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c332:	d004      	beq.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800c334:	e054      	b.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c336:	f000 f8b3 	bl	800c4a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c33a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c33c:	e0a2      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c33e:	4b54      	ldr	r3, [pc, #336]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c34a:	d107      	bne.n	800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c34c:	f107 0318 	add.w	r3, r7, #24
 800c350:	4618      	mov	r0, r3
 800c352:	f000 f8bb 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c35a:	e093      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c360:	e090      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c362:	4b4b      	ldr	r3, [pc, #300]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c36a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36e:	d107      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c370:	f107 030c 	add.w	r3, r7, #12
 800c374:	4618      	mov	r0, r3
 800c376:	f000 f9fd 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c37e:	e081      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c384:	e07e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c386:	4b42      	ldr	r3, [pc, #264]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f003 0304 	and.w	r3, r3, #4
 800c38e:	2b04      	cmp	r3, #4
 800c390:	d109      	bne.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c392:	4b3f      	ldr	r3, [pc, #252]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	08db      	lsrs	r3, r3, #3
 800c398:	f003 0303 	and.w	r3, r3, #3
 800c39c:	4a3d      	ldr	r2, [pc, #244]	; (800c494 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c39e:	fa22 f303 	lsr.w	r3, r2, r3
 800c3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c3a4:	e06e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3aa:	e06b      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c3ac:	4b38      	ldr	r3, [pc, #224]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b8:	d102      	bne.n	800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800c3ba:	4b37      	ldr	r3, [pc, #220]	; (800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800c3be:	e061      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3c4:	e05e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3c6:	4b32      	ldr	r3, [pc, #200]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3d2:	d102      	bne.n	800c3da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800c3d4:	4b31      	ldr	r3, [pc, #196]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c3d8:	e054      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3de:	e051      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c3e4:	e04e      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3ec:	d148      	bne.n	800c480 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800c3ee:	4b28      	ldr	r3, [pc, #160]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3fe:	d02a      	beq.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c406:	d838      	bhi.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d004      	beq.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c414:	d00d      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800c416:	e030      	b.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c418:	4b1d      	ldr	r3, [pc, #116]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c424:	d102      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800c426:	4b1d      	ldr	r3, [pc, #116]	; (800c49c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c42a:	e02b      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c430:	e028      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c432:	4b17      	ldr	r3, [pc, #92]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c43a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c43e:	d107      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c444:	4618      	mov	r0, r3
 800c446:	f000 fae9 	bl	800ca1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c44e:	e019      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c454:	e016      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c456:	4b0e      	ldr	r3, [pc, #56]	; (800c490 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c45e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c462:	d107      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c464:	f107 0318 	add.w	r3, r7, #24
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 f82f 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800c472:	e007      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c478:	e004      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800c47a:	2300      	movs	r3, #0
 800c47c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c47e:	e001      	b.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c486:	4618      	mov	r0, r3
 800c488:	3740      	adds	r7, #64	; 0x40
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	58024400 	.word	0x58024400
 800c494:	03d09000 	.word	0x03d09000
 800c498:	003d0900 	.word	0x003d0900
 800c49c:	00f42400 	.word	0x00f42400

0800c4a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c4a4:	f7fe fb88 	bl	800abb8 <HAL_RCC_GetHCLKFreq>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	4b06      	ldr	r3, [pc, #24]	; (800c4c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	091b      	lsrs	r3, r3, #4
 800c4b0:	f003 0307 	and.w	r3, r3, #7
 800c4b4:	4904      	ldr	r1, [pc, #16]	; (800c4c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c4b6:	5ccb      	ldrb	r3, [r1, r3]
 800c4b8:	f003 031f 	and.w	r3, r3, #31
 800c4bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	58024400 	.word	0x58024400
 800c4c8:	0801d3c8 	.word	0x0801d3c8

0800c4cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b089      	sub	sp, #36	; 0x24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4d4:	4ba1      	ldr	r3, [pc, #644]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c4de:	4b9f      	ldr	r3, [pc, #636]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e2:	0b1b      	lsrs	r3, r3, #12
 800c4e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4ea:	4b9c      	ldr	r3, [pc, #624]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	091b      	lsrs	r3, r3, #4
 800c4f0:	f003 0301 	and.w	r3, r3, #1
 800c4f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c4f6:	4b99      	ldr	r3, [pc, #612]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4fa:	08db      	lsrs	r3, r3, #3
 800c4fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	fb02 f303 	mul.w	r3, r2, r3
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c50e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	2b00      	cmp	r3, #0
 800c516:	f000 8111 	beq.w	800c73c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c51a:	69bb      	ldr	r3, [r7, #24]
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	f000 8083 	beq.w	800c628 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b02      	cmp	r3, #2
 800c526:	f200 80a1 	bhi.w	800c66c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c52a:	69bb      	ldr	r3, [r7, #24]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d003      	beq.n	800c538 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	2b01      	cmp	r3, #1
 800c534:	d056      	beq.n	800c5e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c536:	e099      	b.n	800c66c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c538:	4b88      	ldr	r3, [pc, #544]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f003 0320 	and.w	r3, r3, #32
 800c540:	2b00      	cmp	r3, #0
 800c542:	d02d      	beq.n	800c5a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c544:	4b85      	ldr	r3, [pc, #532]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	08db      	lsrs	r3, r3, #3
 800c54a:	f003 0303 	and.w	r3, r3, #3
 800c54e:	4a84      	ldr	r2, [pc, #528]	; (800c760 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c550:	fa22 f303 	lsr.w	r3, r2, r3
 800c554:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	ee07 3a90 	vmov	s15, r3
 800c55c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	ee07 3a90 	vmov	s15, r3
 800c566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c56e:	4b7b      	ldr	r3, [pc, #492]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c576:	ee07 3a90 	vmov	s15, r3
 800c57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c57e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c582:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c58e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c59e:	e087      	b.n	800c6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	ee07 3a90 	vmov	s15, r3
 800c5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c768 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5b2:	4b6a      	ldr	r3, [pc, #424]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ba:	ee07 3a90 	vmov	s15, r3
 800c5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5e2:	e065      	b.n	800c6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	ee07 3a90 	vmov	s15, r3
 800c5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c76c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c5f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5f6:	4b59      	ldr	r3, [pc, #356]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5fe:	ee07 3a90 	vmov	s15, r3
 800c602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c606:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c60e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c61e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c626:	e043      	b.n	800c6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	ee07 3a90 	vmov	s15, r3
 800c62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63a:	4b48      	ldr	r3, [pc, #288]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c642:	ee07 3a90 	vmov	s15, r3
 800c646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c64e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c65e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c662:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c66a:	e021      	b.n	800c6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	ee07 3a90 	vmov	s15, r3
 800c672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c76c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c67e:	4b37      	ldr	r3, [pc, #220]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c686:	ee07 3a90 	vmov	s15, r3
 800c68a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c68e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c692:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c69a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c69e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c6ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c6b0:	4b2a      	ldr	r3, [pc, #168]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	0a5b      	lsrs	r3, r3, #9
 800c6b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ba:	ee07 3a90 	vmov	s15, r3
 800c6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d6:	ee17 2a90 	vmov	r2, s15
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c6de:	4b1f      	ldr	r3, [pc, #124]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e2:	0c1b      	lsrs	r3, r3, #16
 800c6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6e8:	ee07 3a90 	vmov	s15, r3
 800c6ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c704:	ee17 2a90 	vmov	r2, s15
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c70c:	4b13      	ldr	r3, [pc, #76]	; (800c75c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c710:	0e1b      	lsrs	r3, r3, #24
 800c712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c716:	ee07 3a90 	vmov	s15, r3
 800c71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c71e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c722:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c726:	edd7 6a07 	vldr	s13, [r7, #28]
 800c72a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c72e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c732:	ee17 2a90 	vmov	r2, s15
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c73a:	e008      	b.n	800c74e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	609a      	str	r2, [r3, #8]
}
 800c74e:	bf00      	nop
 800c750:	3724      	adds	r7, #36	; 0x24
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr
 800c75a:	bf00      	nop
 800c75c:	58024400 	.word	0x58024400
 800c760:	03d09000 	.word	0x03d09000
 800c764:	46000000 	.word	0x46000000
 800c768:	4c742400 	.word	0x4c742400
 800c76c:	4a742400 	.word	0x4a742400
 800c770:	4b742400 	.word	0x4b742400

0800c774 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c774:	b480      	push	{r7}
 800c776:	b089      	sub	sp, #36	; 0x24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c77c:	4ba1      	ldr	r3, [pc, #644]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c780:	f003 0303 	and.w	r3, r3, #3
 800c784:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c786:	4b9f      	ldr	r3, [pc, #636]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78a:	0d1b      	lsrs	r3, r3, #20
 800c78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c790:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c792:	4b9c      	ldr	r3, [pc, #624]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c796:	0a1b      	lsrs	r3, r3, #8
 800c798:	f003 0301 	and.w	r3, r3, #1
 800c79c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c79e:	4b99      	ldr	r3, [pc, #612]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7a2:	08db      	lsrs	r3, r3, #3
 800c7a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c7a8:	693a      	ldr	r2, [r7, #16]
 800c7aa:	fb02 f303 	mul.w	r3, r2, r3
 800c7ae:	ee07 3a90 	vmov	s15, r3
 800c7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c7ba:	697b      	ldr	r3, [r7, #20]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f000 8111 	beq.w	800c9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	f000 8083 	beq.w	800c8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	f200 80a1 	bhi.w	800c914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d003      	beq.n	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d056      	beq.n	800c88c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c7de:	e099      	b.n	800c914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7e0:	4b88      	ldr	r3, [pc, #544]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 0320 	and.w	r3, r3, #32
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d02d      	beq.n	800c848 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c7ec:	4b85      	ldr	r3, [pc, #532]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	08db      	lsrs	r3, r3, #3
 800c7f2:	f003 0303 	and.w	r3, r3, #3
 800c7f6:	4a84      	ldr	r2, [pc, #528]	; (800ca08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c7f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	ee07 3a90 	vmov	s15, r3
 800c804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c816:	4b7b      	ldr	r3, [pc, #492]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c81e:	ee07 3a90 	vmov	s15, r3
 800c822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c826:	ed97 6a03 	vldr	s12, [r7, #12]
 800c82a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c82e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c83a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c83e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c846:	e087      	b.n	800c958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	ee07 3a90 	vmov	s15, r3
 800c84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c85a:	4b6a      	ldr	r3, [pc, #424]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c862:	ee07 3a90 	vmov	s15, r3
 800c866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c86a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c86e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c87a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c87e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c882:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c88a:	e065      	b.n	800c958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c89a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c89e:	4b59      	ldr	r3, [pc, #356]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a6:	ee07 3a90 	vmov	s15, r3
 800c8aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8ce:	e043      	b.n	800c958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	ee07 3a90 	vmov	s15, r3
 800c8d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c8de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e2:	4b48      	ldr	r3, [pc, #288]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ea:	ee07 3a90 	vmov	s15, r3
 800c8ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c90e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c912:	e021      	b.n	800c958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	ee07 3a90 	vmov	s15, r3
 800c91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c926:	4b37      	ldr	r3, [pc, #220]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c92e:	ee07 3a90 	vmov	s15, r3
 800c932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c936:	ed97 6a03 	vldr	s12, [r7, #12]
 800c93a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c93e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c94a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c94e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c956:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c958:	4b2a      	ldr	r3, [pc, #168]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c95a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95c:	0a5b      	lsrs	r3, r3, #9
 800c95e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c962:	ee07 3a90 	vmov	s15, r3
 800c966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c972:	edd7 6a07 	vldr	s13, [r7, #28]
 800c976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c97e:	ee17 2a90 	vmov	r2, s15
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c986:	4b1f      	ldr	r3, [pc, #124]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98a:	0c1b      	lsrs	r3, r3, #16
 800c98c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c990:	ee07 3a90 	vmov	s15, r3
 800c994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c99c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ac:	ee17 2a90 	vmov	r2, s15
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c9b4:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b8:	0e1b      	lsrs	r3, r3, #24
 800c9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9be:	ee07 3a90 	vmov	s15, r3
 800c9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9da:	ee17 2a90 	vmov	r2, s15
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c9e2:	e008      	b.n	800c9f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	609a      	str	r2, [r3, #8]
}
 800c9f6:	bf00      	nop
 800c9f8:	3724      	adds	r7, #36	; 0x24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	58024400 	.word	0x58024400
 800ca08:	03d09000 	.word	0x03d09000
 800ca0c:	46000000 	.word	0x46000000
 800ca10:	4c742400 	.word	0x4c742400
 800ca14:	4a742400 	.word	0x4a742400
 800ca18:	4b742400 	.word	0x4b742400

0800ca1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b089      	sub	sp, #36	; 0x24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca24:	4ba0      	ldr	r3, [pc, #640]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca28:	f003 0303 	and.w	r3, r3, #3
 800ca2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800ca2e:	4b9e      	ldr	r3, [pc, #632]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca32:	091b      	lsrs	r3, r3, #4
 800ca34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ca3a:	4b9b      	ldr	r3, [pc, #620]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3e:	f003 0301 	and.w	r3, r3, #1
 800ca42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ca44:	4b98      	ldr	r3, [pc, #608]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca48:	08db      	lsrs	r3, r3, #3
 800ca4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca4e:	693a      	ldr	r2, [r7, #16]
 800ca50:	fb02 f303 	mul.w	r3, r2, r3
 800ca54:	ee07 3a90 	vmov	s15, r3
 800ca58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 8111 	beq.w	800cc8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	f000 8083 	beq.w	800cb76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b02      	cmp	r3, #2
 800ca74:	f200 80a1 	bhi.w	800cbba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ca78:	69bb      	ldr	r3, [r7, #24]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d056      	beq.n	800cb32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ca84:	e099      	b.n	800cbba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca86:	4b88      	ldr	r3, [pc, #544]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0320 	and.w	r3, r3, #32
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d02d      	beq.n	800caee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca92:	4b85      	ldr	r3, [pc, #532]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	08db      	lsrs	r3, r3, #3
 800ca98:	f003 0303 	and.w	r3, r3, #3
 800ca9c:	4a83      	ldr	r2, [pc, #524]	; (800ccac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ca9e:	fa22 f303 	lsr.w	r3, r2, r3
 800caa2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	ee07 3a90 	vmov	s15, r3
 800caaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	ee07 3a90 	vmov	s15, r3
 800cab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cabc:	4b7a      	ldr	r3, [pc, #488]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cabe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac4:	ee07 3a90 	vmov	s15, r3
 800cac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cacc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cad0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ccb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cadc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800caec:	e087      	b.n	800cbfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	ee07 3a90 	vmov	s15, r3
 800caf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cafc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb00:	4b69      	ldr	r3, [pc, #420]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb08:	ee07 3a90 	vmov	s15, r3
 800cb0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb10:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb14:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ccb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb30:	e065      	b.n	800cbfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	ee07 3a90 	vmov	s15, r3
 800cb38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ccb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cb40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb44:	4b58      	ldr	r3, [pc, #352]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4c:	ee07 3a90 	vmov	s15, r3
 800cb50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb54:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb58:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ccb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cb74:	e043      	b.n	800cbfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	ee07 3a90 	vmov	s15, r3
 800cb7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ccbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cb84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb88:	4b47      	ldr	r3, [pc, #284]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb90:	ee07 3a90 	vmov	s15, r3
 800cb94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb98:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ccb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbb8:	e021      	b.n	800cbfe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	ee07 3a90 	vmov	s15, r3
 800cbc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ccb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cbc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbcc:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd4:	ee07 3a90 	vmov	s15, r3
 800cbd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbdc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbe0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ccb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbe4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cbfc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800cbfe:	4b2a      	ldr	r3, [pc, #168]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc02:	0a5b      	lsrs	r3, r3, #9
 800cc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc08:	ee07 3a90 	vmov	s15, r3
 800cc0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc18:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc24:	ee17 2a90 	vmov	r2, s15
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800cc2c:	4b1e      	ldr	r3, [pc, #120]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc30:	0c1b      	lsrs	r3, r3, #16
 800cc32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc36:	ee07 3a90 	vmov	s15, r3
 800cc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc46:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc52:	ee17 2a90 	vmov	r2, s15
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800cc5a:	4b13      	ldr	r3, [pc, #76]	; (800cca8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5e:	0e1b      	lsrs	r3, r3, #24
 800cc60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc64:	ee07 3a90 	vmov	s15, r3
 800cc68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc74:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc80:	ee17 2a90 	vmov	r2, s15
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc88:	e008      	b.n	800cc9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	609a      	str	r2, [r3, #8]
}
 800cc9c:	bf00      	nop
 800cc9e:	3724      	adds	r7, #36	; 0x24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr
 800cca8:	58024400 	.word	0x58024400
 800ccac:	03d09000 	.word	0x03d09000
 800ccb0:	46000000 	.word	0x46000000
 800ccb4:	4c742400 	.word	0x4c742400
 800ccb8:	4a742400 	.word	0x4a742400
 800ccbc:	4b742400 	.word	0x4b742400

0800ccc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ccca:	2300      	movs	r3, #0
 800cccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ccce:	4b53      	ldr	r3, [pc, #332]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800ccd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d101      	bne.n	800ccde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e099      	b.n	800ce12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ccde:	4b4f      	ldr	r3, [pc, #316]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4a4e      	ldr	r2, [pc, #312]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cce4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccea:	f7f7 fc23 	bl	8004534 <HAL_GetTick>
 800ccee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccf0:	e008      	b.n	800cd04 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ccf2:	f7f7 fc1f 	bl	8004534 <HAL_GetTick>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	1ad3      	subs	r3, r2, r3
 800ccfc:	2b02      	cmp	r3, #2
 800ccfe:	d901      	bls.n	800cd04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd00:	2303      	movs	r3, #3
 800cd02:	e086      	b.n	800ce12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd04:	4b45      	ldr	r3, [pc, #276]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d1f0      	bne.n	800ccf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd10:	4b42      	ldr	r3, [pc, #264]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd14:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	031b      	lsls	r3, r3, #12
 800cd1e:	493f      	ldr	r1, [pc, #252]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd20:	4313      	orrs	r3, r2
 800cd22:	628b      	str	r3, [r1, #40]	; 0x28
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	3b01      	subs	r3, #1
 800cd34:	025b      	lsls	r3, r3, #9
 800cd36:	b29b      	uxth	r3, r3
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68db      	ldr	r3, [r3, #12]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	041b      	lsls	r3, r3, #16
 800cd42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cd46:	431a      	orrs	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	691b      	ldr	r3, [r3, #16]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	061b      	lsls	r3, r3, #24
 800cd50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cd54:	4931      	ldr	r1, [pc, #196]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd56:	4313      	orrs	r3, r2
 800cd58:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd5a:	4b30      	ldr	r3, [pc, #192]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	492d      	ldr	r1, [pc, #180]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd6c:	4b2b      	ldr	r3, [pc, #172]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	f023 0220 	bic.w	r2, r3, #32
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	699b      	ldr	r3, [r3, #24]
 800cd78:	4928      	ldr	r1, [pc, #160]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd7e:	4b27      	ldr	r3, [pc, #156]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd82:	4a26      	ldr	r2, [pc, #152]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd84:	f023 0310 	bic.w	r3, r3, #16
 800cd88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd8a:	4b24      	ldr	r3, [pc, #144]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd8e:	4b24      	ldr	r3, [pc, #144]	; (800ce20 <RCCEx_PLL2_Config+0x160>)
 800cd90:	4013      	ands	r3, r2
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	69d2      	ldr	r2, [r2, #28]
 800cd96:	00d2      	lsls	r2, r2, #3
 800cd98:	4920      	ldr	r1, [pc, #128]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd9e:	4b1f      	ldr	r3, [pc, #124]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cda0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda2:	4a1e      	ldr	r2, [pc, #120]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cda4:	f043 0310 	orr.w	r3, r3, #16
 800cda8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d106      	bne.n	800cdbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cdb0:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb4:	4a19      	ldr	r2, [pc, #100]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cdb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cdba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdbc:	e00f      	b.n	800cdde <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d106      	bne.n	800cdd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cdc4:	4b15      	ldr	r3, [pc, #84]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc8:	4a14      	ldr	r2, [pc, #80]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cdca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cdd0:	e005      	b.n	800cdde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cdd2:	4b12      	ldr	r3, [pc, #72]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd6:	4a11      	ldr	r2, [pc, #68]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cdd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cddc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cdde:	4b0f      	ldr	r3, [pc, #60]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a0e      	ldr	r2, [pc, #56]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800cde4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cde8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdea:	f7f7 fba3 	bl	8004534 <HAL_GetTick>
 800cdee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdf0:	e008      	b.n	800ce04 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cdf2:	f7f7 fb9f 	bl	8004534 <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	2b02      	cmp	r3, #2
 800cdfe:	d901      	bls.n	800ce04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e006      	b.n	800ce12 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce04:	4b05      	ldr	r3, [pc, #20]	; (800ce1c <RCCEx_PLL2_Config+0x15c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d0f0      	beq.n	800cdf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	58024400 	.word	0x58024400
 800ce20:	ffff0007 	.word	0xffff0007

0800ce24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce32:	4b53      	ldr	r3, [pc, #332]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ce34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce36:	f003 0303 	and.w	r3, r3, #3
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d101      	bne.n	800ce42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e099      	b.n	800cf76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ce42:	4b4f      	ldr	r3, [pc, #316]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a4e      	ldr	r2, [pc, #312]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ce48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce4e:	f7f7 fb71 	bl	8004534 <HAL_GetTick>
 800ce52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce54:	e008      	b.n	800ce68 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ce56:	f7f7 fb6d 	bl	8004534 <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d901      	bls.n	800ce68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e086      	b.n	800cf76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce68:	4b45      	ldr	r3, [pc, #276]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1f0      	bne.n	800ce56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce74:	4b42      	ldr	r3, [pc, #264]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ce76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce78:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	051b      	lsls	r3, r3, #20
 800ce82:	493f      	ldr	r1, [pc, #252]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ce84:	4313      	orrs	r3, r2
 800ce86:	628b      	str	r3, [r1, #40]	; 0x28
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	025b      	lsls	r3, r3, #9
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	431a      	orrs	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	041b      	lsls	r3, r3, #16
 800cea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	061b      	lsls	r3, r3, #24
 800ceb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceb8:	4931      	ldr	r1, [pc, #196]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ceba:	4313      	orrs	r3, r2
 800cebc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cebe:	4b30      	ldr	r3, [pc, #192]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	492d      	ldr	r1, [pc, #180]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cecc:	4313      	orrs	r3, r2
 800cece:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ced0:	4b2b      	ldr	r3, [pc, #172]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	4928      	ldr	r1, [pc, #160]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cee2:	4b27      	ldr	r3, [pc, #156]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee6:	4a26      	ldr	r2, [pc, #152]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ceec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ceee:	4b24      	ldr	r3, [pc, #144]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cef2:	4b24      	ldr	r3, [pc, #144]	; (800cf84 <RCCEx_PLL3_Config+0x160>)
 800cef4:	4013      	ands	r3, r2
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	69d2      	ldr	r2, [r2, #28]
 800cefa:	00d2      	lsls	r2, r2, #3
 800cefc:	4920      	ldr	r1, [pc, #128]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cefe:	4313      	orrs	r3, r2
 800cf00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf02:	4b1f      	ldr	r3, [pc, #124]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf06:	4a1e      	ldr	r2, [pc, #120]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf14:	4b1a      	ldr	r3, [pc, #104]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	4a19      	ldr	r2, [pc, #100]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf20:	e00f      	b.n	800cf42 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d106      	bne.n	800cf36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf28:	4b15      	ldr	r3, [pc, #84]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	4a14      	ldr	r2, [pc, #80]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf34:	e005      	b.n	800cf42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cf36:	4b12      	ldr	r3, [pc, #72]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3a:	4a11      	ldr	r2, [pc, #68]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cf40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cf42:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a0e      	ldr	r2, [pc, #56]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf4e:	f7f7 faf1 	bl	8004534 <HAL_GetTick>
 800cf52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf54:	e008      	b.n	800cf68 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cf56:	f7f7 faed 	bl	8004534 <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d901      	bls.n	800cf68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf64:	2303      	movs	r3, #3
 800cf66:	e006      	b.n	800cf76 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf68:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <RCCEx_PLL3_Config+0x15c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0f0      	beq.n	800cf56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	58024400 	.word	0x58024400
 800cf84:	ffff0007 	.word	0xffff0007

0800cf88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d067      	beq.n	800d06a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d106      	bne.n	800cfb4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7f6 f812 	bl	8002fd8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2202      	movs	r2, #2
 800cfb8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	22ca      	movs	r2, #202	; 0xca
 800cfc2:	625a      	str	r2, [r3, #36]	; 0x24
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2253      	movs	r2, #83	; 0x53
 800cfca:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 fa49 	bl	800d464 <RTC_EnterInitMode>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800cfd6:	7bfb      	ldrb	r3, [r7, #15]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d13b      	bne.n	800d054 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6899      	ldr	r1, [r3, #8]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	4b23      	ldr	r3, [pc, #140]	; (800d074 <HAL_RTC_Init+0xec>)
 800cfe8:	400b      	ands	r3, r1
 800cfea:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6899      	ldr	r1, [r3, #8]
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	691b      	ldr	r3, [r3, #16]
 800cffa:	431a      	orrs	r2, r3
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	699b      	ldr	r3, [r3, #24]
 800d000:	431a      	orrs	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	430a      	orrs	r2, r1
 800d008:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	689b      	ldr	r3, [r3, #8]
 800d00e:	0419      	lsls	r1, r3, #16
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	68da      	ldr	r2, [r3, #12]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	430a      	orrs	r2, r1
 800d01a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 fa55 	bl	800d4cc <RTC_ExitInitMode>
 800d022:	4603      	mov	r3, r0
 800d024:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800d026:	7bfb      	ldrb	r3, [r7, #15]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d113      	bne.n	800d054 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f022 0203 	bic.w	r2, r2, #3
 800d03a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	69da      	ldr	r2, [r3, #28]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	695b      	ldr	r3, [r3, #20]
 800d04a:	431a      	orrs	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	430a      	orrs	r2, r1
 800d052:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	22ff      	movs	r2, #255	; 0xff
 800d05a:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d103      	bne.n	800d06a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	3710      	adds	r7, #16
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}
 800d074:	ff8fffbf 	.word	0xff8fffbf

0800d078 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d078:	b590      	push	{r4, r7, lr}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d101      	bne.n	800d092 <HAL_RTC_SetTime+0x1a>
 800d08e:	2302      	movs	r3, #2
 800d090:	e089      	b.n	800d1a6 <HAL_RTC_SetTime+0x12e>
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2202      	movs	r2, #2
 800d09e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	22ca      	movs	r2, #202	; 0xca
 800d0a8:	625a      	str	r2, [r3, #36]	; 0x24
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2253      	movs	r2, #83	; 0x53
 800d0b0:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d0b2:	68f8      	ldr	r0, [r7, #12]
 800d0b4:	f000 f9d6 	bl	800d464 <RTC_EnterInitMode>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d0bc:	7cfb      	ldrb	r3, [r7, #19]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d161      	bne.n	800d186 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d126      	bne.n	800d116 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d102      	bne.n	800d0dc <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d0dc:	68bb      	ldr	r3, [r7, #8]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f000 fa31 	bl	800d548 <RTC_ByteToBcd2>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	785b      	ldrb	r3, [r3, #1]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f000 fa2a 	bl	800d548 <RTC_ByteToBcd2>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d0f8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	789b      	ldrb	r3, [r3, #2]
 800d0fe:	4618      	mov	r0, r3
 800d100:	f000 fa22 	bl	800d548 <RTC_ByteToBcd2>
 800d104:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d106:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	78db      	ldrb	r3, [r3, #3]
 800d10e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d110:	4313      	orrs	r3, r2
 800d112:	617b      	str	r3, [r7, #20]
 800d114:	e018      	b.n	800d148 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d120:	2b00      	cmp	r3, #0
 800d122:	d102      	bne.n	800d12a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	2200      	movs	r2, #0
 800d128:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	785b      	ldrb	r3, [r3, #1]
 800d134:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d136:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d138:	68ba      	ldr	r2, [r7, #8]
 800d13a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d13c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	78db      	ldrb	r3, [r3, #3]
 800d142:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d144:	4313      	orrs	r3, r2
 800d146:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	6979      	ldr	r1, [r7, #20]
 800d14e:	4b18      	ldr	r3, [pc, #96]	; (800d1b0 <HAL_RTC_SetTime+0x138>)
 800d150:	400b      	ands	r3, r1
 800d152:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	689a      	ldr	r2, [r3, #8]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d162:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	6899      	ldr	r1, [r3, #8]
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	68da      	ldr	r2, [r3, #12]
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	431a      	orrs	r2, r3
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	430a      	orrs	r2, r1
 800d17a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f000 f9a5 	bl	800d4cc <RTC_ExitInitMode>
 800d182:	4603      	mov	r3, r0
 800d184:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	22ff      	movs	r2, #255	; 0xff
 800d18c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d18e:	7cfb      	ldrb	r3, [r7, #19]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d103      	bne.n	800d19c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d1a4:	7cfb      	ldrb	r3, [r7, #19]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	371c      	adds	r7, #28
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd90      	pop	{r4, r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	007f7f7f 	.word	0x007f7f7f

0800d1b4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	691b      	ldr	r3, [r3, #16]
 800d1d0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	4b22      	ldr	r3, [pc, #136]	; (800d268 <HAL_RTC_GetTime+0xb4>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	0c1b      	lsrs	r3, r3, #16
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1fe:	b2da      	uxtb	r2, r3
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	b2db      	uxtb	r3, r3
 800d208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d20c:	b2da      	uxtb	r2, r3
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	0d9b      	lsrs	r3, r3, #22
 800d216:	b2db      	uxtb	r3, r3
 800d218:	f003 0301 	and.w	r3, r3, #1
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11a      	bne.n	800d25e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f000 f9ab 	bl	800d588 <RTC_Bcd2ToByte>
 800d232:	4603      	mov	r3, r0
 800d234:	461a      	mov	r2, r3
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	785b      	ldrb	r3, [r3, #1]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f9a2 	bl	800d588 <RTC_Bcd2ToByte>
 800d244:	4603      	mov	r3, r0
 800d246:	461a      	mov	r2, r3
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	789b      	ldrb	r3, [r3, #2]
 800d250:	4618      	mov	r0, r3
 800d252:	f000 f999 	bl	800d588 <RTC_Bcd2ToByte>
 800d256:	4603      	mov	r3, r0
 800d258:	461a      	mov	r2, r3
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d25e:	2300      	movs	r3, #0
}
 800d260:	4618      	mov	r0, r3
 800d262:	3718      	adds	r7, #24
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}
 800d268:	007f7f7f 	.word	0x007f7f7f

0800d26c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d26c:	b590      	push	{r4, r7, lr}
 800d26e:	b087      	sub	sp, #28
 800d270:	af00      	add	r7, sp, #0
 800d272:	60f8      	str	r0, [r7, #12]
 800d274:	60b9      	str	r1, [r7, #8]
 800d276:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d27e:	2b01      	cmp	r3, #1
 800d280:	d101      	bne.n	800d286 <HAL_RTC_SetDate+0x1a>
 800d282:	2302      	movs	r3, #2
 800d284:	e073      	b.n	800d36e <HAL_RTC_SetDate+0x102>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2201      	movs	r2, #1
 800d28a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2202      	movs	r2, #2
 800d292:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d10e      	bne.n	800d2ba <HAL_RTC_SetDate+0x4e>
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	785b      	ldrb	r3, [r3, #1]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d008      	beq.n	800d2ba <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	785b      	ldrb	r3, [r3, #1]
 800d2ac:	f023 0310 	bic.w	r3, r3, #16
 800d2b0:	b2db      	uxtb	r3, r3
 800d2b2:	330a      	adds	r3, #10
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d11c      	bne.n	800d2fa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	78db      	ldrb	r3, [r3, #3]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f000 f93f 	bl	800d548 <RTC_ByteToBcd2>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	785b      	ldrb	r3, [r3, #1]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 f938 	bl	800d548 <RTC_ByteToBcd2>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d2dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	789b      	ldrb	r3, [r3, #2]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f000 f930 	bl	800d548 <RTC_ByteToBcd2>
 800d2e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d2ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	617b      	str	r3, [r7, #20]
 800d2f8:	e00e      	b.n	800d318 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	78db      	ldrb	r3, [r3, #3]
 800d2fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	785b      	ldrb	r3, [r3, #1]
 800d304:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d306:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d30c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d314:	4313      	orrs	r3, r2
 800d316:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	22ca      	movs	r2, #202	; 0xca
 800d31e:	625a      	str	r2, [r3, #36]	; 0x24
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	2253      	movs	r2, #83	; 0x53
 800d326:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 f89b 	bl	800d464 <RTC_EnterInitMode>
 800d32e:	4603      	mov	r3, r0
 800d330:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d332:	7cfb      	ldrb	r3, [r7, #19]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d10a      	bne.n	800d34e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	6979      	ldr	r1, [r7, #20]
 800d33e:	4b0e      	ldr	r3, [pc, #56]	; (800d378 <HAL_RTC_SetDate+0x10c>)
 800d340:	400b      	ands	r3, r1
 800d342:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 f8c1 	bl	800d4cc <RTC_ExitInitMode>
 800d34a:	4603      	mov	r3, r0
 800d34c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	22ff      	movs	r2, #255	; 0xff
 800d354:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d356:	7cfb      	ldrb	r3, [r7, #19]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d103      	bne.n	800d364 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d36c:	7cfb      	ldrb	r3, [r7, #19]


}
 800d36e:	4618      	mov	r0, r3
 800d370:	371c      	adds	r7, #28
 800d372:	46bd      	mov	sp, r7
 800d374:	bd90      	pop	{r4, r7, pc}
 800d376:	bf00      	nop
 800d378:	00ffff3f 	.word	0x00ffff3f

0800d37c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af00      	add	r7, sp, #0
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	685a      	ldr	r2, [r3, #4]
 800d38e:	4b21      	ldr	r3, [pc, #132]	; (800d414 <HAL_RTC_GetDate+0x98>)
 800d390:	4013      	ands	r3, r2
 800d392:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	0c1b      	lsrs	r3, r3, #16
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	0a1b      	lsrs	r3, r3, #8
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	f003 031f 	and.w	r3, r3, #31
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	b2db      	uxtb	r3, r3
 800d3b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	0b5b      	lsrs	r3, r3, #13
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	f003 0307 	and.w	r3, r3, #7
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d11a      	bne.n	800d408 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	78db      	ldrb	r3, [r3, #3]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 f8d6 	bl	800d588 <RTC_Bcd2ToByte>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	461a      	mov	r2, r3
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	785b      	ldrb	r3, [r3, #1]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 f8cd 	bl	800d588 <RTC_Bcd2ToByte>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	789b      	ldrb	r3, [r3, #2]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f000 f8c4 	bl	800d588 <RTC_Bcd2ToByte>
 800d400:	4603      	mov	r3, r0
 800d402:	461a      	mov	r2, r3
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3718      	adds	r7, #24
 800d40e:	46bd      	mov	sp, r7
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	00ffff3f 	.word	0x00ffff3f

0800d418 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	68da      	ldr	r2, [r3, #12]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d42e:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800d430:	f7f7 f880 	bl	8004534 <HAL_GetTick>
 800d434:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d436:	e009      	b.n	800d44c <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d438:	f7f7 f87c 	bl	8004534 <HAL_GetTick>
 800d43c:	4602      	mov	r2, r0
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	1ad3      	subs	r3, r2, r3
 800d442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d446:	d901      	bls.n	800d44c <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800d448:	2303      	movs	r3, #3
 800d44a:	e007      	b.n	800d45c <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	f003 0320 	and.w	r3, r3, #32
 800d456:	2b00      	cmp	r3, #0
 800d458:	d0ee      	beq.n	800d438 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3710      	adds	r7, #16
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b084      	sub	sp, #16
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d120      	bne.n	800d4c0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f04f 32ff 	mov.w	r2, #4294967295
 800d486:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d488:	f7f7 f854 	bl	8004534 <HAL_GetTick>
 800d48c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d48e:	e00d      	b.n	800d4ac <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d490:	f7f7 f850 	bl	8004534 <HAL_GetTick>
 800d494:	4602      	mov	r2, r0
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	1ad3      	subs	r3, r2, r3
 800d49a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d49e:	d905      	bls.n	800d4ac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2203      	movs	r2, #3
 800d4a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d102      	bne.n	800d4c0 <RTC_EnterInitMode+0x5c>
 800d4ba:	7bfb      	ldrb	r3, [r7, #15]
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	d1e7      	bne.n	800d490 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800d4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800d4d8:	4b1a      	ldr	r3, [pc, #104]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	4a19      	ldr	r2, [pc, #100]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d4e4:	4b17      	ldr	r3, [pc, #92]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d4e6:	689b      	ldr	r3, [r3, #8]
 800d4e8:	f003 0320 	and.w	r3, r3, #32
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10c      	bne.n	800d50a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff ff91 	bl	800d418 <HAL_RTC_WaitForSynchro>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d01e      	beq.n	800d53a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2203      	movs	r2, #3
 800d500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d504:	2303      	movs	r3, #3
 800d506:	73fb      	strb	r3, [r7, #15]
 800d508:	e017      	b.n	800d53a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d50a:	4b0e      	ldr	r3, [pc, #56]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	4a0d      	ldr	r2, [pc, #52]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d510:	f023 0320 	bic.w	r3, r3, #32
 800d514:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ff7e 	bl	800d418 <HAL_RTC_WaitForSynchro>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d005      	beq.n	800d52e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2203      	movs	r2, #3
 800d526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d52a:	2303      	movs	r3, #3
 800d52c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d52e:	4b05      	ldr	r3, [pc, #20]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d530:	689b      	ldr	r3, [r3, #8]
 800d532:	4a04      	ldr	r2, [pc, #16]	; (800d544 <RTC_ExitInitMode+0x78>)
 800d534:	f043 0320 	orr.w	r3, r3, #32
 800d538:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	58004000 	.word	0x58004000

0800d548 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	4603      	mov	r3, r0
 800d550:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d552:	2300      	movs	r3, #0
 800d554:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d556:	79fb      	ldrb	r3, [r7, #7]
 800d558:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d55a:	e005      	b.n	800d568 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3301      	adds	r3, #1
 800d560:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d562:	7afb      	ldrb	r3, [r7, #11]
 800d564:	3b0a      	subs	r3, #10
 800d566:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d568:	7afb      	ldrb	r3, [r7, #11]
 800d56a:	2b09      	cmp	r3, #9
 800d56c:	d8f6      	bhi.n	800d55c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	b2db      	uxtb	r3, r3
 800d572:	011b      	lsls	r3, r3, #4
 800d574:	b2da      	uxtb	r2, r3
 800d576:	7afb      	ldrb	r3, [r7, #11]
 800d578:	4313      	orrs	r3, r2
 800d57a:	b2db      	uxtb	r3, r3
}
 800d57c:	4618      	mov	r0, r3
 800d57e:	3714      	adds	r7, #20
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d588:	b480      	push	{r7}
 800d58a:	b085      	sub	sp, #20
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	4603      	mov	r3, r0
 800d590:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	091b      	lsrs	r3, r3, #4
 800d596:	b2db      	uxtb	r3, r3
 800d598:	461a      	mov	r2, r3
 800d59a:	0092      	lsls	r2, r2, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	f003 030f 	and.w	r3, r3, #15
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
 800d5ac:	4413      	add	r3, r2
 800d5ae:	b2db      	uxtb	r3, r3
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3714      	adds	r7, #20
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b08a      	sub	sp, #40	; 0x28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d101      	bne.n	800d5ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	e075      	b.n	800d6ba <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d105      	bne.n	800d5e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7f5 fd47 	bl	8003074 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2204      	movs	r2, #4
 800d5ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f868 	bl	800d6c4 <HAL_SD_InitCard>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e05d      	b.n	800d6ba <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d5fe:	f107 0308 	add.w	r3, r7, #8
 800d602:	4619      	mov	r1, r3
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fda9 	bl	800e15c <HAL_SD_GetCardStatus>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e052      	b.n	800d6ba <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d614:	7e3b      	ldrb	r3, [r7, #24]
 800d616:	b2db      	uxtb	r3, r3
 800d618:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d61a:	7e7b      	ldrb	r3, [r7, #25]
 800d61c:	b2db      	uxtb	r3, r3
 800d61e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d624:	2b01      	cmp	r3, #1
 800d626:	d10a      	bne.n	800d63e <HAL_SD_Init+0x82>
 800d628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d102      	bne.n	800d634 <HAL_SD_Init+0x78>
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d004      	beq.n	800d63e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d63a:	659a      	str	r2, [r3, #88]	; 0x58
 800d63c:	e00b      	b.n	800d656 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d642:	2b01      	cmp	r3, #1
 800d644:	d104      	bne.n	800d650 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d64c:	659a      	str	r2, [r3, #88]	; 0x58
 800d64e:	e002      	b.n	800d656 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	4619      	mov	r1, r3
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fe67 	bl	800e330 <HAL_SD_ConfigWideBusOperation>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d001      	beq.n	800d66c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d668:	2301      	movs	r3, #1
 800d66a:	e026      	b.n	800d6ba <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d66c:	f7f6 ff62 	bl	8004534 <HAL_GetTick>
 800d670:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d672:	e011      	b.n	800d698 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d674:	f7f6 ff5e 	bl	8004534 <HAL_GetTick>
 800d678:	4602      	mov	r2, r0
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	1ad3      	subs	r3, r2, r3
 800d67e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d682:	d109      	bne.n	800d698 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d68a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2201      	movs	r2, #1
 800d690:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d694:	2303      	movs	r3, #3
 800d696:	e010      	b.n	800d6ba <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 ff5b 	bl	800e554 <HAL_SD_GetCardState>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	2b04      	cmp	r3, #4
 800d6a2:	d1e7      	bne.n	800d674 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3728      	adds	r7, #40	; 0x28
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
	...

0800d6c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d6c4:	b590      	push	{r4, r7, lr}
 800d6c6:	b08d      	sub	sp, #52	; 0x34
 800d6c8:	af02      	add	r7, sp, #8
 800d6ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d6d8:	2300      	movs	r3, #0
 800d6da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d6e0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d6e4:	f7fe fa0a 	bl	800bafc <HAL_RCCEx_GetPeriphCLKFreq>
 800d6e8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d109      	bne.n	800d704 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d6fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d700:	2301      	movs	r3, #1
 800d702:	e06a      	b.n	800d7da <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d706:	0a1b      	lsrs	r3, r3, #8
 800d708:	4a36      	ldr	r2, [pc, #216]	; (800d7e4 <HAL_SD_InitCard+0x120>)
 800d70a:	fba2 2303 	umull	r2, r3, r2, r3
 800d70e:	091b      	lsrs	r3, r3, #4
 800d710:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681c      	ldr	r4, [r3, #0]
 800d716:	466a      	mov	r2, sp
 800d718:	f107 0318 	add.w	r3, r7, #24
 800d71c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d720:	e882 0003 	stmia.w	r2, {r0, r1}
 800d724:	f107 030c 	add.w	r3, r7, #12
 800d728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d72a:	4620      	mov	r0, r4
 800d72c:	f004 ff68 	bl	8012600 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4618      	mov	r0, r3
 800d736:	f004 ffab 	bl	8012690 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	005b      	lsls	r3, r3, #1
 800d73e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d740:	fbb2 f3f3 	udiv	r3, r2, r3
 800d744:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d746:	4a28      	ldr	r2, [pc, #160]	; (800d7e8 <HAL_SD_InitCard+0x124>)
 800d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74e:	3301      	adds	r3, #1
 800d750:	4618      	mov	r0, r3
 800d752:	f7f6 fefb 	bl	800454c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 ffea 	bl	800e730 <SD_PowerON>
 800d75c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00b      	beq.n	800d77c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2201      	movs	r2, #1
 800d768:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d770:	6a3b      	ldr	r3, [r7, #32]
 800d772:	431a      	orrs	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e02e      	b.n	800d7da <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 ff09 	bl	800e594 <SD_InitCard>
 800d782:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00b      	beq.n	800d7a2 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2201      	movs	r2, #1
 800d78e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d796:	6a3b      	ldr	r3, [r7, #32]
 800d798:	431a      	orrs	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e01b      	b.n	800d7da <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f005 f806 	bl	80127bc <SDMMC_CmdBlockLength>
 800d7b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7b2:	6a3b      	ldr	r3, [r7, #32]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d00f      	beq.n	800d7d8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a0b      	ldr	r2, [pc, #44]	; (800d7ec <HAL_SD_InitCard+0x128>)
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	431a      	orrs	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	e000      	b.n	800d7da <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	372c      	adds	r7, #44	; 0x2c
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd90      	pop	{r4, r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	014f8b59 	.word	0x014f8b59
 800d7e8:	00012110 	.word	0x00012110
 800d7ec:	1fe00fff 	.word	0x1fe00fff

0800d7f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08c      	sub	sp, #48	; 0x30
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d107      	bne.n	800d818 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	e08d      	b.n	800d934 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	2b01      	cmp	r3, #1
 800d822:	f040 8086 	bne.w	800d932 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2200      	movs	r2, #0
 800d82a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d82c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	441a      	add	r2, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d836:	429a      	cmp	r2, r3
 800d838:	d907      	bls.n	800d84a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d83e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	e074      	b.n	800d934 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2203      	movs	r2, #3
 800d84e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2200      	movs	r2, #0
 800d858:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	68ba      	ldr	r2, [r7, #8]
 800d85e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	025a      	lsls	r2, r3, #9
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d002      	beq.n	800d876 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d872:	025b      	lsls	r3, r3, #9
 800d874:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d876:	f04f 33ff 	mov.w	r3, #4294967295
 800d87a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	025b      	lsls	r3, r3, #9
 800d880:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d882:	2390      	movs	r3, #144	; 0x90
 800d884:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d886:	2302      	movs	r3, #2
 800d888:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d88e:	2300      	movs	r3, #0
 800d890:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f107 0210 	add.w	r2, r7, #16
 800d89a:	4611      	mov	r1, r2
 800d89c:	4618      	mov	r0, r3
 800d89e:	f004 ff61 	bl	8012764 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68da      	ldr	r2, [r3, #12]
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68ba      	ldr	r2, [r7, #8]
 800d8b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d90a      	bls.n	800d8de <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2282      	movs	r2, #130	; 0x82
 800d8cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f004 ffb7 	bl	8012848 <SDMMC_CmdReadMultiBlock>
 800d8da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8dc:	e009      	b.n	800d8f2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2281      	movs	r2, #129	; 0x81
 800d8e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f004 ff89 	bl	8012802 <SDMMC_CmdReadSingleBlock>
 800d8f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d012      	beq.n	800d91e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4a0f      	ldr	r2, [pc, #60]	; (800d93c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d8fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	431a      	orrs	r2, r3
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2201      	movs	r2, #1
 800d910:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d91a:	2301      	movs	r3, #1
 800d91c:	e00a      	b.n	800d934 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d92c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	e000      	b.n	800d934 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d932:	2302      	movs	r3, #2
  }
}
 800d934:	4618      	mov	r0, r3
 800d936:	3730      	adds	r7, #48	; 0x30
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	1fe00fff 	.word	0x1fe00fff

0800d940 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08c      	sub	sp, #48	; 0x30
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
 800d94c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d107      	bne.n	800d968 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d95c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d964:	2301      	movs	r3, #1
 800d966:	e08d      	b.n	800da84 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	2b01      	cmp	r3, #1
 800d972:	f040 8086 	bne.w	800da82 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d97c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	441a      	add	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d986:	429a      	cmp	r2, r3
 800d988:	d907      	bls.n	800d99a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e074      	b.n	800da84 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2203      	movs	r2, #3
 800d99e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	025a      	lsls	r2, r3, #9
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	d002      	beq.n	800d9c6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	025b      	lsls	r3, r3, #9
 800d9c4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d9ca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	025b      	lsls	r3, r3, #9
 800d9d0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d9d2:	2390      	movs	r3, #144	; 0x90
 800d9d4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9da:	2300      	movs	r3, #0
 800d9dc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f107 0210 	add.w	r2, r7, #16
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f004 feb9 	bl	8012764 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	68da      	ldr	r2, [r3, #12]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da00:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2201      	movs	r2, #1
 800da10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2b01      	cmp	r3, #1
 800da16:	d90a      	bls.n	800da2e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	22a0      	movs	r2, #160	; 0xa0
 800da1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da24:	4618      	mov	r0, r3
 800da26:	f004 ff55 	bl	80128d4 <SDMMC_CmdWriteMultiBlock>
 800da2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da2c:	e009      	b.n	800da42 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2290      	movs	r2, #144	; 0x90
 800da32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da3a:	4618      	mov	r0, r3
 800da3c:	f004 ff27 	bl	801288e <SDMMC_CmdWriteSingleBlock>
 800da40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d012      	beq.n	800da6e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	4a0f      	ldr	r2, [pc, #60]	; (800da8c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800da4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da56:	431a      	orrs	r2, r3
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2201      	movs	r2, #1
 800da60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800da6a:	2301      	movs	r3, #1
 800da6c:	e00a      	b.n	800da84 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800da7c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800da7e:	2300      	movs	r3, #0
 800da80:	e000      	b.n	800da84 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800da82:	2302      	movs	r3, #2
  }
}
 800da84:	4618      	mov	r0, r3
 800da86:	3730      	adds	r7, #48	; 0x30
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	1fe00fff 	.word	0x1fe00fff

0800da90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d008      	beq.n	800dabe <HAL_SD_IRQHandler+0x2e>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d003      	beq.n	800dabe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f001 f926 	bl	800ed08 <SD_Read_IT>
 800dabc:	e19a      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 80ac 	beq.w	800dc26 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681a      	ldr	r2, [r3, #0]
 800dae2:	4b59      	ldr	r3, [pc, #356]	; (800dc48 <HAL_SD_IRQHandler+0x1b8>)
 800dae4:	400b      	ands	r3, r1
 800dae6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800daf6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68da      	ldr	r2, [r3, #12]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db06:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f003 0308 	and.w	r3, r3, #8
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d038      	beq.n	800db84 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f003 0302 	and.w	r3, r3, #2
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d104      	bne.n	800db26 <HAL_SD_IRQHandler+0x96>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f003 0320 	and.w	r3, r3, #32
 800db22:	2b00      	cmp	r3, #0
 800db24:	d011      	beq.n	800db4a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4618      	mov	r0, r3
 800db2c:	f004 fef6 	bl	801291c <SDMMC_CmdStopTransfer>
 800db30:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d008      	beq.n	800db4a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	431a      	orrs	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f95b 	bl	800de00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	4a3f      	ldr	r2, [pc, #252]	; (800dc4c <HAL_SD_IRQHandler+0x1bc>)
 800db50:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	d104      	bne.n	800db74 <HAL_SD_IRQHandler+0xe4>
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f003 0302 	and.w	r3, r3, #2
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f007 f80b 	bl	8014b90 <HAL_SD_RxCpltCallback>
 800db7a:	e13b      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f006 fffd 	bl	8014b7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800db82:	e137      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	f000 8132 	beq.w	800ddf4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2200      	movs	r2, #0
 800db96:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2200      	movs	r2, #0
 800db9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2200      	movs	r2, #0
 800dba6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f003 0302 	and.w	r3, r3, #2
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d104      	bne.n	800dbbc <HAL_SD_IRQHandler+0x12c>
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	f003 0320 	and.w	r3, r3, #32
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d011      	beq.n	800dbe0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f004 feab 	bl	801291c <SDMMC_CmdStopTransfer>
 800dbc6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d008      	beq.n	800dbe0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	431a      	orrs	r2, r3
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f910 	bl	800de00 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f003 0310 	and.w	r3, r3, #16
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d104      	bne.n	800dc02 <HAL_SD_IRQHandler+0x172>
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f003 0320 	and.w	r3, r3, #32
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f006 ffba 	bl	8014b7c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d105      	bne.n	800dc1e <HAL_SD_IRQHandler+0x18e>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f003 0302 	and.w	r3, r3, #2
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 80eb 	beq.w	800ddf4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f006 ffb6 	bl	8014b90 <HAL_SD_RxCpltCallback>
}
 800dc24:	e0e6      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00d      	beq.n	800dc50 <HAL_SD_IRQHandler+0x1c0>
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	f003 0308 	and.w	r3, r3, #8
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d008      	beq.n	800dc50 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f001 f8a8 	bl	800ed94 <SD_Write_IT>
 800dc44:	e0d6      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
 800dc46:	bf00      	nop
 800dc48:	ffff3ec5 	.word	0xffff3ec5
 800dc4c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 809d 	beq.w	800dd9a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc66:	f003 0302 	and.w	r3, r3, #2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc72:	f043 0202 	orr.w	r2, r3, #2
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc80:	f003 0308 	and.w	r3, r3, #8
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d005      	beq.n	800dc94 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8c:	f043 0208 	orr.w	r2, r3, #8
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc9a:	f003 0320 	and.w	r3, r3, #32
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d005      	beq.n	800dcae <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca6:	f043 0220 	orr.w	r2, r3, #32
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb4:	f003 0310 	and.w	r3, r3, #16
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d005      	beq.n	800dcc8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc0:	f043 0210 	orr.w	r2, r3, #16
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a4b      	ldr	r2, [pc, #300]	; (800ddfc <HAL_SD_IRQHandler+0x36c>)
 800dcce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dcde:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68da      	ldr	r2, [r3, #12]
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcee:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dcfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	68da      	ldr	r2, [r3, #12]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd0e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f004 fe01 	bl	801291c <SDMMC_CmdStopTransfer>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd20:	431a      	orrs	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68da      	ldr	r2, [r3, #12]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd34:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f003 0308 	and.w	r3, r3, #8
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00a      	beq.n	800dd60 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2200      	movs	r2, #0
 800dd56:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f851 	bl	800de00 <HAL_SD_ErrorCallback>
}
 800dd5e:	e049      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d044      	beq.n	800ddf4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d040      	beq.n	800ddf4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dd80:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2200      	movs	r2, #0
 800dd88:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 f834 	bl	800de00 <HAL_SD_ErrorCallback>
}
 800dd98:	e02c      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d025      	beq.n	800ddf4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddb8:	f003 0304 	and.w	r3, r3, #4
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10c      	bne.n	800ddda <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f003 0320 	and.w	r3, r3, #32
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f001 f84a 	bl	800ee64 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ddd0:	e010      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f001 f832 	bl	800ee3c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ddd8:	e00c      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f003 0320 	and.w	r3, r3, #32
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d003      	beq.n	800ddec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f001 f833 	bl	800ee50 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ddea:	e003      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f001 f81b 	bl	800ee28 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ddf2:	e7ff      	b.n	800ddf4 <HAL_SD_IRQHandler+0x364>
 800ddf4:	bf00      	nop
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	18000f3a 	.word	0x18000f3a

0800de00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800de00:	b480      	push	{r7}
 800de02:	b083      	sub	sp, #12
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de22:	0f9b      	lsrs	r3, r3, #30
 800de24:	b2da      	uxtb	r2, r3
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2e:	0e9b      	lsrs	r3, r3, #26
 800de30:	b2db      	uxtb	r3, r3
 800de32:	f003 030f 	and.w	r3, r3, #15
 800de36:	b2da      	uxtb	r2, r3
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de40:	0e1b      	lsrs	r3, r3, #24
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f003 0303 	and.w	r3, r3, #3
 800de48:	b2da      	uxtb	r2, r3
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de52:	0c1b      	lsrs	r3, r3, #16
 800de54:	b2da      	uxtb	r2, r3
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de5e:	0a1b      	lsrs	r3, r3, #8
 800de60:	b2da      	uxtb	r2, r3
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de6a:	b2da      	uxtb	r2, r3
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de74:	0d1b      	lsrs	r3, r3, #20
 800de76:	b29a      	uxth	r2, r3
 800de78:	683b      	ldr	r3, [r7, #0]
 800de7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de80:	0c1b      	lsrs	r3, r3, #16
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f003 030f 	and.w	r3, r3, #15
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de92:	0bdb      	lsrs	r3, r3, #15
 800de94:	b2db      	uxtb	r3, r3
 800de96:	f003 0301 	and.w	r3, r3, #1
 800de9a:	b2da      	uxtb	r2, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dea4:	0b9b      	lsrs	r3, r3, #14
 800dea6:	b2db      	uxtb	r3, r3
 800dea8:	f003 0301 	and.w	r3, r3, #1
 800deac:	b2da      	uxtb	r2, r3
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800deb6:	0b5b      	lsrs	r3, r3, #13
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	f003 0301 	and.w	r3, r3, #1
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dec8:	0b1b      	lsrs	r3, r3, #12
 800deca:	b2db      	uxtb	r3, r3
 800decc:	f003 0301 	and.w	r3, r3, #1
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	2200      	movs	r2, #0
 800deda:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d163      	bne.n	800dfac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee8:	009a      	lsls	r2, r3, #2
 800deea:	f640 73fc 	movw	r3, #4092	; 0xffc
 800deee:	4013      	ands	r3, r2
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800def4:	0f92      	lsrs	r2, r2, #30
 800def6:	431a      	orrs	r2, r3
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df00:	0edb      	lsrs	r3, r3, #27
 800df02:	b2db      	uxtb	r3, r3
 800df04:	f003 0307 	and.w	r3, r3, #7
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df12:	0e1b      	lsrs	r3, r3, #24
 800df14:	b2db      	uxtb	r3, r3
 800df16:	f003 0307 	and.w	r3, r3, #7
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df24:	0d5b      	lsrs	r3, r3, #21
 800df26:	b2db      	uxtb	r3, r3
 800df28:	f003 0307 	and.w	r3, r3, #7
 800df2c:	b2da      	uxtb	r2, r3
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df36:	0c9b      	lsrs	r3, r3, #18
 800df38:	b2db      	uxtb	r3, r3
 800df3a:	f003 0307 	and.w	r3, r3, #7
 800df3e:	b2da      	uxtb	r2, r3
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df48:	0bdb      	lsrs	r3, r3, #15
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	f003 0307 	and.w	r3, r3, #7
 800df50:	b2da      	uxtb	r2, r3
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	691b      	ldr	r3, [r3, #16]
 800df5a:	1c5a      	adds	r2, r3, #1
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	7e1b      	ldrb	r3, [r3, #24]
 800df64:	b2db      	uxtb	r3, r3
 800df66:	f003 0307 	and.w	r3, r3, #7
 800df6a:	3302      	adds	r3, #2
 800df6c:	2201      	movs	r2, #1
 800df6e:	fa02 f303 	lsl.w	r3, r2, r3
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800df76:	fb03 f202 	mul.w	r2, r3, r2
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	7a1b      	ldrb	r3, [r3, #8]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	f003 030f 	and.w	r3, r3, #15
 800df88:	2201      	movs	r2, #1
 800df8a:	409a      	lsls	r2, r3
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800df98:	0a52      	lsrs	r2, r2, #9
 800df9a:	fb03 f202 	mul.w	r2, r3, r2
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfa8:	655a      	str	r2, [r3, #84]	; 0x54
 800dfaa:	e031      	b.n	800e010 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d11d      	bne.n	800dff0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfb8:	041b      	lsls	r3, r3, #16
 800dfba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc2:	0c1b      	lsrs	r3, r3, #16
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	029a      	lsls	r2, r3, #10
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfe4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	655a      	str	r2, [r3, #84]	; 0x54
 800dfee:	e00f      	b.n	800e010 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a58      	ldr	r2, [pc, #352]	; (800e158 <HAL_SD_GetCardCSD+0x344>)
 800dff6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dffc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2201      	movs	r2, #1
 800e008:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e00c:	2301      	movs	r3, #1
 800e00e:	e09d      	b.n	800e14c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e014:	0b9b      	lsrs	r3, r3, #14
 800e016:	b2db      	uxtb	r3, r3
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e026:	09db      	lsrs	r3, r3, #7
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e02e:	b2da      	uxtb	r2, r3
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e048:	0fdb      	lsrs	r3, r3, #31
 800e04a:	b2da      	uxtb	r2, r3
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e054:	0f5b      	lsrs	r3, r3, #29
 800e056:	b2db      	uxtb	r3, r3
 800e058:	f003 0303 	and.w	r3, r3, #3
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e066:	0e9b      	lsrs	r3, r3, #26
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	f003 0307 	and.w	r3, r3, #7
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e078:	0d9b      	lsrs	r3, r3, #22
 800e07a:	b2db      	uxtb	r3, r3
 800e07c:	f003 030f 	and.w	r3, r3, #15
 800e080:	b2da      	uxtb	r2, r3
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e08a:	0d5b      	lsrs	r3, r3, #21
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	b2da      	uxtb	r2, r3
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0a6:	0c1b      	lsrs	r3, r3, #16
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	f003 0301 	and.w	r3, r3, #1
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0ba:	0bdb      	lsrs	r3, r3, #15
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	b2da      	uxtb	r2, r3
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0ce:	0b9b      	lsrs	r3, r3, #14
 800e0d0:	b2db      	uxtb	r3, r3
 800e0d2:	f003 0301 	and.w	r3, r3, #1
 800e0d6:	b2da      	uxtb	r2, r3
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e2:	0b5b      	lsrs	r3, r3, #13
 800e0e4:	b2db      	uxtb	r3, r3
 800e0e6:	f003 0301 	and.w	r3, r3, #1
 800e0ea:	b2da      	uxtb	r2, r3
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0f6:	0b1b      	lsrs	r3, r3, #12
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	b2da      	uxtb	r2, r3
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e10a:	0a9b      	lsrs	r3, r3, #10
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	f003 0303 	and.w	r3, r3, #3
 800e112:	b2da      	uxtb	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e11e:	0a1b      	lsrs	r3, r3, #8
 800e120:	b2db      	uxtb	r3, r3
 800e122:	f003 0303 	and.w	r3, r3, #3
 800e126:	b2da      	uxtb	r2, r3
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e132:	085b      	lsrs	r3, r3, #1
 800e134:	b2db      	uxtb	r3, r3
 800e136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr
 800e158:	1fe00fff 	.word	0x1fe00fff

0800e15c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b094      	sub	sp, #80	; 0x50
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e166:	2300      	movs	r3, #0
 800e168:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e172:	b2db      	uxtb	r3, r3
 800e174:	2b03      	cmp	r3, #3
 800e176:	d101      	bne.n	800e17c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	e0a7      	b.n	800e2cc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e17c:	f107 0308 	add.w	r3, r7, #8
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fb62 	bl	800e84c <SD_SendSDStatus>
 800e188:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e18a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d011      	beq.n	800e1b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a4f      	ldr	r2, [pc, #316]	; (800e2d4 <HAL_SD_GetCardStatus+0x178>)
 800e196:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e19c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e19e:	431a      	orrs	r2, r3
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e1b2:	e070      	b.n	800e296 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	099b      	lsrs	r3, r3, #6
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	f003 0303 	and.w	r3, r3, #3
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	095b      	lsrs	r3, r3, #5
 800e1c8:	b2db      	uxtb	r3, r3
 800e1ca:	f003 0301 	and.w	r3, r3, #1
 800e1ce:	b2da      	uxtb	r2, r3
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	0a1b      	lsrs	r3, r3, #8
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1de:	b29a      	uxth	r2, r3
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	0e1b      	lsrs	r3, r3, #24
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	061a      	lsls	r2, r3, #24
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	021b      	lsls	r3, r3, #8
 800e1f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e1fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	0a1b      	lsrs	r3, r3, #8
 800e200:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e204:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	0e1b      	lsrs	r3, r3, #24
 800e20a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	b2da      	uxtb	r2, r3
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	0a1b      	lsrs	r3, r3, #8
 800e21c:	b2da      	uxtb	r2, r3
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e222:	693b      	ldr	r3, [r7, #16]
 800e224:	0d1b      	lsrs	r3, r3, #20
 800e226:	b2db      	uxtb	r3, r3
 800e228:	f003 030f 	and.w	r3, r3, #15
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	0c1b      	lsrs	r3, r3, #16
 800e236:	b29b      	uxth	r3, r3
 800e238:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	b29b      	uxth	r3, r3
 800e242:	b2db      	uxtb	r3, r3
 800e244:	b29b      	uxth	r3, r3
 800e246:	4313      	orrs	r3, r2
 800e248:	b29a      	uxth	r2, r3
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	0a9b      	lsrs	r3, r3, #10
 800e252:	b2db      	uxtb	r3, r3
 800e254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	0a1b      	lsrs	r3, r3, #8
 800e262:	b2db      	uxtb	r3, r3
 800e264:	f003 0303 	and.w	r3, r3, #3
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	091b      	lsrs	r3, r3, #4
 800e272:	b2db      	uxtb	r3, r3
 800e274:	f003 030f 	and.w	r3, r3, #15
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	b2db      	uxtb	r3, r3
 800e282:	f003 030f 	and.w	r3, r3, #15
 800e286:	b2da      	uxtb	r2, r3
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	0e1b      	lsrs	r3, r3, #24
 800e290:	b2da      	uxtb	r2, r3
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f004 fa8c 	bl	80127bc <SDMMC_CmdBlockLength>
 800e2a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00d      	beq.n	800e2c8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4a08      	ldr	r2, [pc, #32]	; (800e2d4 <HAL_SD_GetCardStatus+0x178>)
 800e2b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2b8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e2c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3750      	adds	r7, #80	; 0x50
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	1fe00fff 	.word	0x1fe00fff

0800e2d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b083      	sub	sp, #12
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	370c      	adds	r7, #12
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr

0800e330 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e330:	b590      	push	{r4, r7, lr}
 800e332:	b08d      	sub	sp, #52	; 0x34
 800e334:	af02      	add	r7, sp, #8
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 800e33a:	2300      	movs	r3, #0
 800e33c:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800e33e:	2300      	movs	r3, #0
 800e340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2203      	movs	r2, #3
 800e348:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e350:	2b03      	cmp	r3, #3
 800e352:	d02e      	beq.n	800e3b2 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e35a:	d106      	bne.n	800e36a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e360:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	635a      	str	r2, [r3, #52]	; 0x34
 800e368:	e029      	b.n	800e3be <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e370:	d10a      	bne.n	800e388 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f000 fb62 	bl	800ea3c <SD_WideBus_Enable>
 800e378:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e37e:	69fb      	ldr	r3, [r7, #28]
 800e380:	431a      	orrs	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	635a      	str	r2, [r3, #52]	; 0x34
 800e386:	e01a      	b.n	800e3be <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10a      	bne.n	800e3a4 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 fb9f 	bl	800ead2 <SD_WideBus_Disable>
 800e394:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	431a      	orrs	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	635a      	str	r2, [r3, #52]	; 0x34
 800e3a2:	e00c      	b.n	800e3be <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	635a      	str	r2, [r3, #52]	; 0x34
 800e3b0:	e005      	b.n	800e3be <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d007      	beq.n	800e3d6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4a5e      	ldr	r2, [pc, #376]	; (800e544 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e3cc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e3ce:	2301      	movs	r3, #1
 800e3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3d4:	e094      	b.n	800e500 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e3d6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e3da:	f7fd fb8f 	bl	800bafc <HAL_RCCEx_GetPeriphCLKFreq>
 800e3de:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8083 	beq.w	800e4ee <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	691b      	ldr	r3, [r3, #16]
 800e3fc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	695a      	ldr	r2, [r3, #20]
 800e402:	6a3b      	ldr	r3, [r7, #32]
 800e404:	4950      	ldr	r1, [pc, #320]	; (800e548 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e406:	fba1 1303 	umull	r1, r3, r1, r3
 800e40a:	0e1b      	lsrs	r3, r3, #24
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d303      	bcc.n	800e418 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	695b      	ldr	r3, [r3, #20]
 800e414:	61bb      	str	r3, [r7, #24]
 800e416:	e05a      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e41c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e420:	d103      	bne.n	800e42a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	695b      	ldr	r3, [r3, #20]
 800e426:	61bb      	str	r3, [r7, #24]
 800e428:	e051      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e42e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e432:	d126      	bne.n	800e482 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	695b      	ldr	r3, [r3, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10e      	bne.n	800e45a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e43c:	6a3b      	ldr	r3, [r7, #32]
 800e43e:	4a43      	ldr	r2, [pc, #268]	; (800e54c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d906      	bls.n	800e452 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	4a40      	ldr	r2, [pc, #256]	; (800e548 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e448:	fba2 2303 	umull	r2, r3, r2, r3
 800e44c:	0e5b      	lsrs	r3, r3, #25
 800e44e:	61bb      	str	r3, [r7, #24]
 800e450:	e03d      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	61bb      	str	r3, [r7, #24]
 800e458:	e039      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	6a3a      	ldr	r2, [r7, #32]
 800e462:	fbb2 f3f3 	udiv	r3, r2, r3
 800e466:	4a39      	ldr	r2, [pc, #228]	; (800e54c <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e468:	4293      	cmp	r3, r2
 800e46a:	d906      	bls.n	800e47a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	4a36      	ldr	r2, [pc, #216]	; (800e548 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e470:	fba2 2303 	umull	r2, r3, r2, r3
 800e474:	0e5b      	lsrs	r3, r3, #25
 800e476:	61bb      	str	r3, [r7, #24]
 800e478:	e029      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	695b      	ldr	r3, [r3, #20]
 800e47e:	61bb      	str	r3, [r7, #24]
 800e480:	e025      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d10e      	bne.n	800e4a8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e48a:	6a3b      	ldr	r3, [r7, #32]
 800e48c:	4a30      	ldr	r2, [pc, #192]	; (800e550 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d906      	bls.n	800e4a0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	4a2c      	ldr	r2, [pc, #176]	; (800e548 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e496:	fba2 2303 	umull	r2, r3, r2, r3
 800e49a:	0e1b      	lsrs	r3, r3, #24
 800e49c:	61bb      	str	r3, [r7, #24]
 800e49e:	e016      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	695b      	ldr	r3, [r3, #20]
 800e4a4:	61bb      	str	r3, [r7, #24]
 800e4a6:	e012      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	695b      	ldr	r3, [r3, #20]
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	6a3a      	ldr	r2, [r7, #32]
 800e4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b4:	4a26      	ldr	r2, [pc, #152]	; (800e550 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d906      	bls.n	800e4c8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e4ba:	6a3b      	ldr	r3, [r7, #32]
 800e4bc:	4a22      	ldr	r2, [pc, #136]	; (800e548 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4be:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c2:	0e1b      	lsrs	r3, r3, #24
 800e4c4:	61bb      	str	r3, [r7, #24]
 800e4c6:	e002      	b.n	800e4ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	695b      	ldr	r3, [r3, #20]
 800e4cc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681c      	ldr	r4, [r3, #0]
 800e4d2:	466a      	mov	r2, sp
 800e4d4:	f107 0314 	add.w	r3, r7, #20
 800e4d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800e4e0:	f107 0308 	add.w	r3, r7, #8
 800e4e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	f004 f88a 	bl	8012600 <SDMMC_Init>
 800e4ec:	e008      	b.n	800e500 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e508:	4618      	mov	r0, r3
 800e50a:	f004 f957 	bl	80127bc <SDMMC_CmdBlockLength>
 800e50e:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00c      	beq.n	800e530 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a0a      	ldr	r2, [pc, #40]	; (800e544 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e51c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	431a      	orrs	r2, r3
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	372c      	adds	r7, #44	; 0x2c
 800e540:	46bd      	mov	sp, r7
 800e542:	bd90      	pop	{r4, r7, pc}
 800e544:	1fe00fff 	.word	0x1fe00fff
 800e548:	55e63b89 	.word	0x55e63b89
 800e54c:	02faf080 	.word	0x02faf080
 800e550:	017d7840 	.word	0x017d7840

0800e554 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e55c:	2300      	movs	r3, #0
 800e55e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e560:	f107 030c 	add.w	r3, r7, #12
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fa40 	bl	800e9ec <SD_SendStatus>
 800e56c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d005      	beq.n	800e580 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	431a      	orrs	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	0a5b      	lsrs	r3, r3, #9
 800e584:	f003 030f 	and.w	r3, r3, #15
 800e588:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e58a:	693b      	ldr	r3, [r7, #16]
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3718      	adds	r7, #24
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b090      	sub	sp, #64	; 0x40
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e59c:	2300      	movs	r3, #0
 800e59e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e5a0:	f7f5 ffc8 	bl	8004534 <HAL_GetTick>
 800e5a4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f004 f881 	bl	80126b2 <SDMMC_GetPowerState>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d102      	bne.n	800e5bc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e5ba:	e0b5      	b.n	800e728 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c0:	2b03      	cmp	r3, #3
 800e5c2:	d02e      	beq.n	800e622 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f004 facc 	bl	8012b66 <SDMMC_CmdSendCID>
 800e5ce:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d001      	beq.n	800e5da <SD_InitCard+0x46>
    {
      return errorstate;
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5d8:	e0a6      	b.n	800e728 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	2100      	movs	r1, #0
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f004 f8ac 	bl	801273e <SDMMC_GetResponse>
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2104      	movs	r1, #4
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f004 f8a3 	bl	801273e <SDMMC_GetResponse>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2108      	movs	r1, #8
 800e604:	4618      	mov	r0, r3
 800e606:	f004 f89a 	bl	801273e <SDMMC_GetResponse>
 800e60a:	4602      	mov	r2, r0
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	210c      	movs	r1, #12
 800e616:	4618      	mov	r0, r3
 800e618:	f004 f891 	bl	801273e <SDMMC_GetResponse>
 800e61c:	4602      	mov	r2, r0
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e626:	2b03      	cmp	r3, #3
 800e628:	d01d      	beq.n	800e666 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e62a:	e019      	b.n	800e660 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f107 020a 	add.w	r2, r7, #10
 800e634:	4611      	mov	r1, r2
 800e636:	4618      	mov	r0, r3
 800e638:	f004 fad4 	bl	8012be4 <SDMMC_CmdSetRelAdd>
 800e63c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e646:	e06f      	b.n	800e728 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e648:	f7f5 ff74 	bl	8004534 <HAL_GetTick>
 800e64c:	4602      	mov	r2, r0
 800e64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e650:	1ad3      	subs	r3, r2, r3
 800e652:	f241 3287 	movw	r2, #4999	; 0x1387
 800e656:	4293      	cmp	r3, r2
 800e658:	d902      	bls.n	800e660 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e65a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e65e:	e063      	b.n	800e728 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e660:	897b      	ldrh	r3, [r7, #10]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d0e2      	beq.n	800e62c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d036      	beq.n	800e6dc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e66e:	897b      	ldrh	r3, [r7, #10]
 800e670:	461a      	mov	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e67e:	041b      	lsls	r3, r3, #16
 800e680:	4619      	mov	r1, r3
 800e682:	4610      	mov	r0, r2
 800e684:	f004 fa8e 	bl	8012ba4 <SDMMC_CmdSendCSD>
 800e688:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <SD_InitCard+0x100>
    {
      return errorstate;
 800e690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e692:	e049      	b.n	800e728 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2100      	movs	r1, #0
 800e69a:	4618      	mov	r0, r3
 800e69c:	f004 f84f 	bl	801273e <SDMMC_GetResponse>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2104      	movs	r1, #4
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f004 f846 	bl	801273e <SDMMC_GetResponse>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2108      	movs	r1, #8
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f004 f83d 	bl	801273e <SDMMC_GetResponse>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	210c      	movs	r1, #12
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f004 f834 	bl	801273e <SDMMC_GetResponse>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2104      	movs	r1, #4
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f004 f82b 	bl	801273e <SDMMC_GetResponse>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	0d1a      	lsrs	r2, r3, #20
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e6f0:	f107 030c 	add.w	r3, r7, #12
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7ff fb8c 	bl	800de14 <HAL_SD_GetCardCSD>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e702:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e706:	e00f      	b.n	800e728 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e710:	041b      	lsls	r3, r3, #16
 800e712:	4619      	mov	r1, r3
 800e714:	4610      	mov	r0, r2
 800e716:	f004 f93d 	bl	8012994 <SDMMC_CmdSelDesel>
 800e71a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d001      	beq.n	800e726 <SD_InitCard+0x192>
  {
    return errorstate;
 800e722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e724:	e000      	b.n	800e728 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e726:	2300      	movs	r3, #0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3740      	adds	r7, #64	; 0x40
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e738:	2300      	movs	r3, #0
 800e73a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e73c:	2300      	movs	r3, #0
 800e73e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e740:	2300      	movs	r3, #0
 800e742:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4618      	mov	r0, r3
 800e74a:	f004 f946 	bl	80129da <SDMMC_CmdGoIdleState>
 800e74e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d001      	beq.n	800e75a <SD_PowerON+0x2a>
  {
    return errorstate;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	e072      	b.n	800e840 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4618      	mov	r0, r3
 800e760:	f004 f959 	bl	8012a16 <SDMMC_CmdOperCond>
 800e764:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e76c:	d10d      	bne.n	800e78a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2200      	movs	r2, #0
 800e772:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4618      	mov	r0, r3
 800e77a:	f004 f92e 	bl	80129da <SDMMC_CmdGoIdleState>
 800e77e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <SD_PowerON+0x60>
    {
      return errorstate;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	e05a      	b.n	800e840 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2201      	movs	r2, #1
 800e78e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e794:	2b01      	cmp	r3, #1
 800e796:	d137      	bne.n	800e808 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	2100      	movs	r1, #0
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f004 f959 	bl	8012a56 <SDMMC_CmdAppCommand>
 800e7a4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d02d      	beq.n	800e808 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7b0:	e046      	b.n	800e840 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2100      	movs	r1, #0
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f004 f94c 	bl	8012a56 <SDMMC_CmdAppCommand>
 800e7be:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <SD_PowerON+0x9a>
    {
      return errorstate;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	e03a      	b.n	800e840 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	491e      	ldr	r1, [pc, #120]	; (800e848 <SD_PowerON+0x118>)
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f004 f963 	bl	8012a9c <SDMMC_CmdAppOperCommand>
 800e7d6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d002      	beq.n	800e7e4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7e2:	e02d      	b.n	800e840 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f003 ffa7 	bl	801273e <SDMMC_GetResponse>
 800e7f0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	0fdb      	lsrs	r3, r3, #31
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d101      	bne.n	800e7fe <SD_PowerON+0xce>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e000      	b.n	800e800 <SD_PowerON+0xd0>
 800e7fe:	2300      	movs	r3, #0
 800e800:	613b      	str	r3, [r7, #16]

    count++;
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	3301      	adds	r3, #1
 800e806:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e80e:	4293      	cmp	r3, r2
 800e810:	d802      	bhi.n	800e818 <SD_PowerON+0xe8>
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d0cc      	beq.n	800e7b2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e81e:	4293      	cmp	r3, r2
 800e820:	d902      	bls.n	800e828 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e826:	e00b      	b.n	800e840 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2200      	movs	r2, #0
 800e82c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d002      	beq.n	800e83e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2201      	movs	r2, #1
 800e83c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e83e:	2300      	movs	r3, #0
}
 800e840:	4618      	mov	r0, r3
 800e842:	3718      	adds	r7, #24
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}
 800e848:	c1100000 	.word	0xc1100000

0800e84c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08c      	sub	sp, #48	; 0x30
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e856:	f7f5 fe6d 	bl	8004534 <HAL_GetTick>
 800e85a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2100      	movs	r1, #0
 800e866:	4618      	mov	r0, r3
 800e868:	f003 ff69 	bl	801273e <SDMMC_GetResponse>
 800e86c:	4603      	mov	r3, r0
 800e86e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e876:	d102      	bne.n	800e87e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e87c:	e0b0      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	2140      	movs	r1, #64	; 0x40
 800e884:	4618      	mov	r0, r3
 800e886:	f003 ff99 	bl	80127bc <SDMMC_CmdBlockLength>
 800e88a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e88c:	6a3b      	ldr	r3, [r7, #32]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d005      	beq.n	800e89e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e89a:	6a3b      	ldr	r3, [r7, #32]
 800e89c:	e0a0      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a6:	041b      	lsls	r3, r3, #16
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	4610      	mov	r0, r2
 800e8ac:	f004 f8d3 	bl	8012a56 <SDMMC_CmdAppCommand>
 800e8b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d005      	beq.n	800e8c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e8c0:	6a3b      	ldr	r3, [r7, #32]
 800e8c2:	e08d      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e8ca:	2340      	movs	r3, #64	; 0x40
 800e8cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e8ce:	2360      	movs	r3, #96	; 0x60
 800e8d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e8d2:	2302      	movs	r3, #2
 800e8d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f107 0208 	add.w	r2, r7, #8
 800e8e6:	4611      	mov	r1, r2
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f003 ff3b 	bl	8012764 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f004 f9bb 	bl	8012c6e <SDMMC_CmdStatusRegister>
 800e8f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d02b      	beq.n	800e958 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	e069      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e916:	2b00      	cmp	r3, #0
 800e918:	d013      	beq.n	800e942 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e91a:	2300      	movs	r3, #0
 800e91c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e91e:	e00d      	b.n	800e93c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	4618      	mov	r0, r3
 800e926:	f003 fe95 	bl	8012654 <SDMMC_ReadFIFO>
 800e92a:	4602      	mov	r2, r0
 800e92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92e:	601a      	str	r2, [r3, #0]
        pData++;
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	3304      	adds	r3, #4
 800e934:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e938:	3301      	adds	r3, #1
 800e93a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	2b07      	cmp	r3, #7
 800e940:	d9ee      	bls.n	800e920 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e942:	f7f5 fdf7 	bl	8004534 <HAL_GetTick>
 800e946:	4602      	mov	r2, r0
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	1ad3      	subs	r3, r2, r3
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e950:	d102      	bne.n	800e958 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e952:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e956:	e043      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e95e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e962:	2b00      	cmp	r3, #0
 800e964:	d0d2      	beq.n	800e90c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e96c:	f003 0308 	and.w	r3, r3, #8
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e974:	2308      	movs	r3, #8
 800e976:	e033      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e986:	2302      	movs	r3, #2
 800e988:	e02a      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e990:	f003 0320 	and.w	r3, r3, #32
 800e994:	2b00      	cmp	r3, #0
 800e996:	d017      	beq.n	800e9c8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e998:	2320      	movs	r3, #32
 800e99a:	e021      	b.n	800e9e0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f003 fe57 	bl	8012654 <SDMMC_ReadFIFO>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9aa:	601a      	str	r2, [r3, #0]
    pData++;
 800e9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ae:	3304      	adds	r3, #4
 800e9b0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9b2:	f7f5 fdbf 	bl	8004534 <HAL_GetTick>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d102      	bne.n	800e9c8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9c6:	e00b      	b.n	800e9e0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d1e2      	bne.n	800e99c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a03      	ldr	r2, [pc, #12]	; (800e9e8 <SD_SendSDStatus+0x19c>)
 800e9dc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3730      	adds	r7, #48	; 0x30
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	18000f3a 	.word	0x18000f3a

0800e9ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d102      	bne.n	800ea02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e9fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea00:	e018      	b.n	800ea34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681a      	ldr	r2, [r3, #0]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea0a:	041b      	lsls	r3, r3, #16
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4610      	mov	r0, r2
 800ea10:	f004 f90a 	bl	8012c28 <SDMMC_CmdSendStatus>
 800ea14:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	e009      	b.n	800ea34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2100      	movs	r1, #0
 800ea26:	4618      	mov	r0, r3
 800ea28:	f003 fe89 	bl	801273e <SDMMC_GetResponse>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	3710      	adds	r7, #16
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ea44:	2300      	movs	r3, #0
 800ea46:	60fb      	str	r3, [r7, #12]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2100      	movs	r1, #0
 800ea52:	4618      	mov	r0, r3
 800ea54:	f003 fe73 	bl	801273e <SDMMC_GetResponse>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea62:	d102      	bne.n	800ea6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea68:	e02f      	b.n	800eaca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea6a:	f107 030c 	add.w	r3, r7, #12
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f000 f879 	bl	800eb68 <SD_FindSCR>
 800ea76:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea78:	697b      	ldr	r3, [r7, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d001      	beq.n	800ea82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	e023      	b.n	800eaca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d01c      	beq.n	800eac6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea94:	041b      	lsls	r3, r3, #16
 800ea96:	4619      	mov	r1, r3
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f003 ffdc 	bl	8012a56 <SDMMC_CmdAppCommand>
 800ea9e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d001      	beq.n	800eaaa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	e00f      	b.n	800eaca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2102      	movs	r1, #2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f004 f813 	bl	8012adc <SDMMC_CmdBusWidth>
 800eab6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	e003      	b.n	800eaca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eac2:	2300      	movs	r3, #0
 800eac4:	e001      	b.n	800eaca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b086      	sub	sp, #24
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eada:	2300      	movs	r3, #0
 800eadc:	60fb      	str	r3, [r7, #12]
 800eade:	2300      	movs	r3, #0
 800eae0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2100      	movs	r1, #0
 800eae8:	4618      	mov	r0, r3
 800eaea:	f003 fe28 	bl	801273e <SDMMC_GetResponse>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eaf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eaf8:	d102      	bne.n	800eb00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eafa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eafe:	e02f      	b.n	800eb60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb00:	f107 030c 	add.w	r3, r7, #12
 800eb04:	4619      	mov	r1, r3
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f82e 	bl	800eb68 <SD_FindSCR>
 800eb0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d001      	beq.n	800eb18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	e023      	b.n	800eb60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d01c      	beq.n	800eb5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb2a:	041b      	lsls	r3, r3, #16
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	4610      	mov	r0, r2
 800eb30:	f003 ff91 	bl	8012a56 <SDMMC_CmdAppCommand>
 800eb34:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	e00f      	b.n	800eb60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	2100      	movs	r1, #0
 800eb46:	4618      	mov	r0, r3
 800eb48:	f003 ffc8 	bl	8012adc <SDMMC_CmdBusWidth>
 800eb4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eb54:	697b      	ldr	r3, [r7, #20]
 800eb56:	e003      	b.n	800eb60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	e001      	b.n	800eb60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3718      	adds	r7, #24
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08e      	sub	sp, #56	; 0x38
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eb72:	f7f5 fcdf 	bl	8004534 <HAL_GetTick>
 800eb76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eb78:	2300      	movs	r3, #0
 800eb7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	60bb      	str	r3, [r7, #8]
 800eb80:	2300      	movs	r3, #0
 800eb82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	2108      	movs	r1, #8
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f003 fe14 	bl	80127bc <SDMMC_CmdBlockLength>
 800eb94:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb9e:	e0ad      	b.n	800ecfc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eba8:	041b      	lsls	r3, r3, #16
 800ebaa:	4619      	mov	r1, r3
 800ebac:	4610      	mov	r0, r2
 800ebae:	f003 ff52 	bl	8012a56 <SDMMC_CmdAppCommand>
 800ebb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d001      	beq.n	800ebbe <SD_FindSCR+0x56>
  {
    return errorstate;
 800ebba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebbc:	e09e      	b.n	800ecfc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ebbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ebc4:	2308      	movs	r3, #8
 800ebc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ebc8:	2330      	movs	r3, #48	; 0x30
 800ebca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ebcc:	2302      	movs	r3, #2
 800ebce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f107 0210 	add.w	r2, r7, #16
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f003 fdbe 	bl	8012764 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f003 ff98 	bl	8012b22 <SDMMC_CmdSendSCR>
 800ebf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d027      	beq.n	800ec4a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ebfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfc:	e07e      	b.n	800ecfc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d113      	bne.n	800ec34 <SD_FindSCR+0xcc>
 800ec0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d110      	bne.n	800ec34 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	4618      	mov	r0, r3
 800ec18:	f003 fd1c 	bl	8012654 <SDMMC_ReadFIFO>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f003 fd15 	bl	8012654 <SDMMC_ReadFIFO>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	60fb      	str	r3, [r7, #12]
      index++;
 800ec2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec30:	3301      	adds	r3, #1
 800ec32:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec34:	f7f5 fc7e 	bl	8004534 <HAL_GetTick>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec3c:	1ad3      	subs	r3, r2, r3
 800ec3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec42:	d102      	bne.n	800ec4a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec48:	e058      	b.n	800ecfc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec50:	f240 532a 	movw	r3, #1322	; 0x52a
 800ec54:	4013      	ands	r3, r2
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d0d1      	beq.n	800ebfe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec60:	f003 0308 	and.w	r3, r3, #8
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d005      	beq.n	800ec74 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2208      	movs	r2, #8
 800ec6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ec70:	2308      	movs	r3, #8
 800ec72:	e043      	b.n	800ecfc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec7a:	f003 0302 	and.w	r3, r3, #2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d005      	beq.n	800ec8e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2202      	movs	r2, #2
 800ec88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ec8a:	2302      	movs	r3, #2
 800ec8c:	e036      	b.n	800ecfc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec94:	f003 0320 	and.w	r3, r3, #32
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	2220      	movs	r2, #32
 800eca2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eca4:	2320      	movs	r3, #32
 800eca6:	e029      	b.n	800ecfc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4a15      	ldr	r2, [pc, #84]	; (800ed04 <SD_FindSCR+0x19c>)
 800ecae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	061a      	lsls	r2, r3, #24
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	021b      	lsls	r3, r3, #8
 800ecb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	0a1b      	lsrs	r3, r3, #8
 800ecc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ecc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	0e1b      	lsrs	r3, r3, #24
 800eccc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ecce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd0:	601a      	str	r2, [r3, #0]
    scr++;
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	3304      	adds	r3, #4
 800ecd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	061a      	lsls	r2, r3, #24
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	021b      	lsls	r3, r3, #8
 800ece0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ece4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	0a1b      	lsrs	r3, r3, #8
 800ecea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	0e1b      	lsrs	r3, r3, #24
 800ecf4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ecf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3738      	adds	r7, #56	; 0x38
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}
 800ed04:	18000f3a 	.word	0x18000f3a

0800ed08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed14:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1a:	2b1f      	cmp	r3, #31
 800ed1c:	d936      	bls.n	800ed8c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed1e:	2300      	movs	r3, #0
 800ed20:	617b      	str	r3, [r7, #20]
 800ed22:	e027      	b.n	800ed74 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f003 fc93 	bl	8012654 <SDMMC_ReadFIFO>
 800ed2e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	b2da      	uxtb	r2, r3
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	3301      	adds	r3, #1
 800ed3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	0a1b      	lsrs	r3, r3, #8
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	0c1b      	lsrs	r3, r3, #16
 800ed52:	b2da      	uxtb	r2, r3
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	0e1b      	lsrs	r3, r3, #24
 800ed62:	b2da      	uxtb	r2, r3
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	3301      	adds	r3, #1
 800ed72:	617b      	str	r3, [r7, #20]
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	2b07      	cmp	r3, #7
 800ed78:	d9d4      	bls.n	800ed24 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	693a      	ldr	r2, [r7, #16]
 800ed7e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed84:	f1a3 0220 	sub.w	r2, r3, #32
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ed8c:	bf00      	nop
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b086      	sub	sp, #24
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	69db      	ldr	r3, [r3, #28]
 800eda0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a1b      	ldr	r3, [r3, #32]
 800eda6:	2b1f      	cmp	r3, #31
 800eda8:	d93a      	bls.n	800ee20 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800edaa:	2300      	movs	r3, #0
 800edac:	617b      	str	r3, [r7, #20]
 800edae:	e02b      	b.n	800ee08 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	781b      	ldrb	r3, [r3, #0]
 800edb4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	3301      	adds	r3, #1
 800edba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	021a      	lsls	r2, r3, #8
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	4313      	orrs	r3, r2
 800edc6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	3301      	adds	r3, #1
 800edcc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	781b      	ldrb	r3, [r3, #0]
 800edd2:	041a      	lsls	r2, r3, #16
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	4313      	orrs	r3, r2
 800edd8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	3301      	adds	r3, #1
 800edde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	061a      	lsls	r2, r3, #24
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	4313      	orrs	r3, r2
 800edea:	60fb      	str	r3, [r7, #12]
      tmp++;
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	3301      	adds	r3, #1
 800edf0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f107 020c 	add.w	r2, r7, #12
 800edfa:	4611      	mov	r1, r2
 800edfc:	4618      	mov	r0, r3
 800edfe:	f003 fc36 	bl	801266e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	3301      	adds	r3, #1
 800ee06:	617b      	str	r3, [r7, #20]
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b07      	cmp	r3, #7
 800ee0c:	d9d0      	bls.n	800edb0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	6a1b      	ldr	r3, [r3, #32]
 800ee18:	f1a3 0220 	sub.w	r2, r3, #32
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	621a      	str	r2, [r3, #32]
  }
}
 800ee20:	bf00      	nop
 800ee22:	3718      	adds	r7, #24
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee30:	bf00      	nop
 800ee32:	370c      	adds	r7, #12
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr

0800ee3c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee44:	bf00      	nop
 800ee46:	370c      	adds	r7, #12
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr

0800ee50 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee58:	bf00      	nop
 800ee5a:	370c      	adds	r7, #12
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr

0800ee64 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee64:	b480      	push	{r7}
 800ee66:	b083      	sub	sp, #12
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ee6c:	bf00      	nop
 800ee6e:	370c      	adds	r7, #12
 800ee70:	46bd      	mov	sp, r7
 800ee72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee76:	4770      	bx	lr

0800ee78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d101      	bne.n	800ee8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee86:	2301      	movs	r3, #1
 800ee88:	e0f1      	b.n	800f06e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a78      	ldr	r2, [pc, #480]	; (800f078 <HAL_SPI_Init+0x200>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d00f      	beq.n	800eeba <HAL_SPI_Init+0x42>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a77      	ldr	r2, [pc, #476]	; (800f07c <HAL_SPI_Init+0x204>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d00a      	beq.n	800eeba <HAL_SPI_Init+0x42>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a75      	ldr	r2, [pc, #468]	; (800f080 <HAL_SPI_Init+0x208>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d005      	beq.n	800eeba <HAL_SPI_Init+0x42>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	68db      	ldr	r3, [r3, #12]
 800eeb2:	2b0f      	cmp	r3, #15
 800eeb4:	d901      	bls.n	800eeba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e0d9      	b.n	800f06e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f000 ff66 	bl	800fd8c <SPI_GetPacketSize>
 800eec0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a6c      	ldr	r2, [pc, #432]	; (800f078 <HAL_SPI_Init+0x200>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d00c      	beq.n	800eee6 <HAL_SPI_Init+0x6e>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a6a      	ldr	r2, [pc, #424]	; (800f07c <HAL_SPI_Init+0x204>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d007      	beq.n	800eee6 <HAL_SPI_Init+0x6e>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a69      	ldr	r2, [pc, #420]	; (800f080 <HAL_SPI_Init+0x208>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d002      	beq.n	800eee6 <HAL_SPI_Init+0x6e>
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	2b08      	cmp	r3, #8
 800eee4:	d811      	bhi.n	800ef0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eeea:	4a63      	ldr	r2, [pc, #396]	; (800f078 <HAL_SPI_Init+0x200>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d009      	beq.n	800ef04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a61      	ldr	r2, [pc, #388]	; (800f07c <HAL_SPI_Init+0x204>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d004      	beq.n	800ef04 <HAL_SPI_Init+0x8c>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4a60      	ldr	r2, [pc, #384]	; (800f080 <HAL_SPI_Init+0x208>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d104      	bne.n	800ef0e <HAL_SPI_Init+0x96>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2b10      	cmp	r3, #16
 800ef08:	d901      	bls.n	800ef0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ef0a:	2301      	movs	r3, #1
 800ef0c:	e0af      	b.n	800f06e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef14:	b2db      	uxtb	r3, r3
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d106      	bne.n	800ef28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f7f4 fa40 	bl	80033a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f022 0201 	bic.w	r2, r2, #1
 800ef3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ef4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	699b      	ldr	r3, [r3, #24]
 800ef50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef54:	d119      	bne.n	800ef8a <HAL_SPI_Init+0x112>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef5e:	d103      	bne.n	800ef68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d008      	beq.n	800ef7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10c      	bne.n	800ef8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef78:	d107      	bne.n	800ef8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	69da      	ldr	r2, [r3, #28]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef92:	431a      	orrs	r2, r3
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	431a      	orrs	r2, r3
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef9c:	ea42 0103 	orr.w	r1, r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	68da      	ldr	r2, [r3, #12]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb4:	431a      	orrs	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efba:	431a      	orrs	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	431a      	orrs	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	431a      	orrs	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	695b      	ldr	r3, [r3, #20]
 800efcc:	431a      	orrs	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	431a      	orrs	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	431a      	orrs	r2, r3
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efde:	431a      	orrs	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	431a      	orrs	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efea:	ea42 0103 	orr.w	r1, r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	430a      	orrs	r2, r1
 800eff8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d113      	bne.n	800f02a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f014:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f028:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f022 0201 	bic.w	r2, r2, #1
 800f038:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00a      	beq.n	800f05c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	430a      	orrs	r2, r1
 800f05a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2200      	movs	r2, #0
 800f060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f06c:	2300      	movs	r3, #0
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	40013000 	.word	0x40013000
 800f07c:	40003800 	.word	0x40003800
 800f080:	40003c00 	.word	0x40003c00

0800f084 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b08a      	sub	sp, #40	; 0x28
 800f088:	af02      	add	r7, sp, #8
 800f08a:	60f8      	str	r0, [r7, #12]
 800f08c:	60b9      	str	r1, [r7, #8]
 800f08e:	603b      	str	r3, [r7, #0]
 800f090:	4613      	mov	r3, r2
 800f092:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3320      	adds	r3, #32
 800f09a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d101      	bne.n	800f0ae <HAL_SPI_Transmit+0x2a>
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	e1d7      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f0b6:	f7f5 fa3d 	bl	8004534 <HAL_GetTick>
 800f0ba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	d007      	beq.n	800f0d8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f0c8:	2302      	movs	r3, #2
 800f0ca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0d4:	7efb      	ldrb	r3, [r7, #27]
 800f0d6:	e1c2      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <HAL_SPI_Transmit+0x60>
 800f0de:	88fb      	ldrh	r3, [r7, #6]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d107      	bne.n	800f0f4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0f0:	7efb      	ldrb	r3, [r7, #27]
 800f0f2:	e1b4      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2203      	movs	r2, #3
 800f0f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	88fa      	ldrh	r2, [r7, #6]
 800f10e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	88fa      	ldrh	r2, [r7, #6]
 800f116:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	2200      	movs	r2, #0
 800f11e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f144:	d107      	bne.n	800f156 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	681a      	ldr	r2, [r3, #0]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f154:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	685a      	ldr	r2, [r3, #4]
 800f15c:	4b96      	ldr	r3, [pc, #600]	; (800f3b8 <HAL_SPI_Transmit+0x334>)
 800f15e:	4013      	ands	r3, r2
 800f160:	88f9      	ldrh	r1, [r7, #6]
 800f162:	68fa      	ldr	r2, [r7, #12]
 800f164:	6812      	ldr	r2, [r2, #0]
 800f166:	430b      	orrs	r3, r1
 800f168:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	681a      	ldr	r2, [r3, #0]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	f042 0201 	orr.w	r2, r2, #1
 800f178:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	685b      	ldr	r3, [r3, #4]
 800f17e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f182:	d107      	bne.n	800f194 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	2b0f      	cmp	r3, #15
 800f19a:	d947      	bls.n	800f22c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f19c:	e03f      	b.n	800f21e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	695b      	ldr	r3, [r3, #20]
 800f1a4:	f003 0302 	and.w	r3, r3, #2
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d114      	bne.n	800f1d6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6812      	ldr	r2, [r2, #0]
 800f1b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f1bc:	1d1a      	adds	r2, r3, #4
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f1d4:	e023      	b.n	800f21e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1d6:	f7f5 f9ad 	bl	8004534 <HAL_GetTick>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	683a      	ldr	r2, [r7, #0]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d803      	bhi.n	800f1ee <HAL_SPI_Transmit+0x16a>
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ec:	d102      	bne.n	800f1f4 <HAL_SPI_Transmit+0x170>
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d114      	bne.n	800f21e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1f4:	68f8      	ldr	r0, [r7, #12]
 800f1f6:	f000 fcfb 	bl	800fbf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f208:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2201      	movs	r2, #1
 800f216:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f21a:	2303      	movs	r3, #3
 800f21c:	e11f      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f224:	b29b      	uxth	r3, r3
 800f226:	2b00      	cmp	r3, #0
 800f228:	d1b9      	bne.n	800f19e <HAL_SPI_Transmit+0x11a>
 800f22a:	e0f2      	b.n	800f412 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	2b07      	cmp	r3, #7
 800f232:	f240 80e7 	bls.w	800f404 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f236:	e05d      	b.n	800f2f4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	695b      	ldr	r3, [r3, #20]
 800f23e:	f003 0302 	and.w	r3, r3, #2
 800f242:	2b02      	cmp	r3, #2
 800f244:	d132      	bne.n	800f2ac <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f24c:	b29b      	uxth	r3, r3
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d918      	bls.n	800f284 <HAL_SPI_Transmit+0x200>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d014      	beq.n	800f284 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	6812      	ldr	r2, [r2, #0]
 800f264:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f26a:	1d1a      	adds	r2, r3, #4
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b02      	subs	r3, #2
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f282:	e037      	b.n	800f2f4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f288:	881a      	ldrh	r2, [r3, #0]
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f292:	1c9a      	adds	r2, r3, #2
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f2aa:	e023      	b.n	800f2f4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2ac:	f7f5 f942 	bl	8004534 <HAL_GetTick>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	683a      	ldr	r2, [r7, #0]
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d803      	bhi.n	800f2c4 <HAL_SPI_Transmit+0x240>
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c2:	d102      	bne.n	800f2ca <HAL_SPI_Transmit+0x246>
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d114      	bne.n	800f2f4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2ca:	68f8      	ldr	r0, [r7, #12]
 800f2cc:	f000 fc90 	bl	800fbf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2f0:	2303      	movs	r3, #3
 800f2f2:	e0b4      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d19b      	bne.n	800f238 <HAL_SPI_Transmit+0x1b4>
 800f300:	e087      	b.n	800f412 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	2b02      	cmp	r3, #2
 800f30e:	d155      	bne.n	800f3bc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f316:	b29b      	uxth	r3, r3
 800f318:	2b03      	cmp	r3, #3
 800f31a:	d918      	bls.n	800f34e <HAL_SPI_Transmit+0x2ca>
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f320:	2b40      	cmp	r3, #64	; 0x40
 800f322:	d914      	bls.n	800f34e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6812      	ldr	r2, [r2, #0]
 800f32e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f334:	1d1a      	adds	r2, r3, #4
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f340:	b29b      	uxth	r3, r3
 800f342:	3b04      	subs	r3, #4
 800f344:	b29a      	uxth	r2, r3
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f34c:	e05a      	b.n	800f404 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f354:	b29b      	uxth	r3, r3
 800f356:	2b01      	cmp	r3, #1
 800f358:	d917      	bls.n	800f38a <HAL_SPI_Transmit+0x306>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d013      	beq.n	800f38a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f366:	881a      	ldrh	r2, [r3, #0]
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f370:	1c9a      	adds	r2, r3, #2
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	3b02      	subs	r3, #2
 800f380:	b29a      	uxth	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f388:	e03c      	b.n	800f404 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	3320      	adds	r3, #32
 800f394:	7812      	ldrb	r2, [r2, #0]
 800f396:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f39c:	1c5a      	adds	r2, r3, #1
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3b4:	e026      	b.n	800f404 <HAL_SPI_Transmit+0x380>
 800f3b6:	bf00      	nop
 800f3b8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f3bc:	f7f5 f8ba 	bl	8004534 <HAL_GetTick>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d803      	bhi.n	800f3d4 <HAL_SPI_Transmit+0x350>
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3d2:	d102      	bne.n	800f3da <HAL_SPI_Transmit+0x356>
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d114      	bne.n	800f404 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	f000 fc08 	bl	800fbf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f400:	2303      	movs	r3, #3
 800f402:	e02c      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f47f af78 	bne.w	800f302 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	9300      	str	r3, [sp, #0]
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	2200      	movs	r2, #0
 800f41a:	2108      	movs	r1, #8
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f000 fc87 	bl	800fd30 <SPI_WaitOnFlagUntilTimeout>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d007      	beq.n	800f438 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f42e:	f043 0220 	orr.w	r2, r3, #32
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f438:	68f8      	ldr	r0, [r7, #12]
 800f43a:	f000 fbd9 	bl	800fbf0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2201      	movs	r2, #1
 800f44a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	e000      	b.n	800f45e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800f45c:	7efb      	ldrb	r3, [r7, #27]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop

0800f468 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b08a      	sub	sp, #40	; 0x28
 800f46c:	af02      	add	r7, sp, #8
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	603b      	str	r3, [r7, #0]
 800f474:	4613      	mov	r3, r2
 800f476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f478:	2300      	movs	r3, #0
 800f47a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	3330      	adds	r3, #48	; 0x30
 800f482:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f48c:	d112      	bne.n	800f4b4 <HAL_SPI_Receive+0x4c>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	689b      	ldr	r3, [r3, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d10e      	bne.n	800f4b4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	2204      	movs	r2, #4
 800f49a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f49e:	88fa      	ldrh	r2, [r7, #6]
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	68ba      	ldr	r2, [r7, #8]
 800f4a8:	68b9      	ldr	r1, [r7, #8]
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f000 f978 	bl	800f7a0 <HAL_SPI_TransmitReceive>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	e16f      	b.n	800f794 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d101      	bne.n	800f4c2 <HAL_SPI_Receive+0x5a>
 800f4be:	2302      	movs	r3, #2
 800f4c0:	e168      	b.n	800f794 <HAL_SPI_Receive+0x32c>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f4ca:	f7f5 f833 	bl	8004534 <HAL_GetTick>
 800f4ce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d007      	beq.n	800f4ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800f4dc:	2302      	movs	r3, #2
 800f4de:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4e8:	7ffb      	ldrb	r3, [r7, #31]
 800f4ea:	e153      	b.n	800f794 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <HAL_SPI_Receive+0x90>
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d107      	bne.n	800f508 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f504:	7ffb      	ldrb	r3, [r7, #31]
 800f506:	e145      	b.n	800f794 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2204      	movs	r2, #4
 800f50c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	2200      	movs	r2, #0
 800f514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	88fa      	ldrh	r2, [r7, #6]
 800f522:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	88fa      	ldrh	r2, [r7, #6]
 800f52a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2200      	movs	r2, #0
 800f532:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	2200      	movs	r2, #0
 800f538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2200      	movs	r2, #0
 800f540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2200      	movs	r2, #0
 800f548:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2200      	movs	r2, #0
 800f54e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	689b      	ldr	r3, [r3, #8]
 800f554:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f558:	d107      	bne.n	800f56a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f568:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	685a      	ldr	r2, [r3, #4]
 800f570:	4b8a      	ldr	r3, [pc, #552]	; (800f79c <HAL_SPI_Receive+0x334>)
 800f572:	4013      	ands	r3, r2
 800f574:	88f9      	ldrh	r1, [r7, #6]
 800f576:	68fa      	ldr	r2, [r7, #12]
 800f578:	6812      	ldr	r2, [r2, #0]
 800f57a:	430b      	orrs	r3, r1
 800f57c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f042 0201 	orr.w	r2, r2, #1
 800f58c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	685b      	ldr	r3, [r3, #4]
 800f592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f596:	d107      	bne.n	800f5a8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5a6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	68db      	ldr	r3, [r3, #12]
 800f5ac:	2b0f      	cmp	r3, #15
 800f5ae:	d948      	bls.n	800f642 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f5b0:	e040      	b.n	800f634 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	695a      	ldr	r2, [r3, #20]
 800f5b8:	f248 0308 	movw	r3, #32776	; 0x8008
 800f5bc:	4013      	ands	r3, r2
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d014      	beq.n	800f5ec <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f5cc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d2:	1d1a      	adds	r2, r3, #4
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5ea:	e023      	b.n	800f634 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5ec:	f7f4 ffa2 	bl	8004534 <HAL_GetTick>
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	1ad3      	subs	r3, r2, r3
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d803      	bhi.n	800f604 <HAL_SPI_Receive+0x19c>
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f602:	d102      	bne.n	800f60a <HAL_SPI_Receive+0x1a2>
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d114      	bne.n	800f634 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f60a:	68f8      	ldr	r0, [r7, #12]
 800f60c:	f000 faf0 	bl	800fbf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2200      	movs	r2, #0
 800f614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f61e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f630:	2303      	movs	r3, #3
 800f632:	e0af      	b.n	800f794 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1b8      	bne.n	800f5b2 <HAL_SPI_Receive+0x14a>
 800f640:	e095      	b.n	800f76e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	2b07      	cmp	r3, #7
 800f648:	f240 808b 	bls.w	800f762 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f64c:	e03f      	b.n	800f6ce <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	695b      	ldr	r3, [r3, #20]
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d114      	bne.n	800f686 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f660:	69ba      	ldr	r2, [r7, #24]
 800f662:	8812      	ldrh	r2, [r2, #0]
 800f664:	b292      	uxth	r2, r2
 800f666:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f66c:	1c9a      	adds	r2, r3, #2
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f678:	b29b      	uxth	r3, r3
 800f67a:	3b01      	subs	r3, #1
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f684:	e023      	b.n	800f6ce <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f686:	f7f4 ff55 	bl	8004534 <HAL_GetTick>
 800f68a:	4602      	mov	r2, r0
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	1ad3      	subs	r3, r2, r3
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d803      	bhi.n	800f69e <HAL_SPI_Receive+0x236>
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69c:	d102      	bne.n	800f6a4 <HAL_SPI_Receive+0x23c>
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d114      	bne.n	800f6ce <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f000 faa3 	bl	800fbf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	e062      	b.n	800f794 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1b9      	bne.n	800f64e <HAL_SPI_Receive+0x1e6>
 800f6da:	e048      	b.n	800f76e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	f003 0301 	and.w	r3, r3, #1
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d117      	bne.n	800f71a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6f6:	7812      	ldrb	r2, [r2, #0]
 800f6f8:	b2d2      	uxtb	r2, r2
 800f6fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f700:	1c5a      	adds	r2, r3, #1
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	3b01      	subs	r3, #1
 800f710:	b29a      	uxth	r2, r3
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f718:	e023      	b.n	800f762 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f71a:	f7f4 ff0b 	bl	8004534 <HAL_GetTick>
 800f71e:	4602      	mov	r2, r0
 800f720:	697b      	ldr	r3, [r7, #20]
 800f722:	1ad3      	subs	r3, r2, r3
 800f724:	683a      	ldr	r2, [r7, #0]
 800f726:	429a      	cmp	r2, r3
 800f728:	d803      	bhi.n	800f732 <HAL_SPI_Receive+0x2ca>
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f730:	d102      	bne.n	800f738 <HAL_SPI_Receive+0x2d0>
 800f732:	683b      	ldr	r3, [r7, #0]
 800f734:	2b00      	cmp	r3, #0
 800f736:	d114      	bne.n	800f762 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f000 fa59 	bl	800fbf0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2200      	movs	r2, #0
 800f742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f74c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	2201      	movs	r2, #1
 800f75a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f75e:	2303      	movs	r3, #3
 800f760:	e018      	b.n	800f794 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f768:	b29b      	uxth	r3, r3
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d1b6      	bne.n	800f6dc <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	f000 fa3e 	bl	800fbf0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2201      	movs	r2, #1
 800f780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800f78e:	2301      	movs	r3, #1
 800f790:	e000      	b.n	800f794 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800f792:	7ffb      	ldrb	r3, [r7, #31]
}
 800f794:	4618      	mov	r0, r3
 800f796:	3720      	adds	r7, #32
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	ffff0000 	.word	0xffff0000

0800f7a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b08e      	sub	sp, #56	; 0x38
 800f7a4:	af02      	add	r7, sp, #8
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
 800f7ac:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	3320      	adds	r3, #32
 800f7ba:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	3330      	adds	r3, #48	; 0x30
 800f7c2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d101      	bne.n	800f7d2 <HAL_SPI_TransmitReceive+0x32>
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	e209      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	2201      	movs	r2, #1
 800f7d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7da:	f7f4 feab 	bl	8004534 <HAL_GetTick>
 800f7de:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f7e0:	887b      	ldrh	r3, [r7, #2]
 800f7e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f7e4:	887b      	ldrh	r3, [r7, #2]
 800f7e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7ee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f7f6:	7efb      	ldrb	r3, [r7, #27]
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	d014      	beq.n	800f826 <HAL_SPI_TransmitReceive+0x86>
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f802:	d106      	bne.n	800f812 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d102      	bne.n	800f812 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800f80c:	7efb      	ldrb	r3, [r7, #27]
 800f80e:	2b04      	cmp	r3, #4
 800f810:	d009      	beq.n	800f826 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800f812:	2302      	movs	r3, #2
 800f814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f820:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f824:	e1df      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d005      	beq.n	800f838 <HAL_SPI_TransmitReceive+0x98>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d002      	beq.n	800f838 <HAL_SPI_TransmitReceive+0x98>
 800f832:	887b      	ldrh	r3, [r7, #2]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d109      	bne.n	800f84c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f838:	2301      	movs	r3, #1
 800f83a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2200      	movs	r2, #0
 800f842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f84a:	e1cc      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b04      	cmp	r3, #4
 800f856:	d003      	beq.n	800f860 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	2205      	movs	r2, #5
 800f85c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2200      	movs	r2, #0
 800f864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	887a      	ldrh	r2, [r7, #2]
 800f872:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	887a      	ldrh	r2, [r7, #2]
 800f87a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	68ba      	ldr	r2, [r7, #8]
 800f882:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	887a      	ldrh	r2, [r7, #2]
 800f888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	887a      	ldrh	r2, [r7, #2]
 800f890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2200      	movs	r2, #0
 800f898:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	2200      	movs	r2, #0
 800f89e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685a      	ldr	r2, [r3, #4]
 800f8a6:	4b82      	ldr	r3, [pc, #520]	; (800fab0 <HAL_SPI_TransmitReceive+0x310>)
 800f8a8:	4013      	ands	r3, r2
 800f8aa:	8879      	ldrh	r1, [r7, #2]
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	6812      	ldr	r2, [r2, #0]
 800f8b0:	430b      	orrs	r3, r1
 800f8b2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681a      	ldr	r2, [r3, #0]
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f042 0201 	orr.w	r2, r2, #1
 800f8c2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f8cc:	d107      	bne.n	800f8de <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f8dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	68db      	ldr	r3, [r3, #12]
 800f8e2:	2b0f      	cmp	r3, #15
 800f8e4:	d970      	bls.n	800f9c8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f8e6:	e068      	b.n	800f9ba <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	695b      	ldr	r3, [r3, #20]
 800f8ee:	f003 0302 	and.w	r3, r3, #2
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	d11a      	bne.n	800f92c <HAL_SPI_TransmitReceive+0x18c>
 800f8f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d017      	beq.n	800f92c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6812      	ldr	r2, [r2, #0]
 800f906:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f90c:	1d1a      	adds	r2, r3, #4
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f918:	b29b      	uxth	r3, r3
 800f91a:	3b01      	subs	r3, #1
 800f91c:	b29a      	uxth	r2, r3
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f92a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	695a      	ldr	r2, [r3, #20]
 800f932:	f248 0308 	movw	r3, #32776	; 0x8008
 800f936:	4013      	ands	r3, r2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d01a      	beq.n	800f972 <HAL_SPI_TransmitReceive+0x1d2>
 800f93c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d017      	beq.n	800f972 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f94a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f94c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f952:	1d1a      	adds	r2, r3, #4
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f95e:	b29b      	uxth	r3, r3
 800f960:	3b01      	subs	r3, #1
 800f962:	b29a      	uxth	r2, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f970:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f972:	f7f4 fddf 	bl	8004534 <HAL_GetTick>
 800f976:	4602      	mov	r2, r0
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f97e:	429a      	cmp	r2, r3
 800f980:	d803      	bhi.n	800f98a <HAL_SPI_TransmitReceive+0x1ea>
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f988:	d102      	bne.n	800f990 <HAL_SPI_TransmitReceive+0x1f0>
 800f98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d114      	bne.n	800f9ba <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f000 f92d 	bl	800fbf0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2200      	movs	r2, #0
 800f99a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800f9b6:	2303      	movs	r3, #3
 800f9b8:	e115      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f9ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d193      	bne.n	800f8e8 <HAL_SPI_TransmitReceive+0x148>
 800f9c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d190      	bne.n	800f8e8 <HAL_SPI_TransmitReceive+0x148>
 800f9c6:	e0e7      	b.n	800fb98 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	2b07      	cmp	r3, #7
 800f9ce:	f240 80dd 	bls.w	800fb8c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f9d2:	e066      	b.n	800faa2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	695b      	ldr	r3, [r3, #20]
 800f9da:	f003 0302 	and.w	r3, r3, #2
 800f9de:	2b02      	cmp	r3, #2
 800f9e0:	d119      	bne.n	800fa16 <HAL_SPI_TransmitReceive+0x276>
 800f9e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d016      	beq.n	800fa16 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9ec:	881a      	ldrh	r2, [r3, #0]
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9f0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f9f6:	1c9a      	adds	r2, r3, #2
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	3b01      	subs	r3, #1
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa14:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	695b      	ldr	r3, [r3, #20]
 800fa1c:	f003 0301 	and.w	r3, r3, #1
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d11a      	bne.n	800fa5a <HAL_SPI_TransmitReceive+0x2ba>
 800fa24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d017      	beq.n	800fa5a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa2e:	6a3a      	ldr	r2, [r7, #32]
 800fa30:	8812      	ldrh	r2, [r2, #0]
 800fa32:	b292      	uxth	r2, r2
 800fa34:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa3a:	1c9a      	adds	r2, r3, #2
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa58:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa5a:	f7f4 fd6b 	bl	8004534 <HAL_GetTick>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	1ad3      	subs	r3, r2, r3
 800fa64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d803      	bhi.n	800fa72 <HAL_SPI_TransmitReceive+0x2d2>
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa70:	d102      	bne.n	800fa78 <HAL_SPI_TransmitReceive+0x2d8>
 800fa72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d114      	bne.n	800faa2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f000 f8b9 	bl	800fbf0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800fa9e:	2303      	movs	r3, #3
 800faa0:	e0a1      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800faa2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d195      	bne.n	800f9d4 <HAL_SPI_TransmitReceive+0x234>
 800faa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d192      	bne.n	800f9d4 <HAL_SPI_TransmitReceive+0x234>
 800faae:	e073      	b.n	800fb98 <HAL_SPI_TransmitReceive+0x3f8>
 800fab0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	f003 0302 	and.w	r3, r3, #2
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d11b      	bne.n	800fafa <HAL_SPI_TransmitReceive+0x35a>
 800fac2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d018      	beq.n	800fafa <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	3320      	adds	r3, #32
 800fad2:	7812      	ldrb	r2, [r2, #0]
 800fad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fada:	1c5a      	adds	r2, r3, #1
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	3b01      	subs	r3, #1
 800faea:	b29a      	uxth	r2, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800faf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	695b      	ldr	r3, [r3, #20]
 800fb00:	f003 0301 	and.w	r3, r3, #1
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	d11d      	bne.n	800fb44 <HAL_SPI_TransmitReceive+0x3a4>
 800fb08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d01a      	beq.n	800fb44 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb1a:	7812      	ldrb	r2, [r2, #0]
 800fb1c:	b2d2      	uxtb	r2, r2
 800fb1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb24:	1c5a      	adds	r2, r3, #1
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	3b01      	subs	r3, #1
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb42:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb44:	f7f4 fcf6 	bl	8004534 <HAL_GetTick>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	1ad3      	subs	r3, r2, r3
 800fb4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d803      	bhi.n	800fb5c <HAL_SPI_TransmitReceive+0x3bc>
 800fb54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5a:	d102      	bne.n	800fb62 <HAL_SPI_TransmitReceive+0x3c2>
 800fb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d114      	bne.n	800fb8c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fb62:	68f8      	ldr	r0, [r7, #12]
 800fb64:	f000 f844 	bl	800fbf0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800fb88:	2303      	movs	r3, #3
 800fb8a:	e02c      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fb8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d190      	bne.n	800fab4 <HAL_SPI_TransmitReceive+0x314>
 800fb92:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d18d      	bne.n	800fab4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800fb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	2108      	movs	r1, #8
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f000 f8c4 	bl	800fd30 <SPI_WaitOnFlagUntilTimeout>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d007      	beq.n	800fbbe <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbb4:	f043 0220 	orr.w	r2, r3, #32
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fbbe:	68f8      	ldr	r0, [r7, #12]
 800fbc0:	f000 f816 	bl	800fbf0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800fbde:	2301      	movs	r3, #1
 800fbe0:	e001      	b.n	800fbe6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800fbe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3730      	adds	r7, #48	; 0x30
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop

0800fbf0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	699a      	ldr	r2, [r3, #24]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	f042 0208 	orr.w	r2, r2, #8
 800fc0e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	699a      	ldr	r2, [r3, #24]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	f042 0210 	orr.w	r2, r2, #16
 800fc1e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	681a      	ldr	r2, [r3, #0]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f022 0201 	bic.w	r2, r2, #1
 800fc2e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	6919      	ldr	r1, [r3, #16]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	4b3c      	ldr	r3, [pc, #240]	; (800fd2c <SPI_CloseTransfer+0x13c>)
 800fc3c:	400b      	ands	r3, r1
 800fc3e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	689a      	ldr	r2, [r3, #8]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800fc4e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b04      	cmp	r3, #4
 800fc5a:	d014      	beq.n	800fc86 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f003 0320 	and.w	r3, r3, #32
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d00f      	beq.n	800fc86 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	699a      	ldr	r2, [r3, #24]
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	f042 0220 	orr.w	r2, r2, #32
 800fc84:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b03      	cmp	r3, #3
 800fc90:	d014      	beq.n	800fcbc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00f      	beq.n	800fcbc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fca2:	f043 0204 	orr.w	r2, r3, #4
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	699a      	ldr	r2, [r3, #24]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fcba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00f      	beq.n	800fce6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fccc:	f043 0201 	orr.w	r2, r3, #1
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	699a      	ldr	r2, [r3, #24]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fce4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00f      	beq.n	800fd10 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcf6:	f043 0208 	orr.w	r2, r3, #8
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	699a      	ldr	r2, [r3, #24]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd0e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fd20:	bf00      	nop
 800fd22:	3714      	adds	r7, #20
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	fffffc90 	.word	0xfffffc90

0800fd30 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	60f8      	str	r0, [r7, #12]
 800fd38:	60b9      	str	r1, [r7, #8]
 800fd3a:	603b      	str	r3, [r7, #0]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fd40:	e010      	b.n	800fd64 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd42:	f7f4 fbf7 	bl	8004534 <HAL_GetTick>
 800fd46:	4602      	mov	r2, r0
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	69ba      	ldr	r2, [r7, #24]
 800fd4e:	429a      	cmp	r2, r3
 800fd50:	d803      	bhi.n	800fd5a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd58:	d102      	bne.n	800fd60 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d101      	bne.n	800fd64 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fd60:	2303      	movs	r3, #3
 800fd62:	e00f      	b.n	800fd84 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	695a      	ldr	r2, [r3, #20]
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	68ba      	ldr	r2, [r7, #8]
 800fd70:	429a      	cmp	r2, r3
 800fd72:	bf0c      	ite	eq
 800fd74:	2301      	moveq	r3, #1
 800fd76:	2300      	movne	r3, #0
 800fd78:	b2db      	uxtb	r3, r3
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d0df      	beq.n	800fd42 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd98:	095b      	lsrs	r3, r3, #5
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	3301      	adds	r3, #1
 800fda4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	3307      	adds	r3, #7
 800fdaa:	08db      	lsrs	r3, r3, #3
 800fdac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	fb02 f303 	mul.w	r3, r2, r3
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr

0800fdc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b082      	sub	sp, #8
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d101      	bne.n	800fdd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fdd0:	2301      	movs	r3, #1
 800fdd2:	e049      	b.n	800fe68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fdda:	b2db      	uxtb	r3, r3
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d106      	bne.n	800fdee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f7f4 f8a3 	bl	8003f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2202      	movs	r2, #2
 800fdf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	3304      	adds	r3, #4
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4610      	mov	r0, r2
 800fe02:	f000 fe17 	bl	8010a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2201      	movs	r2, #1
 800fe12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2201      	movs	r2, #1
 800fe22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2201      	movs	r2, #1
 800fe2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2201      	movs	r2, #1
 800fe42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2201      	movs	r2, #1
 800fe4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2201      	movs	r2, #1
 800fe52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2201      	movs	r2, #1
 800fe5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2201      	movs	r2, #1
 800fe62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3708      	adds	r7, #8
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b085      	sub	sp, #20
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d001      	beq.n	800fe88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800fe84:	2301      	movs	r3, #1
 800fe86:	e054      	b.n	800ff32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2202      	movs	r2, #2
 800fe8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	68da      	ldr	r2, [r3, #12]
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f042 0201 	orr.w	r2, r2, #1
 800fe9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	4a26      	ldr	r2, [pc, #152]	; (800ff40 <HAL_TIM_Base_Start_IT+0xd0>)
 800fea6:	4293      	cmp	r3, r2
 800fea8:	d022      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800feb2:	d01d      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4a22      	ldr	r2, [pc, #136]	; (800ff44 <HAL_TIM_Base_Start_IT+0xd4>)
 800feba:	4293      	cmp	r3, r2
 800febc:	d018      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4a21      	ldr	r2, [pc, #132]	; (800ff48 <HAL_TIM_Base_Start_IT+0xd8>)
 800fec4:	4293      	cmp	r3, r2
 800fec6:	d013      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4a1f      	ldr	r2, [pc, #124]	; (800ff4c <HAL_TIM_Base_Start_IT+0xdc>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d00e      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4a1e      	ldr	r2, [pc, #120]	; (800ff50 <HAL_TIM_Base_Start_IT+0xe0>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d009      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4a1c      	ldr	r2, [pc, #112]	; (800ff54 <HAL_TIM_Base_Start_IT+0xe4>)
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d004      	beq.n	800fef0 <HAL_TIM_Base_Start_IT+0x80>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	4a1b      	ldr	r2, [pc, #108]	; (800ff58 <HAL_TIM_Base_Start_IT+0xe8>)
 800feec:	4293      	cmp	r3, r2
 800feee:	d115      	bne.n	800ff1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	689a      	ldr	r2, [r3, #8]
 800fef6:	4b19      	ldr	r3, [pc, #100]	; (800ff5c <HAL_TIM_Base_Start_IT+0xec>)
 800fef8:	4013      	ands	r3, r2
 800fefa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2b06      	cmp	r3, #6
 800ff00:	d015      	beq.n	800ff2e <HAL_TIM_Base_Start_IT+0xbe>
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff08:	d011      	beq.n	800ff2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f042 0201 	orr.w	r2, r2, #1
 800ff18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff1a:	e008      	b.n	800ff2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f042 0201 	orr.w	r2, r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]
 800ff2c:	e000      	b.n	800ff30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ff2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ff30:	2300      	movs	r3, #0
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3714      	adds	r7, #20
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	40010000 	.word	0x40010000
 800ff44:	40000400 	.word	0x40000400
 800ff48:	40000800 	.word	0x40000800
 800ff4c:	40000c00 	.word	0x40000c00
 800ff50:	40010400 	.word	0x40010400
 800ff54:	40001800 	.word	0x40001800
 800ff58:	40014000 	.word	0x40014000
 800ff5c:	00010007 	.word	0x00010007

0800ff60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b082      	sub	sp, #8
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e049      	b.n	8010006 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff78:	b2db      	uxtb	r3, r3
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d106      	bne.n	800ff8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f000 f841 	bl	801000e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2202      	movs	r2, #2
 800ff90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	4619      	mov	r1, r3
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	f000 fd48 	bl	8010a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2201      	movs	r2, #1
 800ffb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2201      	movs	r2, #1
 800ffe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2201      	movs	r2, #1
 800fff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2201      	movs	r2, #1
 800fff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2201      	movs	r2, #1
 8010000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	4618      	mov	r0, r3
 8010008:	3708      	adds	r7, #8
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801000e:	b480      	push	{r7}
 8010010:	b083      	sub	sp, #12
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010016:	bf00      	nop
 8010018:	370c      	adds	r7, #12
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr
	...

08010024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
 801002c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801002e:	683b      	ldr	r3, [r7, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d109      	bne.n	8010048 <HAL_TIM_PWM_Start+0x24>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801003a:	b2db      	uxtb	r3, r3
 801003c:	2b01      	cmp	r3, #1
 801003e:	bf14      	ite	ne
 8010040:	2301      	movne	r3, #1
 8010042:	2300      	moveq	r3, #0
 8010044:	b2db      	uxtb	r3, r3
 8010046:	e03c      	b.n	80100c2 <HAL_TIM_PWM_Start+0x9e>
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	2b04      	cmp	r3, #4
 801004c:	d109      	bne.n	8010062 <HAL_TIM_PWM_Start+0x3e>
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010054:	b2db      	uxtb	r3, r3
 8010056:	2b01      	cmp	r3, #1
 8010058:	bf14      	ite	ne
 801005a:	2301      	movne	r3, #1
 801005c:	2300      	moveq	r3, #0
 801005e:	b2db      	uxtb	r3, r3
 8010060:	e02f      	b.n	80100c2 <HAL_TIM_PWM_Start+0x9e>
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	2b08      	cmp	r3, #8
 8010066:	d109      	bne.n	801007c <HAL_TIM_PWM_Start+0x58>
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2b01      	cmp	r3, #1
 8010072:	bf14      	ite	ne
 8010074:	2301      	movne	r3, #1
 8010076:	2300      	moveq	r3, #0
 8010078:	b2db      	uxtb	r3, r3
 801007a:	e022      	b.n	80100c2 <HAL_TIM_PWM_Start+0x9e>
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	2b0c      	cmp	r3, #12
 8010080:	d109      	bne.n	8010096 <HAL_TIM_PWM_Start+0x72>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010088:	b2db      	uxtb	r3, r3
 801008a:	2b01      	cmp	r3, #1
 801008c:	bf14      	ite	ne
 801008e:	2301      	movne	r3, #1
 8010090:	2300      	moveq	r3, #0
 8010092:	b2db      	uxtb	r3, r3
 8010094:	e015      	b.n	80100c2 <HAL_TIM_PWM_Start+0x9e>
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	2b10      	cmp	r3, #16
 801009a:	d109      	bne.n	80100b0 <HAL_TIM_PWM_Start+0x8c>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	bf14      	ite	ne
 80100a8:	2301      	movne	r3, #1
 80100aa:	2300      	moveq	r3, #0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	e008      	b.n	80100c2 <HAL_TIM_PWM_Start+0x9e>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	bf14      	ite	ne
 80100bc:	2301      	movne	r3, #1
 80100be:	2300      	moveq	r3, #0
 80100c0:	b2db      	uxtb	r3, r3
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d001      	beq.n	80100ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80100c6:	2301      	movs	r3, #1
 80100c8:	e0a1      	b.n	801020e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d104      	bne.n	80100da <HAL_TIM_PWM_Start+0xb6>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	2202      	movs	r2, #2
 80100d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100d8:	e023      	b.n	8010122 <HAL_TIM_PWM_Start+0xfe>
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2b04      	cmp	r3, #4
 80100de:	d104      	bne.n	80100ea <HAL_TIM_PWM_Start+0xc6>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2202      	movs	r2, #2
 80100e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100e8:	e01b      	b.n	8010122 <HAL_TIM_PWM_Start+0xfe>
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	2b08      	cmp	r3, #8
 80100ee:	d104      	bne.n	80100fa <HAL_TIM_PWM_Start+0xd6>
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2202      	movs	r2, #2
 80100f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100f8:	e013      	b.n	8010122 <HAL_TIM_PWM_Start+0xfe>
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b0c      	cmp	r3, #12
 80100fe:	d104      	bne.n	801010a <HAL_TIM_PWM_Start+0xe6>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2202      	movs	r2, #2
 8010104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010108:	e00b      	b.n	8010122 <HAL_TIM_PWM_Start+0xfe>
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	2b10      	cmp	r3, #16
 801010e:	d104      	bne.n	801011a <HAL_TIM_PWM_Start+0xf6>
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2202      	movs	r2, #2
 8010114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010118:	e003      	b.n	8010122 <HAL_TIM_PWM_Start+0xfe>
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2202      	movs	r2, #2
 801011e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2201      	movs	r2, #1
 8010128:	6839      	ldr	r1, [r7, #0]
 801012a:	4618      	mov	r0, r3
 801012c:	f001 f890 	bl	8011250 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a38      	ldr	r2, [pc, #224]	; (8010218 <HAL_TIM_PWM_Start+0x1f4>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d013      	beq.n	8010162 <HAL_TIM_PWM_Start+0x13e>
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4a37      	ldr	r2, [pc, #220]	; (801021c <HAL_TIM_PWM_Start+0x1f8>)
 8010140:	4293      	cmp	r3, r2
 8010142:	d00e      	beq.n	8010162 <HAL_TIM_PWM_Start+0x13e>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a35      	ldr	r2, [pc, #212]	; (8010220 <HAL_TIM_PWM_Start+0x1fc>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d009      	beq.n	8010162 <HAL_TIM_PWM_Start+0x13e>
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	4a34      	ldr	r2, [pc, #208]	; (8010224 <HAL_TIM_PWM_Start+0x200>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d004      	beq.n	8010162 <HAL_TIM_PWM_Start+0x13e>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	4a32      	ldr	r2, [pc, #200]	; (8010228 <HAL_TIM_PWM_Start+0x204>)
 801015e:	4293      	cmp	r3, r2
 8010160:	d101      	bne.n	8010166 <HAL_TIM_PWM_Start+0x142>
 8010162:	2301      	movs	r3, #1
 8010164:	e000      	b.n	8010168 <HAL_TIM_PWM_Start+0x144>
 8010166:	2300      	movs	r3, #0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d007      	beq.n	801017c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801017a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4a25      	ldr	r2, [pc, #148]	; (8010218 <HAL_TIM_PWM_Start+0x1f4>)
 8010182:	4293      	cmp	r3, r2
 8010184:	d022      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801018e:	d01d      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	4a25      	ldr	r2, [pc, #148]	; (801022c <HAL_TIM_PWM_Start+0x208>)
 8010196:	4293      	cmp	r3, r2
 8010198:	d018      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a24      	ldr	r2, [pc, #144]	; (8010230 <HAL_TIM_PWM_Start+0x20c>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d013      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4a22      	ldr	r2, [pc, #136]	; (8010234 <HAL_TIM_PWM_Start+0x210>)
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d00e      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4a1a      	ldr	r2, [pc, #104]	; (801021c <HAL_TIM_PWM_Start+0x1f8>)
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d009      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a1e      	ldr	r2, [pc, #120]	; (8010238 <HAL_TIM_PWM_Start+0x214>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d004      	beq.n	80101cc <HAL_TIM_PWM_Start+0x1a8>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	4a16      	ldr	r2, [pc, #88]	; (8010220 <HAL_TIM_PWM_Start+0x1fc>)
 80101c8:	4293      	cmp	r3, r2
 80101ca:	d115      	bne.n	80101f8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	689a      	ldr	r2, [r3, #8]
 80101d2:	4b1a      	ldr	r3, [pc, #104]	; (801023c <HAL_TIM_PWM_Start+0x218>)
 80101d4:	4013      	ands	r3, r2
 80101d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b06      	cmp	r3, #6
 80101dc:	d015      	beq.n	801020a <HAL_TIM_PWM_Start+0x1e6>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101e4:	d011      	beq.n	801020a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f042 0201 	orr.w	r2, r2, #1
 80101f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f6:	e008      	b.n	801020a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	681a      	ldr	r2, [r3, #0]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f042 0201 	orr.w	r2, r2, #1
 8010206:	601a      	str	r2, [r3, #0]
 8010208:	e000      	b.n	801020c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801020a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801020c:	2300      	movs	r3, #0
}
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	40010000 	.word	0x40010000
 801021c:	40010400 	.word	0x40010400
 8010220:	40014000 	.word	0x40014000
 8010224:	40014400 	.word	0x40014400
 8010228:	40014800 	.word	0x40014800
 801022c:	40000400 	.word	0x40000400
 8010230:	40000800 	.word	0x40000800
 8010234:	40000c00 	.word	0x40000c00
 8010238:	40001800 	.word	0x40001800
 801023c:	00010007 	.word	0x00010007

08010240 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d101      	bne.n	8010254 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010250:	2301      	movs	r3, #1
 8010252:	e08f      	b.n	8010374 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d106      	bne.n	801026e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	2200      	movs	r2, #0
 8010264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7f3 fde1 	bl	8003e30 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2202      	movs	r2, #2
 8010272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	6899      	ldr	r1, [r3, #8]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681a      	ldr	r2, [r3, #0]
 8010280:	4b3e      	ldr	r3, [pc, #248]	; (801037c <HAL_TIM_Encoder_Init+0x13c>)
 8010282:	400b      	ands	r3, r1
 8010284:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681a      	ldr	r2, [r3, #0]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	3304      	adds	r3, #4
 801028e:	4619      	mov	r1, r3
 8010290:	4610      	mov	r0, r2
 8010292:	f000 fbcf 	bl	8010a34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	689b      	ldr	r3, [r3, #8]
 801029c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	699b      	ldr	r3, [r3, #24]
 80102a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	6a1b      	ldr	r3, [r3, #32]
 80102ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	697a      	ldr	r2, [r7, #20]
 80102b4:	4313      	orrs	r3, r2
 80102b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	4b31      	ldr	r3, [pc, #196]	; (8010380 <HAL_TIM_Encoder_Init+0x140>)
 80102bc:	4013      	ands	r3, r2
 80102be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	689a      	ldr	r2, [r3, #8]
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	699b      	ldr	r3, [r3, #24]
 80102c8:	021b      	lsls	r3, r3, #8
 80102ca:	4313      	orrs	r3, r2
 80102cc:	693a      	ldr	r2, [r7, #16]
 80102ce:	4313      	orrs	r3, r2
 80102d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80102d2:	693a      	ldr	r2, [r7, #16]
 80102d4:	4b2b      	ldr	r3, [pc, #172]	; (8010384 <HAL_TIM_Encoder_Init+0x144>)
 80102d6:	4013      	ands	r3, r2
 80102d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80102da:	693a      	ldr	r2, [r7, #16]
 80102dc:	4b2a      	ldr	r3, [pc, #168]	; (8010388 <HAL_TIM_Encoder_Init+0x148>)
 80102de:	4013      	ands	r3, r2
 80102e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	68da      	ldr	r2, [r3, #12]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	021b      	lsls	r3, r3, #8
 80102ec:	4313      	orrs	r3, r2
 80102ee:	693a      	ldr	r2, [r7, #16]
 80102f0:	4313      	orrs	r3, r2
 80102f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	691b      	ldr	r3, [r3, #16]
 80102f8:	011a      	lsls	r2, r3, #4
 80102fa:	683b      	ldr	r3, [r7, #0]
 80102fc:	6a1b      	ldr	r3, [r3, #32]
 80102fe:	031b      	lsls	r3, r3, #12
 8010300:	4313      	orrs	r3, r2
 8010302:	693a      	ldr	r2, [r7, #16]
 8010304:	4313      	orrs	r3, r2
 8010306:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801030e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010316:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	695b      	ldr	r3, [r3, #20]
 8010320:	011b      	lsls	r3, r3, #4
 8010322:	4313      	orrs	r3, r2
 8010324:	68fa      	ldr	r2, [r7, #12]
 8010326:	4313      	orrs	r3, r2
 8010328:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	68fa      	ldr	r2, [r7, #12]
 8010340:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2201      	movs	r2, #1
 8010346:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2201      	movs	r2, #1
 801034e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2201      	movs	r2, #1
 8010356:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2201      	movs	r2, #1
 801035e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2201      	movs	r2, #1
 8010366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2201      	movs	r2, #1
 801036e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	fffebff8 	.word	0xfffebff8
 8010380:	fffffcfc 	.word	0xfffffcfc
 8010384:	fffff3f3 	.word	0xfffff3f3
 8010388:	ffff0f0f 	.word	0xffff0f0f

0801038c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	691b      	ldr	r3, [r3, #16]
 801039a:	f003 0302 	and.w	r3, r3, #2
 801039e:	2b02      	cmp	r3, #2
 80103a0:	d122      	bne.n	80103e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	68db      	ldr	r3, [r3, #12]
 80103a8:	f003 0302 	and.w	r3, r3, #2
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d11b      	bne.n	80103e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f06f 0202 	mvn.w	r2, #2
 80103b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	2201      	movs	r2, #1
 80103be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	699b      	ldr	r3, [r3, #24]
 80103c6:	f003 0303 	and.w	r3, r3, #3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d003      	beq.n	80103d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 fb12 	bl	80109f8 <HAL_TIM_IC_CaptureCallback>
 80103d4:	e005      	b.n	80103e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fb04 	bl	80109e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 fb15 	bl	8010a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	f003 0304 	and.w	r3, r3, #4
 80103f2:	2b04      	cmp	r3, #4
 80103f4:	d122      	bne.n	801043c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	f003 0304 	and.w	r3, r3, #4
 8010400:	2b04      	cmp	r3, #4
 8010402:	d11b      	bne.n	801043c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f06f 0204 	mvn.w	r2, #4
 801040c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2202      	movs	r2, #2
 8010412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	699b      	ldr	r3, [r3, #24]
 801041a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801041e:	2b00      	cmp	r3, #0
 8010420:	d003      	beq.n	801042a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 fae8 	bl	80109f8 <HAL_TIM_IC_CaptureCallback>
 8010428:	e005      	b.n	8010436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801042a:	6878      	ldr	r0, [r7, #4]
 801042c:	f000 fada 	bl	80109e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 faeb 	bl	8010a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	691b      	ldr	r3, [r3, #16]
 8010442:	f003 0308 	and.w	r3, r3, #8
 8010446:	2b08      	cmp	r3, #8
 8010448:	d122      	bne.n	8010490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	68db      	ldr	r3, [r3, #12]
 8010450:	f003 0308 	and.w	r3, r3, #8
 8010454:	2b08      	cmp	r3, #8
 8010456:	d11b      	bne.n	8010490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f06f 0208 	mvn.w	r2, #8
 8010460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2204      	movs	r2, #4
 8010466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	69db      	ldr	r3, [r3, #28]
 801046e:	f003 0303 	and.w	r3, r3, #3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d003      	beq.n	801047e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fabe 	bl	80109f8 <HAL_TIM_IC_CaptureCallback>
 801047c:	e005      	b.n	801048a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 fab0 	bl	80109e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 fac1 	bl	8010a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2200      	movs	r2, #0
 801048e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	f003 0310 	and.w	r3, r3, #16
 801049a:	2b10      	cmp	r3, #16
 801049c:	d122      	bne.n	80104e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	f003 0310 	and.w	r3, r3, #16
 80104a8:	2b10      	cmp	r3, #16
 80104aa:	d11b      	bne.n	80104e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f06f 0210 	mvn.w	r2, #16
 80104b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2208      	movs	r2, #8
 80104ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	69db      	ldr	r3, [r3, #28]
 80104c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d003      	beq.n	80104d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fa94 	bl	80109f8 <HAL_TIM_IC_CaptureCallback>
 80104d0:	e005      	b.n	80104de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 fa86 	bl	80109e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f000 fa97 	bl	8010a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	f003 0301 	and.w	r3, r3, #1
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d10e      	bne.n	8010510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	f003 0301 	and.w	r3, r3, #1
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d107      	bne.n	8010510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f06f 0201 	mvn.w	r2, #1
 8010508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7f2 fce6 	bl	8002edc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	691b      	ldr	r3, [r3, #16]
 8010516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801051a:	2b80      	cmp	r3, #128	; 0x80
 801051c:	d10e      	bne.n	801053c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	68db      	ldr	r3, [r3, #12]
 8010524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010528:	2b80      	cmp	r3, #128	; 0x80
 801052a:	d107      	bne.n	801053c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f000 ff48 	bl	80113cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	691b      	ldr	r3, [r3, #16]
 8010542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801054a:	d10e      	bne.n	801056a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	68db      	ldr	r3, [r3, #12]
 8010552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010556:	2b80      	cmp	r3, #128	; 0x80
 8010558:	d107      	bne.n	801056a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 ff3b 	bl	80113e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	691b      	ldr	r3, [r3, #16]
 8010570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010574:	2b40      	cmp	r3, #64	; 0x40
 8010576:	d10e      	bne.n	8010596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010582:	2b40      	cmp	r3, #64	; 0x40
 8010584:	d107      	bne.n	8010596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801058e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010590:	6878      	ldr	r0, [r7, #4]
 8010592:	f000 fa45 	bl	8010a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	f003 0320 	and.w	r3, r3, #32
 80105a0:	2b20      	cmp	r3, #32
 80105a2:	d10e      	bne.n	80105c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	f003 0320 	and.w	r3, r3, #32
 80105ae:	2b20      	cmp	r3, #32
 80105b0:	d107      	bne.n	80105c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f06f 0220 	mvn.w	r2, #32
 80105ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f000 fefb 	bl	80113b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80105c2:	bf00      	nop
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
	...

080105cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b086      	sub	sp, #24
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105d8:	2300      	movs	r3, #0
 80105da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d101      	bne.n	80105ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105e6:	2302      	movs	r3, #2
 80105e8:	e0ff      	b.n	80107ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2201      	movs	r2, #1
 80105ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b14      	cmp	r3, #20
 80105f6:	f200 80f0 	bhi.w	80107da <HAL_TIM_PWM_ConfigChannel+0x20e>
 80105fa:	a201      	add	r2, pc, #4	; (adr r2, 8010600 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80105fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010600:	08010655 	.word	0x08010655
 8010604:	080107db 	.word	0x080107db
 8010608:	080107db 	.word	0x080107db
 801060c:	080107db 	.word	0x080107db
 8010610:	08010695 	.word	0x08010695
 8010614:	080107db 	.word	0x080107db
 8010618:	080107db 	.word	0x080107db
 801061c:	080107db 	.word	0x080107db
 8010620:	080106d7 	.word	0x080106d7
 8010624:	080107db 	.word	0x080107db
 8010628:	080107db 	.word	0x080107db
 801062c:	080107db 	.word	0x080107db
 8010630:	08010717 	.word	0x08010717
 8010634:	080107db 	.word	0x080107db
 8010638:	080107db 	.word	0x080107db
 801063c:	080107db 	.word	0x080107db
 8010640:	08010759 	.word	0x08010759
 8010644:	080107db 	.word	0x080107db
 8010648:	080107db 	.word	0x080107db
 801064c:	080107db 	.word	0x080107db
 8010650:	08010799 	.word	0x08010799
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	68b9      	ldr	r1, [r7, #8]
 801065a:	4618      	mov	r0, r3
 801065c:	f000 fa84 	bl	8010b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	699a      	ldr	r2, [r3, #24]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	f042 0208 	orr.w	r2, r2, #8
 801066e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	699a      	ldr	r2, [r3, #24]
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f022 0204 	bic.w	r2, r2, #4
 801067e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	6999      	ldr	r1, [r3, #24]
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	691a      	ldr	r2, [r3, #16]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	430a      	orrs	r2, r1
 8010690:	619a      	str	r2, [r3, #24]
      break;
 8010692:	e0a5      	b.n	80107e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68b9      	ldr	r1, [r7, #8]
 801069a:	4618      	mov	r0, r3
 801069c:	f000 faf4 	bl	8010c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	699a      	ldr	r2, [r3, #24]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80106ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	699a      	ldr	r2, [r3, #24]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	6999      	ldr	r1, [r3, #24]
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	021a      	lsls	r2, r3, #8
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	430a      	orrs	r2, r1
 80106d2:	619a      	str	r2, [r3, #24]
      break;
 80106d4:	e084      	b.n	80107e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	68b9      	ldr	r1, [r7, #8]
 80106dc:	4618      	mov	r0, r3
 80106de:	f000 fb5d 	bl	8010d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	69da      	ldr	r2, [r3, #28]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f042 0208 	orr.w	r2, r2, #8
 80106f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	69da      	ldr	r2, [r3, #28]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	f022 0204 	bic.w	r2, r2, #4
 8010700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	69d9      	ldr	r1, [r3, #28]
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	691a      	ldr	r2, [r3, #16]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	430a      	orrs	r2, r1
 8010712:	61da      	str	r2, [r3, #28]
      break;
 8010714:	e064      	b.n	80107e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	68b9      	ldr	r1, [r7, #8]
 801071c:	4618      	mov	r0, r3
 801071e:	f000 fbc5 	bl	8010eac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	69da      	ldr	r2, [r3, #28]
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	69da      	ldr	r2, [r3, #28]
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	69d9      	ldr	r1, [r3, #28]
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	691b      	ldr	r3, [r3, #16]
 801074c:	021a      	lsls	r2, r3, #8
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	430a      	orrs	r2, r1
 8010754:	61da      	str	r2, [r3, #28]
      break;
 8010756:	e043      	b.n	80107e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68b9      	ldr	r1, [r7, #8]
 801075e:	4618      	mov	r0, r3
 8010760:	f000 fc0e 	bl	8010f80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f042 0208 	orr.w	r2, r2, #8
 8010772:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f022 0204 	bic.w	r2, r2, #4
 8010782:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	691a      	ldr	r2, [r3, #16]
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	430a      	orrs	r2, r1
 8010794:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010796:	e023      	b.n	80107e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	68b9      	ldr	r1, [r7, #8]
 801079e:	4618      	mov	r0, r3
 80107a0:	f000 fc52 	bl	8011048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80107b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80107c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	691b      	ldr	r3, [r3, #16]
 80107ce:	021a      	lsls	r2, r3, #8
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	430a      	orrs	r2, r1
 80107d6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80107d8:	e002      	b.n	80107e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80107da:	2301      	movs	r3, #1
 80107dc:	75fb      	strb	r3, [r7, #23]
      break;
 80107de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3718      	adds	r7, #24
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop

080107f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80107fe:	2300      	movs	r3, #0
 8010800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010808:	2b01      	cmp	r3, #1
 801080a:	d101      	bne.n	8010810 <HAL_TIM_ConfigClockSource+0x1c>
 801080c:	2302      	movs	r3, #2
 801080e:	e0dc      	b.n	80109ca <HAL_TIM_ConfigClockSource+0x1d6>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2201      	movs	r2, #1
 8010814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2202      	movs	r2, #2
 801081c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	689b      	ldr	r3, [r3, #8]
 8010826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010828:	68ba      	ldr	r2, [r7, #8]
 801082a:	4b6a      	ldr	r3, [pc, #424]	; (80109d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801082c:	4013      	ands	r3, r2
 801082e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4a64      	ldr	r2, [pc, #400]	; (80109d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010846:	4293      	cmp	r3, r2
 8010848:	f000 80a9 	beq.w	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 801084c:	4a62      	ldr	r2, [pc, #392]	; (80109d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801084e:	4293      	cmp	r3, r2
 8010850:	f200 80ae 	bhi.w	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010854:	4a61      	ldr	r2, [pc, #388]	; (80109dc <HAL_TIM_ConfigClockSource+0x1e8>)
 8010856:	4293      	cmp	r3, r2
 8010858:	f000 80a1 	beq.w	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 801085c:	4a5f      	ldr	r2, [pc, #380]	; (80109dc <HAL_TIM_ConfigClockSource+0x1e8>)
 801085e:	4293      	cmp	r3, r2
 8010860:	f200 80a6 	bhi.w	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010864:	4a5e      	ldr	r2, [pc, #376]	; (80109e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010866:	4293      	cmp	r3, r2
 8010868:	f000 8099 	beq.w	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 801086c:	4a5c      	ldr	r2, [pc, #368]	; (80109e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801086e:	4293      	cmp	r3, r2
 8010870:	f200 809e 	bhi.w	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010878:	f000 8091 	beq.w	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 801087c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010880:	f200 8096 	bhi.w	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010888:	f000 8089 	beq.w	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 801088c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010890:	f200 808e 	bhi.w	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010898:	d03e      	beq.n	8010918 <HAL_TIM_ConfigClockSource+0x124>
 801089a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801089e:	f200 8087 	bhi.w	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108a6:	f000 8086 	beq.w	80109b6 <HAL_TIM_ConfigClockSource+0x1c2>
 80108aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ae:	d87f      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108b0:	2b70      	cmp	r3, #112	; 0x70
 80108b2:	d01a      	beq.n	80108ea <HAL_TIM_ConfigClockSource+0xf6>
 80108b4:	2b70      	cmp	r3, #112	; 0x70
 80108b6:	d87b      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108b8:	2b60      	cmp	r3, #96	; 0x60
 80108ba:	d050      	beq.n	801095e <HAL_TIM_ConfigClockSource+0x16a>
 80108bc:	2b60      	cmp	r3, #96	; 0x60
 80108be:	d877      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108c0:	2b50      	cmp	r3, #80	; 0x50
 80108c2:	d03c      	beq.n	801093e <HAL_TIM_ConfigClockSource+0x14a>
 80108c4:	2b50      	cmp	r3, #80	; 0x50
 80108c6:	d873      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108c8:	2b40      	cmp	r3, #64	; 0x40
 80108ca:	d058      	beq.n	801097e <HAL_TIM_ConfigClockSource+0x18a>
 80108cc:	2b40      	cmp	r3, #64	; 0x40
 80108ce:	d86f      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d0:	2b30      	cmp	r3, #48	; 0x30
 80108d2:	d064      	beq.n	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 80108d4:	2b30      	cmp	r3, #48	; 0x30
 80108d6:	d86b      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d8:	2b20      	cmp	r3, #32
 80108da:	d060      	beq.n	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 80108dc:	2b20      	cmp	r3, #32
 80108de:	d867      	bhi.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d05c      	beq.n	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 80108e4:	2b10      	cmp	r3, #16
 80108e6:	d05a      	beq.n	801099e <HAL_TIM_ConfigClockSource+0x1aa>
 80108e8:	e062      	b.n	80109b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6818      	ldr	r0, [r3, #0]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	6899      	ldr	r1, [r3, #8]
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	685a      	ldr	r2, [r3, #4]
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	f000 fc89 	bl	8011210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	689b      	ldr	r3, [r3, #8]
 8010904:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801090c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	68ba      	ldr	r2, [r7, #8]
 8010914:	609a      	str	r2, [r3, #8]
      break;
 8010916:	e04f      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6818      	ldr	r0, [r3, #0]
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	6899      	ldr	r1, [r3, #8]
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	685a      	ldr	r2, [r3, #4]
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	f000 fc72 	bl	8011210 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	689a      	ldr	r2, [r3, #8]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801093a:	609a      	str	r2, [r3, #8]
      break;
 801093c:	e03c      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	6818      	ldr	r0, [r3, #0]
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	6859      	ldr	r1, [r3, #4]
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	461a      	mov	r2, r3
 801094c:	f000 fbe2 	bl	8011114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	2150      	movs	r1, #80	; 0x50
 8010956:	4618      	mov	r0, r3
 8010958:	f000 fc3c 	bl	80111d4 <TIM_ITRx_SetConfig>
      break;
 801095c:	e02c      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6818      	ldr	r0, [r3, #0]
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	6859      	ldr	r1, [r3, #4]
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	68db      	ldr	r3, [r3, #12]
 801096a:	461a      	mov	r2, r3
 801096c:	f000 fc01 	bl	8011172 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	2160      	movs	r1, #96	; 0x60
 8010976:	4618      	mov	r0, r3
 8010978:	f000 fc2c 	bl	80111d4 <TIM_ITRx_SetConfig>
      break;
 801097c:	e01c      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	6818      	ldr	r0, [r3, #0]
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	6859      	ldr	r1, [r3, #4]
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	461a      	mov	r2, r3
 801098c:	f000 fbc2 	bl	8011114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2140      	movs	r1, #64	; 0x40
 8010996:	4618      	mov	r0, r3
 8010998:	f000 fc1c 	bl	80111d4 <TIM_ITRx_SetConfig>
      break;
 801099c:	e00c      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	683b      	ldr	r3, [r7, #0]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	4619      	mov	r1, r3
 80109a8:	4610      	mov	r0, r2
 80109aa:	f000 fc13 	bl	80111d4 <TIM_ITRx_SetConfig>
      break;
 80109ae:	e003      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80109b0:	2301      	movs	r3, #1
 80109b2:	73fb      	strb	r3, [r7, #15]
      break;
 80109b4:	e000      	b.n	80109b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80109b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2201      	movs	r2, #1
 80109bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80109c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	ffceff88 	.word	0xffceff88
 80109d8:	00100040 	.word	0x00100040
 80109dc:	00100030 	.word	0x00100030
 80109e0:	00100020 	.word	0x00100020

080109e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80109ec:	bf00      	nop
 80109ee:	370c      	adds	r7, #12
 80109f0:	46bd      	mov	sp, r7
 80109f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f6:	4770      	bx	lr

080109f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010a00:	bf00      	nop
 8010a02:	370c      	adds	r7, #12
 8010a04:	46bd      	mov	sp, r7
 8010a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0a:	4770      	bx	lr

08010a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010a14:	bf00      	nop
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010a28:	bf00      	nop
 8010a2a:	370c      	adds	r7, #12
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a32:	4770      	bx	lr

08010a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b085      	sub	sp, #20
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	4a40      	ldr	r2, [pc, #256]	; (8010b48 <TIM_Base_SetConfig+0x114>)
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d013      	beq.n	8010a74 <TIM_Base_SetConfig+0x40>
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a52:	d00f      	beq.n	8010a74 <TIM_Base_SetConfig+0x40>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	4a3d      	ldr	r2, [pc, #244]	; (8010b4c <TIM_Base_SetConfig+0x118>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d00b      	beq.n	8010a74 <TIM_Base_SetConfig+0x40>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	4a3c      	ldr	r2, [pc, #240]	; (8010b50 <TIM_Base_SetConfig+0x11c>)
 8010a60:	4293      	cmp	r3, r2
 8010a62:	d007      	beq.n	8010a74 <TIM_Base_SetConfig+0x40>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	4a3b      	ldr	r2, [pc, #236]	; (8010b54 <TIM_Base_SetConfig+0x120>)
 8010a68:	4293      	cmp	r3, r2
 8010a6a:	d003      	beq.n	8010a74 <TIM_Base_SetConfig+0x40>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	4a3a      	ldr	r2, [pc, #232]	; (8010b58 <TIM_Base_SetConfig+0x124>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d108      	bne.n	8010a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	4313      	orrs	r3, r2
 8010a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	4a2f      	ldr	r2, [pc, #188]	; (8010b48 <TIM_Base_SetConfig+0x114>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d01f      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a94:	d01b      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	4a2c      	ldr	r2, [pc, #176]	; (8010b4c <TIM_Base_SetConfig+0x118>)
 8010a9a:	4293      	cmp	r3, r2
 8010a9c:	d017      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	4a2b      	ldr	r2, [pc, #172]	; (8010b50 <TIM_Base_SetConfig+0x11c>)
 8010aa2:	4293      	cmp	r3, r2
 8010aa4:	d013      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	4a2a      	ldr	r2, [pc, #168]	; (8010b54 <TIM_Base_SetConfig+0x120>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d00f      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	4a29      	ldr	r2, [pc, #164]	; (8010b58 <TIM_Base_SetConfig+0x124>)
 8010ab2:	4293      	cmp	r3, r2
 8010ab4:	d00b      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	4a28      	ldr	r2, [pc, #160]	; (8010b5c <TIM_Base_SetConfig+0x128>)
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d007      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4a27      	ldr	r2, [pc, #156]	; (8010b60 <TIM_Base_SetConfig+0x12c>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d003      	beq.n	8010ace <TIM_Base_SetConfig+0x9a>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4a26      	ldr	r2, [pc, #152]	; (8010b64 <TIM_Base_SetConfig+0x130>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d108      	bne.n	8010ae0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	4313      	orrs	r3, r2
 8010ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	695b      	ldr	r3, [r3, #20]
 8010aea:	4313      	orrs	r3, r2
 8010aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	689a      	ldr	r2, [r3, #8]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4a10      	ldr	r2, [pc, #64]	; (8010b48 <TIM_Base_SetConfig+0x114>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d00f      	beq.n	8010b2c <TIM_Base_SetConfig+0xf8>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4a12      	ldr	r2, [pc, #72]	; (8010b58 <TIM_Base_SetConfig+0x124>)
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d00b      	beq.n	8010b2c <TIM_Base_SetConfig+0xf8>
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	4a11      	ldr	r2, [pc, #68]	; (8010b5c <TIM_Base_SetConfig+0x128>)
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	d007      	beq.n	8010b2c <TIM_Base_SetConfig+0xf8>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	4a10      	ldr	r2, [pc, #64]	; (8010b60 <TIM_Base_SetConfig+0x12c>)
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d003      	beq.n	8010b2c <TIM_Base_SetConfig+0xf8>
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	4a0f      	ldr	r2, [pc, #60]	; (8010b64 <TIM_Base_SetConfig+0x130>)
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	d103      	bne.n	8010b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	691a      	ldr	r2, [r3, #16]
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	2201      	movs	r2, #1
 8010b38:	615a      	str	r2, [r3, #20]
}
 8010b3a:	bf00      	nop
 8010b3c:	3714      	adds	r7, #20
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop
 8010b48:	40010000 	.word	0x40010000
 8010b4c:	40000400 	.word	0x40000400
 8010b50:	40000800 	.word	0x40000800
 8010b54:	40000c00 	.word	0x40000c00
 8010b58:	40010400 	.word	0x40010400
 8010b5c:	40014000 	.word	0x40014000
 8010b60:	40014400 	.word	0x40014400
 8010b64:	40014800 	.word	0x40014800

08010b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b68:	b480      	push	{r7}
 8010b6a:	b087      	sub	sp, #28
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	f023 0201 	bic.w	r2, r3, #1
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	699b      	ldr	r3, [r3, #24]
 8010b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	4b37      	ldr	r3, [pc, #220]	; (8010c70 <TIM_OC1_SetConfig+0x108>)
 8010b94:	4013      	ands	r3, r2
 8010b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f023 0303 	bic.w	r3, r3, #3
 8010b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	f023 0302 	bic.w	r3, r3, #2
 8010bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	697a      	ldr	r2, [r7, #20]
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	4a2d      	ldr	r2, [pc, #180]	; (8010c74 <TIM_OC1_SetConfig+0x10c>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d00f      	beq.n	8010be4 <TIM_OC1_SetConfig+0x7c>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	4a2c      	ldr	r2, [pc, #176]	; (8010c78 <TIM_OC1_SetConfig+0x110>)
 8010bc8:	4293      	cmp	r3, r2
 8010bca:	d00b      	beq.n	8010be4 <TIM_OC1_SetConfig+0x7c>
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	4a2b      	ldr	r2, [pc, #172]	; (8010c7c <TIM_OC1_SetConfig+0x114>)
 8010bd0:	4293      	cmp	r3, r2
 8010bd2:	d007      	beq.n	8010be4 <TIM_OC1_SetConfig+0x7c>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	4a2a      	ldr	r2, [pc, #168]	; (8010c80 <TIM_OC1_SetConfig+0x118>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d003      	beq.n	8010be4 <TIM_OC1_SetConfig+0x7c>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	4a29      	ldr	r2, [pc, #164]	; (8010c84 <TIM_OC1_SetConfig+0x11c>)
 8010be0:	4293      	cmp	r3, r2
 8010be2:	d10c      	bne.n	8010bfe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	f023 0308 	bic.w	r3, r3, #8
 8010bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	697a      	ldr	r2, [r7, #20]
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	f023 0304 	bic.w	r3, r3, #4
 8010bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	4a1c      	ldr	r2, [pc, #112]	; (8010c74 <TIM_OC1_SetConfig+0x10c>)
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d00f      	beq.n	8010c26 <TIM_OC1_SetConfig+0xbe>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	4a1b      	ldr	r2, [pc, #108]	; (8010c78 <TIM_OC1_SetConfig+0x110>)
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d00b      	beq.n	8010c26 <TIM_OC1_SetConfig+0xbe>
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	4a1a      	ldr	r2, [pc, #104]	; (8010c7c <TIM_OC1_SetConfig+0x114>)
 8010c12:	4293      	cmp	r3, r2
 8010c14:	d007      	beq.n	8010c26 <TIM_OC1_SetConfig+0xbe>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	4a19      	ldr	r2, [pc, #100]	; (8010c80 <TIM_OC1_SetConfig+0x118>)
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d003      	beq.n	8010c26 <TIM_OC1_SetConfig+0xbe>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	4a18      	ldr	r2, [pc, #96]	; (8010c84 <TIM_OC1_SetConfig+0x11c>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d111      	bne.n	8010c4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010c26:	693b      	ldr	r3, [r7, #16]
 8010c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	695b      	ldr	r3, [r3, #20]
 8010c3a:	693a      	ldr	r2, [r7, #16]
 8010c3c:	4313      	orrs	r3, r2
 8010c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	693a      	ldr	r2, [r7, #16]
 8010c46:	4313      	orrs	r3, r2
 8010c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	693a      	ldr	r2, [r7, #16]
 8010c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	685a      	ldr	r2, [r3, #4]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	621a      	str	r2, [r3, #32]
}
 8010c64:	bf00      	nop
 8010c66:	371c      	adds	r7, #28
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr
 8010c70:	fffeff8f 	.word	0xfffeff8f
 8010c74:	40010000 	.word	0x40010000
 8010c78:	40010400 	.word	0x40010400
 8010c7c:	40014000 	.word	0x40014000
 8010c80:	40014400 	.word	0x40014400
 8010c84:	40014800 	.word	0x40014800

08010c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6a1b      	ldr	r3, [r3, #32]
 8010c96:	f023 0210 	bic.w	r2, r3, #16
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6a1b      	ldr	r3, [r3, #32]
 8010ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	4b34      	ldr	r3, [pc, #208]	; (8010d84 <TIM_OC2_SetConfig+0xfc>)
 8010cb4:	4013      	ands	r3, r2
 8010cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	021b      	lsls	r3, r3, #8
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	f023 0320 	bic.w	r3, r3, #32
 8010cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	011b      	lsls	r3, r3, #4
 8010cda:	697a      	ldr	r2, [r7, #20]
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4a29      	ldr	r2, [pc, #164]	; (8010d88 <TIM_OC2_SetConfig+0x100>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d003      	beq.n	8010cf0 <TIM_OC2_SetConfig+0x68>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4a28      	ldr	r2, [pc, #160]	; (8010d8c <TIM_OC2_SetConfig+0x104>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d10d      	bne.n	8010d0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	011b      	lsls	r3, r3, #4
 8010cfe:	697a      	ldr	r2, [r7, #20]
 8010d00:	4313      	orrs	r3, r2
 8010d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	4a1e      	ldr	r2, [pc, #120]	; (8010d88 <TIM_OC2_SetConfig+0x100>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d00f      	beq.n	8010d34 <TIM_OC2_SetConfig+0xac>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	4a1d      	ldr	r2, [pc, #116]	; (8010d8c <TIM_OC2_SetConfig+0x104>)
 8010d18:	4293      	cmp	r3, r2
 8010d1a:	d00b      	beq.n	8010d34 <TIM_OC2_SetConfig+0xac>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4a1c      	ldr	r2, [pc, #112]	; (8010d90 <TIM_OC2_SetConfig+0x108>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d007      	beq.n	8010d34 <TIM_OC2_SetConfig+0xac>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4a1b      	ldr	r2, [pc, #108]	; (8010d94 <TIM_OC2_SetConfig+0x10c>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d003      	beq.n	8010d34 <TIM_OC2_SetConfig+0xac>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4a1a      	ldr	r2, [pc, #104]	; (8010d98 <TIM_OC2_SetConfig+0x110>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d113      	bne.n	8010d5c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	695b      	ldr	r3, [r3, #20]
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	693a      	ldr	r2, [r7, #16]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	699b      	ldr	r3, [r3, #24]
 8010d54:	009b      	lsls	r3, r3, #2
 8010d56:	693a      	ldr	r2, [r7, #16]
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	693a      	ldr	r2, [r7, #16]
 8010d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	68fa      	ldr	r2, [r7, #12]
 8010d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	685a      	ldr	r2, [r3, #4]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	697a      	ldr	r2, [r7, #20]
 8010d74:	621a      	str	r2, [r3, #32]
}
 8010d76:	bf00      	nop
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	feff8fff 	.word	0xfeff8fff
 8010d88:	40010000 	.word	0x40010000
 8010d8c:	40010400 	.word	0x40010400
 8010d90:	40014000 	.word	0x40014000
 8010d94:	40014400 	.word	0x40014400
 8010d98:	40014800 	.word	0x40014800

08010d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b087      	sub	sp, #28
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
 8010da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6a1b      	ldr	r3, [r3, #32]
 8010daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6a1b      	ldr	r3, [r3, #32]
 8010db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	69db      	ldr	r3, [r3, #28]
 8010dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	4b33      	ldr	r3, [pc, #204]	; (8010e94 <TIM_OC3_SetConfig+0xf8>)
 8010dc8:	4013      	ands	r3, r2
 8010dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f023 0303 	bic.w	r3, r3, #3
 8010dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68fa      	ldr	r2, [r7, #12]
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	021b      	lsls	r3, r3, #8
 8010dec:	697a      	ldr	r2, [r7, #20]
 8010dee:	4313      	orrs	r3, r2
 8010df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4a28      	ldr	r2, [pc, #160]	; (8010e98 <TIM_OC3_SetConfig+0xfc>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d003      	beq.n	8010e02 <TIM_OC3_SetConfig+0x66>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4a27      	ldr	r2, [pc, #156]	; (8010e9c <TIM_OC3_SetConfig+0x100>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d10d      	bne.n	8010e1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	021b      	lsls	r3, r3, #8
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	4313      	orrs	r3, r2
 8010e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4a1d      	ldr	r2, [pc, #116]	; (8010e98 <TIM_OC3_SetConfig+0xfc>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d00f      	beq.n	8010e46 <TIM_OC3_SetConfig+0xaa>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4a1c      	ldr	r2, [pc, #112]	; (8010e9c <TIM_OC3_SetConfig+0x100>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d00b      	beq.n	8010e46 <TIM_OC3_SetConfig+0xaa>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	4a1b      	ldr	r2, [pc, #108]	; (8010ea0 <TIM_OC3_SetConfig+0x104>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d007      	beq.n	8010e46 <TIM_OC3_SetConfig+0xaa>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4a1a      	ldr	r2, [pc, #104]	; (8010ea4 <TIM_OC3_SetConfig+0x108>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d003      	beq.n	8010e46 <TIM_OC3_SetConfig+0xaa>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4a19      	ldr	r2, [pc, #100]	; (8010ea8 <TIM_OC3_SetConfig+0x10c>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d113      	bne.n	8010e6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	011b      	lsls	r3, r3, #4
 8010e5c:	693a      	ldr	r2, [r7, #16]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	699b      	ldr	r3, [r3, #24]
 8010e66:	011b      	lsls	r3, r3, #4
 8010e68:	693a      	ldr	r2, [r7, #16]
 8010e6a:	4313      	orrs	r3, r2
 8010e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	693a      	ldr	r2, [r7, #16]
 8010e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	685a      	ldr	r2, [r3, #4]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	697a      	ldr	r2, [r7, #20]
 8010e86:	621a      	str	r2, [r3, #32]
}
 8010e88:	bf00      	nop
 8010e8a:	371c      	adds	r7, #28
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	fffeff8f 	.word	0xfffeff8f
 8010e98:	40010000 	.word	0x40010000
 8010e9c:	40010400 	.word	0x40010400
 8010ea0:	40014000 	.word	0x40014000
 8010ea4:	40014400 	.word	0x40014400
 8010ea8:	40014800 	.word	0x40014800

08010eac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b087      	sub	sp, #28
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
 8010eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6a1b      	ldr	r3, [r3, #32]
 8010eba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a1b      	ldr	r3, [r3, #32]
 8010ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	69db      	ldr	r3, [r3, #28]
 8010ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ed4:	68fa      	ldr	r2, [r7, #12]
 8010ed6:	4b24      	ldr	r3, [pc, #144]	; (8010f68 <TIM_OC4_SetConfig+0xbc>)
 8010ed8:	4013      	ands	r3, r2
 8010eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	021b      	lsls	r3, r3, #8
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	4313      	orrs	r3, r2
 8010eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ef6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	689b      	ldr	r3, [r3, #8]
 8010efc:	031b      	lsls	r3, r3, #12
 8010efe:	693a      	ldr	r2, [r7, #16]
 8010f00:	4313      	orrs	r3, r2
 8010f02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	4a19      	ldr	r2, [pc, #100]	; (8010f6c <TIM_OC4_SetConfig+0xc0>)
 8010f08:	4293      	cmp	r3, r2
 8010f0a:	d00f      	beq.n	8010f2c <TIM_OC4_SetConfig+0x80>
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	4a18      	ldr	r2, [pc, #96]	; (8010f70 <TIM_OC4_SetConfig+0xc4>)
 8010f10:	4293      	cmp	r3, r2
 8010f12:	d00b      	beq.n	8010f2c <TIM_OC4_SetConfig+0x80>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4a17      	ldr	r2, [pc, #92]	; (8010f74 <TIM_OC4_SetConfig+0xc8>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d007      	beq.n	8010f2c <TIM_OC4_SetConfig+0x80>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4a16      	ldr	r2, [pc, #88]	; (8010f78 <TIM_OC4_SetConfig+0xcc>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d003      	beq.n	8010f2c <TIM_OC4_SetConfig+0x80>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	4a15      	ldr	r2, [pc, #84]	; (8010f7c <TIM_OC4_SetConfig+0xd0>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d109      	bne.n	8010f40 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	695b      	ldr	r3, [r3, #20]
 8010f38:	019b      	lsls	r3, r3, #6
 8010f3a:	697a      	ldr	r2, [r7, #20]
 8010f3c:	4313      	orrs	r3, r2
 8010f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	697a      	ldr	r2, [r7, #20]
 8010f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	68fa      	ldr	r2, [r7, #12]
 8010f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	685a      	ldr	r2, [r3, #4]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	693a      	ldr	r2, [r7, #16]
 8010f58:	621a      	str	r2, [r3, #32]
}
 8010f5a:	bf00      	nop
 8010f5c:	371c      	adds	r7, #28
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr
 8010f66:	bf00      	nop
 8010f68:	feff8fff 	.word	0xfeff8fff
 8010f6c:	40010000 	.word	0x40010000
 8010f70:	40010400 	.word	0x40010400
 8010f74:	40014000 	.word	0x40014000
 8010f78:	40014400 	.word	0x40014400
 8010f7c:	40014800 	.word	0x40014800

08010f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b087      	sub	sp, #28
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6a1b      	ldr	r3, [r3, #32]
 8010f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	6a1b      	ldr	r3, [r3, #32]
 8010f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	685b      	ldr	r3, [r3, #4]
 8010fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	4b21      	ldr	r3, [pc, #132]	; (8011030 <TIM_OC5_SetConfig+0xb0>)
 8010fac:	4013      	ands	r3, r2
 8010fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	689b      	ldr	r3, [r3, #8]
 8010fc6:	041b      	lsls	r3, r3, #16
 8010fc8:	693a      	ldr	r2, [r7, #16]
 8010fca:	4313      	orrs	r3, r2
 8010fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	4a18      	ldr	r2, [pc, #96]	; (8011034 <TIM_OC5_SetConfig+0xb4>)
 8010fd2:	4293      	cmp	r3, r2
 8010fd4:	d00f      	beq.n	8010ff6 <TIM_OC5_SetConfig+0x76>
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	4a17      	ldr	r2, [pc, #92]	; (8011038 <TIM_OC5_SetConfig+0xb8>)
 8010fda:	4293      	cmp	r3, r2
 8010fdc:	d00b      	beq.n	8010ff6 <TIM_OC5_SetConfig+0x76>
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4a16      	ldr	r2, [pc, #88]	; (801103c <TIM_OC5_SetConfig+0xbc>)
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d007      	beq.n	8010ff6 <TIM_OC5_SetConfig+0x76>
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4a15      	ldr	r2, [pc, #84]	; (8011040 <TIM_OC5_SetConfig+0xc0>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d003      	beq.n	8010ff6 <TIM_OC5_SetConfig+0x76>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	4a14      	ldr	r2, [pc, #80]	; (8011044 <TIM_OC5_SetConfig+0xc4>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	d109      	bne.n	801100a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010ffc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	695b      	ldr	r3, [r3, #20]
 8011002:	021b      	lsls	r3, r3, #8
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	4313      	orrs	r3, r2
 8011008:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	697a      	ldr	r2, [r7, #20]
 801100e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	68fa      	ldr	r2, [r7, #12]
 8011014:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	693a      	ldr	r2, [r7, #16]
 8011022:	621a      	str	r2, [r3, #32]
}
 8011024:	bf00      	nop
 8011026:	371c      	adds	r7, #28
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr
 8011030:	fffeff8f 	.word	0xfffeff8f
 8011034:	40010000 	.word	0x40010000
 8011038:	40010400 	.word	0x40010400
 801103c:	40014000 	.word	0x40014000
 8011040:	40014400 	.word	0x40014400
 8011044:	40014800 	.word	0x40014800

08011048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011048:	b480      	push	{r7}
 801104a:	b087      	sub	sp, #28
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6a1b      	ldr	r3, [r3, #32]
 8011056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6a1b      	ldr	r3, [r3, #32]
 8011062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	685b      	ldr	r3, [r3, #4]
 8011068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801106e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011070:	68fa      	ldr	r2, [r7, #12]
 8011072:	4b22      	ldr	r3, [pc, #136]	; (80110fc <TIM_OC6_SetConfig+0xb4>)
 8011074:	4013      	ands	r3, r2
 8011076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011078:	683b      	ldr	r3, [r7, #0]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	021b      	lsls	r3, r3, #8
 801107e:	68fa      	ldr	r2, [r7, #12]
 8011080:	4313      	orrs	r3, r2
 8011082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011084:	693b      	ldr	r3, [r7, #16]
 8011086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801108a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	689b      	ldr	r3, [r3, #8]
 8011090:	051b      	lsls	r3, r3, #20
 8011092:	693a      	ldr	r2, [r7, #16]
 8011094:	4313      	orrs	r3, r2
 8011096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	4a19      	ldr	r2, [pc, #100]	; (8011100 <TIM_OC6_SetConfig+0xb8>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d00f      	beq.n	80110c0 <TIM_OC6_SetConfig+0x78>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	4a18      	ldr	r2, [pc, #96]	; (8011104 <TIM_OC6_SetConfig+0xbc>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d00b      	beq.n	80110c0 <TIM_OC6_SetConfig+0x78>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	4a17      	ldr	r2, [pc, #92]	; (8011108 <TIM_OC6_SetConfig+0xc0>)
 80110ac:	4293      	cmp	r3, r2
 80110ae:	d007      	beq.n	80110c0 <TIM_OC6_SetConfig+0x78>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	4a16      	ldr	r2, [pc, #88]	; (801110c <TIM_OC6_SetConfig+0xc4>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d003      	beq.n	80110c0 <TIM_OC6_SetConfig+0x78>
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	4a15      	ldr	r2, [pc, #84]	; (8011110 <TIM_OC6_SetConfig+0xc8>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d109      	bne.n	80110d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80110c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	695b      	ldr	r3, [r3, #20]
 80110cc:	029b      	lsls	r3, r3, #10
 80110ce:	697a      	ldr	r2, [r7, #20]
 80110d0:	4313      	orrs	r3, r2
 80110d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	697a      	ldr	r2, [r7, #20]
 80110d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80110e0:	683b      	ldr	r3, [r7, #0]
 80110e2:	685a      	ldr	r2, [r3, #4]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	693a      	ldr	r2, [r7, #16]
 80110ec:	621a      	str	r2, [r3, #32]
}
 80110ee:	bf00      	nop
 80110f0:	371c      	adds	r7, #28
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	feff8fff 	.word	0xfeff8fff
 8011100:	40010000 	.word	0x40010000
 8011104:	40010400 	.word	0x40010400
 8011108:	40014000 	.word	0x40014000
 801110c:	40014400 	.word	0x40014400
 8011110:	40014800 	.word	0x40014800

08011114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011114:	b480      	push	{r7}
 8011116:	b087      	sub	sp, #28
 8011118:	af00      	add	r7, sp, #0
 801111a:	60f8      	str	r0, [r7, #12]
 801111c:	60b9      	str	r1, [r7, #8]
 801111e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	6a1b      	ldr	r3, [r3, #32]
 8011124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	6a1b      	ldr	r3, [r3, #32]
 801112a:	f023 0201 	bic.w	r2, r3, #1
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	699b      	ldr	r3, [r3, #24]
 8011136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801113e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	011b      	lsls	r3, r3, #4
 8011144:	693a      	ldr	r2, [r7, #16]
 8011146:	4313      	orrs	r3, r2
 8011148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801114a:	697b      	ldr	r3, [r7, #20]
 801114c:	f023 030a 	bic.w	r3, r3, #10
 8011150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011152:	697a      	ldr	r2, [r7, #20]
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	4313      	orrs	r3, r2
 8011158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	693a      	ldr	r2, [r7, #16]
 801115e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	697a      	ldr	r2, [r7, #20]
 8011164:	621a      	str	r2, [r3, #32]
}
 8011166:	bf00      	nop
 8011168:	371c      	adds	r7, #28
 801116a:	46bd      	mov	sp, r7
 801116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011170:	4770      	bx	lr

08011172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011172:	b480      	push	{r7}
 8011174:	b087      	sub	sp, #28
 8011176:	af00      	add	r7, sp, #0
 8011178:	60f8      	str	r0, [r7, #12]
 801117a:	60b9      	str	r1, [r7, #8]
 801117c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	6a1b      	ldr	r3, [r3, #32]
 8011182:	f023 0210 	bic.w	r2, r3, #16
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	699b      	ldr	r3, [r3, #24]
 801118e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6a1b      	ldr	r3, [r3, #32]
 8011194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801119c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	031b      	lsls	r3, r3, #12
 80111a2:	697a      	ldr	r2, [r7, #20]
 80111a4:	4313      	orrs	r3, r2
 80111a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80111ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	011b      	lsls	r3, r3, #4
 80111b4:	693a      	ldr	r2, [r7, #16]
 80111b6:	4313      	orrs	r3, r2
 80111b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	697a      	ldr	r2, [r7, #20]
 80111be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	693a      	ldr	r2, [r7, #16]
 80111c4:	621a      	str	r2, [r3, #32]
}
 80111c6:	bf00      	nop
 80111c8:	371c      	adds	r7, #28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
	...

080111d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	689b      	ldr	r3, [r3, #8]
 80111e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80111e4:	68fa      	ldr	r2, [r7, #12]
 80111e6:	4b09      	ldr	r3, [pc, #36]	; (801120c <TIM_ITRx_SetConfig+0x38>)
 80111e8:	4013      	ands	r3, r2
 80111ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80111ec:	683a      	ldr	r2, [r7, #0]
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	4313      	orrs	r3, r2
 80111f2:	f043 0307 	orr.w	r3, r3, #7
 80111f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	609a      	str	r2, [r3, #8]
}
 80111fe:	bf00      	nop
 8011200:	3714      	adds	r7, #20
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop
 801120c:	ffcfff8f 	.word	0xffcfff8f

08011210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011210:	b480      	push	{r7}
 8011212:	b087      	sub	sp, #28
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	607a      	str	r2, [r7, #4]
 801121c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801122a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	021a      	lsls	r2, r3, #8
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	431a      	orrs	r2, r3
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	4313      	orrs	r3, r2
 8011238:	697a      	ldr	r2, [r7, #20]
 801123a:	4313      	orrs	r3, r2
 801123c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	697a      	ldr	r2, [r7, #20]
 8011242:	609a      	str	r2, [r3, #8]
}
 8011244:	bf00      	nop
 8011246:	371c      	adds	r7, #28
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011250:	b480      	push	{r7}
 8011252:	b087      	sub	sp, #28
 8011254:	af00      	add	r7, sp, #0
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	f003 031f 	and.w	r3, r3, #31
 8011262:	2201      	movs	r2, #1
 8011264:	fa02 f303 	lsl.w	r3, r2, r3
 8011268:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	6a1a      	ldr	r2, [r3, #32]
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	43db      	mvns	r3, r3
 8011272:	401a      	ands	r2, r3
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	6a1a      	ldr	r2, [r3, #32]
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	f003 031f 	and.w	r3, r3, #31
 8011282:	6879      	ldr	r1, [r7, #4]
 8011284:	fa01 f303 	lsl.w	r3, r1, r3
 8011288:	431a      	orrs	r2, r3
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	621a      	str	r2, [r3, #32]
}
 801128e:	bf00      	nop
 8011290:	371c      	adds	r7, #28
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
	...

0801129c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801129c:	b480      	push	{r7}
 801129e:	b085      	sub	sp, #20
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d101      	bne.n	80112b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80112b0:	2302      	movs	r3, #2
 80112b2:	e06d      	b.n	8011390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2202      	movs	r2, #2
 80112c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	689b      	ldr	r3, [r3, #8]
 80112d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a30      	ldr	r2, [pc, #192]	; (801139c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d004      	beq.n	80112e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	4a2f      	ldr	r2, [pc, #188]	; (80113a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d108      	bne.n	80112fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80112ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	685b      	ldr	r3, [r3, #4]
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	4313      	orrs	r3, r2
 80112f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011300:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	68fa      	ldr	r2, [r7, #12]
 8011308:	4313      	orrs	r3, r2
 801130a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	68fa      	ldr	r2, [r7, #12]
 8011312:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a20      	ldr	r2, [pc, #128]	; (801139c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d022      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011326:	d01d      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a1d      	ldr	r2, [pc, #116]	; (80113a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801132e:	4293      	cmp	r3, r2
 8011330:	d018      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	4a1c      	ldr	r2, [pc, #112]	; (80113a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8011338:	4293      	cmp	r3, r2
 801133a:	d013      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4a1a      	ldr	r2, [pc, #104]	; (80113ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8011342:	4293      	cmp	r3, r2
 8011344:	d00e      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a15      	ldr	r2, [pc, #84]	; (80113a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801134c:	4293      	cmp	r3, r2
 801134e:	d009      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	4a16      	ldr	r2, [pc, #88]	; (80113b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011356:	4293      	cmp	r3, r2
 8011358:	d004      	beq.n	8011364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	4a15      	ldr	r2, [pc, #84]	; (80113b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011360:	4293      	cmp	r3, r2
 8011362:	d10c      	bne.n	801137e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801136a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	689b      	ldr	r3, [r3, #8]
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	4313      	orrs	r3, r2
 8011374:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	68ba      	ldr	r2, [r7, #8]
 801137c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2201      	movs	r2, #1
 8011382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801138e:	2300      	movs	r3, #0
}
 8011390:	4618      	mov	r0, r3
 8011392:	3714      	adds	r7, #20
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr
 801139c:	40010000 	.word	0x40010000
 80113a0:	40010400 	.word	0x40010400
 80113a4:	40000400 	.word	0x40000400
 80113a8:	40000800 	.word	0x40000800
 80113ac:	40000c00 	.word	0x40000c00
 80113b0:	40001800 	.word	0x40001800
 80113b4:	40014000 	.word	0x40014000

080113b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80113b8:	b480      	push	{r7}
 80113ba:	b083      	sub	sp, #12
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80113c0:	bf00      	nop
 80113c2:	370c      	adds	r7, #12
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80113d4:	bf00      	nop
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr

080113e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80113e8:	bf00      	nop
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d101      	bne.n	8011406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011402:	2301      	movs	r3, #1
 8011404:	e042      	b.n	801148c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801140c:	2b00      	cmp	r3, #0
 801140e:	d106      	bne.n	801141e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7f2 ff29 	bl	8004270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2224      	movs	r2, #36	; 0x24
 8011422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f022 0201 	bic.w	r2, r2, #1
 8011434:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f8c2 	bl	80115c0 <UART_SetConfig>
 801143c:	4603      	mov	r3, r0
 801143e:	2b01      	cmp	r3, #1
 8011440:	d101      	bne.n	8011446 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	e022      	b.n	801148c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801144a:	2b00      	cmp	r3, #0
 801144c:	d002      	beq.n	8011454 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f000 fe1e 	bl	8012090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	685a      	ldr	r2, [r3, #4]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011462:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	689a      	ldr	r2, [r3, #8]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011472:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f042 0201 	orr.w	r2, r2, #1
 8011482:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f000 fea5 	bl	80121d4 <UART_CheckIdleState>
 801148a:	4603      	mov	r3, r0
}
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b08a      	sub	sp, #40	; 0x28
 8011498:	af02      	add	r7, sp, #8
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	603b      	str	r3, [r7, #0]
 80114a0:	4613      	mov	r3, r2
 80114a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114aa:	2b20      	cmp	r3, #32
 80114ac:	f040 8083 	bne.w	80115b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d002      	beq.n	80114bc <HAL_UART_Transmit+0x28>
 80114b6:	88fb      	ldrh	r3, [r7, #6]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d101      	bne.n	80114c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80114bc:	2301      	movs	r3, #1
 80114be:	e07b      	b.n	80115b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80114c6:	2b01      	cmp	r3, #1
 80114c8:	d101      	bne.n	80114ce <HAL_UART_Transmit+0x3a>
 80114ca:	2302      	movs	r3, #2
 80114cc:	e074      	b.n	80115b8 <HAL_UART_Transmit+0x124>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2201      	movs	r2, #1
 80114d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	2200      	movs	r2, #0
 80114da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2221      	movs	r2, #33	; 0x21
 80114e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80114e6:	f7f3 f825 	bl	8004534 <HAL_GetTick>
 80114ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	88fa      	ldrh	r2, [r7, #6]
 80114f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	88fa      	ldrh	r2, [r7, #6]
 80114f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	689b      	ldr	r3, [r3, #8]
 8011500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011504:	d108      	bne.n	8011518 <HAL_UART_Transmit+0x84>
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	691b      	ldr	r3, [r3, #16]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d104      	bne.n	8011518 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801150e:	2300      	movs	r3, #0
 8011510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	61bb      	str	r3, [r7, #24]
 8011516:	e003      	b.n	8011520 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801151c:	2300      	movs	r3, #0
 801151e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2200      	movs	r2, #0
 8011524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8011528:	e02c      	b.n	8011584 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	2200      	movs	r2, #0
 8011532:	2180      	movs	r1, #128	; 0x80
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f000 fe98 	bl	801226a <UART_WaitOnFlagUntilTimeout>
 801153a:	4603      	mov	r3, r0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8011540:	2303      	movs	r3, #3
 8011542:	e039      	b.n	80115b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d10b      	bne.n	8011562 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	881b      	ldrh	r3, [r3, #0]
 801154e:	461a      	mov	r2, r3
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011558:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	3302      	adds	r3, #2
 801155e:	61bb      	str	r3, [r7, #24]
 8011560:	e007      	b.n	8011572 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	781a      	ldrb	r2, [r3, #0]
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	3301      	adds	r3, #1
 8011570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011578:	b29b      	uxth	r3, r3
 801157a:	3b01      	subs	r3, #1
 801157c:	b29a      	uxth	r2, r3
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801158a:	b29b      	uxth	r3, r3
 801158c:	2b00      	cmp	r3, #0
 801158e:	d1cc      	bne.n	801152a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	9300      	str	r3, [sp, #0]
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	2200      	movs	r2, #0
 8011598:	2140      	movs	r1, #64	; 0x40
 801159a:	68f8      	ldr	r0, [r7, #12]
 801159c:	f000 fe65 	bl	801226a <UART_WaitOnFlagUntilTimeout>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d001      	beq.n	80115aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80115a6:	2303      	movs	r3, #3
 80115a8:	e006      	b.n	80115b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	2220      	movs	r2, #32
 80115ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80115b2:	2300      	movs	r3, #0
 80115b4:	e000      	b.n	80115b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80115b6:	2302      	movs	r3, #2
  }
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3720      	adds	r7, #32
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80115c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80115c4:	b092      	sub	sp, #72	; 0x48
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80115ca:	2300      	movs	r3, #0
 80115cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	689a      	ldr	r2, [r3, #8]
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	691b      	ldr	r3, [r3, #16]
 80115d8:	431a      	orrs	r2, r3
 80115da:	697b      	ldr	r3, [r7, #20]
 80115dc:	695b      	ldr	r3, [r3, #20]
 80115de:	431a      	orrs	r2, r3
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	69db      	ldr	r3, [r3, #28]
 80115e4:	4313      	orrs	r3, r2
 80115e6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	681a      	ldr	r2, [r3, #0]
 80115ee:	4bbe      	ldr	r3, [pc, #760]	; (80118e8 <UART_SetConfig+0x328>)
 80115f0:	4013      	ands	r3, r2
 80115f2:	697a      	ldr	r2, [r7, #20]
 80115f4:	6812      	ldr	r2, [r2, #0]
 80115f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80115f8:	430b      	orrs	r3, r1
 80115fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	685b      	ldr	r3, [r3, #4]
 8011602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	68da      	ldr	r2, [r3, #12]
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	430a      	orrs	r2, r1
 8011610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	699b      	ldr	r3, [r3, #24]
 8011616:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	4ab3      	ldr	r2, [pc, #716]	; (80118ec <UART_SetConfig+0x32c>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d004      	beq.n	801162c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	6a1b      	ldr	r3, [r3, #32]
 8011626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011628:	4313      	orrs	r3, r2
 801162a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	689a      	ldr	r2, [r3, #8]
 8011632:	4baf      	ldr	r3, [pc, #700]	; (80118f0 <UART_SetConfig+0x330>)
 8011634:	4013      	ands	r3, r2
 8011636:	697a      	ldr	r2, [r7, #20]
 8011638:	6812      	ldr	r2, [r2, #0]
 801163a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801163c:	430b      	orrs	r3, r1
 801163e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011646:	f023 010f 	bic.w	r1, r3, #15
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801164e:	697b      	ldr	r3, [r7, #20]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	430a      	orrs	r2, r1
 8011654:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4aa6      	ldr	r2, [pc, #664]	; (80118f4 <UART_SetConfig+0x334>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d177      	bne.n	8011750 <UART_SetConfig+0x190>
 8011660:	4ba5      	ldr	r3, [pc, #660]	; (80118f8 <UART_SetConfig+0x338>)
 8011662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011668:	2b28      	cmp	r3, #40	; 0x28
 801166a:	d86d      	bhi.n	8011748 <UART_SetConfig+0x188>
 801166c:	a201      	add	r2, pc, #4	; (adr r2, 8011674 <UART_SetConfig+0xb4>)
 801166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011672:	bf00      	nop
 8011674:	08011719 	.word	0x08011719
 8011678:	08011749 	.word	0x08011749
 801167c:	08011749 	.word	0x08011749
 8011680:	08011749 	.word	0x08011749
 8011684:	08011749 	.word	0x08011749
 8011688:	08011749 	.word	0x08011749
 801168c:	08011749 	.word	0x08011749
 8011690:	08011749 	.word	0x08011749
 8011694:	08011721 	.word	0x08011721
 8011698:	08011749 	.word	0x08011749
 801169c:	08011749 	.word	0x08011749
 80116a0:	08011749 	.word	0x08011749
 80116a4:	08011749 	.word	0x08011749
 80116a8:	08011749 	.word	0x08011749
 80116ac:	08011749 	.word	0x08011749
 80116b0:	08011749 	.word	0x08011749
 80116b4:	08011729 	.word	0x08011729
 80116b8:	08011749 	.word	0x08011749
 80116bc:	08011749 	.word	0x08011749
 80116c0:	08011749 	.word	0x08011749
 80116c4:	08011749 	.word	0x08011749
 80116c8:	08011749 	.word	0x08011749
 80116cc:	08011749 	.word	0x08011749
 80116d0:	08011749 	.word	0x08011749
 80116d4:	08011731 	.word	0x08011731
 80116d8:	08011749 	.word	0x08011749
 80116dc:	08011749 	.word	0x08011749
 80116e0:	08011749 	.word	0x08011749
 80116e4:	08011749 	.word	0x08011749
 80116e8:	08011749 	.word	0x08011749
 80116ec:	08011749 	.word	0x08011749
 80116f0:	08011749 	.word	0x08011749
 80116f4:	08011739 	.word	0x08011739
 80116f8:	08011749 	.word	0x08011749
 80116fc:	08011749 	.word	0x08011749
 8011700:	08011749 	.word	0x08011749
 8011704:	08011749 	.word	0x08011749
 8011708:	08011749 	.word	0x08011749
 801170c:	08011749 	.word	0x08011749
 8011710:	08011749 	.word	0x08011749
 8011714:	08011741 	.word	0x08011741
 8011718:	2301      	movs	r3, #1
 801171a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171e:	e222      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011720:	2304      	movs	r3, #4
 8011722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011726:	e21e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011728:	2308      	movs	r3, #8
 801172a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172e:	e21a      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011730:	2310      	movs	r3, #16
 8011732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011736:	e216      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011738:	2320      	movs	r3, #32
 801173a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801173e:	e212      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011740:	2340      	movs	r3, #64	; 0x40
 8011742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011746:	e20e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011748:	2380      	movs	r3, #128	; 0x80
 801174a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801174e:	e20a      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a69      	ldr	r2, [pc, #420]	; (80118fc <UART_SetConfig+0x33c>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d130      	bne.n	80117bc <UART_SetConfig+0x1fc>
 801175a:	4b67      	ldr	r3, [pc, #412]	; (80118f8 <UART_SetConfig+0x338>)
 801175c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801175e:	f003 0307 	and.w	r3, r3, #7
 8011762:	2b05      	cmp	r3, #5
 8011764:	d826      	bhi.n	80117b4 <UART_SetConfig+0x1f4>
 8011766:	a201      	add	r2, pc, #4	; (adr r2, 801176c <UART_SetConfig+0x1ac>)
 8011768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801176c:	08011785 	.word	0x08011785
 8011770:	0801178d 	.word	0x0801178d
 8011774:	08011795 	.word	0x08011795
 8011778:	0801179d 	.word	0x0801179d
 801177c:	080117a5 	.word	0x080117a5
 8011780:	080117ad 	.word	0x080117ad
 8011784:	2300      	movs	r3, #0
 8011786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801178a:	e1ec      	b.n	8011b66 <UART_SetConfig+0x5a6>
 801178c:	2304      	movs	r3, #4
 801178e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011792:	e1e8      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011794:	2308      	movs	r3, #8
 8011796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801179a:	e1e4      	b.n	8011b66 <UART_SetConfig+0x5a6>
 801179c:	2310      	movs	r3, #16
 801179e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117a2:	e1e0      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80117a4:	2320      	movs	r3, #32
 80117a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117aa:	e1dc      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80117ac:	2340      	movs	r3, #64	; 0x40
 80117ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b2:	e1d8      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80117b4:	2380      	movs	r3, #128	; 0x80
 80117b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ba:	e1d4      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	4a4f      	ldr	r2, [pc, #316]	; (8011900 <UART_SetConfig+0x340>)
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d130      	bne.n	8011828 <UART_SetConfig+0x268>
 80117c6:	4b4c      	ldr	r3, [pc, #304]	; (80118f8 <UART_SetConfig+0x338>)
 80117c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117ca:	f003 0307 	and.w	r3, r3, #7
 80117ce:	2b05      	cmp	r3, #5
 80117d0:	d826      	bhi.n	8011820 <UART_SetConfig+0x260>
 80117d2:	a201      	add	r2, pc, #4	; (adr r2, 80117d8 <UART_SetConfig+0x218>)
 80117d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d8:	080117f1 	.word	0x080117f1
 80117dc:	080117f9 	.word	0x080117f9
 80117e0:	08011801 	.word	0x08011801
 80117e4:	08011809 	.word	0x08011809
 80117e8:	08011811 	.word	0x08011811
 80117ec:	08011819 	.word	0x08011819
 80117f0:	2300      	movs	r3, #0
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f6:	e1b6      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80117f8:	2304      	movs	r3, #4
 80117fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fe:	e1b2      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011800:	2308      	movs	r3, #8
 8011802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011806:	e1ae      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011808:	2310      	movs	r3, #16
 801180a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801180e:	e1aa      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011810:	2320      	movs	r3, #32
 8011812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011816:	e1a6      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011818:	2340      	movs	r3, #64	; 0x40
 801181a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801181e:	e1a2      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011820:	2380      	movs	r3, #128	; 0x80
 8011822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011826:	e19e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011828:	697b      	ldr	r3, [r7, #20]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	4a35      	ldr	r2, [pc, #212]	; (8011904 <UART_SetConfig+0x344>)
 801182e:	4293      	cmp	r3, r2
 8011830:	d130      	bne.n	8011894 <UART_SetConfig+0x2d4>
 8011832:	4b31      	ldr	r3, [pc, #196]	; (80118f8 <UART_SetConfig+0x338>)
 8011834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011836:	f003 0307 	and.w	r3, r3, #7
 801183a:	2b05      	cmp	r3, #5
 801183c:	d826      	bhi.n	801188c <UART_SetConfig+0x2cc>
 801183e:	a201      	add	r2, pc, #4	; (adr r2, 8011844 <UART_SetConfig+0x284>)
 8011840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011844:	0801185d 	.word	0x0801185d
 8011848:	08011865 	.word	0x08011865
 801184c:	0801186d 	.word	0x0801186d
 8011850:	08011875 	.word	0x08011875
 8011854:	0801187d 	.word	0x0801187d
 8011858:	08011885 	.word	0x08011885
 801185c:	2300      	movs	r3, #0
 801185e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011862:	e180      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011864:	2304      	movs	r3, #4
 8011866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801186a:	e17c      	b.n	8011b66 <UART_SetConfig+0x5a6>
 801186c:	2308      	movs	r3, #8
 801186e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011872:	e178      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011874:	2310      	movs	r3, #16
 8011876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801187a:	e174      	b.n	8011b66 <UART_SetConfig+0x5a6>
 801187c:	2320      	movs	r3, #32
 801187e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011882:	e170      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011884:	2340      	movs	r3, #64	; 0x40
 8011886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801188a:	e16c      	b.n	8011b66 <UART_SetConfig+0x5a6>
 801188c:	2380      	movs	r3, #128	; 0x80
 801188e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011892:	e168      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4a1b      	ldr	r2, [pc, #108]	; (8011908 <UART_SetConfig+0x348>)
 801189a:	4293      	cmp	r3, r2
 801189c:	d142      	bne.n	8011924 <UART_SetConfig+0x364>
 801189e:	4b16      	ldr	r3, [pc, #88]	; (80118f8 <UART_SetConfig+0x338>)
 80118a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118a2:	f003 0307 	and.w	r3, r3, #7
 80118a6:	2b05      	cmp	r3, #5
 80118a8:	d838      	bhi.n	801191c <UART_SetConfig+0x35c>
 80118aa:	a201      	add	r2, pc, #4	; (adr r2, 80118b0 <UART_SetConfig+0x2f0>)
 80118ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b0:	080118c9 	.word	0x080118c9
 80118b4:	080118d1 	.word	0x080118d1
 80118b8:	080118d9 	.word	0x080118d9
 80118bc:	080118e1 	.word	0x080118e1
 80118c0:	0801190d 	.word	0x0801190d
 80118c4:	08011915 	.word	0x08011915
 80118c8:	2300      	movs	r3, #0
 80118ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118ce:	e14a      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80118d0:	2304      	movs	r3, #4
 80118d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118d6:	e146      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80118d8:	2308      	movs	r3, #8
 80118da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118de:	e142      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80118e0:	2310      	movs	r3, #16
 80118e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80118e6:	e13e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80118e8:	cfff69f3 	.word	0xcfff69f3
 80118ec:	58000c00 	.word	0x58000c00
 80118f0:	11fff4ff 	.word	0x11fff4ff
 80118f4:	40011000 	.word	0x40011000
 80118f8:	58024400 	.word	0x58024400
 80118fc:	40004400 	.word	0x40004400
 8011900:	40004800 	.word	0x40004800
 8011904:	40004c00 	.word	0x40004c00
 8011908:	40005000 	.word	0x40005000
 801190c:	2320      	movs	r3, #32
 801190e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011912:	e128      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011914:	2340      	movs	r3, #64	; 0x40
 8011916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191a:	e124      	b.n	8011b66 <UART_SetConfig+0x5a6>
 801191c:	2380      	movs	r3, #128	; 0x80
 801191e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011922:	e120      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	4acb      	ldr	r2, [pc, #812]	; (8011c58 <UART_SetConfig+0x698>)
 801192a:	4293      	cmp	r3, r2
 801192c:	d176      	bne.n	8011a1c <UART_SetConfig+0x45c>
 801192e:	4bcb      	ldr	r3, [pc, #812]	; (8011c5c <UART_SetConfig+0x69c>)
 8011930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011932:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011936:	2b28      	cmp	r3, #40	; 0x28
 8011938:	d86c      	bhi.n	8011a14 <UART_SetConfig+0x454>
 801193a:	a201      	add	r2, pc, #4	; (adr r2, 8011940 <UART_SetConfig+0x380>)
 801193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011940:	080119e5 	.word	0x080119e5
 8011944:	08011a15 	.word	0x08011a15
 8011948:	08011a15 	.word	0x08011a15
 801194c:	08011a15 	.word	0x08011a15
 8011950:	08011a15 	.word	0x08011a15
 8011954:	08011a15 	.word	0x08011a15
 8011958:	08011a15 	.word	0x08011a15
 801195c:	08011a15 	.word	0x08011a15
 8011960:	080119ed 	.word	0x080119ed
 8011964:	08011a15 	.word	0x08011a15
 8011968:	08011a15 	.word	0x08011a15
 801196c:	08011a15 	.word	0x08011a15
 8011970:	08011a15 	.word	0x08011a15
 8011974:	08011a15 	.word	0x08011a15
 8011978:	08011a15 	.word	0x08011a15
 801197c:	08011a15 	.word	0x08011a15
 8011980:	080119f5 	.word	0x080119f5
 8011984:	08011a15 	.word	0x08011a15
 8011988:	08011a15 	.word	0x08011a15
 801198c:	08011a15 	.word	0x08011a15
 8011990:	08011a15 	.word	0x08011a15
 8011994:	08011a15 	.word	0x08011a15
 8011998:	08011a15 	.word	0x08011a15
 801199c:	08011a15 	.word	0x08011a15
 80119a0:	080119fd 	.word	0x080119fd
 80119a4:	08011a15 	.word	0x08011a15
 80119a8:	08011a15 	.word	0x08011a15
 80119ac:	08011a15 	.word	0x08011a15
 80119b0:	08011a15 	.word	0x08011a15
 80119b4:	08011a15 	.word	0x08011a15
 80119b8:	08011a15 	.word	0x08011a15
 80119bc:	08011a15 	.word	0x08011a15
 80119c0:	08011a05 	.word	0x08011a05
 80119c4:	08011a15 	.word	0x08011a15
 80119c8:	08011a15 	.word	0x08011a15
 80119cc:	08011a15 	.word	0x08011a15
 80119d0:	08011a15 	.word	0x08011a15
 80119d4:	08011a15 	.word	0x08011a15
 80119d8:	08011a15 	.word	0x08011a15
 80119dc:	08011a15 	.word	0x08011a15
 80119e0:	08011a0d 	.word	0x08011a0d
 80119e4:	2301      	movs	r3, #1
 80119e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ea:	e0bc      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80119ec:	2304      	movs	r3, #4
 80119ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119f2:	e0b8      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80119f4:	2308      	movs	r3, #8
 80119f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119fa:	e0b4      	b.n	8011b66 <UART_SetConfig+0x5a6>
 80119fc:	2310      	movs	r3, #16
 80119fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a02:	e0b0      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a04:	2320      	movs	r3, #32
 8011a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a0a:	e0ac      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a0c:	2340      	movs	r3, #64	; 0x40
 8011a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a12:	e0a8      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a14:	2380      	movs	r3, #128	; 0x80
 8011a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a1a:	e0a4      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	4a8f      	ldr	r2, [pc, #572]	; (8011c60 <UART_SetConfig+0x6a0>)
 8011a22:	4293      	cmp	r3, r2
 8011a24:	d130      	bne.n	8011a88 <UART_SetConfig+0x4c8>
 8011a26:	4b8d      	ldr	r3, [pc, #564]	; (8011c5c <UART_SetConfig+0x69c>)
 8011a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a2a:	f003 0307 	and.w	r3, r3, #7
 8011a2e:	2b05      	cmp	r3, #5
 8011a30:	d826      	bhi.n	8011a80 <UART_SetConfig+0x4c0>
 8011a32:	a201      	add	r2, pc, #4	; (adr r2, 8011a38 <UART_SetConfig+0x478>)
 8011a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a38:	08011a51 	.word	0x08011a51
 8011a3c:	08011a59 	.word	0x08011a59
 8011a40:	08011a61 	.word	0x08011a61
 8011a44:	08011a69 	.word	0x08011a69
 8011a48:	08011a71 	.word	0x08011a71
 8011a4c:	08011a79 	.word	0x08011a79
 8011a50:	2300      	movs	r3, #0
 8011a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a56:	e086      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a58:	2304      	movs	r3, #4
 8011a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a5e:	e082      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a60:	2308      	movs	r3, #8
 8011a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a66:	e07e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a68:	2310      	movs	r3, #16
 8011a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a6e:	e07a      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a70:	2320      	movs	r3, #32
 8011a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a76:	e076      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a78:	2340      	movs	r3, #64	; 0x40
 8011a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a7e:	e072      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a80:	2380      	movs	r3, #128	; 0x80
 8011a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011a86:	e06e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4a75      	ldr	r2, [pc, #468]	; (8011c64 <UART_SetConfig+0x6a4>)
 8011a8e:	4293      	cmp	r3, r2
 8011a90:	d130      	bne.n	8011af4 <UART_SetConfig+0x534>
 8011a92:	4b72      	ldr	r3, [pc, #456]	; (8011c5c <UART_SetConfig+0x69c>)
 8011a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a96:	f003 0307 	and.w	r3, r3, #7
 8011a9a:	2b05      	cmp	r3, #5
 8011a9c:	d826      	bhi.n	8011aec <UART_SetConfig+0x52c>
 8011a9e:	a201      	add	r2, pc, #4	; (adr r2, 8011aa4 <UART_SetConfig+0x4e4>)
 8011aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aa4:	08011abd 	.word	0x08011abd
 8011aa8:	08011ac5 	.word	0x08011ac5
 8011aac:	08011acd 	.word	0x08011acd
 8011ab0:	08011ad5 	.word	0x08011ad5
 8011ab4:	08011add 	.word	0x08011add
 8011ab8:	08011ae5 	.word	0x08011ae5
 8011abc:	2300      	movs	r3, #0
 8011abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ac2:	e050      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011ac4:	2304      	movs	r3, #4
 8011ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aca:	e04c      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011acc:	2308      	movs	r3, #8
 8011ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ad2:	e048      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011ad4:	2310      	movs	r3, #16
 8011ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ada:	e044      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011adc:	2320      	movs	r3, #32
 8011ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ae2:	e040      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011ae4:	2340      	movs	r3, #64	; 0x40
 8011ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011aea:	e03c      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011aec:	2380      	movs	r3, #128	; 0x80
 8011aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011af2:	e038      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	4a5b      	ldr	r2, [pc, #364]	; (8011c68 <UART_SetConfig+0x6a8>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d130      	bne.n	8011b60 <UART_SetConfig+0x5a0>
 8011afe:	4b57      	ldr	r3, [pc, #348]	; (8011c5c <UART_SetConfig+0x69c>)
 8011b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b02:	f003 0307 	and.w	r3, r3, #7
 8011b06:	2b05      	cmp	r3, #5
 8011b08:	d826      	bhi.n	8011b58 <UART_SetConfig+0x598>
 8011b0a:	a201      	add	r2, pc, #4	; (adr r2, 8011b10 <UART_SetConfig+0x550>)
 8011b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b10:	08011b29 	.word	0x08011b29
 8011b14:	08011b31 	.word	0x08011b31
 8011b18:	08011b39 	.word	0x08011b39
 8011b1c:	08011b41 	.word	0x08011b41
 8011b20:	08011b49 	.word	0x08011b49
 8011b24:	08011b51 	.word	0x08011b51
 8011b28:	2302      	movs	r3, #2
 8011b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b2e:	e01a      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b30:	2304      	movs	r3, #4
 8011b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b36:	e016      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b38:	2308      	movs	r3, #8
 8011b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b3e:	e012      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b40:	2310      	movs	r3, #16
 8011b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b46:	e00e      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b48:	2320      	movs	r3, #32
 8011b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b4e:	e00a      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b50:	2340      	movs	r3, #64	; 0x40
 8011b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b56:	e006      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b58:	2380      	movs	r3, #128	; 0x80
 8011b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b5e:	e002      	b.n	8011b66 <UART_SetConfig+0x5a6>
 8011b60:	2380      	movs	r3, #128	; 0x80
 8011b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	4a3f      	ldr	r2, [pc, #252]	; (8011c68 <UART_SetConfig+0x6a8>)
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	f040 80f8 	bne.w	8011d62 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011b72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b76:	2b20      	cmp	r3, #32
 8011b78:	dc46      	bgt.n	8011c08 <UART_SetConfig+0x648>
 8011b7a:	2b02      	cmp	r3, #2
 8011b7c:	f2c0 8082 	blt.w	8011c84 <UART_SetConfig+0x6c4>
 8011b80:	3b02      	subs	r3, #2
 8011b82:	2b1e      	cmp	r3, #30
 8011b84:	d87e      	bhi.n	8011c84 <UART_SetConfig+0x6c4>
 8011b86:	a201      	add	r2, pc, #4	; (adr r2, 8011b8c <UART_SetConfig+0x5cc>)
 8011b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8c:	08011c0f 	.word	0x08011c0f
 8011b90:	08011c85 	.word	0x08011c85
 8011b94:	08011c17 	.word	0x08011c17
 8011b98:	08011c85 	.word	0x08011c85
 8011b9c:	08011c85 	.word	0x08011c85
 8011ba0:	08011c85 	.word	0x08011c85
 8011ba4:	08011c27 	.word	0x08011c27
 8011ba8:	08011c85 	.word	0x08011c85
 8011bac:	08011c85 	.word	0x08011c85
 8011bb0:	08011c85 	.word	0x08011c85
 8011bb4:	08011c85 	.word	0x08011c85
 8011bb8:	08011c85 	.word	0x08011c85
 8011bbc:	08011c85 	.word	0x08011c85
 8011bc0:	08011c85 	.word	0x08011c85
 8011bc4:	08011c37 	.word	0x08011c37
 8011bc8:	08011c85 	.word	0x08011c85
 8011bcc:	08011c85 	.word	0x08011c85
 8011bd0:	08011c85 	.word	0x08011c85
 8011bd4:	08011c85 	.word	0x08011c85
 8011bd8:	08011c85 	.word	0x08011c85
 8011bdc:	08011c85 	.word	0x08011c85
 8011be0:	08011c85 	.word	0x08011c85
 8011be4:	08011c85 	.word	0x08011c85
 8011be8:	08011c85 	.word	0x08011c85
 8011bec:	08011c85 	.word	0x08011c85
 8011bf0:	08011c85 	.word	0x08011c85
 8011bf4:	08011c85 	.word	0x08011c85
 8011bf8:	08011c85 	.word	0x08011c85
 8011bfc:	08011c85 	.word	0x08011c85
 8011c00:	08011c85 	.word	0x08011c85
 8011c04:	08011c77 	.word	0x08011c77
 8011c08:	2b40      	cmp	r3, #64	; 0x40
 8011c0a:	d037      	beq.n	8011c7c <UART_SetConfig+0x6bc>
 8011c0c:	e03a      	b.n	8011c84 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011c0e:	f7fa fc47 	bl	800c4a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8011c12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c14:	e03c      	b.n	8011c90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f7fa fc56 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c24:	e034      	b.n	8011c90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c26:	f107 0318 	add.w	r3, r7, #24
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fa fda2 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c34:	e02c      	b.n	8011c90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c36:	4b09      	ldr	r3, [pc, #36]	; (8011c5c <UART_SetConfig+0x69c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	f003 0320 	and.w	r3, r3, #32
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d016      	beq.n	8011c70 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c42:	4b06      	ldr	r3, [pc, #24]	; (8011c5c <UART_SetConfig+0x69c>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	08db      	lsrs	r3, r3, #3
 8011c48:	f003 0303 	and.w	r3, r3, #3
 8011c4c:	4a07      	ldr	r2, [pc, #28]	; (8011c6c <UART_SetConfig+0x6ac>)
 8011c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8011c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c54:	e01c      	b.n	8011c90 <UART_SetConfig+0x6d0>
 8011c56:	bf00      	nop
 8011c58:	40011400 	.word	0x40011400
 8011c5c:	58024400 	.word	0x58024400
 8011c60:	40007800 	.word	0x40007800
 8011c64:	40007c00 	.word	0x40007c00
 8011c68:	58000c00 	.word	0x58000c00
 8011c6c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011c70:	4b9d      	ldr	r3, [pc, #628]	; (8011ee8 <UART_SetConfig+0x928>)
 8011c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c74:	e00c      	b.n	8011c90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c76:	4b9d      	ldr	r3, [pc, #628]	; (8011eec <UART_SetConfig+0x92c>)
 8011c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c7a:	e009      	b.n	8011c90 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c82:	e005      	b.n	8011c90 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011c84:	2300      	movs	r3, #0
 8011c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c88:	2301      	movs	r3, #1
 8011c8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f000 81de 	beq.w	8012054 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011c98:	697b      	ldr	r3, [r7, #20]
 8011c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c9c:	4a94      	ldr	r2, [pc, #592]	; (8011ef0 <UART_SetConfig+0x930>)
 8011c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011caa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	685a      	ldr	r2, [r3, #4]
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	005b      	lsls	r3, r3, #1
 8011cb4:	4413      	add	r3, r2
 8011cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d305      	bcc.n	8011cc8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d903      	bls.n	8011cd0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011cc8:	2301      	movs	r3, #1
 8011cca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011cce:	e1c1      	b.n	8012054 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cd2:	2200      	movs	r2, #0
 8011cd4:	60bb      	str	r3, [r7, #8]
 8011cd6:	60fa      	str	r2, [r7, #12]
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cdc:	4a84      	ldr	r2, [pc, #528]	; (8011ef0 <UART_SetConfig+0x930>)
 8011cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ce2:	b29b      	uxth	r3, r3
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	603b      	str	r3, [r7, #0]
 8011ce8:	607a      	str	r2, [r7, #4]
 8011cea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011cee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011cf2:	f7ee fb4d 	bl	8000390 <__aeabi_uldivmod>
 8011cf6:	4602      	mov	r2, r0
 8011cf8:	460b      	mov	r3, r1
 8011cfa:	4610      	mov	r0, r2
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	f04f 0200 	mov.w	r2, #0
 8011d02:	f04f 0300 	mov.w	r3, #0
 8011d06:	020b      	lsls	r3, r1, #8
 8011d08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011d0c:	0202      	lsls	r2, r0, #8
 8011d0e:	6979      	ldr	r1, [r7, #20]
 8011d10:	6849      	ldr	r1, [r1, #4]
 8011d12:	0849      	lsrs	r1, r1, #1
 8011d14:	2000      	movs	r0, #0
 8011d16:	460c      	mov	r4, r1
 8011d18:	4605      	mov	r5, r0
 8011d1a:	eb12 0804 	adds.w	r8, r2, r4
 8011d1e:	eb43 0905 	adc.w	r9, r3, r5
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	685b      	ldr	r3, [r3, #4]
 8011d26:	2200      	movs	r2, #0
 8011d28:	469a      	mov	sl, r3
 8011d2a:	4693      	mov	fp, r2
 8011d2c:	4652      	mov	r2, sl
 8011d2e:	465b      	mov	r3, fp
 8011d30:	4640      	mov	r0, r8
 8011d32:	4649      	mov	r1, r9
 8011d34:	f7ee fb2c 	bl	8000390 <__aeabi_uldivmod>
 8011d38:	4602      	mov	r2, r0
 8011d3a:	460b      	mov	r3, r1
 8011d3c:	4613      	mov	r3, r2
 8011d3e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011d46:	d308      	bcc.n	8011d5a <UART_SetConfig+0x79a>
 8011d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d4e:	d204      	bcs.n	8011d5a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d56:	60da      	str	r2, [r3, #12]
 8011d58:	e17c      	b.n	8012054 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011d60:	e178      	b.n	8012054 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	69db      	ldr	r3, [r3, #28]
 8011d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011d6a:	f040 80c5 	bne.w	8011ef8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8011d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d72:	2b20      	cmp	r3, #32
 8011d74:	dc48      	bgt.n	8011e08 <UART_SetConfig+0x848>
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	db7b      	blt.n	8011e72 <UART_SetConfig+0x8b2>
 8011d7a:	2b20      	cmp	r3, #32
 8011d7c:	d879      	bhi.n	8011e72 <UART_SetConfig+0x8b2>
 8011d7e:	a201      	add	r2, pc, #4	; (adr r2, 8011d84 <UART_SetConfig+0x7c4>)
 8011d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d84:	08011e0f 	.word	0x08011e0f
 8011d88:	08011e17 	.word	0x08011e17
 8011d8c:	08011e73 	.word	0x08011e73
 8011d90:	08011e73 	.word	0x08011e73
 8011d94:	08011e1f 	.word	0x08011e1f
 8011d98:	08011e73 	.word	0x08011e73
 8011d9c:	08011e73 	.word	0x08011e73
 8011da0:	08011e73 	.word	0x08011e73
 8011da4:	08011e2f 	.word	0x08011e2f
 8011da8:	08011e73 	.word	0x08011e73
 8011dac:	08011e73 	.word	0x08011e73
 8011db0:	08011e73 	.word	0x08011e73
 8011db4:	08011e73 	.word	0x08011e73
 8011db8:	08011e73 	.word	0x08011e73
 8011dbc:	08011e73 	.word	0x08011e73
 8011dc0:	08011e73 	.word	0x08011e73
 8011dc4:	08011e3f 	.word	0x08011e3f
 8011dc8:	08011e73 	.word	0x08011e73
 8011dcc:	08011e73 	.word	0x08011e73
 8011dd0:	08011e73 	.word	0x08011e73
 8011dd4:	08011e73 	.word	0x08011e73
 8011dd8:	08011e73 	.word	0x08011e73
 8011ddc:	08011e73 	.word	0x08011e73
 8011de0:	08011e73 	.word	0x08011e73
 8011de4:	08011e73 	.word	0x08011e73
 8011de8:	08011e73 	.word	0x08011e73
 8011dec:	08011e73 	.word	0x08011e73
 8011df0:	08011e73 	.word	0x08011e73
 8011df4:	08011e73 	.word	0x08011e73
 8011df8:	08011e73 	.word	0x08011e73
 8011dfc:	08011e73 	.word	0x08011e73
 8011e00:	08011e73 	.word	0x08011e73
 8011e04:	08011e65 	.word	0x08011e65
 8011e08:	2b40      	cmp	r3, #64	; 0x40
 8011e0a:	d02e      	beq.n	8011e6a <UART_SetConfig+0x8aa>
 8011e0c:	e031      	b.n	8011e72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e0e:	f7f8 ff03 	bl	800ac18 <HAL_RCC_GetPCLK1Freq>
 8011e12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e14:	e033      	b.n	8011e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011e16:	f7f8 ff15 	bl	800ac44 <HAL_RCC_GetPCLK2Freq>
 8011e1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011e1c:	e02f      	b.n	8011e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7fa fb52 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e2c:	e027      	b.n	8011e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e2e:	f107 0318 	add.w	r3, r7, #24
 8011e32:	4618      	mov	r0, r3
 8011e34:	f7fa fc9e 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e3c:	e01f      	b.n	8011e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e3e:	4b2d      	ldr	r3, [pc, #180]	; (8011ef4 <UART_SetConfig+0x934>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f003 0320 	and.w	r3, r3, #32
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d009      	beq.n	8011e5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e4a:	4b2a      	ldr	r3, [pc, #168]	; (8011ef4 <UART_SetConfig+0x934>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	08db      	lsrs	r3, r3, #3
 8011e50:	f003 0303 	and.w	r3, r3, #3
 8011e54:	4a24      	ldr	r2, [pc, #144]	; (8011ee8 <UART_SetConfig+0x928>)
 8011e56:	fa22 f303 	lsr.w	r3, r2, r3
 8011e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011e5c:	e00f      	b.n	8011e7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011e5e:	4b22      	ldr	r3, [pc, #136]	; (8011ee8 <UART_SetConfig+0x928>)
 8011e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e62:	e00c      	b.n	8011e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011e64:	4b21      	ldr	r3, [pc, #132]	; (8011eec <UART_SetConfig+0x92c>)
 8011e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e68:	e009      	b.n	8011e7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e70:	e005      	b.n	8011e7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011e72:	2300      	movs	r3, #0
 8011e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011e76:	2301      	movs	r3, #1
 8011e78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011e7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	f000 80e7 	beq.w	8012054 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e8a:	4a19      	ldr	r2, [pc, #100]	; (8011ef0 <UART_SetConfig+0x930>)
 8011e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e90:	461a      	mov	r2, r3
 8011e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e98:	005a      	lsls	r2, r3, #1
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	085b      	lsrs	r3, r3, #1
 8011ea0:	441a      	add	r2, r3
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	685b      	ldr	r3, [r3, #4]
 8011ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011eaa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	2b0f      	cmp	r3, #15
 8011eb0:	d916      	bls.n	8011ee0 <UART_SetConfig+0x920>
 8011eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011eb8:	d212      	bcs.n	8011ee0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebc:	b29b      	uxth	r3, r3
 8011ebe:	f023 030f 	bic.w	r3, r3, #15
 8011ec2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	085b      	lsrs	r3, r3, #1
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	f003 0307 	and.w	r3, r3, #7
 8011ece:	b29a      	uxth	r2, r3
 8011ed0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011edc:	60da      	str	r2, [r3, #12]
 8011ede:	e0b9      	b.n	8012054 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011ee6:	e0b5      	b.n	8012054 <UART_SetConfig+0xa94>
 8011ee8:	03d09000 	.word	0x03d09000
 8011eec:	003d0900 	.word	0x003d0900
 8011ef0:	0801d3e0 	.word	0x0801d3e0
 8011ef4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011ef8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011efc:	2b20      	cmp	r3, #32
 8011efe:	dc49      	bgt.n	8011f94 <UART_SetConfig+0x9d4>
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	db7c      	blt.n	8011ffe <UART_SetConfig+0xa3e>
 8011f04:	2b20      	cmp	r3, #32
 8011f06:	d87a      	bhi.n	8011ffe <UART_SetConfig+0xa3e>
 8011f08:	a201      	add	r2, pc, #4	; (adr r2, 8011f10 <UART_SetConfig+0x950>)
 8011f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f0e:	bf00      	nop
 8011f10:	08011f9b 	.word	0x08011f9b
 8011f14:	08011fa3 	.word	0x08011fa3
 8011f18:	08011fff 	.word	0x08011fff
 8011f1c:	08011fff 	.word	0x08011fff
 8011f20:	08011fab 	.word	0x08011fab
 8011f24:	08011fff 	.word	0x08011fff
 8011f28:	08011fff 	.word	0x08011fff
 8011f2c:	08011fff 	.word	0x08011fff
 8011f30:	08011fbb 	.word	0x08011fbb
 8011f34:	08011fff 	.word	0x08011fff
 8011f38:	08011fff 	.word	0x08011fff
 8011f3c:	08011fff 	.word	0x08011fff
 8011f40:	08011fff 	.word	0x08011fff
 8011f44:	08011fff 	.word	0x08011fff
 8011f48:	08011fff 	.word	0x08011fff
 8011f4c:	08011fff 	.word	0x08011fff
 8011f50:	08011fcb 	.word	0x08011fcb
 8011f54:	08011fff 	.word	0x08011fff
 8011f58:	08011fff 	.word	0x08011fff
 8011f5c:	08011fff 	.word	0x08011fff
 8011f60:	08011fff 	.word	0x08011fff
 8011f64:	08011fff 	.word	0x08011fff
 8011f68:	08011fff 	.word	0x08011fff
 8011f6c:	08011fff 	.word	0x08011fff
 8011f70:	08011fff 	.word	0x08011fff
 8011f74:	08011fff 	.word	0x08011fff
 8011f78:	08011fff 	.word	0x08011fff
 8011f7c:	08011fff 	.word	0x08011fff
 8011f80:	08011fff 	.word	0x08011fff
 8011f84:	08011fff 	.word	0x08011fff
 8011f88:	08011fff 	.word	0x08011fff
 8011f8c:	08011fff 	.word	0x08011fff
 8011f90:	08011ff1 	.word	0x08011ff1
 8011f94:	2b40      	cmp	r3, #64	; 0x40
 8011f96:	d02e      	beq.n	8011ff6 <UART_SetConfig+0xa36>
 8011f98:	e031      	b.n	8011ffe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f9a:	f7f8 fe3d 	bl	800ac18 <HAL_RCC_GetPCLK1Freq>
 8011f9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011fa0:	e033      	b.n	801200a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011fa2:	f7f8 fe4f 	bl	800ac44 <HAL_RCC_GetPCLK2Freq>
 8011fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011fa8:	e02f      	b.n	801200a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f7fa fa8c 	bl	800c4cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fb8:	e027      	b.n	801200a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011fba:	f107 0318 	add.w	r3, r7, #24
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	f7fa fbd8 	bl	800c774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fc8:	e01f      	b.n	801200a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011fca:	4b2d      	ldr	r3, [pc, #180]	; (8012080 <UART_SetConfig+0xac0>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f003 0320 	and.w	r3, r3, #32
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d009      	beq.n	8011fea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011fd6:	4b2a      	ldr	r3, [pc, #168]	; (8012080 <UART_SetConfig+0xac0>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	08db      	lsrs	r3, r3, #3
 8011fdc:	f003 0303 	and.w	r3, r3, #3
 8011fe0:	4a28      	ldr	r2, [pc, #160]	; (8012084 <UART_SetConfig+0xac4>)
 8011fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8011fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011fe8:	e00f      	b.n	801200a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8011fea:	4b26      	ldr	r3, [pc, #152]	; (8012084 <UART_SetConfig+0xac4>)
 8011fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011fee:	e00c      	b.n	801200a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ff0:	4b25      	ldr	r3, [pc, #148]	; (8012088 <UART_SetConfig+0xac8>)
 8011ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ff4:	e009      	b.n	801200a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ffc:	e005      	b.n	801200a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8011ffe:	2300      	movs	r3, #0
 8012000:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8012002:	2301      	movs	r3, #1
 8012004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012008:	bf00      	nop
    }

    if (pclk != 0U)
 801200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d021      	beq.n	8012054 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012010:	697b      	ldr	r3, [r7, #20]
 8012012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012014:	4a1d      	ldr	r2, [pc, #116]	; (801208c <UART_SetConfig+0xacc>)
 8012016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801201a:	461a      	mov	r2, r3
 801201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801201e:	fbb3 f2f2 	udiv	r2, r3, r2
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	685b      	ldr	r3, [r3, #4]
 8012026:	085b      	lsrs	r3, r3, #1
 8012028:	441a      	add	r2, r3
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	685b      	ldr	r3, [r3, #4]
 801202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012032:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012036:	2b0f      	cmp	r3, #15
 8012038:	d909      	bls.n	801204e <UART_SetConfig+0xa8e>
 801203a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012040:	d205      	bcs.n	801204e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012044:	b29a      	uxth	r2, r3
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	60da      	str	r2, [r3, #12]
 801204c:	e002      	b.n	8012054 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801204e:	2301      	movs	r3, #1
 8012050:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	2201      	movs	r2, #1
 8012058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	2201      	movs	r2, #1
 8012060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012064:	697b      	ldr	r3, [r7, #20]
 8012066:	2200      	movs	r2, #0
 8012068:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	2200      	movs	r2, #0
 801206e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012070:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8012074:	4618      	mov	r0, r3
 8012076:	3748      	adds	r7, #72	; 0x48
 8012078:	46bd      	mov	sp, r7
 801207a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801207e:	bf00      	nop
 8012080:	58024400 	.word	0x58024400
 8012084:	03d09000 	.word	0x03d09000
 8012088:	003d0900 	.word	0x003d0900
 801208c:	0801d3e0 	.word	0x0801d3e0

08012090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801209c:	f003 0301 	and.w	r3, r3, #1
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00a      	beq.n	80120ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	430a      	orrs	r2, r1
 80120b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120be:	f003 0302 	and.w	r3, r3, #2
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d00a      	beq.n	80120dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	430a      	orrs	r2, r1
 80120da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120e0:	f003 0304 	and.w	r3, r3, #4
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d00a      	beq.n	80120fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	430a      	orrs	r2, r1
 80120fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012102:	f003 0308 	and.w	r3, r3, #8
 8012106:	2b00      	cmp	r3, #0
 8012108:	d00a      	beq.n	8012120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	430a      	orrs	r2, r1
 801211e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012124:	f003 0310 	and.w	r3, r3, #16
 8012128:	2b00      	cmp	r3, #0
 801212a:	d00a      	beq.n	8012142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	689b      	ldr	r3, [r3, #8]
 8012132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	430a      	orrs	r2, r1
 8012140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012146:	f003 0320 	and.w	r3, r3, #32
 801214a:	2b00      	cmp	r3, #0
 801214c:	d00a      	beq.n	8012164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	689b      	ldr	r3, [r3, #8]
 8012154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	430a      	orrs	r2, r1
 8012162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801216c:	2b00      	cmp	r3, #0
 801216e:	d01a      	beq.n	80121a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	430a      	orrs	r2, r1
 8012184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801218a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801218e:	d10a      	bne.n	80121a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	685b      	ldr	r3, [r3, #4]
 8012196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	430a      	orrs	r2, r1
 80121a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00a      	beq.n	80121c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	685b      	ldr	r3, [r3, #4]
 80121b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	430a      	orrs	r2, r1
 80121c6:	605a      	str	r2, [r3, #4]
  }
}
 80121c8:	bf00      	nop
 80121ca:	370c      	adds	r7, #12
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr

080121d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b086      	sub	sp, #24
 80121d8:	af02      	add	r7, sp, #8
 80121da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80121e4:	f7f2 f9a6 	bl	8004534 <HAL_GetTick>
 80121e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f003 0308 	and.w	r3, r3, #8
 80121f4:	2b08      	cmp	r3, #8
 80121f6:	d10e      	bne.n	8012216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80121f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80121fc:	9300      	str	r3, [sp, #0]
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2200      	movs	r2, #0
 8012202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 f82f 	bl	801226a <UART_WaitOnFlagUntilTimeout>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d001      	beq.n	8012216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012212:	2303      	movs	r3, #3
 8012214:	e025      	b.n	8012262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	f003 0304 	and.w	r3, r3, #4
 8012220:	2b04      	cmp	r3, #4
 8012222:	d10e      	bne.n	8012242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012228:	9300      	str	r3, [sp, #0]
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2200      	movs	r2, #0
 801222e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 f819 	bl	801226a <UART_WaitOnFlagUntilTimeout>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d001      	beq.n	8012242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801223e:	2303      	movs	r3, #3
 8012240:	e00f      	b.n	8012262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	2220      	movs	r2, #32
 8012246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2220      	movs	r2, #32
 801224e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2200      	movs	r2, #0
 8012256:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2200      	movs	r2, #0
 801225c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012260:	2300      	movs	r3, #0
}
 8012262:	4618      	mov	r0, r3
 8012264:	3710      	adds	r7, #16
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801226a:	b580      	push	{r7, lr}
 801226c:	b09c      	sub	sp, #112	; 0x70
 801226e:	af00      	add	r7, sp, #0
 8012270:	60f8      	str	r0, [r7, #12]
 8012272:	60b9      	str	r1, [r7, #8]
 8012274:	603b      	str	r3, [r7, #0]
 8012276:	4613      	mov	r3, r2
 8012278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801227a:	e0a9      	b.n	80123d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801227c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801227e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012282:	f000 80a5 	beq.w	80123d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012286:	f7f2 f955 	bl	8004534 <HAL_GetTick>
 801228a:	4602      	mov	r2, r0
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	1ad3      	subs	r3, r2, r3
 8012290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012292:	429a      	cmp	r2, r3
 8012294:	d302      	bcc.n	801229c <UART_WaitOnFlagUntilTimeout+0x32>
 8012296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012298:	2b00      	cmp	r3, #0
 801229a:	d140      	bne.n	801231e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a4:	e853 3f00 	ldrex	r3, [r3]
 80122a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80122aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80122b0:	667b      	str	r3, [r7, #100]	; 0x64
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	461a      	mov	r2, r3
 80122b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80122ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80122bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80122c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80122c2:	e841 2300 	strex	r3, r2, [r1]
 80122c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80122c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d1e6      	bne.n	801229c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	3308      	adds	r3, #8
 80122d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122d8:	e853 3f00 	ldrex	r3, [r3]
 80122dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122e0:	f023 0301 	bic.w	r3, r3, #1
 80122e4:	663b      	str	r3, [r7, #96]	; 0x60
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3308      	adds	r3, #8
 80122ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80122f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80122f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122f6:	e841 2300 	strex	r3, r2, [r1]
 80122fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80122fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1e5      	bne.n	80122ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2220      	movs	r2, #32
 8012306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	2220      	movs	r2, #32
 801230e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	2200      	movs	r2, #0
 8012316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801231a:	2303      	movs	r3, #3
 801231c:	e069      	b.n	80123f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	f003 0304 	and.w	r3, r3, #4
 8012328:	2b00      	cmp	r3, #0
 801232a:	d051      	beq.n	80123d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	69db      	ldr	r3, [r3, #28]
 8012332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801233a:	d149      	bne.n	80123d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012344:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	e853 3f00 	ldrex	r3, [r3]
 8012352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801235a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	461a      	mov	r2, r3
 8012362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012364:	637b      	str	r3, [r7, #52]	; 0x34
 8012366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801236a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801236c:	e841 2300 	strex	r3, r2, [r1]
 8012370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1e6      	bne.n	8012346 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	3308      	adds	r3, #8
 801237e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	e853 3f00 	ldrex	r3, [r3]
 8012386:	613b      	str	r3, [r7, #16]
   return(result);
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	f023 0301 	bic.w	r3, r3, #1
 801238e:	66bb      	str	r3, [r7, #104]	; 0x68
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	3308      	adds	r3, #8
 8012396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012398:	623a      	str	r2, [r7, #32]
 801239a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801239c:	69f9      	ldr	r1, [r7, #28]
 801239e:	6a3a      	ldr	r2, [r7, #32]
 80123a0:	e841 2300 	strex	r3, r2, [r1]
 80123a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80123a6:	69bb      	ldr	r3, [r7, #24]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d1e5      	bne.n	8012378 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2220      	movs	r2, #32
 80123b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2220      	movs	r2, #32
 80123b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2220      	movs	r2, #32
 80123c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2200      	movs	r2, #0
 80123c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80123cc:	2303      	movs	r3, #3
 80123ce:	e010      	b.n	80123f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	69da      	ldr	r2, [r3, #28]
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	4013      	ands	r3, r2
 80123da:	68ba      	ldr	r2, [r7, #8]
 80123dc:	429a      	cmp	r2, r3
 80123de:	bf0c      	ite	eq
 80123e0:	2301      	moveq	r3, #1
 80123e2:	2300      	movne	r3, #0
 80123e4:	b2db      	uxtb	r3, r3
 80123e6:	461a      	mov	r2, r3
 80123e8:	79fb      	ldrb	r3, [r7, #7]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	f43f af46 	beq.w	801227c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80123f0:	2300      	movs	r3, #0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3770      	adds	r7, #112	; 0x70
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}

080123fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80123fa:	b480      	push	{r7}
 80123fc:	b085      	sub	sp, #20
 80123fe:	af00      	add	r7, sp, #0
 8012400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012408:	2b01      	cmp	r3, #1
 801240a:	d101      	bne.n	8012410 <HAL_UARTEx_DisableFifoMode+0x16>
 801240c:	2302      	movs	r3, #2
 801240e:	e027      	b.n	8012460 <HAL_UARTEx_DisableFifoMode+0x66>
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2201      	movs	r2, #1
 8012414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2224      	movs	r2, #36	; 0x24
 801241c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	681a      	ldr	r2, [r3, #0]
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f022 0201 	bic.w	r2, r2, #1
 8012436:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801243e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	68fa      	ldr	r2, [r7, #12]
 801244c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2220      	movs	r2, #32
 8012452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2200      	movs	r2, #0
 801245a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3714      	adds	r7, #20
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801247c:	2b01      	cmp	r3, #1
 801247e:	d101      	bne.n	8012484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012480:	2302      	movs	r3, #2
 8012482:	e02d      	b.n	80124e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2201      	movs	r2, #1
 8012488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2224      	movs	r2, #36	; 0x24
 8012490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f022 0201 	bic.w	r2, r2, #1
 80124aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	689b      	ldr	r3, [r3, #8]
 80124b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	430a      	orrs	r2, r1
 80124be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 f84f 	bl	8012564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	68fa      	ldr	r2, [r7, #12]
 80124cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	2220      	movs	r2, #32
 80124d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	2200      	movs	r2, #0
 80124da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80124de:	2300      	movs	r3, #0
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b084      	sub	sp, #16
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d101      	bne.n	8012500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80124fc:	2302      	movs	r3, #2
 80124fe:	e02d      	b.n	801255c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2201      	movs	r2, #1
 8012504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2224      	movs	r2, #36	; 0x24
 801250c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	681a      	ldr	r2, [r3, #0]
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	f022 0201 	bic.w	r2, r2, #1
 8012526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	689b      	ldr	r3, [r3, #8]
 801252e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	430a      	orrs	r2, r1
 801253a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	f000 f811 	bl	8012564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	68fa      	ldr	r2, [r7, #12]
 8012548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2220      	movs	r2, #32
 801254e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012564:	b480      	push	{r7}
 8012566:	b085      	sub	sp, #20
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012570:	2b00      	cmp	r3, #0
 8012572:	d108      	bne.n	8012586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2201      	movs	r2, #1
 8012578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2201      	movs	r2, #1
 8012580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012584:	e031      	b.n	80125ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012586:	2310      	movs	r3, #16
 8012588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801258a:	2310      	movs	r3, #16
 801258c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	689b      	ldr	r3, [r3, #8]
 8012594:	0e5b      	lsrs	r3, r3, #25
 8012596:	b2db      	uxtb	r3, r3
 8012598:	f003 0307 	and.w	r3, r3, #7
 801259c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	689b      	ldr	r3, [r3, #8]
 80125a4:	0f5b      	lsrs	r3, r3, #29
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	f003 0307 	and.w	r3, r3, #7
 80125ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80125ae:	7bbb      	ldrb	r3, [r7, #14]
 80125b0:	7b3a      	ldrb	r2, [r7, #12]
 80125b2:	4911      	ldr	r1, [pc, #68]	; (80125f8 <UARTEx_SetNbDataToProcess+0x94>)
 80125b4:	5c8a      	ldrb	r2, [r1, r2]
 80125b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80125ba:	7b3a      	ldrb	r2, [r7, #12]
 80125bc:	490f      	ldr	r1, [pc, #60]	; (80125fc <UARTEx_SetNbDataToProcess+0x98>)
 80125be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80125c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80125cc:	7bfb      	ldrb	r3, [r7, #15]
 80125ce:	7b7a      	ldrb	r2, [r7, #13]
 80125d0:	4909      	ldr	r1, [pc, #36]	; (80125f8 <UARTEx_SetNbDataToProcess+0x94>)
 80125d2:	5c8a      	ldrb	r2, [r1, r2]
 80125d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80125d8:	7b7a      	ldrb	r2, [r7, #13]
 80125da:	4908      	ldr	r1, [pc, #32]	; (80125fc <UARTEx_SetNbDataToProcess+0x98>)
 80125dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80125de:	fb93 f3f2 	sdiv	r3, r3, r2
 80125e2:	b29a      	uxth	r2, r3
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80125ea:	bf00      	nop
 80125ec:	3714      	adds	r7, #20
 80125ee:	46bd      	mov	sp, r7
 80125f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f4:	4770      	bx	lr
 80125f6:	bf00      	nop
 80125f8:	0801d3f8 	.word	0x0801d3f8
 80125fc:	0801d400 	.word	0x0801d400

08012600 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012600:	b084      	sub	sp, #16
 8012602:	b480      	push	{r7}
 8012604:	b085      	sub	sp, #20
 8012606:	af00      	add	r7, sp, #0
 8012608:	6078      	str	r0, [r7, #4]
 801260a:	f107 001c 	add.w	r0, r7, #28
 801260e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012612:	2300      	movs	r3, #0
 8012614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012616:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012618:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801261a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801261e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012620:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012622:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012626:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012628:	68fa      	ldr	r2, [r7, #12]
 801262a:	4313      	orrs	r3, r2
 801262c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	685a      	ldr	r2, [r3, #4]
 8012632:	4b07      	ldr	r3, [pc, #28]	; (8012650 <SDMMC_Init+0x50>)
 8012634:	4013      	ands	r3, r2
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	431a      	orrs	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3714      	adds	r7, #20
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	b004      	add	sp, #16
 801264c:	4770      	bx	lr
 801264e:	bf00      	nop
 8012650:	ffc02c00 	.word	0xffc02c00

08012654 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012654:	b480      	push	{r7}
 8012656:	b083      	sub	sp, #12
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012662:	4618      	mov	r0, r3
 8012664:	370c      	adds	r7, #12
 8012666:	46bd      	mov	sp, r7
 8012668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266c:	4770      	bx	lr

0801266e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801266e:	b480      	push	{r7}
 8012670:	b083      	sub	sp, #12
 8012672:	af00      	add	r7, sp, #0
 8012674:	6078      	str	r0, [r7, #4]
 8012676:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	f043 0203 	orr.w	r2, r3, #3
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80126a4:	2300      	movs	r3, #0
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	370c      	adds	r7, #12
 80126aa:	46bd      	mov	sp, r7
 80126ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b0:	4770      	bx	lr

080126b2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80126b2:	b480      	push	{r7}
 80126b4:	b083      	sub	sp, #12
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	f003 0303 	and.w	r3, r3, #3
}
 80126c2:	4618      	mov	r0, r3
 80126c4:	370c      	adds	r7, #12
 80126c6:	46bd      	mov	sp, r7
 80126c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126cc:	4770      	bx	lr
	...

080126d0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
 80126d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80126da:	2300      	movs	r3, #0
 80126dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80126ee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80126f4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80126fa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80126fc:	68fa      	ldr	r2, [r7, #12]
 80126fe:	4313      	orrs	r3, r2
 8012700:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68da      	ldr	r2, [r3, #12]
 8012706:	4b06      	ldr	r3, [pc, #24]	; (8012720 <SDMMC_SendCommand+0x50>)
 8012708:	4013      	ands	r3, r2
 801270a:	68fa      	ldr	r2, [r7, #12]
 801270c:	431a      	orrs	r2, r3
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012712:	2300      	movs	r3, #0
}
 8012714:	4618      	mov	r0, r3
 8012716:	3714      	adds	r7, #20
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr
 8012720:	fffee0c0 	.word	0xfffee0c0

08012724 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	691b      	ldr	r3, [r3, #16]
 8012730:	b2db      	uxtb	r3, r3
}
 8012732:	4618      	mov	r0, r3
 8012734:	370c      	adds	r7, #12
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801273e:	b480      	push	{r7}
 8012740:	b085      	sub	sp, #20
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	3314      	adds	r3, #20
 801274c:	461a      	mov	r2, r3
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	4413      	add	r3, r2
 8012752:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
}
 8012758:	4618      	mov	r0, r3
 801275a:	3714      	adds	r7, #20
 801275c:	46bd      	mov	sp, r7
 801275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012762:	4770      	bx	lr

08012764 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012764:	b480      	push	{r7}
 8012766:	b085      	sub	sp, #20
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801276e:	2300      	movs	r3, #0
 8012770:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	685a      	ldr	r2, [r3, #4]
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012782:	683b      	ldr	r3, [r7, #0]
 8012784:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801278a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012790:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012796:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012798:	68fa      	ldr	r2, [r7, #12]
 801279a:	4313      	orrs	r3, r2
 801279c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	431a      	orrs	r2, r3
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80127ae:	2300      	movs	r3, #0

}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3714      	adds	r7, #20
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b088      	sub	sp, #32
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80127c6:	683b      	ldr	r3, [r7, #0]
 80127c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80127ca:	2310      	movs	r3, #16
 80127cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127d4:	2300      	movs	r3, #0
 80127d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127de:	f107 0308 	add.w	r3, r7, #8
 80127e2:	4619      	mov	r1, r3
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f7ff ff73 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80127ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80127ee:	2110      	movs	r1, #16
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f000 fa5f 	bl	8012cb4 <SDMMC_GetCmdResp1>
 80127f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127f8:	69fb      	ldr	r3, [r7, #28]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3720      	adds	r7, #32
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}

08012802 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012802:	b580      	push	{r7, lr}
 8012804:	b088      	sub	sp, #32
 8012806:	af00      	add	r7, sp, #0
 8012808:	6078      	str	r0, [r7, #4]
 801280a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801280c:	683b      	ldr	r3, [r7, #0]
 801280e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012810:	2311      	movs	r3, #17
 8012812:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012818:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801281a:	2300      	movs	r3, #0
 801281c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801281e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012822:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012824:	f107 0308 	add.w	r3, r7, #8
 8012828:	4619      	mov	r1, r3
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7ff ff50 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012830:	f241 3288 	movw	r2, #5000	; 0x1388
 8012834:	2111      	movs	r1, #17
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 fa3c 	bl	8012cb4 <SDMMC_GetCmdResp1>
 801283c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801283e:	69fb      	ldr	r3, [r7, #28]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3720      	adds	r7, #32
 8012844:	46bd      	mov	sp, r7
 8012846:	bd80      	pop	{r7, pc}

08012848 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012848:	b580      	push	{r7, lr}
 801284a:	b088      	sub	sp, #32
 801284c:	af00      	add	r7, sp, #0
 801284e:	6078      	str	r0, [r7, #4]
 8012850:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012856:	2312      	movs	r3, #18
 8012858:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801285a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801285e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012860:	2300      	movs	r3, #0
 8012862:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012868:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801286a:	f107 0308 	add.w	r3, r7, #8
 801286e:	4619      	mov	r1, r3
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff ff2d 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012876:	f241 3288 	movw	r2, #5000	; 0x1388
 801287a:	2112      	movs	r1, #18
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f000 fa19 	bl	8012cb4 <SDMMC_GetCmdResp1>
 8012882:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012884:	69fb      	ldr	r3, [r7, #28]
}
 8012886:	4618      	mov	r0, r3
 8012888:	3720      	adds	r7, #32
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}

0801288e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801288e:	b580      	push	{r7, lr}
 8012890:	b088      	sub	sp, #32
 8012892:	af00      	add	r7, sp, #0
 8012894:	6078      	str	r0, [r7, #4]
 8012896:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801289c:	2318      	movs	r3, #24
 801289e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128a6:	2300      	movs	r3, #0
 80128a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128b0:	f107 0308 	add.w	r3, r7, #8
 80128b4:	4619      	mov	r1, r3
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7ff ff0a 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80128bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80128c0:	2118      	movs	r1, #24
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f000 f9f6 	bl	8012cb4 <SDMMC_GetCmdResp1>
 80128c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128ca:	69fb      	ldr	r3, [r7, #28]
}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3720      	adds	r7, #32
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b088      	sub	sp, #32
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80128e2:	2319      	movs	r3, #25
 80128e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128ec:	2300      	movs	r3, #0
 80128ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128f6:	f107 0308 	add.w	r3, r7, #8
 80128fa:	4619      	mov	r1, r3
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7ff fee7 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012902:	f241 3288 	movw	r2, #5000	; 0x1388
 8012906:	2119      	movs	r1, #25
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 f9d3 	bl	8012cb4 <SDMMC_GetCmdResp1>
 801290e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012910:	69fb      	ldr	r3, [r7, #28]
}
 8012912:	4618      	mov	r0, r3
 8012914:	3720      	adds	r7, #32
 8012916:	46bd      	mov	sp, r7
 8012918:	bd80      	pop	{r7, pc}
	...

0801291c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b088      	sub	sp, #32
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012924:	2300      	movs	r3, #0
 8012926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012928:	230c      	movs	r3, #12
 801292a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801292c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012932:	2300      	movs	r3, #0
 8012934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801293a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68db      	ldr	r3, [r3, #12]
 8012940:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	68db      	ldr	r3, [r3, #12]
 801294c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012954:	f107 0308 	add.w	r3, r7, #8
 8012958:	4619      	mov	r1, r3
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f7ff feb8 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012960:	4a0b      	ldr	r2, [pc, #44]	; (8012990 <SDMMC_CmdStopTransfer+0x74>)
 8012962:	210c      	movs	r1, #12
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f000 f9a5 	bl	8012cb4 <SDMMC_GetCmdResp1>
 801296a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801297e:	d101      	bne.n	8012984 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012980:	2300      	movs	r3, #0
 8012982:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012984:	69fb      	ldr	r3, [r7, #28]
}
 8012986:	4618      	mov	r0, r3
 8012988:	3720      	adds	r7, #32
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	05f5e100 	.word	0x05f5e100

08012994 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b088      	sub	sp, #32
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
 801299c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80129a2:	2307      	movs	r3, #7
 80129a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129ac:	2300      	movs	r3, #0
 80129ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129b6:	f107 0308 	add.w	r3, r7, #8
 80129ba:	4619      	mov	r1, r3
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f7ff fe87 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80129c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80129c6:	2107      	movs	r1, #7
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f000 f973 	bl	8012cb4 <SDMMC_GetCmdResp1>
 80129ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129d0:	69fb      	ldr	r3, [r7, #28]
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	3720      	adds	r7, #32
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}

080129da <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80129da:	b580      	push	{r7, lr}
 80129dc:	b088      	sub	sp, #32
 80129de:	af00      	add	r7, sp, #0
 80129e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80129e2:	2300      	movs	r3, #0
 80129e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80129e6:	2300      	movs	r3, #0
 80129e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80129ea:	2300      	movs	r3, #0
 80129ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129ee:	2300      	movs	r3, #0
 80129f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129f8:	f107 0308 	add.w	r3, r7, #8
 80129fc:	4619      	mov	r1, r3
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7ff fe66 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f000 fb97 	bl	8013138 <SDMMC_GetCmdError>
 8012a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a0c:	69fb      	ldr	r3, [r7, #28]
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3720      	adds	r7, #32
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}

08012a16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b088      	sub	sp, #32
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012a1e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012a24:	2308      	movs	r3, #8
 8012a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a38:	f107 0308 	add.w	r3, r7, #8
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff fe46 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 fb29 	bl	801309c <SDMMC_GetCmdResp7>
 8012a4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a4c:	69fb      	ldr	r3, [r7, #28]
}
 8012a4e:	4618      	mov	r0, r3
 8012a50:	3720      	adds	r7, #32
 8012a52:	46bd      	mov	sp, r7
 8012a54:	bd80      	pop	{r7, pc}

08012a56 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a56:	b580      	push	{r7, lr}
 8012a58:	b088      	sub	sp, #32
 8012a5a:	af00      	add	r7, sp, #0
 8012a5c:	6078      	str	r0, [r7, #4]
 8012a5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012a64:	2337      	movs	r3, #55	; 0x37
 8012a66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a78:	f107 0308 	add.w	r3, r7, #8
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f7ff fe26 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a88:	2137      	movs	r1, #55	; 0x37
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f000 f912 	bl	8012cb4 <SDMMC_GetCmdResp1>
 8012a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a92:	69fb      	ldr	r3, [r7, #28]
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3720      	adds	r7, #32
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b088      	sub	sp, #32
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
 8012aa4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012aaa:	2329      	movs	r3, #41	; 0x29
 8012aac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012abc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012abe:	f107 0308 	add.w	r3, r7, #8
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f7ff fe03 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 fa2e 	bl	8012f2c <SDMMC_GetCmdResp3>
 8012ad0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ad2:	69fb      	ldr	r3, [r7, #28]
}
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	3720      	adds	r7, #32
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b088      	sub	sp, #32
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012aea:	2306      	movs	r3, #6
 8012aec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012af2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012af4:	2300      	movs	r3, #0
 8012af6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012afc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012afe:	f107 0308 	add.w	r3, r7, #8
 8012b02:	4619      	mov	r1, r3
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff fde3 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b0e:	2106      	movs	r1, #6
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f000 f8cf 	bl	8012cb4 <SDMMC_GetCmdResp1>
 8012b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b18:	69fb      	ldr	r3, [r7, #28]
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3720      	adds	r7, #32
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}

08012b22 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012b22:	b580      	push	{r7, lr}
 8012b24:	b088      	sub	sp, #32
 8012b26:	af00      	add	r7, sp, #0
 8012b28:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012b2e:	2333      	movs	r3, #51	; 0x33
 8012b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b42:	f107 0308 	add.w	r3, r7, #8
 8012b46:	4619      	mov	r1, r3
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff fdc1 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b52:	2133      	movs	r1, #51	; 0x33
 8012b54:	6878      	ldr	r0, [r7, #4]
 8012b56:	f000 f8ad 	bl	8012cb4 <SDMMC_GetCmdResp1>
 8012b5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b5c:	69fb      	ldr	r3, [r7, #28]
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3720      	adds	r7, #32
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b088      	sub	sp, #32
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012b72:	2302      	movs	r3, #2
 8012b74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012b7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b86:	f107 0308 	add.w	r3, r7, #8
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ff fd9f 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 f980 	bl	8012e98 <SDMMC_GetCmdResp2>
 8012b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b9a:	69fb      	ldr	r3, [r7, #28]
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3720      	adds	r7, #32
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b088      	sub	sp, #32
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012bae:	683b      	ldr	r3, [r7, #0]
 8012bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012bb2:	2309      	movs	r3, #9
 8012bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012bc6:	f107 0308 	add.w	r3, r7, #8
 8012bca:	4619      	mov	r1, r3
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff fd7f 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f000 f960 	bl	8012e98 <SDMMC_GetCmdResp2>
 8012bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bda:	69fb      	ldr	r3, [r7, #28]
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3720      	adds	r7, #32
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b088      	sub	sp, #32
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012bf2:	2303      	movs	r3, #3
 8012bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c06:	f107 0308 	add.w	r3, r7, #8
 8012c0a:	4619      	mov	r1, r3
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f7ff fd5f 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012c12:	683a      	ldr	r2, [r7, #0]
 8012c14:	2103      	movs	r1, #3
 8012c16:	6878      	ldr	r0, [r7, #4]
 8012c18:	f000 f9c8 	bl	8012fac <SDMMC_GetCmdResp6>
 8012c1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c1e:	69fb      	ldr	r3, [r7, #28]
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3720      	adds	r7, #32
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b088      	sub	sp, #32
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012c36:	230d      	movs	r3, #13
 8012c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c40:	2300      	movs	r3, #0
 8012c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c4a:	f107 0308 	add.w	r3, r7, #8
 8012c4e:	4619      	mov	r1, r3
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f7ff fd3d 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c5a:	210d      	movs	r1, #13
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f000 f829 	bl	8012cb4 <SDMMC_GetCmdResp1>
 8012c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012c64:	69fb      	ldr	r3, [r7, #28]
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3720      	adds	r7, #32
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b088      	sub	sp, #32
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012c76:	2300      	movs	r3, #0
 8012c78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012c7a:	230d      	movs	r3, #13
 8012c7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012c7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012c84:	2300      	movs	r3, #0
 8012c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012c8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012c8e:	f107 0308 	add.w	r3, r7, #8
 8012c92:	4619      	mov	r1, r3
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7ff fd1b 	bl	80126d0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c9e:	210d      	movs	r1, #13
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 f807 	bl	8012cb4 <SDMMC_GetCmdResp1>
 8012ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ca8:	69fb      	ldr	r3, [r7, #28]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3720      	adds	r7, #32
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
	...

08012cb4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b088      	sub	sp, #32
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	60f8      	str	r0, [r7, #12]
 8012cbc:	460b      	mov	r3, r1
 8012cbe:	607a      	str	r2, [r7, #4]
 8012cc0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012cc2:	4b70      	ldr	r3, [pc, #448]	; (8012e84 <SDMMC_GetCmdResp1+0x1d0>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	4a70      	ldr	r2, [pc, #448]	; (8012e88 <SDMMC_GetCmdResp1+0x1d4>)
 8012cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8012ccc:	0a5a      	lsrs	r2, r3, #9
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	fb02 f303 	mul.w	r3, r2, r3
 8012cd4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	1e5a      	subs	r2, r3, #1
 8012cda:	61fa      	str	r2, [r7, #28]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d102      	bne.n	8012ce6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ce0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ce4:	e0c9      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cea:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012cec:	69ba      	ldr	r2, [r7, #24]
 8012cee:	4b67      	ldr	r3, [pc, #412]	; (8012e8c <SDMMC_GetCmdResp1+0x1d8>)
 8012cf0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d0ef      	beq.n	8012cd6 <SDMMC_GetCmdResp1+0x22>
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d1ea      	bne.n	8012cd6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d04:	f003 0304 	and.w	r3, r3, #4
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d004      	beq.n	8012d16 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2204      	movs	r2, #4
 8012d10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d12:	2304      	movs	r3, #4
 8012d14:	e0b1      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d1a:	f003 0301 	and.w	r3, r3, #1
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d004      	beq.n	8012d2c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	2201      	movs	r2, #1
 8012d26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d28:	2301      	movs	r3, #1
 8012d2a:	e0a6      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	4a58      	ldr	r2, [pc, #352]	; (8012e90 <SDMMC_GetCmdResp1+0x1dc>)
 8012d30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012d32:	68f8      	ldr	r0, [r7, #12]
 8012d34:	f7ff fcf6 	bl	8012724 <SDMMC_GetCommandResponse>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	461a      	mov	r2, r3
 8012d3c:	7afb      	ldrb	r3, [r7, #11]
 8012d3e:	4293      	cmp	r3, r2
 8012d40:	d001      	beq.n	8012d46 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d42:	2301      	movs	r3, #1
 8012d44:	e099      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012d46:	2100      	movs	r1, #0
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f7ff fcf8 	bl	801273e <SDMMC_GetResponse>
 8012d4e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012d50:	697a      	ldr	r2, [r7, #20]
 8012d52:	4b50      	ldr	r3, [pc, #320]	; (8012e94 <SDMMC_GetCmdResp1+0x1e0>)
 8012d54:	4013      	ands	r3, r2
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d101      	bne.n	8012d5e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	e08d      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	da02      	bge.n	8012d6a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012d64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012d68:	e087      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d001      	beq.n	8012d78 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012d74:	2340      	movs	r3, #64	; 0x40
 8012d76:	e080      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d001      	beq.n	8012d86 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012d82:	2380      	movs	r3, #128	; 0x80
 8012d84:	e079      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d002      	beq.n	8012d96 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012d94:	e071      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012d96:	697b      	ldr	r3, [r7, #20]
 8012d98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d002      	beq.n	8012da6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012da4:	e069      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012da6:	697b      	ldr	r3, [r7, #20]
 8012da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d002      	beq.n	8012db6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012db4:	e061      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012dc4:	e059      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d002      	beq.n	8012dd6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dd4:	e051      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012dd6:	697b      	ldr	r3, [r7, #20]
 8012dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d002      	beq.n	8012de6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012de4:	e049      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d002      	beq.n	8012df6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012df0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012df4:	e041      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d002      	beq.n	8012e06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012e00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e04:	e039      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012e06:	697b      	ldr	r3, [r7, #20]
 8012e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012e10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012e14:	e031      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012e16:	697b      	ldr	r3, [r7, #20]
 8012e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d002      	beq.n	8012e26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012e20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012e24:	e029      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d002      	beq.n	8012e36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012e30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012e34:	e021      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d002      	beq.n	8012e46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012e40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012e44:	e019      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d002      	beq.n	8012e56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012e50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012e54:	e011      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012e60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012e64:	e009      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	f003 0308 	and.w	r3, r3, #8
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012e70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012e74:	e001      	b.n	8012e7a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	3720      	adds	r7, #32
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	bd80      	pop	{r7, pc}
 8012e82:	bf00      	nop
 8012e84:	24000000 	.word	0x24000000
 8012e88:	10624dd3 	.word	0x10624dd3
 8012e8c:	00200045 	.word	0x00200045
 8012e90:	002000c5 	.word	0x002000c5
 8012e94:	fdffe008 	.word	0xfdffe008

08012e98 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012e98:	b480      	push	{r7}
 8012e9a:	b085      	sub	sp, #20
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ea0:	4b1f      	ldr	r3, [pc, #124]	; (8012f20 <SDMMC_GetCmdResp2+0x88>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4a1f      	ldr	r2, [pc, #124]	; (8012f24 <SDMMC_GetCmdResp2+0x8c>)
 8012ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8012eaa:	0a5b      	lsrs	r3, r3, #9
 8012eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8012eb0:	fb02 f303 	mul.w	r3, r2, r3
 8012eb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	1e5a      	subs	r2, r3, #1
 8012eba:	60fa      	str	r2, [r7, #12]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d102      	bne.n	8012ec6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012ec4:	e026      	b.n	8012f14 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012eca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d0ef      	beq.n	8012eb6 <SDMMC_GetCmdResp2+0x1e>
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d1ea      	bne.n	8012eb6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ee4:	f003 0304 	and.w	r3, r3, #4
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d004      	beq.n	8012ef6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2204      	movs	r2, #4
 8012ef0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ef2:	2304      	movs	r3, #4
 8012ef4:	e00e      	b.n	8012f14 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012efa:	f003 0301 	and.w	r3, r3, #1
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d004      	beq.n	8012f0c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2201      	movs	r2, #1
 8012f06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f08:	2301      	movs	r3, #1
 8012f0a:	e003      	b.n	8012f14 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	4a06      	ldr	r2, [pc, #24]	; (8012f28 <SDMMC_GetCmdResp2+0x90>)
 8012f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012f12:	2300      	movs	r3, #0
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3714      	adds	r7, #20
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr
 8012f20:	24000000 	.word	0x24000000
 8012f24:	10624dd3 	.word	0x10624dd3
 8012f28:	002000c5 	.word	0x002000c5

08012f2c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012f34:	4b1a      	ldr	r3, [pc, #104]	; (8012fa0 <SDMMC_GetCmdResp3+0x74>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a1a      	ldr	r2, [pc, #104]	; (8012fa4 <SDMMC_GetCmdResp3+0x78>)
 8012f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012f3e:	0a5b      	lsrs	r3, r3, #9
 8012f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f44:	fb02 f303 	mul.w	r3, r2, r3
 8012f48:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	1e5a      	subs	r2, r3, #1
 8012f4e:	60fa      	str	r2, [r7, #12]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d102      	bne.n	8012f5a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012f58:	e01b      	b.n	8012f92 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f5e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d0ef      	beq.n	8012f4a <SDMMC_GetCmdResp3+0x1e>
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d1ea      	bne.n	8012f4a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f78:	f003 0304 	and.w	r3, r3, #4
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d004      	beq.n	8012f8a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2204      	movs	r2, #4
 8012f84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f86:	2304      	movs	r3, #4
 8012f88:	e003      	b.n	8012f92 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	4a06      	ldr	r2, [pc, #24]	; (8012fa8 <SDMMC_GetCmdResp3+0x7c>)
 8012f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012f90:	2300      	movs	r3, #0
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3714      	adds	r7, #20
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
 8012f9e:	bf00      	nop
 8012fa0:	24000000 	.word	0x24000000
 8012fa4:	10624dd3 	.word	0x10624dd3
 8012fa8:	002000c5 	.word	0x002000c5

08012fac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b088      	sub	sp, #32
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	60f8      	str	r0, [r7, #12]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	607a      	str	r2, [r7, #4]
 8012fb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012fba:	4b35      	ldr	r3, [pc, #212]	; (8013090 <SDMMC_GetCmdResp6+0xe4>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4a35      	ldr	r2, [pc, #212]	; (8013094 <SDMMC_GetCmdResp6+0xe8>)
 8012fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8012fc4:	0a5b      	lsrs	r3, r3, #9
 8012fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fca:	fb02 f303 	mul.w	r3, r2, r3
 8012fce:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	1e5a      	subs	r2, r3, #1
 8012fd4:	61fa      	str	r2, [r7, #28]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d102      	bne.n	8012fe0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012fda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012fde:	e052      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fe4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d0ef      	beq.n	8012fd0 <SDMMC_GetCmdResp6+0x24>
 8012ff0:	69bb      	ldr	r3, [r7, #24]
 8012ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d1ea      	bne.n	8012fd0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ffe:	f003 0304 	and.w	r3, r3, #4
 8013002:	2b00      	cmp	r3, #0
 8013004:	d004      	beq.n	8013010 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2204      	movs	r2, #4
 801300a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801300c:	2304      	movs	r3, #4
 801300e:	e03a      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013014:	f003 0301 	and.w	r3, r3, #1
 8013018:	2b00      	cmp	r3, #0
 801301a:	d004      	beq.n	8013026 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2201      	movs	r2, #1
 8013020:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013022:	2301      	movs	r3, #1
 8013024:	e02f      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f7ff fb7c 	bl	8012724 <SDMMC_GetCommandResponse>
 801302c:	4603      	mov	r3, r0
 801302e:	461a      	mov	r2, r3
 8013030:	7afb      	ldrb	r3, [r7, #11]
 8013032:	4293      	cmp	r3, r2
 8013034:	d001      	beq.n	801303a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013036:	2301      	movs	r3, #1
 8013038:	e025      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	4a16      	ldr	r2, [pc, #88]	; (8013098 <SDMMC_GetCmdResp6+0xec>)
 801303e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013040:	2100      	movs	r1, #0
 8013042:	68f8      	ldr	r0, [r7, #12]
 8013044:	f7ff fb7b 	bl	801273e <SDMMC_GetResponse>
 8013048:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013050:	2b00      	cmp	r3, #0
 8013052:	d106      	bne.n	8013062 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	0c1b      	lsrs	r3, r3, #16
 8013058:	b29a      	uxth	r2, r3
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801305e:	2300      	movs	r3, #0
 8013060:	e011      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013068:	2b00      	cmp	r3, #0
 801306a:	d002      	beq.n	8013072 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801306c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013070:	e009      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8013072:	697b      	ldr	r3, [r7, #20]
 8013074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013078:	2b00      	cmp	r3, #0
 801307a:	d002      	beq.n	8013082 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801307c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013080:	e001      	b.n	8013086 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8013082:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8013086:	4618      	mov	r0, r3
 8013088:	3720      	adds	r7, #32
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	24000000 	.word	0x24000000
 8013094:	10624dd3 	.word	0x10624dd3
 8013098:	002000c5 	.word	0x002000c5

0801309c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801309c:	b480      	push	{r7}
 801309e:	b085      	sub	sp, #20
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80130a4:	4b22      	ldr	r3, [pc, #136]	; (8013130 <SDMMC_GetCmdResp7+0x94>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	4a22      	ldr	r2, [pc, #136]	; (8013134 <SDMMC_GetCmdResp7+0x98>)
 80130aa:	fba2 2303 	umull	r2, r3, r2, r3
 80130ae:	0a5b      	lsrs	r3, r3, #9
 80130b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80130b4:	fb02 f303 	mul.w	r3, r2, r3
 80130b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	1e5a      	subs	r2, r3, #1
 80130be:	60fa      	str	r2, [r7, #12]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d102      	bne.n	80130ca <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80130c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80130c8:	e02c      	b.n	8013124 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130d0:	68bb      	ldr	r3, [r7, #8]
 80130d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d0ef      	beq.n	80130ba <SDMMC_GetCmdResp7+0x1e>
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d1ea      	bne.n	80130ba <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130e8:	f003 0304 	and.w	r3, r3, #4
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d004      	beq.n	80130fa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2204      	movs	r2, #4
 80130f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80130f6:	2304      	movs	r3, #4
 80130f8:	e014      	b.n	8013124 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130fe:	f003 0301 	and.w	r3, r3, #1
 8013102:	2b00      	cmp	r3, #0
 8013104:	d004      	beq.n	8013110 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2201      	movs	r2, #1
 801310a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801310c:	2301      	movs	r3, #1
 801310e:	e009      	b.n	8013124 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013118:	2b00      	cmp	r3, #0
 801311a:	d002      	beq.n	8013122 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	2240      	movs	r2, #64	; 0x40
 8013120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013122:	2300      	movs	r3, #0

}
 8013124:	4618      	mov	r0, r3
 8013126:	3714      	adds	r7, #20
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr
 8013130:	24000000 	.word	0x24000000
 8013134:	10624dd3 	.word	0x10624dd3

08013138 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013138:	b480      	push	{r7}
 801313a:	b085      	sub	sp, #20
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013140:	4b11      	ldr	r3, [pc, #68]	; (8013188 <SDMMC_GetCmdError+0x50>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	4a11      	ldr	r2, [pc, #68]	; (801318c <SDMMC_GetCmdError+0x54>)
 8013146:	fba2 2303 	umull	r2, r3, r2, r3
 801314a:	0a5b      	lsrs	r3, r3, #9
 801314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013150:	fb02 f303 	mul.w	r3, r2, r3
 8013154:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	1e5a      	subs	r2, r3, #1
 801315a:	60fa      	str	r2, [r7, #12]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d102      	bne.n	8013166 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013160:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013164:	e009      	b.n	801317a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801316e:	2b00      	cmp	r3, #0
 8013170:	d0f1      	beq.n	8013156 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	4a06      	ldr	r2, [pc, #24]	; (8013190 <SDMMC_GetCmdError+0x58>)
 8013176:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013178:	2300      	movs	r3, #0
}
 801317a:	4618      	mov	r0, r3
 801317c:	3714      	adds	r7, #20
 801317e:	46bd      	mov	sp, r7
 8013180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013184:	4770      	bx	lr
 8013186:	bf00      	nop
 8013188:	24000000 	.word	0x24000000
 801318c:	10624dd3 	.word	0x10624dd3
 8013190:	002000c5 	.word	0x002000c5

08013194 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013194:	b084      	sub	sp, #16
 8013196:	b580      	push	{r7, lr}
 8013198:	b084      	sub	sp, #16
 801319a:	af00      	add	r7, sp, #0
 801319c:	6078      	str	r0, [r7, #4]
 801319e:	f107 001c 	add.w	r0, r7, #28
 80131a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80131a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d120      	bne.n	80131ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	68da      	ldr	r2, [r3, #12]
 80131bc:	4b2a      	ldr	r3, [pc, #168]	; (8013268 <USB_CoreInit+0xd4>)
 80131be:	4013      	ands	r3, r2
 80131c0:	687a      	ldr	r2, [r7, #4]
 80131c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	68db      	ldr	r3, [r3, #12]
 80131c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80131d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80131d2:	2b01      	cmp	r3, #1
 80131d4:	d105      	bne.n	80131e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f001 fc04 	bl	80149f0 <USB_CoreReset>
 80131e8:	4603      	mov	r3, r0
 80131ea:	73fb      	strb	r3, [r7, #15]
 80131ec:	e01a      	b.n	8013224 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f001 fbf8 	bl	80149f0 <USB_CoreReset>
 8013200:	4603      	mov	r3, r0
 8013202:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013206:	2b00      	cmp	r3, #0
 8013208:	d106      	bne.n	8013218 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801320e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	639a      	str	r2, [r3, #56]	; 0x38
 8013216:	e005      	b.n	8013224 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801321c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013226:	2b01      	cmp	r3, #1
 8013228:	d116      	bne.n	8013258 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801322e:	b29a      	uxth	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013238:	4b0c      	ldr	r3, [pc, #48]	; (801326c <USB_CoreInit+0xd8>)
 801323a:	4313      	orrs	r3, r2
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	689b      	ldr	r3, [r3, #8]
 8013244:	f043 0206 	orr.w	r2, r3, #6
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	689b      	ldr	r3, [r3, #8]
 8013250:	f043 0220 	orr.w	r2, r3, #32
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013258:	7bfb      	ldrb	r3, [r7, #15]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013264:	b004      	add	sp, #16
 8013266:	4770      	bx	lr
 8013268:	ffbdffbf 	.word	0xffbdffbf
 801326c:	03ee0000 	.word	0x03ee0000

08013270 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013270:	b480      	push	{r7}
 8013272:	b087      	sub	sp, #28
 8013274:	af00      	add	r7, sp, #0
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	4613      	mov	r3, r2
 801327c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801327e:	79fb      	ldrb	r3, [r7, #7]
 8013280:	2b02      	cmp	r3, #2
 8013282:	d165      	bne.n	8013350 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	4a41      	ldr	r2, [pc, #260]	; (801338c <USB_SetTurnaroundTime+0x11c>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d906      	bls.n	801329a <USB_SetTurnaroundTime+0x2a>
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	4a40      	ldr	r2, [pc, #256]	; (8013390 <USB_SetTurnaroundTime+0x120>)
 8013290:	4293      	cmp	r3, r2
 8013292:	d202      	bcs.n	801329a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013294:	230f      	movs	r3, #15
 8013296:	617b      	str	r3, [r7, #20]
 8013298:	e062      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801329a:	68bb      	ldr	r3, [r7, #8]
 801329c:	4a3c      	ldr	r2, [pc, #240]	; (8013390 <USB_SetTurnaroundTime+0x120>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d306      	bcc.n	80132b0 <USB_SetTurnaroundTime+0x40>
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	4a3b      	ldr	r2, [pc, #236]	; (8013394 <USB_SetTurnaroundTime+0x124>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d202      	bcs.n	80132b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80132aa:	230e      	movs	r3, #14
 80132ac:	617b      	str	r3, [r7, #20]
 80132ae:	e057      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	4a38      	ldr	r2, [pc, #224]	; (8013394 <USB_SetTurnaroundTime+0x124>)
 80132b4:	4293      	cmp	r3, r2
 80132b6:	d306      	bcc.n	80132c6 <USB_SetTurnaroundTime+0x56>
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	4a37      	ldr	r2, [pc, #220]	; (8013398 <USB_SetTurnaroundTime+0x128>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d202      	bcs.n	80132c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80132c0:	230d      	movs	r3, #13
 80132c2:	617b      	str	r3, [r7, #20]
 80132c4:	e04c      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	4a33      	ldr	r2, [pc, #204]	; (8013398 <USB_SetTurnaroundTime+0x128>)
 80132ca:	4293      	cmp	r3, r2
 80132cc:	d306      	bcc.n	80132dc <USB_SetTurnaroundTime+0x6c>
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	4a32      	ldr	r2, [pc, #200]	; (801339c <USB_SetTurnaroundTime+0x12c>)
 80132d2:	4293      	cmp	r3, r2
 80132d4:	d802      	bhi.n	80132dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80132d6:	230c      	movs	r3, #12
 80132d8:	617b      	str	r3, [r7, #20]
 80132da:	e041      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	4a2f      	ldr	r2, [pc, #188]	; (801339c <USB_SetTurnaroundTime+0x12c>)
 80132e0:	4293      	cmp	r3, r2
 80132e2:	d906      	bls.n	80132f2 <USB_SetTurnaroundTime+0x82>
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	4a2e      	ldr	r2, [pc, #184]	; (80133a0 <USB_SetTurnaroundTime+0x130>)
 80132e8:	4293      	cmp	r3, r2
 80132ea:	d802      	bhi.n	80132f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80132ec:	230b      	movs	r3, #11
 80132ee:	617b      	str	r3, [r7, #20]
 80132f0:	e036      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	4a2a      	ldr	r2, [pc, #168]	; (80133a0 <USB_SetTurnaroundTime+0x130>)
 80132f6:	4293      	cmp	r3, r2
 80132f8:	d906      	bls.n	8013308 <USB_SetTurnaroundTime+0x98>
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	4a29      	ldr	r2, [pc, #164]	; (80133a4 <USB_SetTurnaroundTime+0x134>)
 80132fe:	4293      	cmp	r3, r2
 8013300:	d802      	bhi.n	8013308 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013302:	230a      	movs	r3, #10
 8013304:	617b      	str	r3, [r7, #20]
 8013306:	e02b      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	4a26      	ldr	r2, [pc, #152]	; (80133a4 <USB_SetTurnaroundTime+0x134>)
 801330c:	4293      	cmp	r3, r2
 801330e:	d906      	bls.n	801331e <USB_SetTurnaroundTime+0xae>
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	4a25      	ldr	r2, [pc, #148]	; (80133a8 <USB_SetTurnaroundTime+0x138>)
 8013314:	4293      	cmp	r3, r2
 8013316:	d202      	bcs.n	801331e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013318:	2309      	movs	r3, #9
 801331a:	617b      	str	r3, [r7, #20]
 801331c:	e020      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	4a21      	ldr	r2, [pc, #132]	; (80133a8 <USB_SetTurnaroundTime+0x138>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d306      	bcc.n	8013334 <USB_SetTurnaroundTime+0xc4>
 8013326:	68bb      	ldr	r3, [r7, #8]
 8013328:	4a20      	ldr	r2, [pc, #128]	; (80133ac <USB_SetTurnaroundTime+0x13c>)
 801332a:	4293      	cmp	r3, r2
 801332c:	d802      	bhi.n	8013334 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801332e:	2308      	movs	r3, #8
 8013330:	617b      	str	r3, [r7, #20]
 8013332:	e015      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	4a1d      	ldr	r2, [pc, #116]	; (80133ac <USB_SetTurnaroundTime+0x13c>)
 8013338:	4293      	cmp	r3, r2
 801333a:	d906      	bls.n	801334a <USB_SetTurnaroundTime+0xda>
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	4a1c      	ldr	r2, [pc, #112]	; (80133b0 <USB_SetTurnaroundTime+0x140>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d202      	bcs.n	801334a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013344:	2307      	movs	r3, #7
 8013346:	617b      	str	r3, [r7, #20]
 8013348:	e00a      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801334a:	2306      	movs	r3, #6
 801334c:	617b      	str	r3, [r7, #20]
 801334e:	e007      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013350:	79fb      	ldrb	r3, [r7, #7]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d102      	bne.n	801335c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013356:	2309      	movs	r3, #9
 8013358:	617b      	str	r3, [r7, #20]
 801335a:	e001      	b.n	8013360 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801335c:	2309      	movs	r3, #9
 801335e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	68db      	ldr	r3, [r3, #12]
 8013364:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	68da      	ldr	r2, [r3, #12]
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	029b      	lsls	r3, r3, #10
 8013374:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013378:	431a      	orrs	r2, r3
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801337e:	2300      	movs	r3, #0
}
 8013380:	4618      	mov	r0, r3
 8013382:	371c      	adds	r7, #28
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr
 801338c:	00d8acbf 	.word	0x00d8acbf
 8013390:	00e4e1c0 	.word	0x00e4e1c0
 8013394:	00f42400 	.word	0x00f42400
 8013398:	01067380 	.word	0x01067380
 801339c:	011a499f 	.word	0x011a499f
 80133a0:	01312cff 	.word	0x01312cff
 80133a4:	014ca43f 	.word	0x014ca43f
 80133a8:	016e3600 	.word	0x016e3600
 80133ac:	01a6ab1f 	.word	0x01a6ab1f
 80133b0:	01e84800 	.word	0x01e84800

080133b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80133b4:	b480      	push	{r7}
 80133b6:	b083      	sub	sp, #12
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	689b      	ldr	r3, [r3, #8]
 80133c0:	f043 0201 	orr.w	r2, r3, #1
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80133c8:	2300      	movs	r3, #0
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	370c      	adds	r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d4:	4770      	bx	lr

080133d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80133d6:	b480      	push	{r7}
 80133d8:	b083      	sub	sp, #12
 80133da:	af00      	add	r7, sp, #0
 80133dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	689b      	ldr	r3, [r3, #8]
 80133e2:	f023 0201 	bic.w	r2, r3, #1
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80133ea:	2300      	movs	r3, #0
}
 80133ec:	4618      	mov	r0, r3
 80133ee:	370c      	adds	r7, #12
 80133f0:	46bd      	mov	sp, r7
 80133f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f6:	4770      	bx	lr

080133f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	460b      	mov	r3, r1
 8013402:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013404:	2300      	movs	r3, #0
 8013406:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013414:	78fb      	ldrb	r3, [r7, #3]
 8013416:	2b01      	cmp	r3, #1
 8013418:	d115      	bne.n	8013446 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	68db      	ldr	r3, [r3, #12]
 801341e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013426:	2001      	movs	r0, #1
 8013428:	f7f1 f890 	bl	800454c <HAL_Delay>
      ms++;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	3301      	adds	r3, #1
 8013430:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f001 fa4b 	bl	80148ce <USB_GetMode>
 8013438:	4603      	mov	r3, r0
 801343a:	2b01      	cmp	r3, #1
 801343c:	d01e      	beq.n	801347c <USB_SetCurrentMode+0x84>
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b31      	cmp	r3, #49	; 0x31
 8013442:	d9f0      	bls.n	8013426 <USB_SetCurrentMode+0x2e>
 8013444:	e01a      	b.n	801347c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013446:	78fb      	ldrb	r3, [r7, #3]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d115      	bne.n	8013478 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013458:	2001      	movs	r0, #1
 801345a:	f7f1 f877 	bl	800454c <HAL_Delay>
      ms++;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	3301      	adds	r3, #1
 8013462:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f001 fa32 	bl	80148ce <USB_GetMode>
 801346a:	4603      	mov	r3, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	d005      	beq.n	801347c <USB_SetCurrentMode+0x84>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	2b31      	cmp	r3, #49	; 0x31
 8013474:	d9f0      	bls.n	8013458 <USB_SetCurrentMode+0x60>
 8013476:	e001      	b.n	801347c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013478:	2301      	movs	r3, #1
 801347a:	e005      	b.n	8013488 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2b32      	cmp	r3, #50	; 0x32
 8013480:	d101      	bne.n	8013486 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013482:	2301      	movs	r3, #1
 8013484:	e000      	b.n	8013488 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013486:	2300      	movs	r3, #0
}
 8013488:	4618      	mov	r0, r3
 801348a:	3710      	adds	r7, #16
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}

08013490 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013490:	b084      	sub	sp, #16
 8013492:	b580      	push	{r7, lr}
 8013494:	b086      	sub	sp, #24
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
 801349a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801349e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80134a2:	2300      	movs	r3, #0
 80134a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80134aa:	2300      	movs	r3, #0
 80134ac:	613b      	str	r3, [r7, #16]
 80134ae:	e009      	b.n	80134c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	3340      	adds	r3, #64	; 0x40
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	4413      	add	r3, r2
 80134ba:	2200      	movs	r2, #0
 80134bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	3301      	adds	r3, #1
 80134c2:	613b      	str	r3, [r7, #16]
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	2b0e      	cmp	r3, #14
 80134c8:	d9f2      	bls.n	80134b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80134ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d11c      	bne.n	801350a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80134de:	f043 0302 	orr.w	r3, r3, #2
 80134e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	601a      	str	r2, [r3, #0]
 8013508:	e005      	b.n	8013516 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801350e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801351c:	461a      	mov	r2, r3
 801351e:	2300      	movs	r3, #0
 8013520:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013528:	4619      	mov	r1, r3
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013530:	461a      	mov	r2, r3
 8013532:	680b      	ldr	r3, [r1, #0]
 8013534:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013538:	2b01      	cmp	r3, #1
 801353a:	d10c      	bne.n	8013556 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d104      	bne.n	801354c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013542:	2100      	movs	r1, #0
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f000 f965 	bl	8013814 <USB_SetDevSpeed>
 801354a:	e008      	b.n	801355e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801354c:	2101      	movs	r1, #1
 801354e:	6878      	ldr	r0, [r7, #4]
 8013550:	f000 f960 	bl	8013814 <USB_SetDevSpeed>
 8013554:	e003      	b.n	801355e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013556:	2103      	movs	r1, #3
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f000 f95b 	bl	8013814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801355e:	2110      	movs	r1, #16
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f000 f8f3 	bl	801374c <USB_FlushTxFifo>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d001      	beq.n	8013570 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801356c:	2301      	movs	r3, #1
 801356e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f000 f91f 	bl	80137b4 <USB_FlushRxFifo>
 8013576:	4603      	mov	r3, r0
 8013578:	2b00      	cmp	r3, #0
 801357a:	d001      	beq.n	8013580 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801357c:	2301      	movs	r3, #1
 801357e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013586:	461a      	mov	r2, r3
 8013588:	2300      	movs	r3, #0
 801358a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013592:	461a      	mov	r2, r3
 8013594:	2300      	movs	r3, #0
 8013596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801359e:	461a      	mov	r2, r3
 80135a0:	2300      	movs	r3, #0
 80135a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135a4:	2300      	movs	r3, #0
 80135a6:	613b      	str	r3, [r7, #16]
 80135a8:	e043      	b.n	8013632 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	015a      	lsls	r2, r3, #5
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	4413      	add	r3, r2
 80135b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80135bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80135c0:	d118      	bne.n	80135f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80135c2:	693b      	ldr	r3, [r7, #16]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d10a      	bne.n	80135de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	015a      	lsls	r2, r3, #5
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	4413      	add	r3, r2
 80135d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135d4:	461a      	mov	r2, r3
 80135d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	e013      	b.n	8013606 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	015a      	lsls	r2, r3, #5
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	4413      	add	r3, r2
 80135e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ea:	461a      	mov	r2, r3
 80135ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80135f0:	6013      	str	r3, [r2, #0]
 80135f2:	e008      	b.n	8013606 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	015a      	lsls	r2, r3, #5
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	4413      	add	r3, r2
 80135fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013600:	461a      	mov	r2, r3
 8013602:	2300      	movs	r3, #0
 8013604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	015a      	lsls	r2, r3, #5
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	4413      	add	r3, r2
 801360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013612:	461a      	mov	r2, r3
 8013614:	2300      	movs	r3, #0
 8013616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	015a      	lsls	r2, r3, #5
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	4413      	add	r3, r2
 8013620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013624:	461a      	mov	r2, r3
 8013626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801362a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	3301      	adds	r3, #1
 8013630:	613b      	str	r3, [r7, #16]
 8013632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013634:	693a      	ldr	r2, [r7, #16]
 8013636:	429a      	cmp	r2, r3
 8013638:	d3b7      	bcc.n	80135aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801363a:	2300      	movs	r3, #0
 801363c:	613b      	str	r3, [r7, #16]
 801363e:	e043      	b.n	80136c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013640:	693b      	ldr	r3, [r7, #16]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013656:	d118      	bne.n	801368a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d10a      	bne.n	8013674 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801365e:	693b      	ldr	r3, [r7, #16]
 8013660:	015a      	lsls	r2, r3, #5
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	4413      	add	r3, r2
 8013666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801366a:	461a      	mov	r2, r3
 801366c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013670:	6013      	str	r3, [r2, #0]
 8013672:	e013      	b.n	801369c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	015a      	lsls	r2, r3, #5
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	4413      	add	r3, r2
 801367c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013680:	461a      	mov	r2, r3
 8013682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013686:	6013      	str	r3, [r2, #0]
 8013688:	e008      	b.n	801369c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	015a      	lsls	r2, r3, #5
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	4413      	add	r3, r2
 8013692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013696:	461a      	mov	r2, r3
 8013698:	2300      	movs	r3, #0
 801369a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	015a      	lsls	r2, r3, #5
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	4413      	add	r3, r2
 80136a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a8:	461a      	mov	r2, r3
 80136aa:	2300      	movs	r3, #0
 80136ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	015a      	lsls	r2, r3, #5
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	4413      	add	r3, r2
 80136b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136ba:	461a      	mov	r2, r3
 80136bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80136c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80136c2:	693b      	ldr	r3, [r7, #16]
 80136c4:	3301      	adds	r3, #1
 80136c6:	613b      	str	r3, [r7, #16]
 80136c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ca:	693a      	ldr	r2, [r7, #16]
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d3b7      	bcc.n	8013640 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136d6:	691b      	ldr	r3, [r3, #16]
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80136e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2200      	movs	r2, #0
 80136e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80136f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80136f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d105      	bne.n	8013704 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	699b      	ldr	r3, [r3, #24]
 80136fc:	f043 0210 	orr.w	r2, r3, #16
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	699a      	ldr	r2, [r3, #24]
 8013708:	4b0e      	ldr	r3, [pc, #56]	; (8013744 <USB_DevInit+0x2b4>)
 801370a:	4313      	orrs	r3, r2
 801370c:	687a      	ldr	r2, [r7, #4]
 801370e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013712:	2b00      	cmp	r3, #0
 8013714:	d005      	beq.n	8013722 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	699b      	ldr	r3, [r3, #24]
 801371a:	f043 0208 	orr.w	r2, r3, #8
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013724:	2b01      	cmp	r3, #1
 8013726:	d105      	bne.n	8013734 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	699a      	ldr	r2, [r3, #24]
 801372c:	4b06      	ldr	r3, [pc, #24]	; (8013748 <USB_DevInit+0x2b8>)
 801372e:	4313      	orrs	r3, r2
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013734:	7dfb      	ldrb	r3, [r7, #23]
}
 8013736:	4618      	mov	r0, r3
 8013738:	3718      	adds	r7, #24
 801373a:	46bd      	mov	sp, r7
 801373c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013740:	b004      	add	sp, #16
 8013742:	4770      	bx	lr
 8013744:	803c3800 	.word	0x803c3800
 8013748:	40000004 	.word	0x40000004

0801374c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801374c:	b480      	push	{r7}
 801374e:	b085      	sub	sp, #20
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013756:	2300      	movs	r3, #0
 8013758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	3301      	adds	r3, #1
 801375e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	4a13      	ldr	r2, [pc, #76]	; (80137b0 <USB_FlushTxFifo+0x64>)
 8013764:	4293      	cmp	r3, r2
 8013766:	d901      	bls.n	801376c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013768:	2303      	movs	r3, #3
 801376a:	e01b      	b.n	80137a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	691b      	ldr	r3, [r3, #16]
 8013770:	2b00      	cmp	r3, #0
 8013772:	daf2      	bge.n	801375a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013774:	2300      	movs	r3, #0
 8013776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	019b      	lsls	r3, r3, #6
 801377c:	f043 0220 	orr.w	r2, r3, #32
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	3301      	adds	r3, #1
 8013788:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	4a08      	ldr	r2, [pc, #32]	; (80137b0 <USB_FlushTxFifo+0x64>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d901      	bls.n	8013796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013792:	2303      	movs	r3, #3
 8013794:	e006      	b.n	80137a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	691b      	ldr	r3, [r3, #16]
 801379a:	f003 0320 	and.w	r3, r3, #32
 801379e:	2b20      	cmp	r3, #32
 80137a0:	d0f0      	beq.n	8013784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80137a2:	2300      	movs	r3, #0
}
 80137a4:	4618      	mov	r0, r3
 80137a6:	3714      	adds	r7, #20
 80137a8:	46bd      	mov	sp, r7
 80137aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ae:	4770      	bx	lr
 80137b0:	00030d40 	.word	0x00030d40

080137b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80137b4:	b480      	push	{r7}
 80137b6:	b085      	sub	sp, #20
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80137bc:	2300      	movs	r3, #0
 80137be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	3301      	adds	r3, #1
 80137c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	4a11      	ldr	r2, [pc, #68]	; (8013810 <USB_FlushRxFifo+0x5c>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d901      	bls.n	80137d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80137ce:	2303      	movs	r3, #3
 80137d0:	e018      	b.n	8013804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	daf2      	bge.n	80137c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80137da:	2300      	movs	r3, #0
 80137dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2210      	movs	r2, #16
 80137e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	3301      	adds	r3, #1
 80137e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	4a08      	ldr	r2, [pc, #32]	; (8013810 <USB_FlushRxFifo+0x5c>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d901      	bls.n	80137f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80137f2:	2303      	movs	r3, #3
 80137f4:	e006      	b.n	8013804 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	691b      	ldr	r3, [r3, #16]
 80137fa:	f003 0310 	and.w	r3, r3, #16
 80137fe:	2b10      	cmp	r3, #16
 8013800:	d0f0      	beq.n	80137e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013802:	2300      	movs	r3, #0
}
 8013804:	4618      	mov	r0, r3
 8013806:	3714      	adds	r7, #20
 8013808:	46bd      	mov	sp, r7
 801380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380e:	4770      	bx	lr
 8013810:	00030d40 	.word	0x00030d40

08013814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013814:	b480      	push	{r7}
 8013816:	b085      	sub	sp, #20
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	460b      	mov	r3, r1
 801381e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	78fb      	ldrb	r3, [r7, #3]
 801382e:	68f9      	ldr	r1, [r7, #12]
 8013830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013834:	4313      	orrs	r3, r2
 8013836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013838:	2300      	movs	r3, #0
}
 801383a:	4618      	mov	r0, r3
 801383c:	3714      	adds	r7, #20
 801383e:	46bd      	mov	sp, r7
 8013840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013844:	4770      	bx	lr

08013846 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013846:	b480      	push	{r7}
 8013848:	b087      	sub	sp, #28
 801384a:	af00      	add	r7, sp, #0
 801384c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013858:	689b      	ldr	r3, [r3, #8]
 801385a:	f003 0306 	and.w	r3, r3, #6
 801385e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d102      	bne.n	801386c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013866:	2300      	movs	r3, #0
 8013868:	75fb      	strb	r3, [r7, #23]
 801386a:	e00a      	b.n	8013882 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2b02      	cmp	r3, #2
 8013870:	d002      	beq.n	8013878 <USB_GetDevSpeed+0x32>
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2b06      	cmp	r3, #6
 8013876:	d102      	bne.n	801387e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013878:	2302      	movs	r3, #2
 801387a:	75fb      	strb	r3, [r7, #23]
 801387c:	e001      	b.n	8013882 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801387e:	230f      	movs	r3, #15
 8013880:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013882:	7dfb      	ldrb	r3, [r7, #23]
}
 8013884:	4618      	mov	r0, r3
 8013886:	371c      	adds	r7, #28
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr

08013890 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	785b      	ldrb	r3, [r3, #1]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d139      	bne.n	8013920 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138b2:	69da      	ldr	r2, [r3, #28]
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	781b      	ldrb	r3, [r3, #0]
 80138b8:	f003 030f 	and.w	r3, r3, #15
 80138bc:	2101      	movs	r1, #1
 80138be:	fa01 f303 	lsl.w	r3, r1, r3
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	68f9      	ldr	r1, [r7, #12]
 80138c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80138ca:	4313      	orrs	r3, r2
 80138cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	015a      	lsls	r2, r3, #5
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	4413      	add	r3, r2
 80138d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d153      	bne.n	801398c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	015a      	lsls	r2, r3, #5
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	68db      	ldr	r3, [r3, #12]
 80138f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80138fa:	683b      	ldr	r3, [r7, #0]
 80138fc:	791b      	ldrb	r3, [r3, #4]
 80138fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013900:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013902:	68bb      	ldr	r3, [r7, #8]
 8013904:	059b      	lsls	r3, r3, #22
 8013906:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013908:	431a      	orrs	r2, r3
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	0159      	lsls	r1, r3, #5
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	440b      	add	r3, r1
 8013912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013916:	4619      	mov	r1, r3
 8013918:	4b20      	ldr	r3, [pc, #128]	; (801399c <USB_ActivateEndpoint+0x10c>)
 801391a:	4313      	orrs	r3, r2
 801391c:	600b      	str	r3, [r1, #0]
 801391e:	e035      	b.n	801398c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013926:	69da      	ldr	r2, [r3, #28]
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	f003 030f 	and.w	r3, r3, #15
 8013930:	2101      	movs	r1, #1
 8013932:	fa01 f303 	lsl.w	r3, r1, r3
 8013936:	041b      	lsls	r3, r3, #16
 8013938:	68f9      	ldr	r1, [r7, #12]
 801393a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801393e:	4313      	orrs	r3, r2
 8013940:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013942:	68bb      	ldr	r3, [r7, #8]
 8013944:	015a      	lsls	r2, r3, #5
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	4413      	add	r3, r2
 801394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013954:	2b00      	cmp	r3, #0
 8013956:	d119      	bne.n	801398c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	015a      	lsls	r2, r3, #5
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	4413      	add	r3, r2
 8013960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013964:	681a      	ldr	r2, [r3, #0]
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	68db      	ldr	r3, [r3, #12]
 801396a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801396e:	683b      	ldr	r3, [r7, #0]
 8013970:	791b      	ldrb	r3, [r3, #4]
 8013972:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013974:	430b      	orrs	r3, r1
 8013976:	431a      	orrs	r2, r3
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	0159      	lsls	r1, r3, #5
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	440b      	add	r3, r1
 8013980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013984:	4619      	mov	r1, r3
 8013986:	4b05      	ldr	r3, [pc, #20]	; (801399c <USB_ActivateEndpoint+0x10c>)
 8013988:	4313      	orrs	r3, r2
 801398a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801398c:	2300      	movs	r3, #0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3714      	adds	r7, #20
 8013992:	46bd      	mov	sp, r7
 8013994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013998:	4770      	bx	lr
 801399a:	bf00      	nop
 801399c:	10008000 	.word	0x10008000

080139a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b085      	sub	sp, #20
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	785b      	ldrb	r3, [r3, #1]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d161      	bne.n	8013a80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	015a      	lsls	r2, r3, #5
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	4413      	add	r3, r2
 80139c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139d2:	d11f      	bne.n	8013a14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	015a      	lsls	r2, r3, #5
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	4413      	add	r3, r2
 80139dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	68ba      	ldr	r2, [r7, #8]
 80139e4:	0151      	lsls	r1, r2, #5
 80139e6:	68fa      	ldr	r2, [r7, #12]
 80139e8:	440a      	add	r2, r1
 80139ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	015a      	lsls	r2, r3, #5
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	4413      	add	r3, r2
 80139fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	68ba      	ldr	r2, [r7, #8]
 8013a04:	0151      	lsls	r1, r2, #5
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	440a      	add	r2, r1
 8013a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	f003 030f 	and.w	r3, r3, #15
 8013a24:	2101      	movs	r1, #1
 8013a26:	fa01 f303 	lsl.w	r3, r1, r3
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	43db      	mvns	r3, r3
 8013a2e:	68f9      	ldr	r1, [r7, #12]
 8013a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a34:	4013      	ands	r3, r2
 8013a36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a3e:	69da      	ldr	r2, [r3, #28]
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	f003 030f 	and.w	r3, r3, #15
 8013a48:	2101      	movs	r1, #1
 8013a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a4e:	b29b      	uxth	r3, r3
 8013a50:	43db      	mvns	r3, r3
 8013a52:	68f9      	ldr	r1, [r7, #12]
 8013a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a58:	4013      	ands	r3, r2
 8013a5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	015a      	lsls	r2, r3, #5
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	4413      	add	r3, r2
 8013a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a68:	681a      	ldr	r2, [r3, #0]
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	0159      	lsls	r1, r3, #5
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	440b      	add	r3, r1
 8013a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a76:	4619      	mov	r1, r3
 8013a78:	4b35      	ldr	r3, [pc, #212]	; (8013b50 <USB_DeactivateEndpoint+0x1b0>)
 8013a7a:	4013      	ands	r3, r2
 8013a7c:	600b      	str	r3, [r1, #0]
 8013a7e:	e060      	b.n	8013b42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	015a      	lsls	r2, r3, #5
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	4413      	add	r3, r2
 8013a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a96:	d11f      	bne.n	8013ad8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	015a      	lsls	r2, r3, #5
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	4413      	add	r3, r2
 8013aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	0151      	lsls	r1, r2, #5
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	440a      	add	r2, r1
 8013aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013ab6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	015a      	lsls	r2, r3, #5
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	4413      	add	r3, r2
 8013ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	68ba      	ldr	r2, [r7, #8]
 8013ac8:	0151      	lsls	r1, r2, #5
 8013aca:	68fa      	ldr	r2, [r7, #12]
 8013acc:	440a      	add	r2, r1
 8013ace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ad2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ad6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	f003 030f 	and.w	r3, r3, #15
 8013ae8:	2101      	movs	r1, #1
 8013aea:	fa01 f303 	lsl.w	r3, r1, r3
 8013aee:	041b      	lsls	r3, r3, #16
 8013af0:	43db      	mvns	r3, r3
 8013af2:	68f9      	ldr	r1, [r7, #12]
 8013af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013af8:	4013      	ands	r3, r2
 8013afa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b02:	69da      	ldr	r2, [r3, #28]
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	f003 030f 	and.w	r3, r3, #15
 8013b0c:	2101      	movs	r1, #1
 8013b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8013b12:	041b      	lsls	r3, r3, #16
 8013b14:	43db      	mvns	r3, r3
 8013b16:	68f9      	ldr	r1, [r7, #12]
 8013b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b1c:	4013      	ands	r3, r2
 8013b1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	015a      	lsls	r2, r3, #5
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	4413      	add	r3, r2
 8013b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	0159      	lsls	r1, r3, #5
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	440b      	add	r3, r1
 8013b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b3a:	4619      	mov	r1, r3
 8013b3c:	4b05      	ldr	r3, [pc, #20]	; (8013b54 <USB_DeactivateEndpoint+0x1b4>)
 8013b3e:	4013      	ands	r3, r2
 8013b40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013b42:	2300      	movs	r3, #0
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3714      	adds	r7, #20
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr
 8013b50:	ec337800 	.word	0xec337800
 8013b54:	eff37800 	.word	0xeff37800

08013b58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b08a      	sub	sp, #40	; 0x28
 8013b5c:	af02      	add	r7, sp, #8
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	4613      	mov	r3, r2
 8013b64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	781b      	ldrb	r3, [r3, #0]
 8013b6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	785b      	ldrb	r3, [r3, #1]
 8013b74:	2b01      	cmp	r3, #1
 8013b76:	f040 8163 	bne.w	8013e40 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013b7a:	68bb      	ldr	r3, [r7, #8]
 8013b7c:	699b      	ldr	r3, [r3, #24]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d132      	bne.n	8013be8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	015a      	lsls	r2, r3, #5
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	4413      	add	r3, r2
 8013b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b8e:	691a      	ldr	r2, [r3, #16]
 8013b90:	69bb      	ldr	r3, [r7, #24]
 8013b92:	0159      	lsls	r1, r3, #5
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	440b      	add	r3, r1
 8013b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	4ba5      	ldr	r3, [pc, #660]	; (8013e34 <USB_EPStartXfer+0x2dc>)
 8013ba0:	4013      	ands	r3, r2
 8013ba2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013ba4:	69bb      	ldr	r3, [r7, #24]
 8013ba6:	015a      	lsls	r2, r3, #5
 8013ba8:	69fb      	ldr	r3, [r7, #28]
 8013baa:	4413      	add	r3, r2
 8013bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bb0:	691b      	ldr	r3, [r3, #16]
 8013bb2:	69ba      	ldr	r2, [r7, #24]
 8013bb4:	0151      	lsls	r1, r2, #5
 8013bb6:	69fa      	ldr	r2, [r7, #28]
 8013bb8:	440a      	add	r2, r1
 8013bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013bc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bc4:	69bb      	ldr	r3, [r7, #24]
 8013bc6:	015a      	lsls	r2, r3, #5
 8013bc8:	69fb      	ldr	r3, [r7, #28]
 8013bca:	4413      	add	r3, r2
 8013bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bd0:	691a      	ldr	r2, [r3, #16]
 8013bd2:	69bb      	ldr	r3, [r7, #24]
 8013bd4:	0159      	lsls	r1, r3, #5
 8013bd6:	69fb      	ldr	r3, [r7, #28]
 8013bd8:	440b      	add	r3, r1
 8013bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bde:	4619      	mov	r1, r3
 8013be0:	4b95      	ldr	r3, [pc, #596]	; (8013e38 <USB_EPStartXfer+0x2e0>)
 8013be2:	4013      	ands	r3, r2
 8013be4:	610b      	str	r3, [r1, #16]
 8013be6:	e074      	b.n	8013cd2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	015a      	lsls	r2, r3, #5
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	4413      	add	r3, r2
 8013bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bf4:	691a      	ldr	r2, [r3, #16]
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	0159      	lsls	r1, r3, #5
 8013bfa:	69fb      	ldr	r3, [r7, #28]
 8013bfc:	440b      	add	r3, r1
 8013bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c02:	4619      	mov	r1, r3
 8013c04:	4b8c      	ldr	r3, [pc, #560]	; (8013e38 <USB_EPStartXfer+0x2e0>)
 8013c06:	4013      	ands	r3, r2
 8013c08:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c0a:	69bb      	ldr	r3, [r7, #24]
 8013c0c:	015a      	lsls	r2, r3, #5
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	4413      	add	r3, r2
 8013c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c16:	691a      	ldr	r2, [r3, #16]
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	0159      	lsls	r1, r3, #5
 8013c1c:	69fb      	ldr	r3, [r7, #28]
 8013c1e:	440b      	add	r3, r1
 8013c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c24:	4619      	mov	r1, r3
 8013c26:	4b83      	ldr	r3, [pc, #524]	; (8013e34 <USB_EPStartXfer+0x2dc>)
 8013c28:	4013      	ands	r3, r2
 8013c2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	015a      	lsls	r2, r3, #5
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	4413      	add	r3, r2
 8013c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c38:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	6999      	ldr	r1, [r3, #24]
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	440b      	add	r3, r1
 8013c44:	1e59      	subs	r1, r3, #1
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	68db      	ldr	r3, [r3, #12]
 8013c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8013c4e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013c50:	4b7a      	ldr	r3, [pc, #488]	; (8013e3c <USB_EPStartXfer+0x2e4>)
 8013c52:	400b      	ands	r3, r1
 8013c54:	69b9      	ldr	r1, [r7, #24]
 8013c56:	0148      	lsls	r0, r1, #5
 8013c58:	69f9      	ldr	r1, [r7, #28]
 8013c5a:	4401      	add	r1, r0
 8013c5c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c60:	4313      	orrs	r3, r2
 8013c62:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c70:	691a      	ldr	r2, [r3, #16]
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	699b      	ldr	r3, [r3, #24]
 8013c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c7a:	69b9      	ldr	r1, [r7, #24]
 8013c7c:	0148      	lsls	r0, r1, #5
 8013c7e:	69f9      	ldr	r1, [r7, #28]
 8013c80:	4401      	add	r1, r0
 8013c82:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013c86:	4313      	orrs	r3, r2
 8013c88:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	791b      	ldrb	r3, [r3, #4]
 8013c8e:	2b01      	cmp	r3, #1
 8013c90:	d11f      	bne.n	8013cd2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013c92:	69bb      	ldr	r3, [r7, #24]
 8013c94:	015a      	lsls	r2, r3, #5
 8013c96:	69fb      	ldr	r3, [r7, #28]
 8013c98:	4413      	add	r3, r2
 8013c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c9e:	691b      	ldr	r3, [r3, #16]
 8013ca0:	69ba      	ldr	r2, [r7, #24]
 8013ca2:	0151      	lsls	r1, r2, #5
 8013ca4:	69fa      	ldr	r2, [r7, #28]
 8013ca6:	440a      	add	r2, r1
 8013ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013cb0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	015a      	lsls	r2, r3, #5
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	4413      	add	r3, r2
 8013cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cbe:	691b      	ldr	r3, [r3, #16]
 8013cc0:	69ba      	ldr	r2, [r7, #24]
 8013cc2:	0151      	lsls	r1, r2, #5
 8013cc4:	69fa      	ldr	r2, [r7, #28]
 8013cc6:	440a      	add	r2, r1
 8013cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013cd0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013cd2:	79fb      	ldrb	r3, [r7, #7]
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d14b      	bne.n	8013d70 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	695b      	ldr	r3, [r3, #20]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d009      	beq.n	8013cf4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013ce0:	69bb      	ldr	r3, [r7, #24]
 8013ce2:	015a      	lsls	r2, r3, #5
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	4413      	add	r3, r2
 8013ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cec:	461a      	mov	r2, r3
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	695b      	ldr	r3, [r3, #20]
 8013cf2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	791b      	ldrb	r3, [r3, #4]
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d128      	bne.n	8013d4e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013cfc:	69fb      	ldr	r3, [r7, #28]
 8013cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d02:	689b      	ldr	r3, [r3, #8]
 8013d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d110      	bne.n	8013d2e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	015a      	lsls	r2, r3, #5
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	4413      	add	r3, r2
 8013d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	69ba      	ldr	r2, [r7, #24]
 8013d1c:	0151      	lsls	r1, r2, #5
 8013d1e:	69fa      	ldr	r2, [r7, #28]
 8013d20:	440a      	add	r2, r1
 8013d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	e00f      	b.n	8013d4e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d2e:	69bb      	ldr	r3, [r7, #24]
 8013d30:	015a      	lsls	r2, r3, #5
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	4413      	add	r3, r2
 8013d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	69ba      	ldr	r2, [r7, #24]
 8013d3e:	0151      	lsls	r1, r2, #5
 8013d40:	69fa      	ldr	r2, [r7, #28]
 8013d42:	440a      	add	r2, r1
 8013d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d4c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	015a      	lsls	r2, r3, #5
 8013d52:	69fb      	ldr	r3, [r7, #28]
 8013d54:	4413      	add	r3, r2
 8013d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	69ba      	ldr	r2, [r7, #24]
 8013d5e:	0151      	lsls	r1, r2, #5
 8013d60:	69fa      	ldr	r2, [r7, #28]
 8013d62:	440a      	add	r2, r1
 8013d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d6c:	6013      	str	r3, [r2, #0]
 8013d6e:	e137      	b.n	8013fe0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	015a      	lsls	r2, r3, #5
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	4413      	add	r3, r2
 8013d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	69ba      	ldr	r2, [r7, #24]
 8013d80:	0151      	lsls	r1, r2, #5
 8013d82:	69fa      	ldr	r2, [r7, #28]
 8013d84:	440a      	add	r2, r1
 8013d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d8a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d8e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	791b      	ldrb	r3, [r3, #4]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d015      	beq.n	8013dc4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	699b      	ldr	r3, [r3, #24]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f000 811f 	beq.w	8013fe0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	f003 030f 	and.w	r3, r3, #15
 8013db2:	2101      	movs	r1, #1
 8013db4:	fa01 f303 	lsl.w	r3, r1, r3
 8013db8:	69f9      	ldr	r1, [r7, #28]
 8013dba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	634b      	str	r3, [r1, #52]	; 0x34
 8013dc2:	e10d      	b.n	8013fe0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d110      	bne.n	8013df6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013dd4:	69bb      	ldr	r3, [r7, #24]
 8013dd6:	015a      	lsls	r2, r3, #5
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	4413      	add	r3, r2
 8013ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013de0:	681b      	ldr	r3, [r3, #0]
 8013de2:	69ba      	ldr	r2, [r7, #24]
 8013de4:	0151      	lsls	r1, r2, #5
 8013de6:	69fa      	ldr	r2, [r7, #28]
 8013de8:	440a      	add	r2, r1
 8013dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013dee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013df2:	6013      	str	r3, [r2, #0]
 8013df4:	e00f      	b.n	8013e16 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	015a      	lsls	r2, r3, #5
 8013dfa:	69fb      	ldr	r3, [r7, #28]
 8013dfc:	4413      	add	r3, r2
 8013dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	69ba      	ldr	r2, [r7, #24]
 8013e06:	0151      	lsls	r1, r2, #5
 8013e08:	69fa      	ldr	r2, [r7, #28]
 8013e0a:	440a      	add	r2, r1
 8013e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e14:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	6919      	ldr	r1, [r3, #16]
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	781a      	ldrb	r2, [r3, #0]
 8013e1e:	68bb      	ldr	r3, [r7, #8]
 8013e20:	699b      	ldr	r3, [r3, #24]
 8013e22:	b298      	uxth	r0, r3
 8013e24:	79fb      	ldrb	r3, [r7, #7]
 8013e26:	9300      	str	r3, [sp, #0]
 8013e28:	4603      	mov	r3, r0
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f000 faea 	bl	8014404 <USB_WritePacket>
 8013e30:	e0d6      	b.n	8013fe0 <USB_EPStartXfer+0x488>
 8013e32:	bf00      	nop
 8013e34:	e007ffff 	.word	0xe007ffff
 8013e38:	fff80000 	.word	0xfff80000
 8013e3c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013e40:	69bb      	ldr	r3, [r7, #24]
 8013e42:	015a      	lsls	r2, r3, #5
 8013e44:	69fb      	ldr	r3, [r7, #28]
 8013e46:	4413      	add	r3, r2
 8013e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e4c:	691a      	ldr	r2, [r3, #16]
 8013e4e:	69bb      	ldr	r3, [r7, #24]
 8013e50:	0159      	lsls	r1, r3, #5
 8013e52:	69fb      	ldr	r3, [r7, #28]
 8013e54:	440b      	add	r3, r1
 8013e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e5a:	4619      	mov	r1, r3
 8013e5c:	4b63      	ldr	r3, [pc, #396]	; (8013fec <USB_EPStartXfer+0x494>)
 8013e5e:	4013      	ands	r3, r2
 8013e60:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013e62:	69bb      	ldr	r3, [r7, #24]
 8013e64:	015a      	lsls	r2, r3, #5
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	4413      	add	r3, r2
 8013e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e6e:	691a      	ldr	r2, [r3, #16]
 8013e70:	69bb      	ldr	r3, [r7, #24]
 8013e72:	0159      	lsls	r1, r3, #5
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	440b      	add	r3, r1
 8013e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e7c:	4619      	mov	r1, r3
 8013e7e:	4b5c      	ldr	r3, [pc, #368]	; (8013ff0 <USB_EPStartXfer+0x498>)
 8013e80:	4013      	ands	r3, r2
 8013e82:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	699b      	ldr	r3, [r3, #24]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d123      	bne.n	8013ed4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	015a      	lsls	r2, r3, #5
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	4413      	add	r3, r2
 8013e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e98:	691a      	ldr	r2, [r3, #16]
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ea2:	69b9      	ldr	r1, [r7, #24]
 8013ea4:	0148      	lsls	r0, r1, #5
 8013ea6:	69f9      	ldr	r1, [r7, #28]
 8013ea8:	4401      	add	r1, r0
 8013eaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013eae:	4313      	orrs	r3, r2
 8013eb0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013eb2:	69bb      	ldr	r3, [r7, #24]
 8013eb4:	015a      	lsls	r2, r3, #5
 8013eb6:	69fb      	ldr	r3, [r7, #28]
 8013eb8:	4413      	add	r3, r2
 8013eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ebe:	691b      	ldr	r3, [r3, #16]
 8013ec0:	69ba      	ldr	r2, [r7, #24]
 8013ec2:	0151      	lsls	r1, r2, #5
 8013ec4:	69fa      	ldr	r2, [r7, #28]
 8013ec6:	440a      	add	r2, r1
 8013ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ecc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ed0:	6113      	str	r3, [r2, #16]
 8013ed2:	e037      	b.n	8013f44 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	699a      	ldr	r2, [r3, #24]
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	68db      	ldr	r3, [r3, #12]
 8013edc:	4413      	add	r3, r2
 8013ede:	1e5a      	subs	r2, r3, #1
 8013ee0:	68bb      	ldr	r3, [r7, #8]
 8013ee2:	68db      	ldr	r3, [r3, #12]
 8013ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ee8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	68db      	ldr	r3, [r3, #12]
 8013eee:	8afa      	ldrh	r2, [r7, #22]
 8013ef0:	fb03 f202 	mul.w	r2, r3, r2
 8013ef4:	68bb      	ldr	r3, [r7, #8]
 8013ef6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	015a      	lsls	r2, r3, #5
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	4413      	add	r3, r2
 8013f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f04:	691a      	ldr	r2, [r3, #16]
 8013f06:	8afb      	ldrh	r3, [r7, #22]
 8013f08:	04d9      	lsls	r1, r3, #19
 8013f0a:	4b3a      	ldr	r3, [pc, #232]	; (8013ff4 <USB_EPStartXfer+0x49c>)
 8013f0c:	400b      	ands	r3, r1
 8013f0e:	69b9      	ldr	r1, [r7, #24]
 8013f10:	0148      	lsls	r0, r1, #5
 8013f12:	69f9      	ldr	r1, [r7, #28]
 8013f14:	4401      	add	r1, r0
 8013f16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f1a:	4313      	orrs	r3, r2
 8013f1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	015a      	lsls	r2, r3, #5
 8013f22:	69fb      	ldr	r3, [r7, #28]
 8013f24:	4413      	add	r3, r2
 8013f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f2a:	691a      	ldr	r2, [r3, #16]
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	69db      	ldr	r3, [r3, #28]
 8013f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f34:	69b9      	ldr	r1, [r7, #24]
 8013f36:	0148      	lsls	r0, r1, #5
 8013f38:	69f9      	ldr	r1, [r7, #28]
 8013f3a:	4401      	add	r1, r0
 8013f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013f40:	4313      	orrs	r3, r2
 8013f42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8013f44:	79fb      	ldrb	r3, [r7, #7]
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	d10d      	bne.n	8013f66 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	691b      	ldr	r3, [r3, #16]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d009      	beq.n	8013f66 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	6919      	ldr	r1, [r3, #16]
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	015a      	lsls	r2, r3, #5
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f62:	460a      	mov	r2, r1
 8013f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	791b      	ldrb	r3, [r3, #4]
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d128      	bne.n	8013fc0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013f6e:	69fb      	ldr	r3, [r7, #28]
 8013f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f74:	689b      	ldr	r3, [r3, #8]
 8013f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d110      	bne.n	8013fa0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	015a      	lsls	r2, r3, #5
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	4413      	add	r3, r2
 8013f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	69ba      	ldr	r2, [r7, #24]
 8013f8e:	0151      	lsls	r1, r2, #5
 8013f90:	69fa      	ldr	r2, [r7, #28]
 8013f92:	440a      	add	r2, r1
 8013f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f9c:	6013      	str	r3, [r2, #0]
 8013f9e:	e00f      	b.n	8013fc0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	015a      	lsls	r2, r3, #5
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	4413      	add	r3, r2
 8013fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	69ba      	ldr	r2, [r7, #24]
 8013fb0:	0151      	lsls	r1, r2, #5
 8013fb2:	69fa      	ldr	r2, [r7, #28]
 8013fb4:	440a      	add	r2, r1
 8013fb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	015a      	lsls	r2, r3, #5
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	69ba      	ldr	r2, [r7, #24]
 8013fd0:	0151      	lsls	r1, r2, #5
 8013fd2:	69fa      	ldr	r2, [r7, #28]
 8013fd4:	440a      	add	r2, r1
 8013fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013fda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3720      	adds	r7, #32
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	bd80      	pop	{r7, pc}
 8013fea:	bf00      	nop
 8013fec:	fff80000 	.word	0xfff80000
 8013ff0:	e007ffff 	.word	0xe007ffff
 8013ff4:	1ff80000 	.word	0x1ff80000

08013ff8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b087      	sub	sp, #28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	60b9      	str	r1, [r7, #8]
 8014002:	4613      	mov	r3, r2
 8014004:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	785b      	ldrb	r3, [r3, #1]
 8014014:	2b01      	cmp	r3, #1
 8014016:	f040 80ce 	bne.w	80141b6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d132      	bne.n	8014088 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	015a      	lsls	r2, r3, #5
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	4413      	add	r3, r2
 801402a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801402e:	691a      	ldr	r2, [r3, #16]
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	0159      	lsls	r1, r3, #5
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	440b      	add	r3, r1
 8014038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801403c:	4619      	mov	r1, r3
 801403e:	4b9a      	ldr	r3, [pc, #616]	; (80142a8 <USB_EP0StartXfer+0x2b0>)
 8014040:	4013      	ands	r3, r2
 8014042:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	015a      	lsls	r2, r3, #5
 8014048:	697b      	ldr	r3, [r7, #20]
 801404a:	4413      	add	r3, r2
 801404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014050:	691b      	ldr	r3, [r3, #16]
 8014052:	693a      	ldr	r2, [r7, #16]
 8014054:	0151      	lsls	r1, r2, #5
 8014056:	697a      	ldr	r2, [r7, #20]
 8014058:	440a      	add	r2, r1
 801405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801405e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014062:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	015a      	lsls	r2, r3, #5
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	4413      	add	r3, r2
 801406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014070:	691a      	ldr	r2, [r3, #16]
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	0159      	lsls	r1, r3, #5
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	440b      	add	r3, r1
 801407a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801407e:	4619      	mov	r1, r3
 8014080:	4b8a      	ldr	r3, [pc, #552]	; (80142ac <USB_EP0StartXfer+0x2b4>)
 8014082:	4013      	ands	r3, r2
 8014084:	610b      	str	r3, [r1, #16]
 8014086:	e04e      	b.n	8014126 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	015a      	lsls	r2, r3, #5
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	4413      	add	r3, r2
 8014090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014094:	691a      	ldr	r2, [r3, #16]
 8014096:	693b      	ldr	r3, [r7, #16]
 8014098:	0159      	lsls	r1, r3, #5
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	440b      	add	r3, r1
 801409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140a2:	4619      	mov	r1, r3
 80140a4:	4b81      	ldr	r3, [pc, #516]	; (80142ac <USB_EP0StartXfer+0x2b4>)
 80140a6:	4013      	ands	r3, r2
 80140a8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	015a      	lsls	r2, r3, #5
 80140ae:	697b      	ldr	r3, [r7, #20]
 80140b0:	4413      	add	r3, r2
 80140b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140b6:	691a      	ldr	r2, [r3, #16]
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	0159      	lsls	r1, r3, #5
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	440b      	add	r3, r1
 80140c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140c4:	4619      	mov	r1, r3
 80140c6:	4b78      	ldr	r3, [pc, #480]	; (80142a8 <USB_EP0StartXfer+0x2b0>)
 80140c8:	4013      	ands	r3, r2
 80140ca:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	699a      	ldr	r2, [r3, #24]
 80140d0:	68bb      	ldr	r3, [r7, #8]
 80140d2:	68db      	ldr	r3, [r3, #12]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d903      	bls.n	80140e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	68da      	ldr	r2, [r3, #12]
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	015a      	lsls	r2, r3, #5
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	4413      	add	r3, r2
 80140e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140ec:	691b      	ldr	r3, [r3, #16]
 80140ee:	693a      	ldr	r2, [r7, #16]
 80140f0:	0151      	lsls	r1, r2, #5
 80140f2:	697a      	ldr	r2, [r7, #20]
 80140f4:	440a      	add	r2, r1
 80140f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80140fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	015a      	lsls	r2, r3, #5
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	4413      	add	r3, r2
 8014108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801410c:	691a      	ldr	r2, [r3, #16]
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	699b      	ldr	r3, [r3, #24]
 8014112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014116:	6939      	ldr	r1, [r7, #16]
 8014118:	0148      	lsls	r0, r1, #5
 801411a:	6979      	ldr	r1, [r7, #20]
 801411c:	4401      	add	r1, r0
 801411e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014122:	4313      	orrs	r3, r2
 8014124:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014126:	79fb      	ldrb	r3, [r7, #7]
 8014128:	2b01      	cmp	r3, #1
 801412a:	d11e      	bne.n	801416a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	695b      	ldr	r3, [r3, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d009      	beq.n	8014148 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014134:	693b      	ldr	r3, [r7, #16]
 8014136:	015a      	lsls	r2, r3, #5
 8014138:	697b      	ldr	r3, [r7, #20]
 801413a:	4413      	add	r3, r2
 801413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014140:	461a      	mov	r2, r3
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	695b      	ldr	r3, [r3, #20]
 8014146:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	015a      	lsls	r2, r3, #5
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	4413      	add	r3, r2
 8014150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	693a      	ldr	r2, [r7, #16]
 8014158:	0151      	lsls	r1, r2, #5
 801415a:	697a      	ldr	r2, [r7, #20]
 801415c:	440a      	add	r2, r1
 801415e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014162:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014166:	6013      	str	r3, [r2, #0]
 8014168:	e097      	b.n	801429a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801416a:	693b      	ldr	r3, [r7, #16]
 801416c:	015a      	lsls	r2, r3, #5
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	4413      	add	r3, r2
 8014172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	693a      	ldr	r2, [r7, #16]
 801417a:	0151      	lsls	r1, r2, #5
 801417c:	697a      	ldr	r2, [r7, #20]
 801417e:	440a      	add	r2, r1
 8014180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014184:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014188:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	699b      	ldr	r3, [r3, #24]
 801418e:	2b00      	cmp	r3, #0
 8014190:	f000 8083 	beq.w	801429a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801419a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	f003 030f 	and.w	r3, r3, #15
 80141a4:	2101      	movs	r1, #1
 80141a6:	fa01 f303 	lsl.w	r3, r1, r3
 80141aa:	6979      	ldr	r1, [r7, #20]
 80141ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141b0:	4313      	orrs	r3, r2
 80141b2:	634b      	str	r3, [r1, #52]	; 0x34
 80141b4:	e071      	b.n	801429a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80141b6:	693b      	ldr	r3, [r7, #16]
 80141b8:	015a      	lsls	r2, r3, #5
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	4413      	add	r3, r2
 80141be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141c2:	691a      	ldr	r2, [r3, #16]
 80141c4:	693b      	ldr	r3, [r7, #16]
 80141c6:	0159      	lsls	r1, r3, #5
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	440b      	add	r3, r1
 80141cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141d0:	4619      	mov	r1, r3
 80141d2:	4b36      	ldr	r3, [pc, #216]	; (80142ac <USB_EP0StartXfer+0x2b4>)
 80141d4:	4013      	ands	r3, r2
 80141d6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80141d8:	693b      	ldr	r3, [r7, #16]
 80141da:	015a      	lsls	r2, r3, #5
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	4413      	add	r3, r2
 80141e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141e4:	691a      	ldr	r2, [r3, #16]
 80141e6:	693b      	ldr	r3, [r7, #16]
 80141e8:	0159      	lsls	r1, r3, #5
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	440b      	add	r3, r1
 80141ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141f2:	4619      	mov	r1, r3
 80141f4:	4b2c      	ldr	r3, [pc, #176]	; (80142a8 <USB_EP0StartXfer+0x2b0>)
 80141f6:	4013      	ands	r3, r2
 80141f8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	699b      	ldr	r3, [r3, #24]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d003      	beq.n	801420a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	68da      	ldr	r2, [r3, #12]
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801420a:	68bb      	ldr	r3, [r7, #8]
 801420c:	68da      	ldr	r2, [r3, #12]
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014212:	693b      	ldr	r3, [r7, #16]
 8014214:	015a      	lsls	r2, r3, #5
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	4413      	add	r3, r2
 801421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421e:	691b      	ldr	r3, [r3, #16]
 8014220:	693a      	ldr	r2, [r7, #16]
 8014222:	0151      	lsls	r1, r2, #5
 8014224:	697a      	ldr	r2, [r7, #20]
 8014226:	440a      	add	r2, r1
 8014228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801422c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014230:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014232:	693b      	ldr	r3, [r7, #16]
 8014234:	015a      	lsls	r2, r3, #5
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	4413      	add	r3, r2
 801423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801423e:	691a      	ldr	r2, [r3, #16]
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	69db      	ldr	r3, [r3, #28]
 8014244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014248:	6939      	ldr	r1, [r7, #16]
 801424a:	0148      	lsls	r0, r1, #5
 801424c:	6979      	ldr	r1, [r7, #20]
 801424e:	4401      	add	r1, r0
 8014250:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014254:	4313      	orrs	r3, r2
 8014256:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8014258:	79fb      	ldrb	r3, [r7, #7]
 801425a:	2b01      	cmp	r3, #1
 801425c:	d10d      	bne.n	801427a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	691b      	ldr	r3, [r3, #16]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d009      	beq.n	801427a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014266:	68bb      	ldr	r3, [r7, #8]
 8014268:	6919      	ldr	r1, [r3, #16]
 801426a:	693b      	ldr	r3, [r7, #16]
 801426c:	015a      	lsls	r2, r3, #5
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	4413      	add	r3, r2
 8014272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014276:	460a      	mov	r2, r1
 8014278:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	015a      	lsls	r2, r3, #5
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	4413      	add	r3, r2
 8014282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	693a      	ldr	r2, [r7, #16]
 801428a:	0151      	lsls	r1, r2, #5
 801428c:	697a      	ldr	r2, [r7, #20]
 801428e:	440a      	add	r2, r1
 8014290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801429a:	2300      	movs	r3, #0
}
 801429c:	4618      	mov	r0, r3
 801429e:	371c      	adds	r7, #28
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr
 80142a8:	e007ffff 	.word	0xe007ffff
 80142ac:	fff80000 	.word	0xfff80000

080142b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b087      	sub	sp, #28
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80142ba:	2300      	movs	r3, #0
 80142bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80142be:	2300      	movs	r3, #0
 80142c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142c6:	683b      	ldr	r3, [r7, #0]
 80142c8:	785b      	ldrb	r3, [r3, #1]
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d14a      	bne.n	8014364 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	781b      	ldrb	r3, [r3, #0]
 80142d2:	015a      	lsls	r2, r3, #5
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	4413      	add	r3, r2
 80142d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80142e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80142e6:	f040 8086 	bne.w	80143f6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	015a      	lsls	r2, r3, #5
 80142f0:	693b      	ldr	r3, [r7, #16]
 80142f2:	4413      	add	r3, r2
 80142f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	7812      	ldrb	r2, [r2, #0]
 80142fe:	0151      	lsls	r1, r2, #5
 8014300:	693a      	ldr	r2, [r7, #16]
 8014302:	440a      	add	r2, r1
 8014304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014308:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801430c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	015a      	lsls	r2, r3, #5
 8014314:	693b      	ldr	r3, [r7, #16]
 8014316:	4413      	add	r3, r2
 8014318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	683a      	ldr	r2, [r7, #0]
 8014320:	7812      	ldrb	r2, [r2, #0]
 8014322:	0151      	lsls	r1, r2, #5
 8014324:	693a      	ldr	r2, [r7, #16]
 8014326:	440a      	add	r2, r1
 8014328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801432c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014330:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	3301      	adds	r3, #1
 8014336:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f242 7210 	movw	r2, #10000	; 0x2710
 801433e:	4293      	cmp	r3, r2
 8014340:	d902      	bls.n	8014348 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014342:	2301      	movs	r3, #1
 8014344:	75fb      	strb	r3, [r7, #23]
          break;
 8014346:	e056      	b.n	80143f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	015a      	lsls	r2, r3, #5
 801434e:	693b      	ldr	r3, [r7, #16]
 8014350:	4413      	add	r3, r2
 8014352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801435c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014360:	d0e7      	beq.n	8014332 <USB_EPStopXfer+0x82>
 8014362:	e048      	b.n	80143f6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	015a      	lsls	r2, r3, #5
 801436a:	693b      	ldr	r3, [r7, #16]
 801436c:	4413      	add	r3, r2
 801436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801437c:	d13b      	bne.n	80143f6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	781b      	ldrb	r3, [r3, #0]
 8014382:	015a      	lsls	r2, r3, #5
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	4413      	add	r3, r2
 8014388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	683a      	ldr	r2, [r7, #0]
 8014390:	7812      	ldrb	r2, [r2, #0]
 8014392:	0151      	lsls	r1, r2, #5
 8014394:	693a      	ldr	r2, [r7, #16]
 8014396:	440a      	add	r2, r1
 8014398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801439c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80143a0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	781b      	ldrb	r3, [r3, #0]
 80143a6:	015a      	lsls	r2, r3, #5
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	4413      	add	r3, r2
 80143ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	683a      	ldr	r2, [r7, #0]
 80143b4:	7812      	ldrb	r2, [r2, #0]
 80143b6:	0151      	lsls	r1, r2, #5
 80143b8:	693a      	ldr	r2, [r7, #16]
 80143ba:	440a      	add	r2, r1
 80143bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80143c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	3301      	adds	r3, #1
 80143ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80143d2:	4293      	cmp	r3, r2
 80143d4:	d902      	bls.n	80143dc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80143d6:	2301      	movs	r3, #1
 80143d8:	75fb      	strb	r3, [r7, #23]
          break;
 80143da:	e00c      	b.n	80143f6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	781b      	ldrb	r3, [r3, #0]
 80143e0:	015a      	lsls	r2, r3, #5
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	4413      	add	r3, r2
 80143e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80143f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80143f4:	d0e7      	beq.n	80143c6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80143f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80143f8:	4618      	mov	r0, r3
 80143fa:	371c      	adds	r7, #28
 80143fc:	46bd      	mov	sp, r7
 80143fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014402:	4770      	bx	lr

08014404 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014404:	b480      	push	{r7}
 8014406:	b089      	sub	sp, #36	; 0x24
 8014408:	af00      	add	r7, sp, #0
 801440a:	60f8      	str	r0, [r7, #12]
 801440c:	60b9      	str	r1, [r7, #8]
 801440e:	4611      	mov	r1, r2
 8014410:	461a      	mov	r2, r3
 8014412:	460b      	mov	r3, r1
 8014414:	71fb      	strb	r3, [r7, #7]
 8014416:	4613      	mov	r3, r2
 8014418:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014422:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014426:	2b00      	cmp	r3, #0
 8014428:	d123      	bne.n	8014472 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801442a:	88bb      	ldrh	r3, [r7, #4]
 801442c:	3303      	adds	r3, #3
 801442e:	089b      	lsrs	r3, r3, #2
 8014430:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014432:	2300      	movs	r3, #0
 8014434:	61bb      	str	r3, [r7, #24]
 8014436:	e018      	b.n	801446a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014438:	79fb      	ldrb	r3, [r7, #7]
 801443a:	031a      	lsls	r2, r3, #12
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	4413      	add	r3, r2
 8014440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014444:	461a      	mov	r2, r3
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	3301      	adds	r3, #1
 8014450:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	3301      	adds	r3, #1
 8014456:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014458:	69fb      	ldr	r3, [r7, #28]
 801445a:	3301      	adds	r3, #1
 801445c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801445e:	69fb      	ldr	r3, [r7, #28]
 8014460:	3301      	adds	r3, #1
 8014462:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	3301      	adds	r3, #1
 8014468:	61bb      	str	r3, [r7, #24]
 801446a:	69ba      	ldr	r2, [r7, #24]
 801446c:	693b      	ldr	r3, [r7, #16]
 801446e:	429a      	cmp	r2, r3
 8014470:	d3e2      	bcc.n	8014438 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014472:	2300      	movs	r3, #0
}
 8014474:	4618      	mov	r0, r3
 8014476:	3724      	adds	r7, #36	; 0x24
 8014478:	46bd      	mov	sp, r7
 801447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447e:	4770      	bx	lr

08014480 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014480:	b480      	push	{r7}
 8014482:	b08b      	sub	sp, #44	; 0x2c
 8014484:	af00      	add	r7, sp, #0
 8014486:	60f8      	str	r0, [r7, #12]
 8014488:	60b9      	str	r1, [r7, #8]
 801448a:	4613      	mov	r3, r2
 801448c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014496:	88fb      	ldrh	r3, [r7, #6]
 8014498:	089b      	lsrs	r3, r3, #2
 801449a:	b29b      	uxth	r3, r3
 801449c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801449e:	88fb      	ldrh	r3, [r7, #6]
 80144a0:	f003 0303 	and.w	r3, r3, #3
 80144a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80144a6:	2300      	movs	r3, #0
 80144a8:	623b      	str	r3, [r7, #32]
 80144aa:	e014      	b.n	80144d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80144b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144ba:	3301      	adds	r3, #1
 80144bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80144be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c0:	3301      	adds	r3, #1
 80144c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80144c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144c6:	3301      	adds	r3, #1
 80144c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80144ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144cc:	3301      	adds	r3, #1
 80144ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80144d0:	6a3b      	ldr	r3, [r7, #32]
 80144d2:	3301      	adds	r3, #1
 80144d4:	623b      	str	r3, [r7, #32]
 80144d6:	6a3a      	ldr	r2, [r7, #32]
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d3e6      	bcc.n	80144ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80144de:	8bfb      	ldrh	r3, [r7, #30]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d01e      	beq.n	8014522 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80144e4:	2300      	movs	r3, #0
 80144e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80144e8:	69bb      	ldr	r3, [r7, #24]
 80144ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80144ee:	461a      	mov	r2, r3
 80144f0:	f107 0310 	add.w	r3, r7, #16
 80144f4:	6812      	ldr	r2, [r2, #0]
 80144f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80144f8:	693a      	ldr	r2, [r7, #16]
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	00db      	lsls	r3, r3, #3
 8014500:	fa22 f303 	lsr.w	r3, r2, r3
 8014504:	b2da      	uxtb	r2, r3
 8014506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014508:	701a      	strb	r2, [r3, #0]
      i++;
 801450a:	6a3b      	ldr	r3, [r7, #32]
 801450c:	3301      	adds	r3, #1
 801450e:	623b      	str	r3, [r7, #32]
      pDest++;
 8014510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014512:	3301      	adds	r3, #1
 8014514:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014516:	8bfb      	ldrh	r3, [r7, #30]
 8014518:	3b01      	subs	r3, #1
 801451a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801451c:	8bfb      	ldrh	r3, [r7, #30]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d1ea      	bne.n	80144f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014524:	4618      	mov	r0, r3
 8014526:	372c      	adds	r7, #44	; 0x2c
 8014528:	46bd      	mov	sp, r7
 801452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801452e:	4770      	bx	lr

08014530 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014530:	b480      	push	{r7}
 8014532:	b085      	sub	sp, #20
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	785b      	ldrb	r3, [r3, #1]
 8014548:	2b01      	cmp	r3, #1
 801454a:	d12c      	bne.n	80145a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	015a      	lsls	r2, r3, #5
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	4413      	add	r3, r2
 8014554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	2b00      	cmp	r3, #0
 801455c:	db12      	blt.n	8014584 <USB_EPSetStall+0x54>
 801455e:	68bb      	ldr	r3, [r7, #8]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d00f      	beq.n	8014584 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	015a      	lsls	r2, r3, #5
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	4413      	add	r3, r2
 801456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	68ba      	ldr	r2, [r7, #8]
 8014574:	0151      	lsls	r1, r2, #5
 8014576:	68fa      	ldr	r2, [r7, #12]
 8014578:	440a      	add	r2, r1
 801457a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801457e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014582:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014584:	68bb      	ldr	r3, [r7, #8]
 8014586:	015a      	lsls	r2, r3, #5
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	4413      	add	r3, r2
 801458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	68ba      	ldr	r2, [r7, #8]
 8014594:	0151      	lsls	r1, r2, #5
 8014596:	68fa      	ldr	r2, [r7, #12]
 8014598:	440a      	add	r2, r1
 801459a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801459e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80145a2:	6013      	str	r3, [r2, #0]
 80145a4:	e02b      	b.n	80145fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	015a      	lsls	r2, r3, #5
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	4413      	add	r3, r2
 80145ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	db12      	blt.n	80145de <USB_EPSetStall+0xae>
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d00f      	beq.n	80145de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	015a      	lsls	r2, r3, #5
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	4413      	add	r3, r2
 80145c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	68ba      	ldr	r2, [r7, #8]
 80145ce:	0151      	lsls	r1, r2, #5
 80145d0:	68fa      	ldr	r2, [r7, #12]
 80145d2:	440a      	add	r2, r1
 80145d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80145dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	015a      	lsls	r2, r3, #5
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	4413      	add	r3, r2
 80145e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145ea:	681b      	ldr	r3, [r3, #0]
 80145ec:	68ba      	ldr	r2, [r7, #8]
 80145ee:	0151      	lsls	r1, r2, #5
 80145f0:	68fa      	ldr	r2, [r7, #12]
 80145f2:	440a      	add	r2, r1
 80145f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80145fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80145fe:	2300      	movs	r3, #0
}
 8014600:	4618      	mov	r0, r3
 8014602:	3714      	adds	r7, #20
 8014604:	46bd      	mov	sp, r7
 8014606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460a:	4770      	bx	lr

0801460c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801460c:	b480      	push	{r7}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	785b      	ldrb	r3, [r3, #1]
 8014624:	2b01      	cmp	r3, #1
 8014626:	d128      	bne.n	801467a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	015a      	lsls	r2, r3, #5
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	4413      	add	r3, r2
 8014630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	68ba      	ldr	r2, [r7, #8]
 8014638:	0151      	lsls	r1, r2, #5
 801463a:	68fa      	ldr	r2, [r7, #12]
 801463c:	440a      	add	r2, r1
 801463e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014646:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	791b      	ldrb	r3, [r3, #4]
 801464c:	2b03      	cmp	r3, #3
 801464e:	d003      	beq.n	8014658 <USB_EPClearStall+0x4c>
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	791b      	ldrb	r3, [r3, #4]
 8014654:	2b02      	cmp	r3, #2
 8014656:	d138      	bne.n	80146ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	015a      	lsls	r2, r3, #5
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	4413      	add	r3, r2
 8014660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	0151      	lsls	r1, r2, #5
 801466a:	68fa      	ldr	r2, [r7, #12]
 801466c:	440a      	add	r2, r1
 801466e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014676:	6013      	str	r3, [r2, #0]
 8014678:	e027      	b.n	80146ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	015a      	lsls	r2, r3, #5
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	4413      	add	r3, r2
 8014682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	68ba      	ldr	r2, [r7, #8]
 801468a:	0151      	lsls	r1, r2, #5
 801468c:	68fa      	ldr	r2, [r7, #12]
 801468e:	440a      	add	r2, r1
 8014690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014694:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014698:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	791b      	ldrb	r3, [r3, #4]
 801469e:	2b03      	cmp	r3, #3
 80146a0:	d003      	beq.n	80146aa <USB_EPClearStall+0x9e>
 80146a2:	683b      	ldr	r3, [r7, #0]
 80146a4:	791b      	ldrb	r3, [r3, #4]
 80146a6:	2b02      	cmp	r3, #2
 80146a8:	d10f      	bne.n	80146ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80146aa:	68bb      	ldr	r3, [r7, #8]
 80146ac:	015a      	lsls	r2, r3, #5
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	4413      	add	r3, r2
 80146b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	68ba      	ldr	r2, [r7, #8]
 80146ba:	0151      	lsls	r1, r2, #5
 80146bc:	68fa      	ldr	r2, [r7, #12]
 80146be:	440a      	add	r2, r1
 80146c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80146ca:	2300      	movs	r3, #0
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3714      	adds	r7, #20
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr

080146d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80146d8:	b480      	push	{r7}
 80146da:	b085      	sub	sp, #20
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	460b      	mov	r3, r1
 80146e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	68fa      	ldr	r2, [r7, #12]
 80146f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80146f6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80146fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014702:	681a      	ldr	r2, [r3, #0]
 8014704:	78fb      	ldrb	r3, [r7, #3]
 8014706:	011b      	lsls	r3, r3, #4
 8014708:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801470c:	68f9      	ldr	r1, [r7, #12]
 801470e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014712:	4313      	orrs	r3, r2
 8014714:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014716:	2300      	movs	r3, #0
}
 8014718:	4618      	mov	r0, r3
 801471a:	3714      	adds	r7, #20
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014724:	b480      	push	{r7}
 8014726:	b085      	sub	sp, #20
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801473e:	f023 0303 	bic.w	r3, r3, #3
 8014742:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014752:	f023 0302 	bic.w	r3, r3, #2
 8014756:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014758:	2300      	movs	r3, #0
}
 801475a:	4618      	mov	r0, r3
 801475c:	3714      	adds	r7, #20
 801475e:	46bd      	mov	sp, r7
 8014760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014764:	4770      	bx	lr

08014766 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014766:	b480      	push	{r7}
 8014768:	b085      	sub	sp, #20
 801476a:	af00      	add	r7, sp, #0
 801476c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014780:	f023 0303 	bic.w	r3, r3, #3
 8014784:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014794:	f043 0302 	orr.w	r3, r3, #2
 8014798:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801479a:	2300      	movs	r3, #0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3714      	adds	r7, #20
 80147a0:	46bd      	mov	sp, r7
 80147a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147a6:	4770      	bx	lr

080147a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80147a8:	b480      	push	{r7}
 80147aa:	b085      	sub	sp, #20
 80147ac:	af00      	add	r7, sp, #0
 80147ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	695b      	ldr	r3, [r3, #20]
 80147b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	699b      	ldr	r3, [r3, #24]
 80147ba:	68fa      	ldr	r2, [r7, #12]
 80147bc:	4013      	ands	r3, r2
 80147be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80147c0:	68fb      	ldr	r3, [r7, #12]
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3714      	adds	r7, #20
 80147c6:	46bd      	mov	sp, r7
 80147c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147cc:	4770      	bx	lr

080147ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80147ce:	b480      	push	{r7}
 80147d0:	b085      	sub	sp, #20
 80147d2:	af00      	add	r7, sp, #0
 80147d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147e0:	699b      	ldr	r3, [r3, #24]
 80147e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80147ea:	69db      	ldr	r3, [r3, #28]
 80147ec:	68ba      	ldr	r2, [r7, #8]
 80147ee:	4013      	ands	r3, r2
 80147f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	0c1b      	lsrs	r3, r3, #16
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3714      	adds	r7, #20
 80147fa:	46bd      	mov	sp, r7
 80147fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014800:	4770      	bx	lr

08014802 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014802:	b480      	push	{r7}
 8014804:	b085      	sub	sp, #20
 8014806:	af00      	add	r7, sp, #0
 8014808:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014814:	699b      	ldr	r3, [r3, #24]
 8014816:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801481e:	69db      	ldr	r3, [r3, #28]
 8014820:	68ba      	ldr	r2, [r7, #8]
 8014822:	4013      	ands	r3, r2
 8014824:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	b29b      	uxth	r3, r3
}
 801482a:	4618      	mov	r0, r3
 801482c:	3714      	adds	r7, #20
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr

08014836 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014836:	b480      	push	{r7}
 8014838:	b085      	sub	sp, #20
 801483a:	af00      	add	r7, sp, #0
 801483c:	6078      	str	r0, [r7, #4]
 801483e:	460b      	mov	r3, r1
 8014840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014846:	78fb      	ldrb	r3, [r7, #3]
 8014848:	015a      	lsls	r2, r3, #5
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	4413      	add	r3, r2
 801484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014852:	689b      	ldr	r3, [r3, #8]
 8014854:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801485c:	695b      	ldr	r3, [r3, #20]
 801485e:	68ba      	ldr	r2, [r7, #8]
 8014860:	4013      	ands	r3, r2
 8014862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014864:	68bb      	ldr	r3, [r7, #8]
}
 8014866:	4618      	mov	r0, r3
 8014868:	3714      	adds	r7, #20
 801486a:	46bd      	mov	sp, r7
 801486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014870:	4770      	bx	lr

08014872 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014872:	b480      	push	{r7}
 8014874:	b087      	sub	sp, #28
 8014876:	af00      	add	r7, sp, #0
 8014878:	6078      	str	r0, [r7, #4]
 801487a:	460b      	mov	r3, r1
 801487c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014888:	691b      	ldr	r3, [r3, #16]
 801488a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801488c:	697b      	ldr	r3, [r7, #20]
 801488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014894:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014896:	78fb      	ldrb	r3, [r7, #3]
 8014898:	f003 030f 	and.w	r3, r3, #15
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	fa22 f303 	lsr.w	r3, r2, r3
 80148a2:	01db      	lsls	r3, r3, #7
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	693a      	ldr	r2, [r7, #16]
 80148a8:	4313      	orrs	r3, r2
 80148aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80148ac:	78fb      	ldrb	r3, [r7, #3]
 80148ae:	015a      	lsls	r2, r3, #5
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	4413      	add	r3, r2
 80148b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	693a      	ldr	r2, [r7, #16]
 80148bc:	4013      	ands	r3, r2
 80148be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80148c0:	68bb      	ldr	r3, [r7, #8]
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	371c      	adds	r7, #28
 80148c6:	46bd      	mov	sp, r7
 80148c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148cc:	4770      	bx	lr

080148ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80148ce:	b480      	push	{r7}
 80148d0:	b083      	sub	sp, #12
 80148d2:	af00      	add	r7, sp, #0
 80148d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	695b      	ldr	r3, [r3, #20]
 80148da:	f003 0301 	and.w	r3, r3, #1
}
 80148de:	4618      	mov	r0, r3
 80148e0:	370c      	adds	r7, #12
 80148e2:	46bd      	mov	sp, r7
 80148e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e8:	4770      	bx	lr
	...

080148ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80148ec:	b480      	push	{r7}
 80148ee:	b085      	sub	sp, #20
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014906:	4619      	mov	r1, r3
 8014908:	4b09      	ldr	r3, [pc, #36]	; (8014930 <USB_ActivateSetup+0x44>)
 801490a:	4013      	ands	r3, r2
 801490c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014914:	685b      	ldr	r3, [r3, #4]
 8014916:	68fa      	ldr	r2, [r7, #12]
 8014918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801491c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014920:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014922:	2300      	movs	r3, #0
}
 8014924:	4618      	mov	r0, r3
 8014926:	3714      	adds	r7, #20
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr
 8014930:	fffff800 	.word	0xfffff800

08014934 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014934:	b480      	push	{r7}
 8014936:	b087      	sub	sp, #28
 8014938:	af00      	add	r7, sp, #0
 801493a:	60f8      	str	r0, [r7, #12]
 801493c:	460b      	mov	r3, r1
 801493e:	607a      	str	r2, [r7, #4]
 8014940:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	333c      	adds	r3, #60	; 0x3c
 801494a:	3304      	adds	r3, #4
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	4a26      	ldr	r2, [pc, #152]	; (80149ec <USB_EP0_OutStart+0xb8>)
 8014954:	4293      	cmp	r3, r2
 8014956:	d90a      	bls.n	801496e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014958:	697b      	ldr	r3, [r7, #20]
 801495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014968:	d101      	bne.n	801496e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801496a:	2300      	movs	r3, #0
 801496c:	e037      	b.n	80149de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014974:	461a      	mov	r2, r3
 8014976:	2300      	movs	r3, #0
 8014978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801497a:	697b      	ldr	r3, [r7, #20]
 801497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014980:	691b      	ldr	r3, [r3, #16]
 8014982:	697a      	ldr	r2, [r7, #20]
 8014984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801498c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014994:	691b      	ldr	r3, [r3, #16]
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801499c:	f043 0318 	orr.w	r3, r3, #24
 80149a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149a8:	691b      	ldr	r3, [r3, #16]
 80149aa:	697a      	ldr	r2, [r7, #20]
 80149ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80149b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80149b6:	7afb      	ldrb	r3, [r7, #11]
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d10f      	bne.n	80149dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149c2:	461a      	mov	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	697a      	ldr	r2, [r7, #20]
 80149d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80149da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80149dc:	2300      	movs	r3, #0
}
 80149de:	4618      	mov	r0, r3
 80149e0:	371c      	adds	r7, #28
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr
 80149ea:	bf00      	nop
 80149ec:	4f54300a 	.word	0x4f54300a

080149f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80149f0:	b480      	push	{r7}
 80149f2:	b085      	sub	sp, #20
 80149f4:	af00      	add	r7, sp, #0
 80149f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80149f8:	2300      	movs	r3, #0
 80149fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	3301      	adds	r3, #1
 8014a00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	4a13      	ldr	r2, [pc, #76]	; (8014a54 <USB_CoreReset+0x64>)
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d901      	bls.n	8014a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	e01b      	b.n	8014a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	daf2      	bge.n	80149fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014a16:	2300      	movs	r3, #0
 8014a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	691b      	ldr	r3, [r3, #16]
 8014a1e:	f043 0201 	orr.w	r2, r3, #1
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	3301      	adds	r3, #1
 8014a2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	4a09      	ldr	r2, [pc, #36]	; (8014a54 <USB_CoreReset+0x64>)
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d901      	bls.n	8014a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014a34:	2303      	movs	r3, #3
 8014a36:	e006      	b.n	8014a46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	691b      	ldr	r3, [r3, #16]
 8014a3c:	f003 0301 	and.w	r3, r3, #1
 8014a40:	2b01      	cmp	r3, #1
 8014a42:	d0f0      	beq.n	8014a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8014a44:	2300      	movs	r3, #0
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3714      	adds	r7, #20
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a50:	4770      	bx	lr
 8014a52:	bf00      	nop
 8014a54:	00030d40 	.word	0x00030d40

08014a58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014a5c:	4904      	ldr	r1, [pc, #16]	; (8014a70 <MX_FATFS_Init+0x18>)
 8014a5e:	4805      	ldr	r0, [pc, #20]	; (8014a74 <MX_FATFS_Init+0x1c>)
 8014a60:	f004 fb78 	bl	8019154 <FATFS_LinkDriver>
 8014a64:	4603      	mov	r3, r0
 8014a66:	461a      	mov	r2, r3
 8014a68:	4b03      	ldr	r3, [pc, #12]	; (8014a78 <MX_FATFS_Init+0x20>)
 8014a6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014a6c:	bf00      	nop
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	24000d6c 	.word	0x24000d6c
 8014a74:	0801d408 	.word	0x0801d408
 8014a78:	24000d68 	.word	0x24000d68

08014a7c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014a80:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014a92:	2300      	movs	r3, #0
 8014a94:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014a96:	f000 f885 	bl	8014ba4 <BSP_SD_IsDetected>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d001      	beq.n	8014aa4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014aa0:	2302      	movs	r3, #2
 8014aa2:	e012      	b.n	8014aca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8014aa4:	480b      	ldr	r0, [pc, #44]	; (8014ad4 <BSP_SD_Init+0x48>)
 8014aa6:	f7f8 fd89 	bl	800d5bc <HAL_SD_Init>
 8014aaa:	4603      	mov	r3, r0
 8014aac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014aae:	79fb      	ldrb	r3, [r7, #7]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d109      	bne.n	8014ac8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014ab8:	4806      	ldr	r0, [pc, #24]	; (8014ad4 <BSP_SD_Init+0x48>)
 8014aba:	f7f9 fc39 	bl	800e330 <HAL_SD_ConfigWideBusOperation>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8014aca:	4618      	mov	r0, r3
 8014acc:	3708      	adds	r7, #8
 8014ace:	46bd      	mov	sp, r7
 8014ad0:	bd80      	pop	{r7, pc}
 8014ad2:	bf00      	nop
 8014ad4:	24000754 	.word	0x24000754

08014ad8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b086      	sub	sp, #24
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	68ba      	ldr	r2, [r7, #8]
 8014aec:	68f9      	ldr	r1, [r7, #12]
 8014aee:	4806      	ldr	r0, [pc, #24]	; (8014b08 <BSP_SD_ReadBlocks_DMA+0x30>)
 8014af0:	f7f8 fe7e 	bl	800d7f0 <HAL_SD_ReadBlocks_DMA>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d001      	beq.n	8014afe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014afa:	2301      	movs	r3, #1
 8014afc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3718      	adds	r7, #24
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}
 8014b08:	24000754 	.word	0x24000754

08014b0c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b086      	sub	sp, #24
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	60f8      	str	r0, [r7, #12]
 8014b14:	60b9      	str	r1, [r7, #8]
 8014b16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	68ba      	ldr	r2, [r7, #8]
 8014b20:	68f9      	ldr	r1, [r7, #12]
 8014b22:	4806      	ldr	r0, [pc, #24]	; (8014b3c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014b24:	f7f8 ff0c 	bl	800d940 <HAL_SD_WriteBlocks_DMA>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d001      	beq.n	8014b32 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014b2e:	2301      	movs	r3, #1
 8014b30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b34:	4618      	mov	r0, r3
 8014b36:	3718      	adds	r7, #24
 8014b38:	46bd      	mov	sp, r7
 8014b3a:	bd80      	pop	{r7, pc}
 8014b3c:	24000754 	.word	0x24000754

08014b40 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014b40:	b580      	push	{r7, lr}
 8014b42:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014b44:	4805      	ldr	r0, [pc, #20]	; (8014b5c <BSP_SD_GetCardState+0x1c>)
 8014b46:	f7f9 fd05 	bl	800e554 <HAL_SD_GetCardState>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b04      	cmp	r3, #4
 8014b4e:	bf14      	ite	ne
 8014b50:	2301      	movne	r3, #1
 8014b52:	2300      	moveq	r3, #0
 8014b54:	b2db      	uxtb	r3, r3
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	24000754 	.word	0x24000754

08014b60 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8014b68:	6879      	ldr	r1, [r7, #4]
 8014b6a:	4803      	ldr	r0, [pc, #12]	; (8014b78 <BSP_SD_GetCardInfo+0x18>)
 8014b6c:	f7f9 fbb4 	bl	800e2d8 <HAL_SD_GetCardInfo>
}
 8014b70:	bf00      	nop
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	24000754 	.word	0x24000754

08014b7c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b082      	sub	sp, #8
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014b84:	f000 f9a0 	bl	8014ec8 <BSP_SD_WriteCpltCallback>
}
 8014b88:	bf00      	nop
 8014b8a:	3708      	adds	r7, #8
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b082      	sub	sp, #8
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014b98:	f000 f9a2 	bl	8014ee0 <BSP_SD_ReadCpltCallback>
}
 8014b9c:	bf00      	nop
 8014b9e:	3708      	adds	r7, #8
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}

08014ba4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014baa:	2301      	movs	r3, #1
 8014bac:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014bae:	f000 f80b 	bl	8014bc8 <BSP_PlatformIsDetected>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d101      	bne.n	8014bbc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014bbc:	79fb      	ldrb	r3, [r7, #7]
 8014bbe:	b2db      	uxtb	r3, r3
}
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3708      	adds	r7, #8
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014bd2:	2101      	movs	r1, #1
 8014bd4:	4806      	ldr	r0, [pc, #24]	; (8014bf0 <BSP_PlatformIsDetected+0x28>)
 8014bd6:	f7f2 fef5 	bl	80079c4 <HAL_GPIO_ReadPin>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d001      	beq.n	8014be4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014be0:	2300      	movs	r3, #0
 8014be2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014be4:	79fb      	ldrb	r3, [r7, #7]
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3708      	adds	r7, #8
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	58020c00 	.word	0x58020c00

08014bf4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014bfc:	f7ef fc9a 	bl	8004534 <HAL_GetTick>
 8014c00:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014c02:	e006      	b.n	8014c12 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014c04:	f7ff ff9c 	bl	8014b40 <BSP_SD_GetCardState>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d101      	bne.n	8014c12 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014c0e:	2300      	movs	r3, #0
 8014c10:	e009      	b.n	8014c26 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014c12:	f7ef fc8f 	bl	8004534 <HAL_GetTick>
 8014c16:	4602      	mov	r2, r0
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	1ad3      	subs	r3, r2, r3
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d8f0      	bhi.n	8014c04 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3710      	adds	r7, #16
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	4603      	mov	r3, r0
 8014c38:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014c3a:	4b0b      	ldr	r3, [pc, #44]	; (8014c68 <SD_CheckStatus+0x38>)
 8014c3c:	2201      	movs	r2, #1
 8014c3e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014c40:	f7ff ff7e 	bl	8014b40 <BSP_SD_GetCardState>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d107      	bne.n	8014c5a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014c4a:	4b07      	ldr	r3, [pc, #28]	; (8014c68 <SD_CheckStatus+0x38>)
 8014c4c:	781b      	ldrb	r3, [r3, #0]
 8014c4e:	b2db      	uxtb	r3, r3
 8014c50:	f023 0301 	bic.w	r3, r3, #1
 8014c54:	b2da      	uxtb	r2, r3
 8014c56:	4b04      	ldr	r3, [pc, #16]	; (8014c68 <SD_CheckStatus+0x38>)
 8014c58:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014c5a:	4b03      	ldr	r3, [pc, #12]	; (8014c68 <SD_CheckStatus+0x38>)
 8014c5c:	781b      	ldrb	r3, [r3, #0]
 8014c5e:	b2db      	uxtb	r3, r3
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3708      	adds	r7, #8
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	2400000d 	.word	0x2400000d

08014c6c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	4603      	mov	r3, r0
 8014c74:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014c76:	f7ff ff09 	bl	8014a8c <BSP_SD_Init>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d107      	bne.n	8014c90 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014c80:	79fb      	ldrb	r3, [r7, #7]
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7ff ffd4 	bl	8014c30 <SD_CheckStatus>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	461a      	mov	r2, r3
 8014c8c:	4b04      	ldr	r3, [pc, #16]	; (8014ca0 <SD_initialize+0x34>)
 8014c8e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014c90:	4b03      	ldr	r3, [pc, #12]	; (8014ca0 <SD_initialize+0x34>)
 8014c92:	781b      	ldrb	r3, [r3, #0]
 8014c94:	b2db      	uxtb	r3, r3
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3708      	adds	r7, #8
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	2400000d 	.word	0x2400000d

08014ca4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	4603      	mov	r3, r0
 8014cac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014cae:	79fb      	ldrb	r3, [r7, #7]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7ff ffbd 	bl	8014c30 <SD_CheckStatus>
 8014cb6:	4603      	mov	r3, r0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3708      	adds	r7, #8
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60b9      	str	r1, [r7, #8]
 8014cc8:	607a      	str	r2, [r7, #4]
 8014cca:	603b      	str	r3, [r7, #0]
 8014ccc:	4603      	mov	r3, r0
 8014cce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014cd4:	f247 5030 	movw	r0, #30000	; 0x7530
 8014cd8:	f7ff ff8c 	bl	8014bf4 <SD_CheckStatusWithTimeout>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	da01      	bge.n	8014ce6 <SD_read+0x26>
  {
    return res;
 8014ce2:	7dfb      	ldrb	r3, [r7, #23]
 8014ce4:	e03b      	b.n	8014d5e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014ce6:	683a      	ldr	r2, [r7, #0]
 8014ce8:	6879      	ldr	r1, [r7, #4]
 8014cea:	68b8      	ldr	r0, [r7, #8]
 8014cec:	f7ff fef4 	bl	8014ad8 <BSP_SD_ReadBlocks_DMA>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d132      	bne.n	8014d5c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014cf6:	4b1c      	ldr	r3, [pc, #112]	; (8014d68 <SD_read+0xa8>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014cfc:	f7ef fc1a 	bl	8004534 <HAL_GetTick>
 8014d00:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014d02:	bf00      	nop
 8014d04:	4b18      	ldr	r3, [pc, #96]	; (8014d68 <SD_read+0xa8>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d108      	bne.n	8014d1e <SD_read+0x5e>
 8014d0c:	f7ef fc12 	bl	8004534 <HAL_GetTick>
 8014d10:	4602      	mov	r2, r0
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	1ad3      	subs	r3, r2, r3
 8014d16:	f247 522f 	movw	r2, #29999	; 0x752f
 8014d1a:	4293      	cmp	r3, r2
 8014d1c:	d9f2      	bls.n	8014d04 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014d1e:	4b12      	ldr	r3, [pc, #72]	; (8014d68 <SD_read+0xa8>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d102      	bne.n	8014d2c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014d26:	2301      	movs	r3, #1
 8014d28:	75fb      	strb	r3, [r7, #23]
 8014d2a:	e017      	b.n	8014d5c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014d2c:	4b0e      	ldr	r3, [pc, #56]	; (8014d68 <SD_read+0xa8>)
 8014d2e:	2200      	movs	r2, #0
 8014d30:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014d32:	f7ef fbff 	bl	8004534 <HAL_GetTick>
 8014d36:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014d38:	e007      	b.n	8014d4a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014d3a:	f7ff ff01 	bl	8014b40 <BSP_SD_GetCardState>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d102      	bne.n	8014d4a <SD_read+0x8a>
          {
            res = RES_OK;
 8014d44:	2300      	movs	r3, #0
 8014d46:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014d48:	e008      	b.n	8014d5c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014d4a:	f7ef fbf3 	bl	8004534 <HAL_GetTick>
 8014d4e:	4602      	mov	r2, r0
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	f247 522f 	movw	r2, #29999	; 0x752f
 8014d58:	4293      	cmp	r3, r2
 8014d5a:	d9ee      	bls.n	8014d3a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3718      	adds	r7, #24
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}
 8014d66:	bf00      	nop
 8014d68:	240011d4 	.word	0x240011d4

08014d6c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b086      	sub	sp, #24
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	60b9      	str	r1, [r7, #8]
 8014d74:	607a      	str	r2, [r7, #4]
 8014d76:	603b      	str	r3, [r7, #0]
 8014d78:	4603      	mov	r3, r0
 8014d7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014d80:	4b24      	ldr	r3, [pc, #144]	; (8014e14 <SD_write+0xa8>)
 8014d82:	2200      	movs	r2, #0
 8014d84:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014d86:	f247 5030 	movw	r0, #30000	; 0x7530
 8014d8a:	f7ff ff33 	bl	8014bf4 <SD_CheckStatusWithTimeout>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	da01      	bge.n	8014d98 <SD_write+0x2c>
  {
    return res;
 8014d94:	7dfb      	ldrb	r3, [r7, #23]
 8014d96:	e038      	b.n	8014e0a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014d98:	683a      	ldr	r2, [r7, #0]
 8014d9a:	6879      	ldr	r1, [r7, #4]
 8014d9c:	68b8      	ldr	r0, [r7, #8]
 8014d9e:	f7ff feb5 	bl	8014b0c <BSP_SD_WriteBlocks_DMA>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d12f      	bne.n	8014e08 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014da8:	f7ef fbc4 	bl	8004534 <HAL_GetTick>
 8014dac:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014dae:	bf00      	nop
 8014db0:	4b18      	ldr	r3, [pc, #96]	; (8014e14 <SD_write+0xa8>)
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d108      	bne.n	8014dca <SD_write+0x5e>
 8014db8:	f7ef fbbc 	bl	8004534 <HAL_GetTick>
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	1ad3      	subs	r3, r2, r3
 8014dc2:	f247 522f 	movw	r2, #29999	; 0x752f
 8014dc6:	4293      	cmp	r3, r2
 8014dc8:	d9f2      	bls.n	8014db0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014dca:	4b12      	ldr	r3, [pc, #72]	; (8014e14 <SD_write+0xa8>)
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d102      	bne.n	8014dd8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014dd2:	2301      	movs	r3, #1
 8014dd4:	75fb      	strb	r3, [r7, #23]
 8014dd6:	e017      	b.n	8014e08 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014dd8:	4b0e      	ldr	r3, [pc, #56]	; (8014e14 <SD_write+0xa8>)
 8014dda:	2200      	movs	r2, #0
 8014ddc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014dde:	f7ef fba9 	bl	8004534 <HAL_GetTick>
 8014de2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014de4:	e007      	b.n	8014df6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014de6:	f7ff feab 	bl	8014b40 <BSP_SD_GetCardState>
 8014dea:	4603      	mov	r3, r0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d102      	bne.n	8014df6 <SD_write+0x8a>
          {
            res = RES_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	75fb      	strb	r3, [r7, #23]
            break;
 8014df4:	e008      	b.n	8014e08 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014df6:	f7ef fb9d 	bl	8004534 <HAL_GetTick>
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	1ad3      	subs	r3, r2, r3
 8014e00:	f247 522f 	movw	r2, #29999	; 0x752f
 8014e04:	4293      	cmp	r3, r2
 8014e06:	d9ee      	bls.n	8014de6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	3718      	adds	r7, #24
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	240011d0 	.word	0x240011d0

08014e18 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	b08c      	sub	sp, #48	; 0x30
 8014e1c:	af00      	add	r7, sp, #0
 8014e1e:	4603      	mov	r3, r0
 8014e20:	603a      	str	r2, [r7, #0]
 8014e22:	71fb      	strb	r3, [r7, #7]
 8014e24:	460b      	mov	r3, r1
 8014e26:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014e28:	2301      	movs	r3, #1
 8014e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014e2e:	4b25      	ldr	r3, [pc, #148]	; (8014ec4 <SD_ioctl+0xac>)
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	f003 0301 	and.w	r3, r3, #1
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d001      	beq.n	8014e40 <SD_ioctl+0x28>
 8014e3c:	2303      	movs	r3, #3
 8014e3e:	e03c      	b.n	8014eba <SD_ioctl+0xa2>

  switch (cmd)
 8014e40:	79bb      	ldrb	r3, [r7, #6]
 8014e42:	2b03      	cmp	r3, #3
 8014e44:	d834      	bhi.n	8014eb0 <SD_ioctl+0x98>
 8014e46:	a201      	add	r2, pc, #4	; (adr r2, 8014e4c <SD_ioctl+0x34>)
 8014e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e4c:	08014e5d 	.word	0x08014e5d
 8014e50:	08014e65 	.word	0x08014e65
 8014e54:	08014e7d 	.word	0x08014e7d
 8014e58:	08014e97 	.word	0x08014e97
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e62:	e028      	b.n	8014eb6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e64:	f107 0308 	add.w	r3, r7, #8
 8014e68:	4618      	mov	r0, r3
 8014e6a:	f7ff fe79 	bl	8014b60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014e6e:	6a3a      	ldr	r2, [r7, #32]
 8014e70:	683b      	ldr	r3, [r7, #0]
 8014e72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014e74:	2300      	movs	r3, #0
 8014e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e7a:	e01c      	b.n	8014eb6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e7c:	f107 0308 	add.w	r3, r7, #8
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7ff fe6d 	bl	8014b60 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e88:	b29a      	uxth	r2, r3
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e94:	e00f      	b.n	8014eb6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e96:	f107 0308 	add.w	r3, r7, #8
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7ff fe60 	bl	8014b60 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ea2:	0a5a      	lsrs	r2, r3, #9
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014eae:	e002      	b.n	8014eb6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014eb0:	2304      	movs	r3, #4
 8014eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3730      	adds	r7, #48	; 0x30
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	2400000d 	.word	0x2400000d

08014ec8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014ecc:	4b03      	ldr	r3, [pc, #12]	; (8014edc <BSP_SD_WriteCpltCallback+0x14>)
 8014ece:	2201      	movs	r2, #1
 8014ed0:	601a      	str	r2, [r3, #0]
}
 8014ed2:	bf00      	nop
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr
 8014edc:	240011d0 	.word	0x240011d0

08014ee0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014ee0:	b480      	push	{r7}
 8014ee2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014ee4:	4b03      	ldr	r3, [pc, #12]	; (8014ef4 <BSP_SD_ReadCpltCallback+0x14>)
 8014ee6:	2201      	movs	r2, #1
 8014ee8:	601a      	str	r2, [r3, #0]
}
 8014eea:	bf00      	nop
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr
 8014ef4:	240011d4 	.word	0x240011d4

08014ef8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	460b      	mov	r3, r1
 8014f02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014f04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014f08:	f004 fe16 	bl	8019b38 <USBD_static_malloc>
 8014f0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014f0e:	68fb      	ldr	r3, [r7, #12]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d109      	bne.n	8014f28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	32b0      	adds	r2, #176	; 0xb0
 8014f1e:	2100      	movs	r1, #0
 8014f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014f24:	2302      	movs	r3, #2
 8014f26:	e0d4      	b.n	80150d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014f28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	68f8      	ldr	r0, [r7, #12]
 8014f30:	f004 fe70 	bl	8019c14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	32b0      	adds	r2, #176	; 0xb0
 8014f3e:	68f9      	ldr	r1, [r7, #12]
 8014f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	32b0      	adds	r2, #176	; 0xb0
 8014f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	7c1b      	ldrb	r3, [r3, #16]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d138      	bne.n	8014fd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014f60:	4b5e      	ldr	r3, [pc, #376]	; (80150dc <USBD_CDC_Init+0x1e4>)
 8014f62:	7819      	ldrb	r1, [r3, #0]
 8014f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f68:	2202      	movs	r2, #2
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f004 fcc1 	bl	80198f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014f70:	4b5a      	ldr	r3, [pc, #360]	; (80150dc <USBD_CDC_Init+0x1e4>)
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	f003 020f 	and.w	r2, r3, #15
 8014f78:	6879      	ldr	r1, [r7, #4]
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	4413      	add	r3, r2
 8014f80:	009b      	lsls	r3, r3, #2
 8014f82:	440b      	add	r3, r1
 8014f84:	3324      	adds	r3, #36	; 0x24
 8014f86:	2201      	movs	r2, #1
 8014f88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014f8a:	4b55      	ldr	r3, [pc, #340]	; (80150e0 <USBD_CDC_Init+0x1e8>)
 8014f8c:	7819      	ldrb	r1, [r3, #0]
 8014f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f92:	2202      	movs	r2, #2
 8014f94:	6878      	ldr	r0, [r7, #4]
 8014f96:	f004 fcac 	bl	80198f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014f9a:	4b51      	ldr	r3, [pc, #324]	; (80150e0 <USBD_CDC_Init+0x1e8>)
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	f003 020f 	and.w	r2, r3, #15
 8014fa2:	6879      	ldr	r1, [r7, #4]
 8014fa4:	4613      	mov	r3, r2
 8014fa6:	009b      	lsls	r3, r3, #2
 8014fa8:	4413      	add	r3, r2
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	440b      	add	r3, r1
 8014fae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014fb6:	4b4b      	ldr	r3, [pc, #300]	; (80150e4 <USBD_CDC_Init+0x1ec>)
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	f003 020f 	and.w	r2, r3, #15
 8014fbe:	6879      	ldr	r1, [r7, #4]
 8014fc0:	4613      	mov	r3, r2
 8014fc2:	009b      	lsls	r3, r3, #2
 8014fc4:	4413      	add	r3, r2
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	440b      	add	r3, r1
 8014fca:	3326      	adds	r3, #38	; 0x26
 8014fcc:	2210      	movs	r2, #16
 8014fce:	801a      	strh	r2, [r3, #0]
 8014fd0:	e035      	b.n	801503e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014fd2:	4b42      	ldr	r3, [pc, #264]	; (80150dc <USBD_CDC_Init+0x1e4>)
 8014fd4:	7819      	ldrb	r1, [r3, #0]
 8014fd6:	2340      	movs	r3, #64	; 0x40
 8014fd8:	2202      	movs	r2, #2
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f004 fc89 	bl	80198f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014fe0:	4b3e      	ldr	r3, [pc, #248]	; (80150dc <USBD_CDC_Init+0x1e4>)
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	f003 020f 	and.w	r2, r3, #15
 8014fe8:	6879      	ldr	r1, [r7, #4]
 8014fea:	4613      	mov	r3, r2
 8014fec:	009b      	lsls	r3, r3, #2
 8014fee:	4413      	add	r3, r2
 8014ff0:	009b      	lsls	r3, r3, #2
 8014ff2:	440b      	add	r3, r1
 8014ff4:	3324      	adds	r3, #36	; 0x24
 8014ff6:	2201      	movs	r2, #1
 8014ff8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014ffa:	4b39      	ldr	r3, [pc, #228]	; (80150e0 <USBD_CDC_Init+0x1e8>)
 8014ffc:	7819      	ldrb	r1, [r3, #0]
 8014ffe:	2340      	movs	r3, #64	; 0x40
 8015000:	2202      	movs	r2, #2
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f004 fc75 	bl	80198f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015008:	4b35      	ldr	r3, [pc, #212]	; (80150e0 <USBD_CDC_Init+0x1e8>)
 801500a:	781b      	ldrb	r3, [r3, #0]
 801500c:	f003 020f 	and.w	r2, r3, #15
 8015010:	6879      	ldr	r1, [r7, #4]
 8015012:	4613      	mov	r3, r2
 8015014:	009b      	lsls	r3, r3, #2
 8015016:	4413      	add	r3, r2
 8015018:	009b      	lsls	r3, r3, #2
 801501a:	440b      	add	r3, r1
 801501c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015020:	2201      	movs	r2, #1
 8015022:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015024:	4b2f      	ldr	r3, [pc, #188]	; (80150e4 <USBD_CDC_Init+0x1ec>)
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	f003 020f 	and.w	r2, r3, #15
 801502c:	6879      	ldr	r1, [r7, #4]
 801502e:	4613      	mov	r3, r2
 8015030:	009b      	lsls	r3, r3, #2
 8015032:	4413      	add	r3, r2
 8015034:	009b      	lsls	r3, r3, #2
 8015036:	440b      	add	r3, r1
 8015038:	3326      	adds	r3, #38	; 0x26
 801503a:	2210      	movs	r2, #16
 801503c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801503e:	4b29      	ldr	r3, [pc, #164]	; (80150e4 <USBD_CDC_Init+0x1ec>)
 8015040:	7819      	ldrb	r1, [r3, #0]
 8015042:	2308      	movs	r3, #8
 8015044:	2203      	movs	r2, #3
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f004 fc53 	bl	80198f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801504c:	4b25      	ldr	r3, [pc, #148]	; (80150e4 <USBD_CDC_Init+0x1ec>)
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	f003 020f 	and.w	r2, r3, #15
 8015054:	6879      	ldr	r1, [r7, #4]
 8015056:	4613      	mov	r3, r2
 8015058:	009b      	lsls	r3, r3, #2
 801505a:	4413      	add	r3, r2
 801505c:	009b      	lsls	r3, r3, #2
 801505e:	440b      	add	r3, r1
 8015060:	3324      	adds	r3, #36	; 0x24
 8015062:	2201      	movs	r2, #1
 8015064:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2200      	movs	r2, #0
 801506a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015074:	687a      	ldr	r2, [r7, #4]
 8015076:	33b0      	adds	r3, #176	; 0xb0
 8015078:	009b      	lsls	r3, r3, #2
 801507a:	4413      	add	r3, r2
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	2200      	movs	r2, #0
 8015086:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2200      	movs	r2, #0
 801508e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015098:	2b00      	cmp	r3, #0
 801509a:	d101      	bne.n	80150a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801509c:	2302      	movs	r3, #2
 801509e:	e018      	b.n	80150d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	7c1b      	ldrb	r3, [r3, #16]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d10a      	bne.n	80150be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80150a8:	4b0d      	ldr	r3, [pc, #52]	; (80150e0 <USBD_CDC_Init+0x1e8>)
 80150aa:	7819      	ldrb	r1, [r3, #0]
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80150b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f004 fd0a 	bl	8019ad0 <USBD_LL_PrepareReceive>
 80150bc:	e008      	b.n	80150d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80150be:	4b08      	ldr	r3, [pc, #32]	; (80150e0 <USBD_CDC_Init+0x1e8>)
 80150c0:	7819      	ldrb	r1, [r3, #0]
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80150c8:	2340      	movs	r3, #64	; 0x40
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f004 fd00 	bl	8019ad0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80150d0:	2300      	movs	r3, #0
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	3710      	adds	r7, #16
 80150d6:	46bd      	mov	sp, r7
 80150d8:	bd80      	pop	{r7, pc}
 80150da:	bf00      	nop
 80150dc:	24000097 	.word	0x24000097
 80150e0:	24000098 	.word	0x24000098
 80150e4:	24000099 	.word	0x24000099

080150e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b082      	sub	sp, #8
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	460b      	mov	r3, r1
 80150f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80150f4:	4b3a      	ldr	r3, [pc, #232]	; (80151e0 <USBD_CDC_DeInit+0xf8>)
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	4619      	mov	r1, r3
 80150fa:	6878      	ldr	r0, [r7, #4]
 80150fc:	f004 fc1f 	bl	801993e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015100:	4b37      	ldr	r3, [pc, #220]	; (80151e0 <USBD_CDC_DeInit+0xf8>)
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	f003 020f 	and.w	r2, r3, #15
 8015108:	6879      	ldr	r1, [r7, #4]
 801510a:	4613      	mov	r3, r2
 801510c:	009b      	lsls	r3, r3, #2
 801510e:	4413      	add	r3, r2
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	440b      	add	r3, r1
 8015114:	3324      	adds	r3, #36	; 0x24
 8015116:	2200      	movs	r2, #0
 8015118:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801511a:	4b32      	ldr	r3, [pc, #200]	; (80151e4 <USBD_CDC_DeInit+0xfc>)
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	4619      	mov	r1, r3
 8015120:	6878      	ldr	r0, [r7, #4]
 8015122:	f004 fc0c 	bl	801993e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015126:	4b2f      	ldr	r3, [pc, #188]	; (80151e4 <USBD_CDC_DeInit+0xfc>)
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	f003 020f 	and.w	r2, r3, #15
 801512e:	6879      	ldr	r1, [r7, #4]
 8015130:	4613      	mov	r3, r2
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	4413      	add	r3, r2
 8015136:	009b      	lsls	r3, r3, #2
 8015138:	440b      	add	r3, r1
 801513a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801513e:	2200      	movs	r2, #0
 8015140:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015142:	4b29      	ldr	r3, [pc, #164]	; (80151e8 <USBD_CDC_DeInit+0x100>)
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	4619      	mov	r1, r3
 8015148:	6878      	ldr	r0, [r7, #4]
 801514a:	f004 fbf8 	bl	801993e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801514e:	4b26      	ldr	r3, [pc, #152]	; (80151e8 <USBD_CDC_DeInit+0x100>)
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	f003 020f 	and.w	r2, r3, #15
 8015156:	6879      	ldr	r1, [r7, #4]
 8015158:	4613      	mov	r3, r2
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	4413      	add	r3, r2
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	440b      	add	r3, r1
 8015162:	3324      	adds	r3, #36	; 0x24
 8015164:	2200      	movs	r2, #0
 8015166:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015168:	4b1f      	ldr	r3, [pc, #124]	; (80151e8 <USBD_CDC_DeInit+0x100>)
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	f003 020f 	and.w	r2, r3, #15
 8015170:	6879      	ldr	r1, [r7, #4]
 8015172:	4613      	mov	r3, r2
 8015174:	009b      	lsls	r3, r3, #2
 8015176:	4413      	add	r3, r2
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	440b      	add	r3, r1
 801517c:	3326      	adds	r3, #38	; 0x26
 801517e:	2200      	movs	r2, #0
 8015180:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	32b0      	adds	r2, #176	; 0xb0
 801518c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d01f      	beq.n	80151d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801519a:	687a      	ldr	r2, [r7, #4]
 801519c:	33b0      	adds	r3, #176	; 0xb0
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	4413      	add	r3, r2
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	32b0      	adds	r2, #176	; 0xb0
 80151b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f004 fccc 	bl	8019b54 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	32b0      	adds	r2, #176	; 0xb0
 80151c6:	2100      	movs	r1, #0
 80151c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2200      	movs	r2, #0
 80151d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80151d4:	2300      	movs	r3, #0
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3708      	adds	r7, #8
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}
 80151de:	bf00      	nop
 80151e0:	24000097 	.word	0x24000097
 80151e4:	24000098 	.word	0x24000098
 80151e8:	24000099 	.word	0x24000099

080151ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	32b0      	adds	r2, #176	; 0xb0
 8015200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015204:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015206:	2300      	movs	r3, #0
 8015208:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801520a:	2300      	movs	r3, #0
 801520c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801520e:	2300      	movs	r3, #0
 8015210:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d101      	bne.n	801521c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015218:	2303      	movs	r3, #3
 801521a:	e0bf      	b.n	801539c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801521c:	683b      	ldr	r3, [r7, #0]
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015224:	2b00      	cmp	r3, #0
 8015226:	d050      	beq.n	80152ca <USBD_CDC_Setup+0xde>
 8015228:	2b20      	cmp	r3, #32
 801522a:	f040 80af 	bne.w	801538c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	88db      	ldrh	r3, [r3, #6]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d03a      	beq.n	80152ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	b25b      	sxtb	r3, r3
 801523c:	2b00      	cmp	r3, #0
 801523e:	da1b      	bge.n	8015278 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	33b0      	adds	r3, #176	; 0xb0
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	4413      	add	r3, r2
 801524e:	685b      	ldr	r3, [r3, #4]
 8015250:	689b      	ldr	r3, [r3, #8]
 8015252:	683a      	ldr	r2, [r7, #0]
 8015254:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015256:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015258:	683a      	ldr	r2, [r7, #0]
 801525a:	88d2      	ldrh	r2, [r2, #6]
 801525c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801525e:	683b      	ldr	r3, [r7, #0]
 8015260:	88db      	ldrh	r3, [r3, #6]
 8015262:	2b07      	cmp	r3, #7
 8015264:	bf28      	it	cs
 8015266:	2307      	movcs	r3, #7
 8015268:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	89fa      	ldrh	r2, [r7, #14]
 801526e:	4619      	mov	r1, r3
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f001 fd43 	bl	8016cfc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015276:	e090      	b.n	801539a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015278:	683b      	ldr	r3, [r7, #0]
 801527a:	785a      	ldrb	r2, [r3, #1]
 801527c:	693b      	ldr	r3, [r7, #16]
 801527e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	88db      	ldrh	r3, [r3, #6]
 8015286:	2b3f      	cmp	r3, #63	; 0x3f
 8015288:	d803      	bhi.n	8015292 <USBD_CDC_Setup+0xa6>
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	88db      	ldrh	r3, [r3, #6]
 801528e:	b2da      	uxtb	r2, r3
 8015290:	e000      	b.n	8015294 <USBD_CDC_Setup+0xa8>
 8015292:	2240      	movs	r2, #64	; 0x40
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801529a:	6939      	ldr	r1, [r7, #16]
 801529c:	693b      	ldr	r3, [r7, #16]
 801529e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80152a2:	461a      	mov	r2, r3
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f001 fd55 	bl	8016d54 <USBD_CtlPrepareRx>
      break;
 80152aa:	e076      	b.n	801539a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	33b0      	adds	r3, #176	; 0xb0
 80152b6:	009b      	lsls	r3, r3, #2
 80152b8:	4413      	add	r3, r2
 80152ba:	685b      	ldr	r3, [r3, #4]
 80152bc:	689b      	ldr	r3, [r3, #8]
 80152be:	683a      	ldr	r2, [r7, #0]
 80152c0:	7850      	ldrb	r0, [r2, #1]
 80152c2:	2200      	movs	r2, #0
 80152c4:	6839      	ldr	r1, [r7, #0]
 80152c6:	4798      	blx	r3
      break;
 80152c8:	e067      	b.n	801539a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	785b      	ldrb	r3, [r3, #1]
 80152ce:	2b0b      	cmp	r3, #11
 80152d0:	d851      	bhi.n	8015376 <USBD_CDC_Setup+0x18a>
 80152d2:	a201      	add	r2, pc, #4	; (adr r2, 80152d8 <USBD_CDC_Setup+0xec>)
 80152d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152d8:	08015309 	.word	0x08015309
 80152dc:	08015385 	.word	0x08015385
 80152e0:	08015377 	.word	0x08015377
 80152e4:	08015377 	.word	0x08015377
 80152e8:	08015377 	.word	0x08015377
 80152ec:	08015377 	.word	0x08015377
 80152f0:	08015377 	.word	0x08015377
 80152f4:	08015377 	.word	0x08015377
 80152f8:	08015377 	.word	0x08015377
 80152fc:	08015377 	.word	0x08015377
 8015300:	08015333 	.word	0x08015333
 8015304:	0801535d 	.word	0x0801535d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801530e:	b2db      	uxtb	r3, r3
 8015310:	2b03      	cmp	r3, #3
 8015312:	d107      	bne.n	8015324 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015314:	f107 030a 	add.w	r3, r7, #10
 8015318:	2202      	movs	r2, #2
 801531a:	4619      	mov	r1, r3
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f001 fced 	bl	8016cfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015322:	e032      	b.n	801538a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015324:	6839      	ldr	r1, [r7, #0]
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f001 fc77 	bl	8016c1a <USBD_CtlError>
            ret = USBD_FAIL;
 801532c:	2303      	movs	r3, #3
 801532e:	75fb      	strb	r3, [r7, #23]
          break;
 8015330:	e02b      	b.n	801538a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015338:	b2db      	uxtb	r3, r3
 801533a:	2b03      	cmp	r3, #3
 801533c:	d107      	bne.n	801534e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801533e:	f107 030d 	add.w	r3, r7, #13
 8015342:	2201      	movs	r2, #1
 8015344:	4619      	mov	r1, r3
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f001 fcd8 	bl	8016cfc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801534c:	e01d      	b.n	801538a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801534e:	6839      	ldr	r1, [r7, #0]
 8015350:	6878      	ldr	r0, [r7, #4]
 8015352:	f001 fc62 	bl	8016c1a <USBD_CtlError>
            ret = USBD_FAIL;
 8015356:	2303      	movs	r3, #3
 8015358:	75fb      	strb	r3, [r7, #23]
          break;
 801535a:	e016      	b.n	801538a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b03      	cmp	r3, #3
 8015366:	d00f      	beq.n	8015388 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015368:	6839      	ldr	r1, [r7, #0]
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f001 fc55 	bl	8016c1a <USBD_CtlError>
            ret = USBD_FAIL;
 8015370:	2303      	movs	r3, #3
 8015372:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015374:	e008      	b.n	8015388 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015376:	6839      	ldr	r1, [r7, #0]
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f001 fc4e 	bl	8016c1a <USBD_CtlError>
          ret = USBD_FAIL;
 801537e:	2303      	movs	r3, #3
 8015380:	75fb      	strb	r3, [r7, #23]
          break;
 8015382:	e002      	b.n	801538a <USBD_CDC_Setup+0x19e>
          break;
 8015384:	bf00      	nop
 8015386:	e008      	b.n	801539a <USBD_CDC_Setup+0x1ae>
          break;
 8015388:	bf00      	nop
      }
      break;
 801538a:	e006      	b.n	801539a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801538c:	6839      	ldr	r1, [r7, #0]
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f001 fc43 	bl	8016c1a <USBD_CtlError>
      ret = USBD_FAIL;
 8015394:	2303      	movs	r3, #3
 8015396:	75fb      	strb	r3, [r7, #23]
      break;
 8015398:	bf00      	nop
  }

  return (uint8_t)ret;
 801539a:	7dfb      	ldrb	r3, [r7, #23]
}
 801539c:	4618      	mov	r0, r3
 801539e:	3718      	adds	r7, #24
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}

080153a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b084      	sub	sp, #16
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
 80153ac:	460b      	mov	r3, r1
 80153ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80153b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	32b0      	adds	r2, #176	; 0xb0
 80153c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d101      	bne.n	80153ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80153ca:	2303      	movs	r3, #3
 80153cc:	e065      	b.n	801549a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	32b0      	adds	r2, #176	; 0xb0
 80153d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80153dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80153de:	78fb      	ldrb	r3, [r7, #3]
 80153e0:	f003 020f 	and.w	r2, r3, #15
 80153e4:	6879      	ldr	r1, [r7, #4]
 80153e6:	4613      	mov	r3, r2
 80153e8:	009b      	lsls	r3, r3, #2
 80153ea:	4413      	add	r3, r2
 80153ec:	009b      	lsls	r3, r3, #2
 80153ee:	440b      	add	r3, r1
 80153f0:	3318      	adds	r3, #24
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d02f      	beq.n	8015458 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80153f8:	78fb      	ldrb	r3, [r7, #3]
 80153fa:	f003 020f 	and.w	r2, r3, #15
 80153fe:	6879      	ldr	r1, [r7, #4]
 8015400:	4613      	mov	r3, r2
 8015402:	009b      	lsls	r3, r3, #2
 8015404:	4413      	add	r3, r2
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	440b      	add	r3, r1
 801540a:	3318      	adds	r3, #24
 801540c:	681a      	ldr	r2, [r3, #0]
 801540e:	78fb      	ldrb	r3, [r7, #3]
 8015410:	f003 010f 	and.w	r1, r3, #15
 8015414:	68f8      	ldr	r0, [r7, #12]
 8015416:	460b      	mov	r3, r1
 8015418:	00db      	lsls	r3, r3, #3
 801541a:	440b      	add	r3, r1
 801541c:	009b      	lsls	r3, r3, #2
 801541e:	4403      	add	r3, r0
 8015420:	3348      	adds	r3, #72	; 0x48
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	fbb2 f1f3 	udiv	r1, r2, r3
 8015428:	fb01 f303 	mul.w	r3, r1, r3
 801542c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801542e:	2b00      	cmp	r3, #0
 8015430:	d112      	bne.n	8015458 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015432:	78fb      	ldrb	r3, [r7, #3]
 8015434:	f003 020f 	and.w	r2, r3, #15
 8015438:	6879      	ldr	r1, [r7, #4]
 801543a:	4613      	mov	r3, r2
 801543c:	009b      	lsls	r3, r3, #2
 801543e:	4413      	add	r3, r2
 8015440:	009b      	lsls	r3, r3, #2
 8015442:	440b      	add	r3, r1
 8015444:	3318      	adds	r3, #24
 8015446:	2200      	movs	r2, #0
 8015448:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801544a:	78f9      	ldrb	r1, [r7, #3]
 801544c:	2300      	movs	r3, #0
 801544e:	2200      	movs	r2, #0
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f004 fb1c 	bl	8019a8e <USBD_LL_Transmit>
 8015456:	e01f      	b.n	8015498 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015458:	68bb      	ldr	r3, [r7, #8]
 801545a:	2200      	movs	r2, #0
 801545c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015466:	687a      	ldr	r2, [r7, #4]
 8015468:	33b0      	adds	r3, #176	; 0xb0
 801546a:	009b      	lsls	r3, r3, #2
 801546c:	4413      	add	r3, r2
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	691b      	ldr	r3, [r3, #16]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d010      	beq.n	8015498 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801547c:	687a      	ldr	r2, [r7, #4]
 801547e:	33b0      	adds	r3, #176	; 0xb0
 8015480:	009b      	lsls	r3, r3, #2
 8015482:	4413      	add	r3, r2
 8015484:	685b      	ldr	r3, [r3, #4]
 8015486:	691b      	ldr	r3, [r3, #16]
 8015488:	68ba      	ldr	r2, [r7, #8]
 801548a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801548e:	68ba      	ldr	r2, [r7, #8]
 8015490:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015494:	78fa      	ldrb	r2, [r7, #3]
 8015496:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015498:	2300      	movs	r3, #0
}
 801549a:	4618      	mov	r0, r3
 801549c:	3710      	adds	r7, #16
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}

080154a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80154a2:	b580      	push	{r7, lr}
 80154a4:	b084      	sub	sp, #16
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	6078      	str	r0, [r7, #4]
 80154aa:	460b      	mov	r3, r1
 80154ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	32b0      	adds	r2, #176	; 0xb0
 80154b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	32b0      	adds	r2, #176	; 0xb0
 80154c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d101      	bne.n	80154d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80154d0:	2303      	movs	r3, #3
 80154d2:	e01a      	b.n	801550a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80154d4:	78fb      	ldrb	r3, [r7, #3]
 80154d6:	4619      	mov	r1, r3
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f004 fb1a 	bl	8019b12 <USBD_LL_GetRxDataSize>
 80154de:	4602      	mov	r2, r0
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80154ec:	687a      	ldr	r2, [r7, #4]
 80154ee:	33b0      	adds	r3, #176	; 0xb0
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	4413      	add	r3, r2
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	68db      	ldr	r3, [r3, #12]
 80154f8:	68fa      	ldr	r2, [r7, #12]
 80154fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80154fe:	68fa      	ldr	r2, [r7, #12]
 8015500:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015504:	4611      	mov	r1, r2
 8015506:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015508:	2300      	movs	r3, #0
}
 801550a:	4618      	mov	r0, r3
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015512:	b580      	push	{r7, lr}
 8015514:	b084      	sub	sp, #16
 8015516:	af00      	add	r7, sp, #0
 8015518:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	32b0      	adds	r2, #176	; 0xb0
 8015524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015528:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d101      	bne.n	8015534 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015530:	2303      	movs	r3, #3
 8015532:	e025      	b.n	8015580 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	33b0      	adds	r3, #176	; 0xb0
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4413      	add	r3, r2
 8015542:	685b      	ldr	r3, [r3, #4]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d01a      	beq.n	801557e <USBD_CDC_EP0_RxReady+0x6c>
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801554e:	2bff      	cmp	r3, #255	; 0xff
 8015550:	d015      	beq.n	801557e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015558:	687a      	ldr	r2, [r7, #4]
 801555a:	33b0      	adds	r3, #176	; 0xb0
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	4413      	add	r3, r2
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	689b      	ldr	r3, [r3, #8]
 8015564:	68fa      	ldr	r2, [r7, #12]
 8015566:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801556a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801556c:	68fa      	ldr	r2, [r7, #12]
 801556e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015572:	b292      	uxth	r2, r2
 8015574:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	22ff      	movs	r2, #255	; 0xff
 801557a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801557e:	2300      	movs	r3, #0
}
 8015580:	4618      	mov	r0, r3
 8015582:	3710      	adds	r7, #16
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b086      	sub	sp, #24
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015590:	2182      	movs	r1, #130	; 0x82
 8015592:	4818      	ldr	r0, [pc, #96]	; (80155f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015594:	f000 fd09 	bl	8015faa <USBD_GetEpDesc>
 8015598:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801559a:	2101      	movs	r1, #1
 801559c:	4815      	ldr	r0, [pc, #84]	; (80155f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801559e:	f000 fd04 	bl	8015faa <USBD_GetEpDesc>
 80155a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80155a4:	2181      	movs	r1, #129	; 0x81
 80155a6:	4813      	ldr	r0, [pc, #76]	; (80155f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80155a8:	f000 fcff 	bl	8015faa <USBD_GetEpDesc>
 80155ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d002      	beq.n	80155ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	2210      	movs	r2, #16
 80155b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d006      	beq.n	80155ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	2200      	movs	r2, #0
 80155c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80155c8:	711a      	strb	r2, [r3, #4]
 80155ca:	2200      	movs	r2, #0
 80155cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d006      	beq.n	80155e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	2200      	movs	r2, #0
 80155d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80155dc:	711a      	strb	r2, [r3, #4]
 80155de:	2200      	movs	r2, #0
 80155e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2243      	movs	r2, #67	; 0x43
 80155e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80155e8:	4b02      	ldr	r3, [pc, #8]	; (80155f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3718      	adds	r7, #24
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	24000054 	.word	0x24000054

080155f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b086      	sub	sp, #24
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015600:	2182      	movs	r1, #130	; 0x82
 8015602:	4818      	ldr	r0, [pc, #96]	; (8015664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015604:	f000 fcd1 	bl	8015faa <USBD_GetEpDesc>
 8015608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801560a:	2101      	movs	r1, #1
 801560c:	4815      	ldr	r0, [pc, #84]	; (8015664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801560e:	f000 fccc 	bl	8015faa <USBD_GetEpDesc>
 8015612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015614:	2181      	movs	r1, #129	; 0x81
 8015616:	4813      	ldr	r0, [pc, #76]	; (8015664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015618:	f000 fcc7 	bl	8015faa <USBD_GetEpDesc>
 801561c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d002      	beq.n	801562a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	2210      	movs	r2, #16
 8015628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801562a:	693b      	ldr	r3, [r7, #16]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d006      	beq.n	801563e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015630:	693b      	ldr	r3, [r7, #16]
 8015632:	2200      	movs	r2, #0
 8015634:	711a      	strb	r2, [r3, #4]
 8015636:	2200      	movs	r2, #0
 8015638:	f042 0202 	orr.w	r2, r2, #2
 801563c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801563e:	68fb      	ldr	r3, [r7, #12]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d006      	beq.n	8015652 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	2200      	movs	r2, #0
 8015648:	711a      	strb	r2, [r3, #4]
 801564a:	2200      	movs	r2, #0
 801564c:	f042 0202 	orr.w	r2, r2, #2
 8015650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2243      	movs	r2, #67	; 0x43
 8015656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015658:	4b02      	ldr	r3, [pc, #8]	; (8015664 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801565a:	4618      	mov	r0, r3
 801565c:	3718      	adds	r7, #24
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}
 8015662:	bf00      	nop
 8015664:	24000054 	.word	0x24000054

08015668 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b086      	sub	sp, #24
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015670:	2182      	movs	r1, #130	; 0x82
 8015672:	4818      	ldr	r0, [pc, #96]	; (80156d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015674:	f000 fc99 	bl	8015faa <USBD_GetEpDesc>
 8015678:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801567a:	2101      	movs	r1, #1
 801567c:	4815      	ldr	r0, [pc, #84]	; (80156d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801567e:	f000 fc94 	bl	8015faa <USBD_GetEpDesc>
 8015682:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015684:	2181      	movs	r1, #129	; 0x81
 8015686:	4813      	ldr	r0, [pc, #76]	; (80156d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015688:	f000 fc8f 	bl	8015faa <USBD_GetEpDesc>
 801568c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d002      	beq.n	801569a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	2210      	movs	r2, #16
 8015698:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d006      	beq.n	80156ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	2200      	movs	r2, #0
 80156a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80156a8:	711a      	strb	r2, [r3, #4]
 80156aa:	2200      	movs	r2, #0
 80156ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d006      	beq.n	80156c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2200      	movs	r2, #0
 80156b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80156bc:	711a      	strb	r2, [r3, #4]
 80156be:	2200      	movs	r2, #0
 80156c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	2243      	movs	r2, #67	; 0x43
 80156c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80156c8:	4b02      	ldr	r3, [pc, #8]	; (80156d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80156ca:	4618      	mov	r0, r3
 80156cc:	3718      	adds	r7, #24
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bd80      	pop	{r7, pc}
 80156d2:	bf00      	nop
 80156d4:	24000054 	.word	0x24000054

080156d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	220a      	movs	r2, #10
 80156e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80156e6:	4b03      	ldr	r3, [pc, #12]	; (80156f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	24000010 	.word	0x24000010

080156f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
 8015700:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d101      	bne.n	801570c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015708:	2303      	movs	r3, #3
 801570a:	e009      	b.n	8015720 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	33b0      	adds	r3, #176	; 0xb0
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	4413      	add	r3, r2
 801571a:	683a      	ldr	r2, [r7, #0]
 801571c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801571e:	2300      	movs	r3, #0
}
 8015720:	4618      	mov	r0, r3
 8015722:	370c      	adds	r7, #12
 8015724:	46bd      	mov	sp, r7
 8015726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572a:	4770      	bx	lr

0801572c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801572c:	b480      	push	{r7}
 801572e:	b087      	sub	sp, #28
 8015730:	af00      	add	r7, sp, #0
 8015732:	60f8      	str	r0, [r7, #12]
 8015734:	60b9      	str	r1, [r7, #8]
 8015736:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	32b0      	adds	r2, #176	; 0xb0
 8015742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015746:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8015748:	697b      	ldr	r3, [r7, #20]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d101      	bne.n	8015752 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801574e:	2303      	movs	r3, #3
 8015750:	e008      	b.n	8015764 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	68ba      	ldr	r2, [r7, #8]
 8015756:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015762:	2300      	movs	r3, #0
}
 8015764:	4618      	mov	r0, r3
 8015766:	371c      	adds	r7, #28
 8015768:	46bd      	mov	sp, r7
 801576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576e:	4770      	bx	lr

08015770 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015770:	b480      	push	{r7}
 8015772:	b085      	sub	sp, #20
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	32b0      	adds	r2, #176	; 0xb0
 8015784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015788:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d101      	bne.n	8015794 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015790:	2303      	movs	r3, #3
 8015792:	e004      	b.n	801579e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	683a      	ldr	r2, [r7, #0]
 8015798:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801579c:	2300      	movs	r3, #0
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3714      	adds	r7, #20
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr
	...

080157ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	32b0      	adds	r2, #176	; 0xb0
 80157be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	32b0      	adds	r2, #176	; 0xb0
 80157ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d101      	bne.n	80157da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80157d6:	2303      	movs	r3, #3
 80157d8:	e018      	b.n	801580c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	7c1b      	ldrb	r3, [r3, #16]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d10a      	bne.n	80157f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80157e2:	4b0c      	ldr	r3, [pc, #48]	; (8015814 <USBD_CDC_ReceivePacket+0x68>)
 80157e4:	7819      	ldrb	r1, [r3, #0]
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80157ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f004 f96d 	bl	8019ad0 <USBD_LL_PrepareReceive>
 80157f6:	e008      	b.n	801580a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80157f8:	4b06      	ldr	r3, [pc, #24]	; (8015814 <USBD_CDC_ReceivePacket+0x68>)
 80157fa:	7819      	ldrb	r1, [r3, #0]
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015802:	2340      	movs	r3, #64	; 0x40
 8015804:	6878      	ldr	r0, [r7, #4]
 8015806:	f004 f963 	bl	8019ad0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801580a:	2300      	movs	r3, #0
}
 801580c:	4618      	mov	r0, r3
 801580e:	3710      	adds	r7, #16
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}
 8015814:	24000098 	.word	0x24000098

08015818 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b086      	sub	sp, #24
 801581c:	af00      	add	r7, sp, #0
 801581e:	60f8      	str	r0, [r7, #12]
 8015820:	60b9      	str	r1, [r7, #8]
 8015822:	4613      	mov	r3, r2
 8015824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801582c:	2303      	movs	r3, #3
 801582e:	e01f      	b.n	8015870 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	2200      	movs	r2, #0
 8015834:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	2200      	movs	r2, #0
 801583c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	2200      	movs	r2, #0
 8015844:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d003      	beq.n	8015856 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	68ba      	ldr	r2, [r7, #8]
 8015852:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	2201      	movs	r2, #1
 801585a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	79fa      	ldrb	r2, [r7, #7]
 8015862:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015864:	68f8      	ldr	r0, [r7, #12]
 8015866:	f003 ffd9 	bl	801981c <USBD_LL_Init>
 801586a:	4603      	mov	r3, r0
 801586c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801586e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015870:	4618      	mov	r0, r3
 8015872:	3718      	adds	r7, #24
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015882:	2300      	movs	r3, #0
 8015884:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d101      	bne.n	8015890 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801588c:	2303      	movs	r3, #3
 801588e:	e025      	b.n	80158dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	683a      	ldr	r2, [r7, #0]
 8015894:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	32ae      	adds	r2, #174	; 0xae
 80158a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d00f      	beq.n	80158cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	32ae      	adds	r2, #174	; 0xae
 80158b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158bc:	f107 020e 	add.w	r2, r7, #14
 80158c0:	4610      	mov	r0, r2
 80158c2:	4798      	blx	r3
 80158c4:	4602      	mov	r2, r0
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80158d2:	1c5a      	adds	r2, r3, #1
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80158da:	2300      	movs	r3, #0
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3710      	adds	r7, #16
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bd80      	pop	{r7, pc}

080158e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b082      	sub	sp, #8
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f003 ffe5 	bl	80198bc <USBD_LL_Start>
 80158f2:	4603      	mov	r3, r0
}
 80158f4:	4618      	mov	r0, r3
 80158f6:	3708      	adds	r7, #8
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80158fc:	b480      	push	{r7}
 80158fe:	b083      	sub	sp, #12
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015904:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015906:	4618      	mov	r0, r3
 8015908:	370c      	adds	r7, #12
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr

08015912 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015912:	b580      	push	{r7, lr}
 8015914:	b084      	sub	sp, #16
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
 801591a:	460b      	mov	r3, r1
 801591c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801591e:	2300      	movs	r3, #0
 8015920:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015928:	2b00      	cmp	r3, #0
 801592a:	d009      	beq.n	8015940 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	78fa      	ldrb	r2, [r7, #3]
 8015936:	4611      	mov	r1, r2
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	4798      	blx	r3
 801593c:	4603      	mov	r3, r0
 801593e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015940:	7bfb      	ldrb	r3, [r7, #15]
}
 8015942:	4618      	mov	r0, r3
 8015944:	3710      	adds	r7, #16
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}

0801594a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801594a:	b580      	push	{r7, lr}
 801594c:	b084      	sub	sp, #16
 801594e:	af00      	add	r7, sp, #0
 8015950:	6078      	str	r0, [r7, #4]
 8015952:	460b      	mov	r3, r1
 8015954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015956:	2300      	movs	r3, #0
 8015958:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	78fa      	ldrb	r2, [r7, #3]
 8015964:	4611      	mov	r1, r2
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	4798      	blx	r3
 801596a:	4603      	mov	r3, r0
 801596c:	2b00      	cmp	r3, #0
 801596e:	d001      	beq.n	8015974 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015970:	2303      	movs	r3, #3
 8015972:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015974:	7bfb      	ldrb	r3, [r7, #15]
}
 8015976:	4618      	mov	r0, r3
 8015978:	3710      	adds	r7, #16
 801597a:	46bd      	mov	sp, r7
 801597c:	bd80      	pop	{r7, pc}

0801597e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801597e:	b580      	push	{r7, lr}
 8015980:	b084      	sub	sp, #16
 8015982:	af00      	add	r7, sp, #0
 8015984:	6078      	str	r0, [r7, #4]
 8015986:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801598e:	6839      	ldr	r1, [r7, #0]
 8015990:	4618      	mov	r0, r3
 8015992:	f001 f908 	bl	8016ba6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	2201      	movs	r2, #1
 801599a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80159a4:	461a      	mov	r2, r3
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80159b2:	f003 031f 	and.w	r3, r3, #31
 80159b6:	2b02      	cmp	r3, #2
 80159b8:	d01a      	beq.n	80159f0 <USBD_LL_SetupStage+0x72>
 80159ba:	2b02      	cmp	r3, #2
 80159bc:	d822      	bhi.n	8015a04 <USBD_LL_SetupStage+0x86>
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d002      	beq.n	80159c8 <USBD_LL_SetupStage+0x4a>
 80159c2:	2b01      	cmp	r3, #1
 80159c4:	d00a      	beq.n	80159dc <USBD_LL_SetupStage+0x5e>
 80159c6:	e01d      	b.n	8015a04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80159ce:	4619      	mov	r1, r3
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	f000 fb5f 	bl	8016094 <USBD_StdDevReq>
 80159d6:	4603      	mov	r3, r0
 80159d8:	73fb      	strb	r3, [r7, #15]
      break;
 80159da:	e020      	b.n	8015a1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80159e2:	4619      	mov	r1, r3
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f000 fbc7 	bl	8016178 <USBD_StdItfReq>
 80159ea:	4603      	mov	r3, r0
 80159ec:	73fb      	strb	r3, [r7, #15]
      break;
 80159ee:	e016      	b.n	8015a1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80159f6:	4619      	mov	r1, r3
 80159f8:	6878      	ldr	r0, [r7, #4]
 80159fa:	f000 fc29 	bl	8016250 <USBD_StdEPReq>
 80159fe:	4603      	mov	r3, r0
 8015a00:	73fb      	strb	r3, [r7, #15]
      break;
 8015a02:	e00c      	b.n	8015a1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015a0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015a0e:	b2db      	uxtb	r3, r3
 8015a10:	4619      	mov	r1, r3
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f003 ffb2 	bl	801997c <USBD_LL_StallEP>
 8015a18:	4603      	mov	r3, r0
 8015a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8015a1c:	bf00      	nop
  }

  return ret;
 8015a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b086      	sub	sp, #24
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	460b      	mov	r3, r1
 8015a32:	607a      	str	r2, [r7, #4]
 8015a34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015a36:	2300      	movs	r3, #0
 8015a38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015a3a:	7afb      	ldrb	r3, [r7, #11]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d16e      	bne.n	8015b1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015a46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015a4e:	2b03      	cmp	r3, #3
 8015a50:	f040 8098 	bne.w	8015b84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	689a      	ldr	r2, [r3, #8]
 8015a58:	693b      	ldr	r3, [r7, #16]
 8015a5a:	68db      	ldr	r3, [r3, #12]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d913      	bls.n	8015a88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	689a      	ldr	r2, [r3, #8]
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	68db      	ldr	r3, [r3, #12]
 8015a68:	1ad2      	subs	r2, r2, r3
 8015a6a:	693b      	ldr	r3, [r7, #16]
 8015a6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015a6e:	693b      	ldr	r3, [r7, #16]
 8015a70:	68da      	ldr	r2, [r3, #12]
 8015a72:	693b      	ldr	r3, [r7, #16]
 8015a74:	689b      	ldr	r3, [r3, #8]
 8015a76:	4293      	cmp	r3, r2
 8015a78:	bf28      	it	cs
 8015a7a:	4613      	movcs	r3, r2
 8015a7c:	461a      	mov	r2, r3
 8015a7e:	6879      	ldr	r1, [r7, #4]
 8015a80:	68f8      	ldr	r0, [r7, #12]
 8015a82:	f001 f984 	bl	8016d8e <USBD_CtlContinueRx>
 8015a86:	e07d      	b.n	8015b84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015a8e:	f003 031f 	and.w	r3, r3, #31
 8015a92:	2b02      	cmp	r3, #2
 8015a94:	d014      	beq.n	8015ac0 <USBD_LL_DataOutStage+0x98>
 8015a96:	2b02      	cmp	r3, #2
 8015a98:	d81d      	bhi.n	8015ad6 <USBD_LL_DataOutStage+0xae>
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d002      	beq.n	8015aa4 <USBD_LL_DataOutStage+0x7c>
 8015a9e:	2b01      	cmp	r3, #1
 8015aa0:	d003      	beq.n	8015aaa <USBD_LL_DataOutStage+0x82>
 8015aa2:	e018      	b.n	8015ad6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8015aa8:	e018      	b.n	8015adc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	4619      	mov	r1, r3
 8015ab4:	68f8      	ldr	r0, [r7, #12]
 8015ab6:	f000 fa5e 	bl	8015f76 <USBD_CoreFindIF>
 8015aba:	4603      	mov	r3, r0
 8015abc:	75bb      	strb	r3, [r7, #22]
            break;
 8015abe:	e00d      	b.n	8015adc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	4619      	mov	r1, r3
 8015aca:	68f8      	ldr	r0, [r7, #12]
 8015acc:	f000 fa60 	bl	8015f90 <USBD_CoreFindEP>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	75bb      	strb	r3, [r7, #22]
            break;
 8015ad4:	e002      	b.n	8015adc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	75bb      	strb	r3, [r7, #22]
            break;
 8015ada:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015adc:	7dbb      	ldrb	r3, [r7, #22]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d119      	bne.n	8015b16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	2b03      	cmp	r3, #3
 8015aec:	d113      	bne.n	8015b16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015aee:	7dba      	ldrb	r2, [r7, #22]
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	32ae      	adds	r2, #174	; 0xae
 8015af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015af8:	691b      	ldr	r3, [r3, #16]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d00b      	beq.n	8015b16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015afe:	7dba      	ldrb	r2, [r7, #22]
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015b06:	7dba      	ldrb	r2, [r7, #22]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	32ae      	adds	r2, #174	; 0xae
 8015b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b10:	691b      	ldr	r3, [r3, #16]
 8015b12:	68f8      	ldr	r0, [r7, #12]
 8015b14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015b16:	68f8      	ldr	r0, [r7, #12]
 8015b18:	f001 f94a 	bl	8016db0 <USBD_CtlSendStatus>
 8015b1c:	e032      	b.n	8015b84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015b1e:	7afb      	ldrb	r3, [r7, #11]
 8015b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b24:	b2db      	uxtb	r3, r3
 8015b26:	4619      	mov	r1, r3
 8015b28:	68f8      	ldr	r0, [r7, #12]
 8015b2a:	f000 fa31 	bl	8015f90 <USBD_CoreFindEP>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b32:	7dbb      	ldrb	r3, [r7, #22]
 8015b34:	2bff      	cmp	r3, #255	; 0xff
 8015b36:	d025      	beq.n	8015b84 <USBD_LL_DataOutStage+0x15c>
 8015b38:	7dbb      	ldrb	r3, [r7, #22]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d122      	bne.n	8015b84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b44:	b2db      	uxtb	r3, r3
 8015b46:	2b03      	cmp	r3, #3
 8015b48:	d117      	bne.n	8015b7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015b4a:	7dba      	ldrb	r2, [r7, #22]
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	32ae      	adds	r2, #174	; 0xae
 8015b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b54:	699b      	ldr	r3, [r3, #24]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d00f      	beq.n	8015b7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015b5a:	7dba      	ldrb	r2, [r7, #22]
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015b62:	7dba      	ldrb	r2, [r7, #22]
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	32ae      	adds	r2, #174	; 0xae
 8015b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b6c:	699b      	ldr	r3, [r3, #24]
 8015b6e:	7afa      	ldrb	r2, [r7, #11]
 8015b70:	4611      	mov	r1, r2
 8015b72:	68f8      	ldr	r0, [r7, #12]
 8015b74:	4798      	blx	r3
 8015b76:	4603      	mov	r3, r0
 8015b78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015b7a:	7dfb      	ldrb	r3, [r7, #23]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d001      	beq.n	8015b84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015b80:	7dfb      	ldrb	r3, [r7, #23]
 8015b82:	e000      	b.n	8015b86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015b84:	2300      	movs	r3, #0
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3718      	adds	r7, #24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b086      	sub	sp, #24
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	60f8      	str	r0, [r7, #12]
 8015b96:	460b      	mov	r3, r1
 8015b98:	607a      	str	r2, [r7, #4]
 8015b9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015b9c:	7afb      	ldrb	r3, [r7, #11]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d16f      	bne.n	8015c82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	3314      	adds	r3, #20
 8015ba6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015bae:	2b02      	cmp	r3, #2
 8015bb0:	d15a      	bne.n	8015c68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	689a      	ldr	r2, [r3, #8]
 8015bb6:	693b      	ldr	r3, [r7, #16]
 8015bb8:	68db      	ldr	r3, [r3, #12]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d914      	bls.n	8015be8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	689a      	ldr	r2, [r3, #8]
 8015bc2:	693b      	ldr	r3, [r7, #16]
 8015bc4:	68db      	ldr	r3, [r3, #12]
 8015bc6:	1ad2      	subs	r2, r2, r3
 8015bc8:	693b      	ldr	r3, [r7, #16]
 8015bca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015bcc:	693b      	ldr	r3, [r7, #16]
 8015bce:	689b      	ldr	r3, [r3, #8]
 8015bd0:	461a      	mov	r2, r3
 8015bd2:	6879      	ldr	r1, [r7, #4]
 8015bd4:	68f8      	ldr	r0, [r7, #12]
 8015bd6:	f001 f8ac 	bl	8016d32 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015bda:	2300      	movs	r3, #0
 8015bdc:	2200      	movs	r2, #0
 8015bde:	2100      	movs	r1, #0
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	f003 ff75 	bl	8019ad0 <USBD_LL_PrepareReceive>
 8015be6:	e03f      	b.n	8015c68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015be8:	693b      	ldr	r3, [r7, #16]
 8015bea:	68da      	ldr	r2, [r3, #12]
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	689b      	ldr	r3, [r3, #8]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d11c      	bne.n	8015c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015bf4:	693b      	ldr	r3, [r7, #16]
 8015bf6:	685a      	ldr	r2, [r3, #4]
 8015bf8:	693b      	ldr	r3, [r7, #16]
 8015bfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015bfc:	429a      	cmp	r2, r3
 8015bfe:	d316      	bcc.n	8015c2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	685a      	ldr	r2, [r3, #4]
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d20f      	bcs.n	8015c2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015c0e:	2200      	movs	r2, #0
 8015c10:	2100      	movs	r1, #0
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f001 f88d 	bl	8016d32 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	2200      	movs	r2, #0
 8015c1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015c20:	2300      	movs	r3, #0
 8015c22:	2200      	movs	r2, #0
 8015c24:	2100      	movs	r1, #0
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f003 ff52 	bl	8019ad0 <USBD_LL_PrepareReceive>
 8015c2c:	e01c      	b.n	8015c68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c34:	b2db      	uxtb	r3, r3
 8015c36:	2b03      	cmp	r3, #3
 8015c38:	d10f      	bne.n	8015c5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c40:	68db      	ldr	r3, [r3, #12]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d009      	beq.n	8015c5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	2200      	movs	r2, #0
 8015c4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	68f8      	ldr	r0, [r7, #12]
 8015c58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015c5a:	2180      	movs	r1, #128	; 0x80
 8015c5c:	68f8      	ldr	r0, [r7, #12]
 8015c5e:	f003 fe8d 	bl	801997c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015c62:	68f8      	ldr	r0, [r7, #12]
 8015c64:	f001 f8b7 	bl	8016dd6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d03a      	beq.n	8015ce8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015c72:	68f8      	ldr	r0, [r7, #12]
 8015c74:	f7ff fe42 	bl	80158fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2200      	movs	r2, #0
 8015c7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015c80:	e032      	b.n	8015ce8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015c82:	7afb      	ldrb	r3, [r7, #11]
 8015c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	4619      	mov	r1, r3
 8015c8c:	68f8      	ldr	r0, [r7, #12]
 8015c8e:	f000 f97f 	bl	8015f90 <USBD_CoreFindEP>
 8015c92:	4603      	mov	r3, r0
 8015c94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015c96:	7dfb      	ldrb	r3, [r7, #23]
 8015c98:	2bff      	cmp	r3, #255	; 0xff
 8015c9a:	d025      	beq.n	8015ce8 <USBD_LL_DataInStage+0x15a>
 8015c9c:	7dfb      	ldrb	r3, [r7, #23]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d122      	bne.n	8015ce8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ca8:	b2db      	uxtb	r3, r3
 8015caa:	2b03      	cmp	r3, #3
 8015cac:	d11c      	bne.n	8015ce8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015cae:	7dfa      	ldrb	r2, [r7, #23]
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	32ae      	adds	r2, #174	; 0xae
 8015cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cb8:	695b      	ldr	r3, [r3, #20]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d014      	beq.n	8015ce8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015cbe:	7dfa      	ldrb	r2, [r7, #23]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015cc6:	7dfa      	ldrb	r2, [r7, #23]
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	32ae      	adds	r2, #174	; 0xae
 8015ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd0:	695b      	ldr	r3, [r3, #20]
 8015cd2:	7afa      	ldrb	r2, [r7, #11]
 8015cd4:	4611      	mov	r1, r2
 8015cd6:	68f8      	ldr	r0, [r7, #12]
 8015cd8:	4798      	blx	r3
 8015cda:	4603      	mov	r3, r0
 8015cdc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015cde:	7dbb      	ldrb	r3, [r7, #22]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d001      	beq.n	8015ce8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015ce4:	7dbb      	ldrb	r3, [r7, #22]
 8015ce6:	e000      	b.n	8015cea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015ce8:	2300      	movs	r3, #0
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3718      	adds	r7, #24
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}

08015cf2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015cf2:	b580      	push	{r7, lr}
 8015cf4:	b084      	sub	sp, #16
 8015cf6:	af00      	add	r7, sp, #0
 8015cf8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	2201      	movs	r2, #1
 8015d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	2200      	movs	r2, #0
 8015d0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	2200      	movs	r2, #0
 8015d12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	2200      	movs	r2, #0
 8015d18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d014      	beq.n	8015d58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d34:	685b      	ldr	r3, [r3, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d00e      	beq.n	8015d58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	687a      	ldr	r2, [r7, #4]
 8015d44:	6852      	ldr	r2, [r2, #4]
 8015d46:	b2d2      	uxtb	r2, r2
 8015d48:	4611      	mov	r1, r2
 8015d4a:	6878      	ldr	r0, [r7, #4]
 8015d4c:	4798      	blx	r3
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d001      	beq.n	8015d58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015d54:	2303      	movs	r3, #3
 8015d56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015d58:	2340      	movs	r3, #64	; 0x40
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	6878      	ldr	r0, [r7, #4]
 8015d60:	f003 fdc7 	bl	80198f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	2201      	movs	r2, #1
 8015d68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2240      	movs	r2, #64	; 0x40
 8015d70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015d74:	2340      	movs	r3, #64	; 0x40
 8015d76:	2200      	movs	r2, #0
 8015d78:	2180      	movs	r1, #128	; 0x80
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f003 fdb9 	bl	80198f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2201      	movs	r2, #1
 8015d84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2240      	movs	r2, #64	; 0x40
 8015d8a:	621a      	str	r2, [r3, #32]

  return ret;
 8015d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015d96:	b480      	push	{r7}
 8015d98:	b083      	sub	sp, #12
 8015d9a:	af00      	add	r7, sp, #0
 8015d9c:	6078      	str	r0, [r7, #4]
 8015d9e:	460b      	mov	r3, r1
 8015da0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	78fa      	ldrb	r2, [r7, #3]
 8015da6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015da8:	2300      	movs	r3, #0
}
 8015daa:	4618      	mov	r0, r3
 8015dac:	370c      	adds	r7, #12
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr

08015db6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015db6:	b480      	push	{r7}
 8015db8:	b083      	sub	sp, #12
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015dc4:	b2da      	uxtb	r2, r3
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	2204      	movs	r2, #4
 8015dd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015dd4:	2300      	movs	r3, #0
}
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	370c      	adds	r7, #12
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de0:	4770      	bx	lr

08015de2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015de2:	b480      	push	{r7}
 8015de4:	b083      	sub	sp, #12
 8015de6:	af00      	add	r7, sp, #0
 8015de8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015df0:	b2db      	uxtb	r3, r3
 8015df2:	2b04      	cmp	r3, #4
 8015df4:	d106      	bne.n	8015e04 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015dfc:	b2da      	uxtb	r2, r3
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015e04:	2300      	movs	r3, #0
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	370c      	adds	r7, #12
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e10:	4770      	bx	lr

08015e12 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015e12:	b580      	push	{r7, lr}
 8015e14:	b082      	sub	sp, #8
 8015e16:	af00      	add	r7, sp, #0
 8015e18:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e20:	b2db      	uxtb	r3, r3
 8015e22:	2b03      	cmp	r3, #3
 8015e24:	d110      	bne.n	8015e48 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00b      	beq.n	8015e48 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e36:	69db      	ldr	r3, [r3, #28]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d005      	beq.n	8015e48 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e42:	69db      	ldr	r3, [r3, #28]
 8015e44:	6878      	ldr	r0, [r7, #4]
 8015e46:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015e48:	2300      	movs	r3, #0
}
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	3708      	adds	r7, #8
 8015e4e:	46bd      	mov	sp, r7
 8015e50:	bd80      	pop	{r7, pc}

08015e52 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015e52:	b580      	push	{r7, lr}
 8015e54:	b082      	sub	sp, #8
 8015e56:	af00      	add	r7, sp, #0
 8015e58:	6078      	str	r0, [r7, #4]
 8015e5a:	460b      	mov	r3, r1
 8015e5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	32ae      	adds	r2, #174	; 0xae
 8015e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d101      	bne.n	8015e74 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015e70:	2303      	movs	r3, #3
 8015e72:	e01c      	b.n	8015eae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	2b03      	cmp	r3, #3
 8015e7e:	d115      	bne.n	8015eac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	32ae      	adds	r2, #174	; 0xae
 8015e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e8e:	6a1b      	ldr	r3, [r3, #32]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d00b      	beq.n	8015eac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	32ae      	adds	r2, #174	; 0xae
 8015e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ea2:	6a1b      	ldr	r3, [r3, #32]
 8015ea4:	78fa      	ldrb	r2, [r7, #3]
 8015ea6:	4611      	mov	r1, r2
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015eac:	2300      	movs	r3, #0
}
 8015eae:	4618      	mov	r0, r3
 8015eb0:	3708      	adds	r7, #8
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}

08015eb6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015eb6:	b580      	push	{r7, lr}
 8015eb8:	b082      	sub	sp, #8
 8015eba:	af00      	add	r7, sp, #0
 8015ebc:	6078      	str	r0, [r7, #4]
 8015ebe:	460b      	mov	r3, r1
 8015ec0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	32ae      	adds	r2, #174	; 0xae
 8015ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d101      	bne.n	8015ed8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015ed4:	2303      	movs	r3, #3
 8015ed6:	e01c      	b.n	8015f12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ede:	b2db      	uxtb	r3, r3
 8015ee0:	2b03      	cmp	r3, #3
 8015ee2:	d115      	bne.n	8015f10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	32ae      	adds	r2, #174	; 0xae
 8015eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d00b      	beq.n	8015f10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	32ae      	adds	r2, #174	; 0xae
 8015f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f08:	78fa      	ldrb	r2, [r7, #3]
 8015f0a:	4611      	mov	r1, r2
 8015f0c:	6878      	ldr	r0, [r7, #4]
 8015f0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f10:	2300      	movs	r3, #0
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3708      	adds	r7, #8
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}

08015f1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015f1a:	b480      	push	{r7}
 8015f1c:	b083      	sub	sp, #12
 8015f1e:	af00      	add	r7, sp, #0
 8015f20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015f22:	2300      	movs	r3, #0
}
 8015f24:	4618      	mov	r0, r3
 8015f26:	370c      	adds	r7, #12
 8015f28:	46bd      	mov	sp, r7
 8015f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f2e:	4770      	bx	lr

08015f30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015f38:	2300      	movs	r3, #0
 8015f3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2201      	movs	r2, #1
 8015f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d00e      	beq.n	8015f6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f54:	685b      	ldr	r3, [r3, #4]
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	6852      	ldr	r2, [r2, #4]
 8015f5a:	b2d2      	uxtb	r2, r2
 8015f5c:	4611      	mov	r1, r2
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	4798      	blx	r3
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d001      	beq.n	8015f6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015f68:	2303      	movs	r3, #3
 8015f6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3710      	adds	r7, #16
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015f76:	b480      	push	{r7}
 8015f78:	b083      	sub	sp, #12
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
 8015f7e:	460b      	mov	r3, r1
 8015f80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015f82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	370c      	adds	r7, #12
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8e:	4770      	bx	lr

08015f90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	460b      	mov	r3, r1
 8015f9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015f9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	370c      	adds	r7, #12
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa8:	4770      	bx	lr

08015faa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015faa:	b580      	push	{r7, lr}
 8015fac:	b086      	sub	sp, #24
 8015fae:	af00      	add	r7, sp, #0
 8015fb0:	6078      	str	r0, [r7, #4]
 8015fb2:	460b      	mov	r3, r1
 8015fb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	885b      	ldrh	r3, [r3, #2]
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	b29b      	uxth	r3, r3
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d920      	bls.n	8016014 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015fda:	e013      	b.n	8016004 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015fdc:	f107 030a 	add.w	r3, r7, #10
 8015fe0:	4619      	mov	r1, r3
 8015fe2:	6978      	ldr	r0, [r7, #20]
 8015fe4:	f000 f81b 	bl	801601e <USBD_GetNextDesc>
 8015fe8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015fea:	697b      	ldr	r3, [r7, #20]
 8015fec:	785b      	ldrb	r3, [r3, #1]
 8015fee:	2b05      	cmp	r3, #5
 8015ff0:	d108      	bne.n	8016004 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015ff2:	697b      	ldr	r3, [r7, #20]
 8015ff4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015ff6:	693b      	ldr	r3, [r7, #16]
 8015ff8:	789b      	ldrb	r3, [r3, #2]
 8015ffa:	78fa      	ldrb	r2, [r7, #3]
 8015ffc:	429a      	cmp	r2, r3
 8015ffe:	d008      	beq.n	8016012 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016000:	2300      	movs	r3, #0
 8016002:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	885b      	ldrh	r3, [r3, #2]
 8016008:	b29a      	uxth	r2, r3
 801600a:	897b      	ldrh	r3, [r7, #10]
 801600c:	429a      	cmp	r2, r3
 801600e:	d8e5      	bhi.n	8015fdc <USBD_GetEpDesc+0x32>
 8016010:	e000      	b.n	8016014 <USBD_GetEpDesc+0x6a>
          break;
 8016012:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016014:	693b      	ldr	r3, [r7, #16]
}
 8016016:	4618      	mov	r0, r3
 8016018:	3718      	adds	r7, #24
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}

0801601e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801601e:	b480      	push	{r7}
 8016020:	b085      	sub	sp, #20
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
 8016026:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801602c:	683b      	ldr	r3, [r7, #0]
 801602e:	881a      	ldrh	r2, [r3, #0]
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	781b      	ldrb	r3, [r3, #0]
 8016034:	b29b      	uxth	r3, r3
 8016036:	4413      	add	r3, r2
 8016038:	b29a      	uxth	r2, r3
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	461a      	mov	r2, r3
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	4413      	add	r3, r2
 8016048:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801604a:	68fb      	ldr	r3, [r7, #12]
}
 801604c:	4618      	mov	r0, r3
 801604e:	3714      	adds	r7, #20
 8016050:	46bd      	mov	sp, r7
 8016052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016056:	4770      	bx	lr

08016058 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016058:	b480      	push	{r7}
 801605a:	b087      	sub	sp, #28
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	781b      	ldrb	r3, [r3, #0]
 8016068:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801606a:	697b      	ldr	r3, [r7, #20]
 801606c:	3301      	adds	r3, #1
 801606e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	781b      	ldrb	r3, [r3, #0]
 8016074:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016076:	8a3b      	ldrh	r3, [r7, #16]
 8016078:	021b      	lsls	r3, r3, #8
 801607a:	b21a      	sxth	r2, r3
 801607c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016080:	4313      	orrs	r3, r2
 8016082:	b21b      	sxth	r3, r3
 8016084:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016086:	89fb      	ldrh	r3, [r7, #14]
}
 8016088:	4618      	mov	r0, r3
 801608a:	371c      	adds	r7, #28
 801608c:	46bd      	mov	sp, r7
 801608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016092:	4770      	bx	lr

08016094 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b084      	sub	sp, #16
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
 801609c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801609e:	2300      	movs	r3, #0
 80160a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80160aa:	2b40      	cmp	r3, #64	; 0x40
 80160ac:	d005      	beq.n	80160ba <USBD_StdDevReq+0x26>
 80160ae:	2b40      	cmp	r3, #64	; 0x40
 80160b0:	d857      	bhi.n	8016162 <USBD_StdDevReq+0xce>
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d00f      	beq.n	80160d6 <USBD_StdDevReq+0x42>
 80160b6:	2b20      	cmp	r3, #32
 80160b8:	d153      	bne.n	8016162 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	32ae      	adds	r2, #174	; 0xae
 80160c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160c8:	689b      	ldr	r3, [r3, #8]
 80160ca:	6839      	ldr	r1, [r7, #0]
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	4798      	blx	r3
 80160d0:	4603      	mov	r3, r0
 80160d2:	73fb      	strb	r3, [r7, #15]
      break;
 80160d4:	e04a      	b.n	801616c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	785b      	ldrb	r3, [r3, #1]
 80160da:	2b09      	cmp	r3, #9
 80160dc:	d83b      	bhi.n	8016156 <USBD_StdDevReq+0xc2>
 80160de:	a201      	add	r2, pc, #4	; (adr r2, 80160e4 <USBD_StdDevReq+0x50>)
 80160e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160e4:	08016139 	.word	0x08016139
 80160e8:	0801614d 	.word	0x0801614d
 80160ec:	08016157 	.word	0x08016157
 80160f0:	08016143 	.word	0x08016143
 80160f4:	08016157 	.word	0x08016157
 80160f8:	08016117 	.word	0x08016117
 80160fc:	0801610d 	.word	0x0801610d
 8016100:	08016157 	.word	0x08016157
 8016104:	0801612f 	.word	0x0801612f
 8016108:	08016121 	.word	0x08016121
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f000 fa3c 	bl	801658c <USBD_GetDescriptor>
          break;
 8016114:	e024      	b.n	8016160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016116:	6839      	ldr	r1, [r7, #0]
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f000 fba1 	bl	8016860 <USBD_SetAddress>
          break;
 801611e:	e01f      	b.n	8016160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016120:	6839      	ldr	r1, [r7, #0]
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f000 fbe0 	bl	80168e8 <USBD_SetConfig>
 8016128:	4603      	mov	r3, r0
 801612a:	73fb      	strb	r3, [r7, #15]
          break;
 801612c:	e018      	b.n	8016160 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801612e:	6839      	ldr	r1, [r7, #0]
 8016130:	6878      	ldr	r0, [r7, #4]
 8016132:	f000 fc83 	bl	8016a3c <USBD_GetConfig>
          break;
 8016136:	e013      	b.n	8016160 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016138:	6839      	ldr	r1, [r7, #0]
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f000 fcb4 	bl	8016aa8 <USBD_GetStatus>
          break;
 8016140:	e00e      	b.n	8016160 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 fce3 	bl	8016b10 <USBD_SetFeature>
          break;
 801614a:	e009      	b.n	8016160 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801614c:	6839      	ldr	r1, [r7, #0]
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f000 fd07 	bl	8016b62 <USBD_ClrFeature>
          break;
 8016154:	e004      	b.n	8016160 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016156:	6839      	ldr	r1, [r7, #0]
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f000 fd5e 	bl	8016c1a <USBD_CtlError>
          break;
 801615e:	bf00      	nop
      }
      break;
 8016160:	e004      	b.n	801616c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016162:	6839      	ldr	r1, [r7, #0]
 8016164:	6878      	ldr	r0, [r7, #4]
 8016166:	f000 fd58 	bl	8016c1a <USBD_CtlError>
      break;
 801616a:	bf00      	nop
  }

  return ret;
 801616c:	7bfb      	ldrb	r3, [r7, #15]
}
 801616e:	4618      	mov	r0, r3
 8016170:	3710      	adds	r7, #16
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop

08016178 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b084      	sub	sp, #16
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016182:	2300      	movs	r3, #0
 8016184:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801618e:	2b40      	cmp	r3, #64	; 0x40
 8016190:	d005      	beq.n	801619e <USBD_StdItfReq+0x26>
 8016192:	2b40      	cmp	r3, #64	; 0x40
 8016194:	d852      	bhi.n	801623c <USBD_StdItfReq+0xc4>
 8016196:	2b00      	cmp	r3, #0
 8016198:	d001      	beq.n	801619e <USBD_StdItfReq+0x26>
 801619a:	2b20      	cmp	r3, #32
 801619c:	d14e      	bne.n	801623c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161a4:	b2db      	uxtb	r3, r3
 80161a6:	3b01      	subs	r3, #1
 80161a8:	2b02      	cmp	r3, #2
 80161aa:	d840      	bhi.n	801622e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	889b      	ldrh	r3, [r3, #4]
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d836      	bhi.n	8016224 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	889b      	ldrh	r3, [r3, #4]
 80161ba:	b2db      	uxtb	r3, r3
 80161bc:	4619      	mov	r1, r3
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f7ff fed9 	bl	8015f76 <USBD_CoreFindIF>
 80161c4:	4603      	mov	r3, r0
 80161c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161c8:	7bbb      	ldrb	r3, [r7, #14]
 80161ca:	2bff      	cmp	r3, #255	; 0xff
 80161cc:	d01d      	beq.n	801620a <USBD_StdItfReq+0x92>
 80161ce:	7bbb      	ldrb	r3, [r7, #14]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d11a      	bne.n	801620a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80161d4:	7bba      	ldrb	r2, [r7, #14]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	32ae      	adds	r2, #174	; 0xae
 80161da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161de:	689b      	ldr	r3, [r3, #8]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d00f      	beq.n	8016204 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80161e4:	7bba      	ldrb	r2, [r7, #14]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80161ec:	7bba      	ldrb	r2, [r7, #14]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	32ae      	adds	r2, #174	; 0xae
 80161f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	6839      	ldr	r1, [r7, #0]
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	4798      	blx	r3
 80161fe:	4603      	mov	r3, r0
 8016200:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016202:	e004      	b.n	801620e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016204:	2303      	movs	r3, #3
 8016206:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016208:	e001      	b.n	801620e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801620a:	2303      	movs	r3, #3
 801620c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	88db      	ldrh	r3, [r3, #6]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d110      	bne.n	8016238 <USBD_StdItfReq+0xc0>
 8016216:	7bfb      	ldrb	r3, [r7, #15]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d10d      	bne.n	8016238 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	f000 fdc7 	bl	8016db0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016222:	e009      	b.n	8016238 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016224:	6839      	ldr	r1, [r7, #0]
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f000 fcf7 	bl	8016c1a <USBD_CtlError>
          break;
 801622c:	e004      	b.n	8016238 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801622e:	6839      	ldr	r1, [r7, #0]
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f000 fcf2 	bl	8016c1a <USBD_CtlError>
          break;
 8016236:	e000      	b.n	801623a <USBD_StdItfReq+0xc2>
          break;
 8016238:	bf00      	nop
      }
      break;
 801623a:	e004      	b.n	8016246 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801623c:	6839      	ldr	r1, [r7, #0]
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f000 fceb 	bl	8016c1a <USBD_CtlError>
      break;
 8016244:	bf00      	nop
  }

  return ret;
 8016246:	7bfb      	ldrb	r3, [r7, #15]
}
 8016248:	4618      	mov	r0, r3
 801624a:	3710      	adds	r7, #16
 801624c:	46bd      	mov	sp, r7
 801624e:	bd80      	pop	{r7, pc}

08016250 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	b084      	sub	sp, #16
 8016254:	af00      	add	r7, sp, #0
 8016256:	6078      	str	r0, [r7, #4]
 8016258:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801625a:	2300      	movs	r3, #0
 801625c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801625e:	683b      	ldr	r3, [r7, #0]
 8016260:	889b      	ldrh	r3, [r3, #4]
 8016262:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801626c:	2b40      	cmp	r3, #64	; 0x40
 801626e:	d007      	beq.n	8016280 <USBD_StdEPReq+0x30>
 8016270:	2b40      	cmp	r3, #64	; 0x40
 8016272:	f200 817f 	bhi.w	8016574 <USBD_StdEPReq+0x324>
 8016276:	2b00      	cmp	r3, #0
 8016278:	d02a      	beq.n	80162d0 <USBD_StdEPReq+0x80>
 801627a:	2b20      	cmp	r3, #32
 801627c:	f040 817a 	bne.w	8016574 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016280:	7bbb      	ldrb	r3, [r7, #14]
 8016282:	4619      	mov	r1, r3
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f7ff fe83 	bl	8015f90 <USBD_CoreFindEP>
 801628a:	4603      	mov	r3, r0
 801628c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801628e:	7b7b      	ldrb	r3, [r7, #13]
 8016290:	2bff      	cmp	r3, #255	; 0xff
 8016292:	f000 8174 	beq.w	801657e <USBD_StdEPReq+0x32e>
 8016296:	7b7b      	ldrb	r3, [r7, #13]
 8016298:	2b00      	cmp	r3, #0
 801629a:	f040 8170 	bne.w	801657e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801629e:	7b7a      	ldrb	r2, [r7, #13]
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80162a6:	7b7a      	ldrb	r2, [r7, #13]
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	32ae      	adds	r2, #174	; 0xae
 80162ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162b0:	689b      	ldr	r3, [r3, #8]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	f000 8163 	beq.w	801657e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80162b8:	7b7a      	ldrb	r2, [r7, #13]
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	32ae      	adds	r2, #174	; 0xae
 80162be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80162c2:	689b      	ldr	r3, [r3, #8]
 80162c4:	6839      	ldr	r1, [r7, #0]
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	4798      	blx	r3
 80162ca:	4603      	mov	r3, r0
 80162cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80162ce:	e156      	b.n	801657e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	785b      	ldrb	r3, [r3, #1]
 80162d4:	2b03      	cmp	r3, #3
 80162d6:	d008      	beq.n	80162ea <USBD_StdEPReq+0x9a>
 80162d8:	2b03      	cmp	r3, #3
 80162da:	f300 8145 	bgt.w	8016568 <USBD_StdEPReq+0x318>
 80162de:	2b00      	cmp	r3, #0
 80162e0:	f000 809b 	beq.w	801641a <USBD_StdEPReq+0x1ca>
 80162e4:	2b01      	cmp	r3, #1
 80162e6:	d03c      	beq.n	8016362 <USBD_StdEPReq+0x112>
 80162e8:	e13e      	b.n	8016568 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	d002      	beq.n	80162fc <USBD_StdEPReq+0xac>
 80162f6:	2b03      	cmp	r3, #3
 80162f8:	d016      	beq.n	8016328 <USBD_StdEPReq+0xd8>
 80162fa:	e02c      	b.n	8016356 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80162fc:	7bbb      	ldrb	r3, [r7, #14]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d00d      	beq.n	801631e <USBD_StdEPReq+0xce>
 8016302:	7bbb      	ldrb	r3, [r7, #14]
 8016304:	2b80      	cmp	r3, #128	; 0x80
 8016306:	d00a      	beq.n	801631e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016308:	7bbb      	ldrb	r3, [r7, #14]
 801630a:	4619      	mov	r1, r3
 801630c:	6878      	ldr	r0, [r7, #4]
 801630e:	f003 fb35 	bl	801997c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016312:	2180      	movs	r1, #128	; 0x80
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f003 fb31 	bl	801997c <USBD_LL_StallEP>
 801631a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801631c:	e020      	b.n	8016360 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801631e:	6839      	ldr	r1, [r7, #0]
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f000 fc7a 	bl	8016c1a <USBD_CtlError>
              break;
 8016326:	e01b      	b.n	8016360 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016328:	683b      	ldr	r3, [r7, #0]
 801632a:	885b      	ldrh	r3, [r3, #2]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d10e      	bne.n	801634e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016330:	7bbb      	ldrb	r3, [r7, #14]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d00b      	beq.n	801634e <USBD_StdEPReq+0xfe>
 8016336:	7bbb      	ldrb	r3, [r7, #14]
 8016338:	2b80      	cmp	r3, #128	; 0x80
 801633a:	d008      	beq.n	801634e <USBD_StdEPReq+0xfe>
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	88db      	ldrh	r3, [r3, #6]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d104      	bne.n	801634e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8016344:	7bbb      	ldrb	r3, [r7, #14]
 8016346:	4619      	mov	r1, r3
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f003 fb17 	bl	801997c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f000 fd2e 	bl	8016db0 <USBD_CtlSendStatus>

              break;
 8016354:	e004      	b.n	8016360 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8016356:	6839      	ldr	r1, [r7, #0]
 8016358:	6878      	ldr	r0, [r7, #4]
 801635a:	f000 fc5e 	bl	8016c1a <USBD_CtlError>
              break;
 801635e:	bf00      	nop
          }
          break;
 8016360:	e107      	b.n	8016572 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016368:	b2db      	uxtb	r3, r3
 801636a:	2b02      	cmp	r3, #2
 801636c:	d002      	beq.n	8016374 <USBD_StdEPReq+0x124>
 801636e:	2b03      	cmp	r3, #3
 8016370:	d016      	beq.n	80163a0 <USBD_StdEPReq+0x150>
 8016372:	e04b      	b.n	801640c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016374:	7bbb      	ldrb	r3, [r7, #14]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d00d      	beq.n	8016396 <USBD_StdEPReq+0x146>
 801637a:	7bbb      	ldrb	r3, [r7, #14]
 801637c:	2b80      	cmp	r3, #128	; 0x80
 801637e:	d00a      	beq.n	8016396 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016380:	7bbb      	ldrb	r3, [r7, #14]
 8016382:	4619      	mov	r1, r3
 8016384:	6878      	ldr	r0, [r7, #4]
 8016386:	f003 faf9 	bl	801997c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801638a:	2180      	movs	r1, #128	; 0x80
 801638c:	6878      	ldr	r0, [r7, #4]
 801638e:	f003 faf5 	bl	801997c <USBD_LL_StallEP>
 8016392:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016394:	e040      	b.n	8016418 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016396:	6839      	ldr	r1, [r7, #0]
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 fc3e 	bl	8016c1a <USBD_CtlError>
              break;
 801639e:	e03b      	b.n	8016418 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	885b      	ldrh	r3, [r3, #2]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d136      	bne.n	8016416 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80163a8:	7bbb      	ldrb	r3, [r7, #14]
 80163aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d004      	beq.n	80163bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80163b2:	7bbb      	ldrb	r3, [r7, #14]
 80163b4:	4619      	mov	r1, r3
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f003 faff 	bl	80199ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 fcf7 	bl	8016db0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80163c2:	7bbb      	ldrb	r3, [r7, #14]
 80163c4:	4619      	mov	r1, r3
 80163c6:	6878      	ldr	r0, [r7, #4]
 80163c8:	f7ff fde2 	bl	8015f90 <USBD_CoreFindEP>
 80163cc:	4603      	mov	r3, r0
 80163ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80163d0:	7b7b      	ldrb	r3, [r7, #13]
 80163d2:	2bff      	cmp	r3, #255	; 0xff
 80163d4:	d01f      	beq.n	8016416 <USBD_StdEPReq+0x1c6>
 80163d6:	7b7b      	ldrb	r3, [r7, #13]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d11c      	bne.n	8016416 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80163dc:	7b7a      	ldrb	r2, [r7, #13]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80163e4:	7b7a      	ldrb	r2, [r7, #13]
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	32ae      	adds	r2, #174	; 0xae
 80163ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163ee:	689b      	ldr	r3, [r3, #8]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d010      	beq.n	8016416 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80163f4:	7b7a      	ldrb	r2, [r7, #13]
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	32ae      	adds	r2, #174	; 0xae
 80163fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163fe:	689b      	ldr	r3, [r3, #8]
 8016400:	6839      	ldr	r1, [r7, #0]
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	4798      	blx	r3
 8016406:	4603      	mov	r3, r0
 8016408:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801640a:	e004      	b.n	8016416 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801640c:	6839      	ldr	r1, [r7, #0]
 801640e:	6878      	ldr	r0, [r7, #4]
 8016410:	f000 fc03 	bl	8016c1a <USBD_CtlError>
              break;
 8016414:	e000      	b.n	8016418 <USBD_StdEPReq+0x1c8>
              break;
 8016416:	bf00      	nop
          }
          break;
 8016418:	e0ab      	b.n	8016572 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016420:	b2db      	uxtb	r3, r3
 8016422:	2b02      	cmp	r3, #2
 8016424:	d002      	beq.n	801642c <USBD_StdEPReq+0x1dc>
 8016426:	2b03      	cmp	r3, #3
 8016428:	d032      	beq.n	8016490 <USBD_StdEPReq+0x240>
 801642a:	e097      	b.n	801655c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801642c:	7bbb      	ldrb	r3, [r7, #14]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d007      	beq.n	8016442 <USBD_StdEPReq+0x1f2>
 8016432:	7bbb      	ldrb	r3, [r7, #14]
 8016434:	2b80      	cmp	r3, #128	; 0x80
 8016436:	d004      	beq.n	8016442 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016438:	6839      	ldr	r1, [r7, #0]
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f000 fbed 	bl	8016c1a <USBD_CtlError>
                break;
 8016440:	e091      	b.n	8016566 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016446:	2b00      	cmp	r3, #0
 8016448:	da0b      	bge.n	8016462 <USBD_StdEPReq+0x212>
 801644a:	7bbb      	ldrb	r3, [r7, #14]
 801644c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016450:	4613      	mov	r3, r2
 8016452:	009b      	lsls	r3, r3, #2
 8016454:	4413      	add	r3, r2
 8016456:	009b      	lsls	r3, r3, #2
 8016458:	3310      	adds	r3, #16
 801645a:	687a      	ldr	r2, [r7, #4]
 801645c:	4413      	add	r3, r2
 801645e:	3304      	adds	r3, #4
 8016460:	e00b      	b.n	801647a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016462:	7bbb      	ldrb	r3, [r7, #14]
 8016464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016468:	4613      	mov	r3, r2
 801646a:	009b      	lsls	r3, r3, #2
 801646c:	4413      	add	r3, r2
 801646e:	009b      	lsls	r3, r3, #2
 8016470:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016474:	687a      	ldr	r2, [r7, #4]
 8016476:	4413      	add	r3, r2
 8016478:	3304      	adds	r3, #4
 801647a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	2200      	movs	r2, #0
 8016480:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	2202      	movs	r2, #2
 8016486:	4619      	mov	r1, r3
 8016488:	6878      	ldr	r0, [r7, #4]
 801648a:	f000 fc37 	bl	8016cfc <USBD_CtlSendData>
              break;
 801648e:	e06a      	b.n	8016566 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016490:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016494:	2b00      	cmp	r3, #0
 8016496:	da11      	bge.n	80164bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016498:	7bbb      	ldrb	r3, [r7, #14]
 801649a:	f003 020f 	and.w	r2, r3, #15
 801649e:	6879      	ldr	r1, [r7, #4]
 80164a0:	4613      	mov	r3, r2
 80164a2:	009b      	lsls	r3, r3, #2
 80164a4:	4413      	add	r3, r2
 80164a6:	009b      	lsls	r3, r3, #2
 80164a8:	440b      	add	r3, r1
 80164aa:	3324      	adds	r3, #36	; 0x24
 80164ac:	881b      	ldrh	r3, [r3, #0]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d117      	bne.n	80164e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80164b2:	6839      	ldr	r1, [r7, #0]
 80164b4:	6878      	ldr	r0, [r7, #4]
 80164b6:	f000 fbb0 	bl	8016c1a <USBD_CtlError>
                  break;
 80164ba:	e054      	b.n	8016566 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80164bc:	7bbb      	ldrb	r3, [r7, #14]
 80164be:	f003 020f 	and.w	r2, r3, #15
 80164c2:	6879      	ldr	r1, [r7, #4]
 80164c4:	4613      	mov	r3, r2
 80164c6:	009b      	lsls	r3, r3, #2
 80164c8:	4413      	add	r3, r2
 80164ca:	009b      	lsls	r3, r3, #2
 80164cc:	440b      	add	r3, r1
 80164ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80164d2:	881b      	ldrh	r3, [r3, #0]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d104      	bne.n	80164e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80164d8:	6839      	ldr	r1, [r7, #0]
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f000 fb9d 	bl	8016c1a <USBD_CtlError>
                  break;
 80164e0:	e041      	b.n	8016566 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80164e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	da0b      	bge.n	8016502 <USBD_StdEPReq+0x2b2>
 80164ea:	7bbb      	ldrb	r3, [r7, #14]
 80164ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80164f0:	4613      	mov	r3, r2
 80164f2:	009b      	lsls	r3, r3, #2
 80164f4:	4413      	add	r3, r2
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	3310      	adds	r3, #16
 80164fa:	687a      	ldr	r2, [r7, #4]
 80164fc:	4413      	add	r3, r2
 80164fe:	3304      	adds	r3, #4
 8016500:	e00b      	b.n	801651a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016502:	7bbb      	ldrb	r3, [r7, #14]
 8016504:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016508:	4613      	mov	r3, r2
 801650a:	009b      	lsls	r3, r3, #2
 801650c:	4413      	add	r3, r2
 801650e:	009b      	lsls	r3, r3, #2
 8016510:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016514:	687a      	ldr	r2, [r7, #4]
 8016516:	4413      	add	r3, r2
 8016518:	3304      	adds	r3, #4
 801651a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801651c:	7bbb      	ldrb	r3, [r7, #14]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d002      	beq.n	8016528 <USBD_StdEPReq+0x2d8>
 8016522:	7bbb      	ldrb	r3, [r7, #14]
 8016524:	2b80      	cmp	r3, #128	; 0x80
 8016526:	d103      	bne.n	8016530 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	2200      	movs	r2, #0
 801652c:	601a      	str	r2, [r3, #0]
 801652e:	e00e      	b.n	801654e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016530:	7bbb      	ldrb	r3, [r7, #14]
 8016532:	4619      	mov	r1, r3
 8016534:	6878      	ldr	r0, [r7, #4]
 8016536:	f003 fa5f 	bl	80199f8 <USBD_LL_IsStallEP>
 801653a:	4603      	mov	r3, r0
 801653c:	2b00      	cmp	r3, #0
 801653e:	d003      	beq.n	8016548 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016540:	68bb      	ldr	r3, [r7, #8]
 8016542:	2201      	movs	r2, #1
 8016544:	601a      	str	r2, [r3, #0]
 8016546:	e002      	b.n	801654e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	2200      	movs	r2, #0
 801654c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801654e:	68bb      	ldr	r3, [r7, #8]
 8016550:	2202      	movs	r2, #2
 8016552:	4619      	mov	r1, r3
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f000 fbd1 	bl	8016cfc <USBD_CtlSendData>
              break;
 801655a:	e004      	b.n	8016566 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801655c:	6839      	ldr	r1, [r7, #0]
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f000 fb5b 	bl	8016c1a <USBD_CtlError>
              break;
 8016564:	bf00      	nop
          }
          break;
 8016566:	e004      	b.n	8016572 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016568:	6839      	ldr	r1, [r7, #0]
 801656a:	6878      	ldr	r0, [r7, #4]
 801656c:	f000 fb55 	bl	8016c1a <USBD_CtlError>
          break;
 8016570:	bf00      	nop
      }
      break;
 8016572:	e005      	b.n	8016580 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016574:	6839      	ldr	r1, [r7, #0]
 8016576:	6878      	ldr	r0, [r7, #4]
 8016578:	f000 fb4f 	bl	8016c1a <USBD_CtlError>
      break;
 801657c:	e000      	b.n	8016580 <USBD_StdEPReq+0x330>
      break;
 801657e:	bf00      	nop
  }

  return ret;
 8016580:	7bfb      	ldrb	r3, [r7, #15]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3710      	adds	r7, #16
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
	...

0801658c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b084      	sub	sp, #16
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
 8016594:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016596:	2300      	movs	r3, #0
 8016598:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801659a:	2300      	movs	r3, #0
 801659c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801659e:	2300      	movs	r3, #0
 80165a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80165a2:	683b      	ldr	r3, [r7, #0]
 80165a4:	885b      	ldrh	r3, [r3, #2]
 80165a6:	0a1b      	lsrs	r3, r3, #8
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	3b01      	subs	r3, #1
 80165ac:	2b06      	cmp	r3, #6
 80165ae:	f200 8128 	bhi.w	8016802 <USBD_GetDescriptor+0x276>
 80165b2:	a201      	add	r2, pc, #4	; (adr r2, 80165b8 <USBD_GetDescriptor+0x2c>)
 80165b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b8:	080165d5 	.word	0x080165d5
 80165bc:	080165ed 	.word	0x080165ed
 80165c0:	0801662d 	.word	0x0801662d
 80165c4:	08016803 	.word	0x08016803
 80165c8:	08016803 	.word	0x08016803
 80165cc:	080167a3 	.word	0x080167a3
 80165d0:	080167cf 	.word	0x080167cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	687a      	ldr	r2, [r7, #4]
 80165de:	7c12      	ldrb	r2, [r2, #16]
 80165e0:	f107 0108 	add.w	r1, r7, #8
 80165e4:	4610      	mov	r0, r2
 80165e6:	4798      	blx	r3
 80165e8:	60f8      	str	r0, [r7, #12]
      break;
 80165ea:	e112      	b.n	8016812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	7c1b      	ldrb	r3, [r3, #16]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10d      	bne.n	8016610 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80165fc:	f107 0208 	add.w	r2, r7, #8
 8016600:	4610      	mov	r0, r2
 8016602:	4798      	blx	r3
 8016604:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	3301      	adds	r3, #1
 801660a:	2202      	movs	r2, #2
 801660c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801660e:	e100      	b.n	8016812 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016618:	f107 0208 	add.w	r2, r7, #8
 801661c:	4610      	mov	r0, r2
 801661e:	4798      	blx	r3
 8016620:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	3301      	adds	r3, #1
 8016626:	2202      	movs	r2, #2
 8016628:	701a      	strb	r2, [r3, #0]
      break;
 801662a:	e0f2      	b.n	8016812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801662c:	683b      	ldr	r3, [r7, #0]
 801662e:	885b      	ldrh	r3, [r3, #2]
 8016630:	b2db      	uxtb	r3, r3
 8016632:	2b05      	cmp	r3, #5
 8016634:	f200 80ac 	bhi.w	8016790 <USBD_GetDescriptor+0x204>
 8016638:	a201      	add	r2, pc, #4	; (adr r2, 8016640 <USBD_GetDescriptor+0xb4>)
 801663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801663e:	bf00      	nop
 8016640:	08016659 	.word	0x08016659
 8016644:	0801668d 	.word	0x0801668d
 8016648:	080166c1 	.word	0x080166c1
 801664c:	080166f5 	.word	0x080166f5
 8016650:	08016729 	.word	0x08016729
 8016654:	0801675d 	.word	0x0801675d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801665e:	685b      	ldr	r3, [r3, #4]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d00b      	beq.n	801667c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	7c12      	ldrb	r2, [r2, #16]
 8016670:	f107 0108 	add.w	r1, r7, #8
 8016674:	4610      	mov	r0, r2
 8016676:	4798      	blx	r3
 8016678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801667a:	e091      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801667c:	6839      	ldr	r1, [r7, #0]
 801667e:	6878      	ldr	r0, [r7, #4]
 8016680:	f000 facb 	bl	8016c1a <USBD_CtlError>
            err++;
 8016684:	7afb      	ldrb	r3, [r7, #11]
 8016686:	3301      	adds	r3, #1
 8016688:	72fb      	strb	r3, [r7, #11]
          break;
 801668a:	e089      	b.n	80167a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016692:	689b      	ldr	r3, [r3, #8]
 8016694:	2b00      	cmp	r3, #0
 8016696:	d00b      	beq.n	80166b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801669e:	689b      	ldr	r3, [r3, #8]
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	7c12      	ldrb	r2, [r2, #16]
 80166a4:	f107 0108 	add.w	r1, r7, #8
 80166a8:	4610      	mov	r0, r2
 80166aa:	4798      	blx	r3
 80166ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80166ae:	e077      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80166b0:	6839      	ldr	r1, [r7, #0]
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f000 fab1 	bl	8016c1a <USBD_CtlError>
            err++;
 80166b8:	7afb      	ldrb	r3, [r7, #11]
 80166ba:	3301      	adds	r3, #1
 80166bc:	72fb      	strb	r3, [r7, #11]
          break;
 80166be:	e06f      	b.n	80167a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80166c6:	68db      	ldr	r3, [r3, #12]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d00b      	beq.n	80166e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80166d2:	68db      	ldr	r3, [r3, #12]
 80166d4:	687a      	ldr	r2, [r7, #4]
 80166d6:	7c12      	ldrb	r2, [r2, #16]
 80166d8:	f107 0108 	add.w	r1, r7, #8
 80166dc:	4610      	mov	r0, r2
 80166de:	4798      	blx	r3
 80166e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80166e2:	e05d      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80166e4:	6839      	ldr	r1, [r7, #0]
 80166e6:	6878      	ldr	r0, [r7, #4]
 80166e8:	f000 fa97 	bl	8016c1a <USBD_CtlError>
            err++;
 80166ec:	7afb      	ldrb	r3, [r7, #11]
 80166ee:	3301      	adds	r3, #1
 80166f0:	72fb      	strb	r3, [r7, #11]
          break;
 80166f2:	e055      	b.n	80167a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80166fa:	691b      	ldr	r3, [r3, #16]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d00b      	beq.n	8016718 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016706:	691b      	ldr	r3, [r3, #16]
 8016708:	687a      	ldr	r2, [r7, #4]
 801670a:	7c12      	ldrb	r2, [r2, #16]
 801670c:	f107 0108 	add.w	r1, r7, #8
 8016710:	4610      	mov	r0, r2
 8016712:	4798      	blx	r3
 8016714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016716:	e043      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016718:	6839      	ldr	r1, [r7, #0]
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f000 fa7d 	bl	8016c1a <USBD_CtlError>
            err++;
 8016720:	7afb      	ldrb	r3, [r7, #11]
 8016722:	3301      	adds	r3, #1
 8016724:	72fb      	strb	r3, [r7, #11]
          break;
 8016726:	e03b      	b.n	80167a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801672e:	695b      	ldr	r3, [r3, #20]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d00b      	beq.n	801674c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801673a:	695b      	ldr	r3, [r3, #20]
 801673c:	687a      	ldr	r2, [r7, #4]
 801673e:	7c12      	ldrb	r2, [r2, #16]
 8016740:	f107 0108 	add.w	r1, r7, #8
 8016744:	4610      	mov	r0, r2
 8016746:	4798      	blx	r3
 8016748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801674a:	e029      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801674c:	6839      	ldr	r1, [r7, #0]
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f000 fa63 	bl	8016c1a <USBD_CtlError>
            err++;
 8016754:	7afb      	ldrb	r3, [r7, #11]
 8016756:	3301      	adds	r3, #1
 8016758:	72fb      	strb	r3, [r7, #11]
          break;
 801675a:	e021      	b.n	80167a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016762:	699b      	ldr	r3, [r3, #24]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d00b      	beq.n	8016780 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801676e:	699b      	ldr	r3, [r3, #24]
 8016770:	687a      	ldr	r2, [r7, #4]
 8016772:	7c12      	ldrb	r2, [r2, #16]
 8016774:	f107 0108 	add.w	r1, r7, #8
 8016778:	4610      	mov	r0, r2
 801677a:	4798      	blx	r3
 801677c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801677e:	e00f      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016780:	6839      	ldr	r1, [r7, #0]
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f000 fa49 	bl	8016c1a <USBD_CtlError>
            err++;
 8016788:	7afb      	ldrb	r3, [r7, #11]
 801678a:	3301      	adds	r3, #1
 801678c:	72fb      	strb	r3, [r7, #11]
          break;
 801678e:	e007      	b.n	80167a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 fa41 	bl	8016c1a <USBD_CtlError>
          err++;
 8016798:	7afb      	ldrb	r3, [r7, #11]
 801679a:	3301      	adds	r3, #1
 801679c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801679e:	bf00      	nop
      }
      break;
 80167a0:	e037      	b.n	8016812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	7c1b      	ldrb	r3, [r3, #16]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d109      	bne.n	80167be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167b2:	f107 0208 	add.w	r2, r7, #8
 80167b6:	4610      	mov	r0, r2
 80167b8:	4798      	blx	r3
 80167ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80167bc:	e029      	b.n	8016812 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80167be:	6839      	ldr	r1, [r7, #0]
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f000 fa2a 	bl	8016c1a <USBD_CtlError>
        err++;
 80167c6:	7afb      	ldrb	r3, [r7, #11]
 80167c8:	3301      	adds	r3, #1
 80167ca:	72fb      	strb	r3, [r7, #11]
      break;
 80167cc:	e021      	b.n	8016812 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	7c1b      	ldrb	r3, [r3, #16]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d10d      	bne.n	80167f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167de:	f107 0208 	add.w	r2, r7, #8
 80167e2:	4610      	mov	r0, r2
 80167e4:	4798      	blx	r3
 80167e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	3301      	adds	r3, #1
 80167ec:	2207      	movs	r2, #7
 80167ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80167f0:	e00f      	b.n	8016812 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80167f2:	6839      	ldr	r1, [r7, #0]
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f000 fa10 	bl	8016c1a <USBD_CtlError>
        err++;
 80167fa:	7afb      	ldrb	r3, [r7, #11]
 80167fc:	3301      	adds	r3, #1
 80167fe:	72fb      	strb	r3, [r7, #11]
      break;
 8016800:	e007      	b.n	8016812 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016802:	6839      	ldr	r1, [r7, #0]
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f000 fa08 	bl	8016c1a <USBD_CtlError>
      err++;
 801680a:	7afb      	ldrb	r3, [r7, #11]
 801680c:	3301      	adds	r3, #1
 801680e:	72fb      	strb	r3, [r7, #11]
      break;
 8016810:	bf00      	nop
  }

  if (err != 0U)
 8016812:	7afb      	ldrb	r3, [r7, #11]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d11e      	bne.n	8016856 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	88db      	ldrh	r3, [r3, #6]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d016      	beq.n	801684e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016820:	893b      	ldrh	r3, [r7, #8]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d00e      	beq.n	8016844 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	88da      	ldrh	r2, [r3, #6]
 801682a:	893b      	ldrh	r3, [r7, #8]
 801682c:	4293      	cmp	r3, r2
 801682e:	bf28      	it	cs
 8016830:	4613      	movcs	r3, r2
 8016832:	b29b      	uxth	r3, r3
 8016834:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016836:	893b      	ldrh	r3, [r7, #8]
 8016838:	461a      	mov	r2, r3
 801683a:	68f9      	ldr	r1, [r7, #12]
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f000 fa5d 	bl	8016cfc <USBD_CtlSendData>
 8016842:	e009      	b.n	8016858 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016844:	6839      	ldr	r1, [r7, #0]
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f000 f9e7 	bl	8016c1a <USBD_CtlError>
 801684c:	e004      	b.n	8016858 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801684e:	6878      	ldr	r0, [r7, #4]
 8016850:	f000 faae 	bl	8016db0 <USBD_CtlSendStatus>
 8016854:	e000      	b.n	8016858 <USBD_GetDescriptor+0x2cc>
    return;
 8016856:	bf00      	nop
  }
}
 8016858:	3710      	adds	r7, #16
 801685a:	46bd      	mov	sp, r7
 801685c:	bd80      	pop	{r7, pc}
 801685e:	bf00      	nop

08016860 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016860:	b580      	push	{r7, lr}
 8016862:	b084      	sub	sp, #16
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
 8016868:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801686a:	683b      	ldr	r3, [r7, #0]
 801686c:	889b      	ldrh	r3, [r3, #4]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d131      	bne.n	80168d6 <USBD_SetAddress+0x76>
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	88db      	ldrh	r3, [r3, #6]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d12d      	bne.n	80168d6 <USBD_SetAddress+0x76>
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	885b      	ldrh	r3, [r3, #2]
 801687e:	2b7f      	cmp	r3, #127	; 0x7f
 8016880:	d829      	bhi.n	80168d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	885b      	ldrh	r3, [r3, #2]
 8016886:	b2db      	uxtb	r3, r3
 8016888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801688c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016894:	b2db      	uxtb	r3, r3
 8016896:	2b03      	cmp	r3, #3
 8016898:	d104      	bne.n	80168a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801689a:	6839      	ldr	r1, [r7, #0]
 801689c:	6878      	ldr	r0, [r7, #4]
 801689e:	f000 f9bc 	bl	8016c1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168a2:	e01d      	b.n	80168e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	7bfa      	ldrb	r2, [r7, #15]
 80168a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80168ac:	7bfb      	ldrb	r3, [r7, #15]
 80168ae:	4619      	mov	r1, r3
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f003 f8cd 	bl	8019a50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80168b6:	6878      	ldr	r0, [r7, #4]
 80168b8:	f000 fa7a 	bl	8016db0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80168bc:	7bfb      	ldrb	r3, [r7, #15]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d004      	beq.n	80168cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2202      	movs	r2, #2
 80168c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168ca:	e009      	b.n	80168e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2201      	movs	r2, #1
 80168d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80168d4:	e004      	b.n	80168e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80168d6:	6839      	ldr	r1, [r7, #0]
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f000 f99e 	bl	8016c1a <USBD_CtlError>
  }
}
 80168de:	bf00      	nop
 80168e0:	bf00      	nop
 80168e2:	3710      	adds	r7, #16
 80168e4:	46bd      	mov	sp, r7
 80168e6:	bd80      	pop	{r7, pc}

080168e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b084      	sub	sp, #16
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80168f2:	2300      	movs	r3, #0
 80168f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	885b      	ldrh	r3, [r3, #2]
 80168fa:	b2da      	uxtb	r2, r3
 80168fc:	4b4e      	ldr	r3, [pc, #312]	; (8016a38 <USBD_SetConfig+0x150>)
 80168fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016900:	4b4d      	ldr	r3, [pc, #308]	; (8016a38 <USBD_SetConfig+0x150>)
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b01      	cmp	r3, #1
 8016906:	d905      	bls.n	8016914 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016908:	6839      	ldr	r1, [r7, #0]
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f000 f985 	bl	8016c1a <USBD_CtlError>
    return USBD_FAIL;
 8016910:	2303      	movs	r3, #3
 8016912:	e08c      	b.n	8016a2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801691a:	b2db      	uxtb	r3, r3
 801691c:	2b02      	cmp	r3, #2
 801691e:	d002      	beq.n	8016926 <USBD_SetConfig+0x3e>
 8016920:	2b03      	cmp	r3, #3
 8016922:	d029      	beq.n	8016978 <USBD_SetConfig+0x90>
 8016924:	e075      	b.n	8016a12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016926:	4b44      	ldr	r3, [pc, #272]	; (8016a38 <USBD_SetConfig+0x150>)
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d020      	beq.n	8016970 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801692e:	4b42      	ldr	r3, [pc, #264]	; (8016a38 <USBD_SetConfig+0x150>)
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	461a      	mov	r2, r3
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016938:	4b3f      	ldr	r3, [pc, #252]	; (8016a38 <USBD_SetConfig+0x150>)
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	4619      	mov	r1, r3
 801693e:	6878      	ldr	r0, [r7, #4]
 8016940:	f7fe ffe7 	bl	8015912 <USBD_SetClassConfig>
 8016944:	4603      	mov	r3, r0
 8016946:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016948:	7bfb      	ldrb	r3, [r7, #15]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d008      	beq.n	8016960 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801694e:	6839      	ldr	r1, [r7, #0]
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f000 f962 	bl	8016c1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2202      	movs	r2, #2
 801695a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801695e:	e065      	b.n	8016a2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016960:	6878      	ldr	r0, [r7, #4]
 8016962:	f000 fa25 	bl	8016db0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	2203      	movs	r2, #3
 801696a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801696e:	e05d      	b.n	8016a2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 fa1d 	bl	8016db0 <USBD_CtlSendStatus>
      break;
 8016976:	e059      	b.n	8016a2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016978:	4b2f      	ldr	r3, [pc, #188]	; (8016a38 <USBD_SetConfig+0x150>)
 801697a:	781b      	ldrb	r3, [r3, #0]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d112      	bne.n	80169a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	2202      	movs	r2, #2
 8016984:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016988:	4b2b      	ldr	r3, [pc, #172]	; (8016a38 <USBD_SetConfig+0x150>)
 801698a:	781b      	ldrb	r3, [r3, #0]
 801698c:	461a      	mov	r2, r3
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016992:	4b29      	ldr	r3, [pc, #164]	; (8016a38 <USBD_SetConfig+0x150>)
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	4619      	mov	r1, r3
 8016998:	6878      	ldr	r0, [r7, #4]
 801699a:	f7fe ffd6 	bl	801594a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f000 fa06 	bl	8016db0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80169a4:	e042      	b.n	8016a2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80169a6:	4b24      	ldr	r3, [pc, #144]	; (8016a38 <USBD_SetConfig+0x150>)
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	461a      	mov	r2, r3
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	685b      	ldr	r3, [r3, #4]
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d02a      	beq.n	8016a0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	685b      	ldr	r3, [r3, #4]
 80169b8:	b2db      	uxtb	r3, r3
 80169ba:	4619      	mov	r1, r3
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f7fe ffc4 	bl	801594a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80169c2:	4b1d      	ldr	r3, [pc, #116]	; (8016a38 <USBD_SetConfig+0x150>)
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	461a      	mov	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80169cc:	4b1a      	ldr	r3, [pc, #104]	; (8016a38 <USBD_SetConfig+0x150>)
 80169ce:	781b      	ldrb	r3, [r3, #0]
 80169d0:	4619      	mov	r1, r3
 80169d2:	6878      	ldr	r0, [r7, #4]
 80169d4:	f7fe ff9d 	bl	8015912 <USBD_SetClassConfig>
 80169d8:	4603      	mov	r3, r0
 80169da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80169dc:	7bfb      	ldrb	r3, [r7, #15]
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d00f      	beq.n	8016a02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80169e2:	6839      	ldr	r1, [r7, #0]
 80169e4:	6878      	ldr	r0, [r7, #4]
 80169e6:	f000 f918 	bl	8016c1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	4619      	mov	r1, r3
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f7fe ffa9 	bl	801594a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2202      	movs	r2, #2
 80169fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016a00:	e014      	b.n	8016a2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f000 f9d4 	bl	8016db0 <USBD_CtlSendStatus>
      break;
 8016a08:	e010      	b.n	8016a2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 f9d0 	bl	8016db0 <USBD_CtlSendStatus>
      break;
 8016a10:	e00c      	b.n	8016a2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016a12:	6839      	ldr	r1, [r7, #0]
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f000 f900 	bl	8016c1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016a1a:	4b07      	ldr	r3, [pc, #28]	; (8016a38 <USBD_SetConfig+0x150>)
 8016a1c:	781b      	ldrb	r3, [r3, #0]
 8016a1e:	4619      	mov	r1, r3
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7fe ff92 	bl	801594a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016a26:	2303      	movs	r3, #3
 8016a28:	73fb      	strb	r3, [r7, #15]
      break;
 8016a2a:	bf00      	nop
  }

  return ret;
 8016a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a2e:	4618      	mov	r0, r3
 8016a30:	3710      	adds	r7, #16
 8016a32:	46bd      	mov	sp, r7
 8016a34:	bd80      	pop	{r7, pc}
 8016a36:	bf00      	nop
 8016a38:	240011d8 	.word	0x240011d8

08016a3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b082      	sub	sp, #8
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
 8016a44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	88db      	ldrh	r3, [r3, #6]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d004      	beq.n	8016a58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016a4e:	6839      	ldr	r1, [r7, #0]
 8016a50:	6878      	ldr	r0, [r7, #4]
 8016a52:	f000 f8e2 	bl	8016c1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016a56:	e023      	b.n	8016aa0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a5e:	b2db      	uxtb	r3, r3
 8016a60:	2b02      	cmp	r3, #2
 8016a62:	dc02      	bgt.n	8016a6a <USBD_GetConfig+0x2e>
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	dc03      	bgt.n	8016a70 <USBD_GetConfig+0x34>
 8016a68:	e015      	b.n	8016a96 <USBD_GetConfig+0x5a>
 8016a6a:	2b03      	cmp	r3, #3
 8016a6c:	d00b      	beq.n	8016a86 <USBD_GetConfig+0x4a>
 8016a6e:	e012      	b.n	8016a96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2200      	movs	r2, #0
 8016a74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	3308      	adds	r3, #8
 8016a7a:	2201      	movs	r2, #1
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f000 f93c 	bl	8016cfc <USBD_CtlSendData>
        break;
 8016a84:	e00c      	b.n	8016aa0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	3304      	adds	r3, #4
 8016a8a:	2201      	movs	r2, #1
 8016a8c:	4619      	mov	r1, r3
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f000 f934 	bl	8016cfc <USBD_CtlSendData>
        break;
 8016a94:	e004      	b.n	8016aa0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	6878      	ldr	r0, [r7, #4]
 8016a9a:	f000 f8be 	bl	8016c1a <USBD_CtlError>
        break;
 8016a9e:	bf00      	nop
}
 8016aa0:	bf00      	nop
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}

08016aa8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ab8:	b2db      	uxtb	r3, r3
 8016aba:	3b01      	subs	r3, #1
 8016abc:	2b02      	cmp	r3, #2
 8016abe:	d81e      	bhi.n	8016afe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	88db      	ldrh	r3, [r3, #6]
 8016ac4:	2b02      	cmp	r3, #2
 8016ac6:	d004      	beq.n	8016ad2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016ac8:	6839      	ldr	r1, [r7, #0]
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f000 f8a5 	bl	8016c1a <USBD_CtlError>
        break;
 8016ad0:	e01a      	b.n	8016b08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d005      	beq.n	8016aee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	68db      	ldr	r3, [r3, #12]
 8016ae6:	f043 0202 	orr.w	r2, r3, #2
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	330c      	adds	r3, #12
 8016af2:	2202      	movs	r2, #2
 8016af4:	4619      	mov	r1, r3
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f000 f900 	bl	8016cfc <USBD_CtlSendData>
      break;
 8016afc:	e004      	b.n	8016b08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016afe:	6839      	ldr	r1, [r7, #0]
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f000 f88a 	bl	8016c1a <USBD_CtlError>
      break;
 8016b06:	bf00      	nop
  }
}
 8016b08:	bf00      	nop
 8016b0a:	3708      	adds	r7, #8
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}

08016b10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016b1a:	683b      	ldr	r3, [r7, #0]
 8016b1c:	885b      	ldrh	r3, [r3, #2]
 8016b1e:	2b01      	cmp	r3, #1
 8016b20:	d107      	bne.n	8016b32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	2201      	movs	r2, #1
 8016b26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f000 f940 	bl	8016db0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016b30:	e013      	b.n	8016b5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	885b      	ldrh	r3, [r3, #2]
 8016b36:	2b02      	cmp	r3, #2
 8016b38:	d10b      	bne.n	8016b52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016b3a:	683b      	ldr	r3, [r7, #0]
 8016b3c:	889b      	ldrh	r3, [r3, #4]
 8016b3e:	0a1b      	lsrs	r3, r3, #8
 8016b40:	b29b      	uxth	r3, r3
 8016b42:	b2da      	uxtb	r2, r3
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f000 f930 	bl	8016db0 <USBD_CtlSendStatus>
}
 8016b50:	e003      	b.n	8016b5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016b52:	6839      	ldr	r1, [r7, #0]
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f000 f860 	bl	8016c1a <USBD_CtlError>
}
 8016b5a:	bf00      	nop
 8016b5c:	3708      	adds	r7, #8
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b082      	sub	sp, #8
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	6078      	str	r0, [r7, #4]
 8016b6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b72:	b2db      	uxtb	r3, r3
 8016b74:	3b01      	subs	r3, #1
 8016b76:	2b02      	cmp	r3, #2
 8016b78:	d80b      	bhi.n	8016b92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	885b      	ldrh	r3, [r3, #2]
 8016b7e:	2b01      	cmp	r3, #1
 8016b80:	d10c      	bne.n	8016b9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2200      	movs	r2, #0
 8016b86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f000 f910 	bl	8016db0 <USBD_CtlSendStatus>
      }
      break;
 8016b90:	e004      	b.n	8016b9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016b92:	6839      	ldr	r1, [r7, #0]
 8016b94:	6878      	ldr	r0, [r7, #4]
 8016b96:	f000 f840 	bl	8016c1a <USBD_CtlError>
      break;
 8016b9a:	e000      	b.n	8016b9e <USBD_ClrFeature+0x3c>
      break;
 8016b9c:	bf00      	nop
  }
}
 8016b9e:	bf00      	nop
 8016ba0:	3708      	adds	r7, #8
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b084      	sub	sp, #16
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
 8016bae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016bb0:	683b      	ldr	r3, [r7, #0]
 8016bb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	781a      	ldrb	r2, [r3, #0]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	3301      	adds	r3, #1
 8016bc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	781a      	ldrb	r2, [r3, #0]
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	3301      	adds	r3, #1
 8016bce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016bd0:	68f8      	ldr	r0, [r7, #12]
 8016bd2:	f7ff fa41 	bl	8016058 <SWAPBYTE>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	461a      	mov	r2, r3
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	3301      	adds	r3, #1
 8016be2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	3301      	adds	r3, #1
 8016be8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016bea:	68f8      	ldr	r0, [r7, #12]
 8016bec:	f7ff fa34 	bl	8016058 <SWAPBYTE>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	3301      	adds	r3, #1
 8016bfc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	3301      	adds	r3, #1
 8016c02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016c04:	68f8      	ldr	r0, [r7, #12]
 8016c06:	f7ff fa27 	bl	8016058 <SWAPBYTE>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	461a      	mov	r2, r3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	80da      	strh	r2, [r3, #6]
}
 8016c12:	bf00      	nop
 8016c14:	3710      	adds	r7, #16
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}

08016c1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016c1a:	b580      	push	{r7, lr}
 8016c1c:	b082      	sub	sp, #8
 8016c1e:	af00      	add	r7, sp, #0
 8016c20:	6078      	str	r0, [r7, #4]
 8016c22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016c24:	2180      	movs	r1, #128	; 0x80
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	f002 fea8 	bl	801997c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016c2c:	2100      	movs	r1, #0
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f002 fea4 	bl	801997c <USBD_LL_StallEP>
}
 8016c34:	bf00      	nop
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b086      	sub	sp, #24
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	60f8      	str	r0, [r7, #12]
 8016c44:	60b9      	str	r1, [r7, #8]
 8016c46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016c48:	2300      	movs	r3, #0
 8016c4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d036      	beq.n	8016cc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016c56:	6938      	ldr	r0, [r7, #16]
 8016c58:	f000 f836 	bl	8016cc8 <USBD_GetLen>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	3301      	adds	r3, #1
 8016c60:	b29b      	uxth	r3, r3
 8016c62:	005b      	lsls	r3, r3, #1
 8016c64:	b29a      	uxth	r2, r3
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016c6a:	7dfb      	ldrb	r3, [r7, #23]
 8016c6c:	68ba      	ldr	r2, [r7, #8]
 8016c6e:	4413      	add	r3, r2
 8016c70:	687a      	ldr	r2, [r7, #4]
 8016c72:	7812      	ldrb	r2, [r2, #0]
 8016c74:	701a      	strb	r2, [r3, #0]
  idx++;
 8016c76:	7dfb      	ldrb	r3, [r7, #23]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016c7c:	7dfb      	ldrb	r3, [r7, #23]
 8016c7e:	68ba      	ldr	r2, [r7, #8]
 8016c80:	4413      	add	r3, r2
 8016c82:	2203      	movs	r2, #3
 8016c84:	701a      	strb	r2, [r3, #0]
  idx++;
 8016c86:	7dfb      	ldrb	r3, [r7, #23]
 8016c88:	3301      	adds	r3, #1
 8016c8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016c8c:	e013      	b.n	8016cb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016c8e:	7dfb      	ldrb	r3, [r7, #23]
 8016c90:	68ba      	ldr	r2, [r7, #8]
 8016c92:	4413      	add	r3, r2
 8016c94:	693a      	ldr	r2, [r7, #16]
 8016c96:	7812      	ldrb	r2, [r2, #0]
 8016c98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	3301      	adds	r3, #1
 8016c9e:	613b      	str	r3, [r7, #16]
    idx++;
 8016ca0:	7dfb      	ldrb	r3, [r7, #23]
 8016ca2:	3301      	adds	r3, #1
 8016ca4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016ca6:	7dfb      	ldrb	r3, [r7, #23]
 8016ca8:	68ba      	ldr	r2, [r7, #8]
 8016caa:	4413      	add	r3, r2
 8016cac:	2200      	movs	r2, #0
 8016cae:	701a      	strb	r2, [r3, #0]
    idx++;
 8016cb0:	7dfb      	ldrb	r3, [r7, #23]
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	781b      	ldrb	r3, [r3, #0]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d1e7      	bne.n	8016c8e <USBD_GetString+0x52>
 8016cbe:	e000      	b.n	8016cc2 <USBD_GetString+0x86>
    return;
 8016cc0:	bf00      	nop
  }
}
 8016cc2:	3718      	adds	r7, #24
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}

08016cc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016cc8:	b480      	push	{r7}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016cd8:	e005      	b.n	8016ce6 <USBD_GetLen+0x1e>
  {
    len++;
 8016cda:	7bfb      	ldrb	r3, [r7, #15]
 8016cdc:	3301      	adds	r3, #1
 8016cde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016ce6:	68bb      	ldr	r3, [r7, #8]
 8016ce8:	781b      	ldrb	r3, [r3, #0]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d1f5      	bne.n	8016cda <USBD_GetLen+0x12>
  }

  return len;
 8016cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	3714      	adds	r7, #20
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfa:	4770      	bx	lr

08016cfc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	60f8      	str	r0, [r7, #12]
 8016d04:	60b9      	str	r1, [r7, #8]
 8016d06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2202      	movs	r2, #2
 8016d0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	687a      	ldr	r2, [r7, #4]
 8016d14:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	687a      	ldr	r2, [r7, #4]
 8016d1a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	68ba      	ldr	r2, [r7, #8]
 8016d20:	2100      	movs	r1, #0
 8016d22:	68f8      	ldr	r0, [r7, #12]
 8016d24:	f002 feb3 	bl	8019a8e <USBD_LL_Transmit>

  return USBD_OK;
 8016d28:	2300      	movs	r3, #0
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	3710      	adds	r7, #16
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	bd80      	pop	{r7, pc}

08016d32 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016d32:	b580      	push	{r7, lr}
 8016d34:	b084      	sub	sp, #16
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	60f8      	str	r0, [r7, #12]
 8016d3a:	60b9      	str	r1, [r7, #8]
 8016d3c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	68ba      	ldr	r2, [r7, #8]
 8016d42:	2100      	movs	r1, #0
 8016d44:	68f8      	ldr	r0, [r7, #12]
 8016d46:	f002 fea2 	bl	8019a8e <USBD_LL_Transmit>

  return USBD_OK;
 8016d4a:	2300      	movs	r3, #0
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3710      	adds	r7, #16
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}

08016d54 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	60f8      	str	r0, [r7, #12]
 8016d5c:	60b9      	str	r1, [r7, #8]
 8016d5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	2203      	movs	r2, #3
 8016d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	687a      	ldr	r2, [r7, #4]
 8016d6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	687a      	ldr	r2, [r7, #4]
 8016d74:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	68ba      	ldr	r2, [r7, #8]
 8016d7c:	2100      	movs	r1, #0
 8016d7e:	68f8      	ldr	r0, [r7, #12]
 8016d80:	f002 fea6 	bl	8019ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016d84:	2300      	movs	r3, #0
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3710      	adds	r7, #16
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}

08016d8e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b084      	sub	sp, #16
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	60f8      	str	r0, [r7, #12]
 8016d96:	60b9      	str	r1, [r7, #8]
 8016d98:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	68ba      	ldr	r2, [r7, #8]
 8016d9e:	2100      	movs	r1, #0
 8016da0:	68f8      	ldr	r0, [r7, #12]
 8016da2:	f002 fe95 	bl	8019ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016da6:	2300      	movs	r3, #0
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	3710      	adds	r7, #16
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}

08016db0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b082      	sub	sp, #8
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	2204      	movs	r2, #4
 8016dbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	2100      	movs	r1, #0
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f002 fe61 	bl	8019a8e <USBD_LL_Transmit>

  return USBD_OK;
 8016dcc:	2300      	movs	r3, #0
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3708      	adds	r7, #8
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}

08016dd6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016dd6:	b580      	push	{r7, lr}
 8016dd8:	b082      	sub	sp, #8
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2205      	movs	r2, #5
 8016de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016de6:	2300      	movs	r3, #0
 8016de8:	2200      	movs	r2, #0
 8016dea:	2100      	movs	r1, #0
 8016dec:	6878      	ldr	r0, [r7, #4]
 8016dee:	f002 fe6f 	bl	8019ad0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016df2:	2300      	movs	r3, #0
}
 8016df4:	4618      	mov	r0, r3
 8016df6:	3708      	adds	r7, #8
 8016df8:	46bd      	mov	sp, r7
 8016dfa:	bd80      	pop	{r7, pc}

08016dfc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	b084      	sub	sp, #16
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	4603      	mov	r3, r0
 8016e04:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016e06:	79fb      	ldrb	r3, [r7, #7]
 8016e08:	4a08      	ldr	r2, [pc, #32]	; (8016e2c <disk_status+0x30>)
 8016e0a:	009b      	lsls	r3, r3, #2
 8016e0c:	4413      	add	r3, r2
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	685b      	ldr	r3, [r3, #4]
 8016e12:	79fa      	ldrb	r2, [r7, #7]
 8016e14:	4905      	ldr	r1, [pc, #20]	; (8016e2c <disk_status+0x30>)
 8016e16:	440a      	add	r2, r1
 8016e18:	7a12      	ldrb	r2, [r2, #8]
 8016e1a:	4610      	mov	r0, r2
 8016e1c:	4798      	blx	r3
 8016e1e:	4603      	mov	r3, r0
 8016e20:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3710      	adds	r7, #16
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	24001204 	.word	0x24001204

08016e30 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	4603      	mov	r3, r0
 8016e38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016e3e:	79fb      	ldrb	r3, [r7, #7]
 8016e40:	4a0d      	ldr	r2, [pc, #52]	; (8016e78 <disk_initialize+0x48>)
 8016e42:	5cd3      	ldrb	r3, [r2, r3]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d111      	bne.n	8016e6c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016e48:	79fb      	ldrb	r3, [r7, #7]
 8016e4a:	4a0b      	ldr	r2, [pc, #44]	; (8016e78 <disk_initialize+0x48>)
 8016e4c:	2101      	movs	r1, #1
 8016e4e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016e50:	79fb      	ldrb	r3, [r7, #7]
 8016e52:	4a09      	ldr	r2, [pc, #36]	; (8016e78 <disk_initialize+0x48>)
 8016e54:	009b      	lsls	r3, r3, #2
 8016e56:	4413      	add	r3, r2
 8016e58:	685b      	ldr	r3, [r3, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	79fa      	ldrb	r2, [r7, #7]
 8016e5e:	4906      	ldr	r1, [pc, #24]	; (8016e78 <disk_initialize+0x48>)
 8016e60:	440a      	add	r2, r1
 8016e62:	7a12      	ldrb	r2, [r2, #8]
 8016e64:	4610      	mov	r0, r2
 8016e66:	4798      	blx	r3
 8016e68:	4603      	mov	r3, r0
 8016e6a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	3710      	adds	r7, #16
 8016e72:	46bd      	mov	sp, r7
 8016e74:	bd80      	pop	{r7, pc}
 8016e76:	bf00      	nop
 8016e78:	24001204 	.word	0x24001204

08016e7c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016e7c:	b590      	push	{r4, r7, lr}
 8016e7e:	b087      	sub	sp, #28
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60b9      	str	r1, [r7, #8]
 8016e84:	607a      	str	r2, [r7, #4]
 8016e86:	603b      	str	r3, [r7, #0]
 8016e88:	4603      	mov	r3, r0
 8016e8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016e8c:	7bfb      	ldrb	r3, [r7, #15]
 8016e8e:	4a0a      	ldr	r2, [pc, #40]	; (8016eb8 <disk_read+0x3c>)
 8016e90:	009b      	lsls	r3, r3, #2
 8016e92:	4413      	add	r3, r2
 8016e94:	685b      	ldr	r3, [r3, #4]
 8016e96:	689c      	ldr	r4, [r3, #8]
 8016e98:	7bfb      	ldrb	r3, [r7, #15]
 8016e9a:	4a07      	ldr	r2, [pc, #28]	; (8016eb8 <disk_read+0x3c>)
 8016e9c:	4413      	add	r3, r2
 8016e9e:	7a18      	ldrb	r0, [r3, #8]
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	687a      	ldr	r2, [r7, #4]
 8016ea4:	68b9      	ldr	r1, [r7, #8]
 8016ea6:	47a0      	blx	r4
 8016ea8:	4603      	mov	r3, r0
 8016eaa:	75fb      	strb	r3, [r7, #23]
  return res;
 8016eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	371c      	adds	r7, #28
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd90      	pop	{r4, r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	24001204 	.word	0x24001204

08016ebc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016ebc:	b590      	push	{r4, r7, lr}
 8016ebe:	b087      	sub	sp, #28
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60b9      	str	r1, [r7, #8]
 8016ec4:	607a      	str	r2, [r7, #4]
 8016ec6:	603b      	str	r3, [r7, #0]
 8016ec8:	4603      	mov	r3, r0
 8016eca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016ecc:	7bfb      	ldrb	r3, [r7, #15]
 8016ece:	4a0a      	ldr	r2, [pc, #40]	; (8016ef8 <disk_write+0x3c>)
 8016ed0:	009b      	lsls	r3, r3, #2
 8016ed2:	4413      	add	r3, r2
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	68dc      	ldr	r4, [r3, #12]
 8016ed8:	7bfb      	ldrb	r3, [r7, #15]
 8016eda:	4a07      	ldr	r2, [pc, #28]	; (8016ef8 <disk_write+0x3c>)
 8016edc:	4413      	add	r3, r2
 8016ede:	7a18      	ldrb	r0, [r3, #8]
 8016ee0:	683b      	ldr	r3, [r7, #0]
 8016ee2:	687a      	ldr	r2, [r7, #4]
 8016ee4:	68b9      	ldr	r1, [r7, #8]
 8016ee6:	47a0      	blx	r4
 8016ee8:	4603      	mov	r3, r0
 8016eea:	75fb      	strb	r3, [r7, #23]
  return res;
 8016eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	371c      	adds	r7, #28
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd90      	pop	{r4, r7, pc}
 8016ef6:	bf00      	nop
 8016ef8:	24001204 	.word	0x24001204

08016efc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	4603      	mov	r3, r0
 8016f04:	603a      	str	r2, [r7, #0]
 8016f06:	71fb      	strb	r3, [r7, #7]
 8016f08:	460b      	mov	r3, r1
 8016f0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016f0c:	79fb      	ldrb	r3, [r7, #7]
 8016f0e:	4a09      	ldr	r2, [pc, #36]	; (8016f34 <disk_ioctl+0x38>)
 8016f10:	009b      	lsls	r3, r3, #2
 8016f12:	4413      	add	r3, r2
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	691b      	ldr	r3, [r3, #16]
 8016f18:	79fa      	ldrb	r2, [r7, #7]
 8016f1a:	4906      	ldr	r1, [pc, #24]	; (8016f34 <disk_ioctl+0x38>)
 8016f1c:	440a      	add	r2, r1
 8016f1e:	7a10      	ldrb	r0, [r2, #8]
 8016f20:	79b9      	ldrb	r1, [r7, #6]
 8016f22:	683a      	ldr	r2, [r7, #0]
 8016f24:	4798      	blx	r3
 8016f26:	4603      	mov	r3, r0
 8016f28:	73fb      	strb	r3, [r7, #15]
  return res;
 8016f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	3710      	adds	r7, #16
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bd80      	pop	{r7, pc}
 8016f34:	24001204 	.word	0x24001204

08016f38 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016f38:	b480      	push	{r7}
 8016f3a:	b085      	sub	sp, #20
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	3301      	adds	r3, #1
 8016f44:	781b      	ldrb	r3, [r3, #0]
 8016f46:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016f48:	89fb      	ldrh	r3, [r7, #14]
 8016f4a:	021b      	lsls	r3, r3, #8
 8016f4c:	b21a      	sxth	r2, r3
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	b21b      	sxth	r3, r3
 8016f54:	4313      	orrs	r3, r2
 8016f56:	b21b      	sxth	r3, r3
 8016f58:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016f5a:	89fb      	ldrh	r3, [r7, #14]
}
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	3714      	adds	r7, #20
 8016f60:	46bd      	mov	sp, r7
 8016f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f66:	4770      	bx	lr

08016f68 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016f68:	b480      	push	{r7}
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	af00      	add	r7, sp, #0
 8016f6e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	3303      	adds	r3, #3
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	021b      	lsls	r3, r3, #8
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	3202      	adds	r2, #2
 8016f80:	7812      	ldrb	r2, [r2, #0]
 8016f82:	4313      	orrs	r3, r2
 8016f84:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	021b      	lsls	r3, r3, #8
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	3201      	adds	r2, #1
 8016f8e:	7812      	ldrb	r2, [r2, #0]
 8016f90:	4313      	orrs	r3, r2
 8016f92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	021b      	lsls	r3, r3, #8
 8016f98:	687a      	ldr	r2, [r7, #4]
 8016f9a:	7812      	ldrb	r2, [r2, #0]
 8016f9c:	4313      	orrs	r3, r2
 8016f9e:	60fb      	str	r3, [r7, #12]
	return rv;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3714      	adds	r7, #20
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fac:	4770      	bx	lr

08016fae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016fae:	b480      	push	{r7}
 8016fb0:	b083      	sub	sp, #12
 8016fb2:	af00      	add	r7, sp, #0
 8016fb4:	6078      	str	r0, [r7, #4]
 8016fb6:	460b      	mov	r3, r1
 8016fb8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	1c5a      	adds	r2, r3, #1
 8016fbe:	607a      	str	r2, [r7, #4]
 8016fc0:	887a      	ldrh	r2, [r7, #2]
 8016fc2:	b2d2      	uxtb	r2, r2
 8016fc4:	701a      	strb	r2, [r3, #0]
 8016fc6:	887b      	ldrh	r3, [r7, #2]
 8016fc8:	0a1b      	lsrs	r3, r3, #8
 8016fca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	1c5a      	adds	r2, r3, #1
 8016fd0:	607a      	str	r2, [r7, #4]
 8016fd2:	887a      	ldrh	r2, [r7, #2]
 8016fd4:	b2d2      	uxtb	r2, r2
 8016fd6:	701a      	strb	r2, [r3, #0]
}
 8016fd8:	bf00      	nop
 8016fda:	370c      	adds	r7, #12
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe2:	4770      	bx	lr

08016fe4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016fe4:	b480      	push	{r7}
 8016fe6:	b083      	sub	sp, #12
 8016fe8:	af00      	add	r7, sp, #0
 8016fea:	6078      	str	r0, [r7, #4]
 8016fec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	1c5a      	adds	r2, r3, #1
 8016ff2:	607a      	str	r2, [r7, #4]
 8016ff4:	683a      	ldr	r2, [r7, #0]
 8016ff6:	b2d2      	uxtb	r2, r2
 8016ff8:	701a      	strb	r2, [r3, #0]
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	0a1b      	lsrs	r3, r3, #8
 8016ffe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	1c5a      	adds	r2, r3, #1
 8017004:	607a      	str	r2, [r7, #4]
 8017006:	683a      	ldr	r2, [r7, #0]
 8017008:	b2d2      	uxtb	r2, r2
 801700a:	701a      	strb	r2, [r3, #0]
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	0a1b      	lsrs	r3, r3, #8
 8017010:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	1c5a      	adds	r2, r3, #1
 8017016:	607a      	str	r2, [r7, #4]
 8017018:	683a      	ldr	r2, [r7, #0]
 801701a:	b2d2      	uxtb	r2, r2
 801701c:	701a      	strb	r2, [r3, #0]
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	0a1b      	lsrs	r3, r3, #8
 8017022:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	1c5a      	adds	r2, r3, #1
 8017028:	607a      	str	r2, [r7, #4]
 801702a:	683a      	ldr	r2, [r7, #0]
 801702c:	b2d2      	uxtb	r2, r2
 801702e:	701a      	strb	r2, [r3, #0]
}
 8017030:	bf00      	nop
 8017032:	370c      	adds	r7, #12
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801703c:	b480      	push	{r7}
 801703e:	b087      	sub	sp, #28
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d00d      	beq.n	8017072 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8017056:	693a      	ldr	r2, [r7, #16]
 8017058:	1c53      	adds	r3, r2, #1
 801705a:	613b      	str	r3, [r7, #16]
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	1c59      	adds	r1, r3, #1
 8017060:	6179      	str	r1, [r7, #20]
 8017062:	7812      	ldrb	r2, [r2, #0]
 8017064:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	3b01      	subs	r3, #1
 801706a:	607b      	str	r3, [r7, #4]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d1f1      	bne.n	8017056 <mem_cpy+0x1a>
	}
}
 8017072:	bf00      	nop
 8017074:	371c      	adds	r7, #28
 8017076:	46bd      	mov	sp, r7
 8017078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707c:	4770      	bx	lr

0801707e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801707e:	b480      	push	{r7}
 8017080:	b087      	sub	sp, #28
 8017082:	af00      	add	r7, sp, #0
 8017084:	60f8      	str	r0, [r7, #12]
 8017086:	60b9      	str	r1, [r7, #8]
 8017088:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801708e:	697b      	ldr	r3, [r7, #20]
 8017090:	1c5a      	adds	r2, r3, #1
 8017092:	617a      	str	r2, [r7, #20]
 8017094:	68ba      	ldr	r2, [r7, #8]
 8017096:	b2d2      	uxtb	r2, r2
 8017098:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	3b01      	subs	r3, #1
 801709e:	607b      	str	r3, [r7, #4]
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d1f3      	bne.n	801708e <mem_set+0x10>
}
 80170a6:	bf00      	nop
 80170a8:	bf00      	nop
 80170aa:	371c      	adds	r7, #28
 80170ac:	46bd      	mov	sp, r7
 80170ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b2:	4770      	bx	lr

080170b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80170b4:	b480      	push	{r7}
 80170b6:	b089      	sub	sp, #36	; 0x24
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	60f8      	str	r0, [r7, #12]
 80170bc:	60b9      	str	r1, [r7, #8]
 80170be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	61fb      	str	r3, [r7, #28]
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80170c8:	2300      	movs	r3, #0
 80170ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80170cc:	69fb      	ldr	r3, [r7, #28]
 80170ce:	1c5a      	adds	r2, r3, #1
 80170d0:	61fa      	str	r2, [r7, #28]
 80170d2:	781b      	ldrb	r3, [r3, #0]
 80170d4:	4619      	mov	r1, r3
 80170d6:	69bb      	ldr	r3, [r7, #24]
 80170d8:	1c5a      	adds	r2, r3, #1
 80170da:	61ba      	str	r2, [r7, #24]
 80170dc:	781b      	ldrb	r3, [r3, #0]
 80170de:	1acb      	subs	r3, r1, r3
 80170e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	3b01      	subs	r3, #1
 80170e6:	607b      	str	r3, [r7, #4]
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d002      	beq.n	80170f4 <mem_cmp+0x40>
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d0eb      	beq.n	80170cc <mem_cmp+0x18>

	return r;
 80170f4:	697b      	ldr	r3, [r7, #20]
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3724      	adds	r7, #36	; 0x24
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr

08017102 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8017102:	b480      	push	{r7}
 8017104:	b083      	sub	sp, #12
 8017106:	af00      	add	r7, sp, #0
 8017108:	6078      	str	r0, [r7, #4]
 801710a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801710c:	e002      	b.n	8017114 <chk_chr+0x12>
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	3301      	adds	r3, #1
 8017112:	607b      	str	r3, [r7, #4]
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d005      	beq.n	8017128 <chk_chr+0x26>
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	781b      	ldrb	r3, [r3, #0]
 8017120:	461a      	mov	r2, r3
 8017122:	683b      	ldr	r3, [r7, #0]
 8017124:	4293      	cmp	r3, r2
 8017126:	d1f2      	bne.n	801710e <chk_chr+0xc>
	return *str;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	781b      	ldrb	r3, [r3, #0]
}
 801712c:	4618      	mov	r0, r3
 801712e:	370c      	adds	r7, #12
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017138:	b480      	push	{r7}
 801713a:	b085      	sub	sp, #20
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
 8017140:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017142:	2300      	movs	r3, #0
 8017144:	60bb      	str	r3, [r7, #8]
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	60fb      	str	r3, [r7, #12]
 801714a:	e029      	b.n	80171a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801714c:	4a27      	ldr	r2, [pc, #156]	; (80171ec <chk_lock+0xb4>)
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	011b      	lsls	r3, r3, #4
 8017152:	4413      	add	r3, r2
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d01d      	beq.n	8017196 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801715a:	4a24      	ldr	r2, [pc, #144]	; (80171ec <chk_lock+0xb4>)
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	011b      	lsls	r3, r3, #4
 8017160:	4413      	add	r3, r2
 8017162:	681a      	ldr	r2, [r3, #0]
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	429a      	cmp	r2, r3
 801716a:	d116      	bne.n	801719a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801716c:	4a1f      	ldr	r2, [pc, #124]	; (80171ec <chk_lock+0xb4>)
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	011b      	lsls	r3, r3, #4
 8017172:	4413      	add	r3, r2
 8017174:	3304      	adds	r3, #4
 8017176:	681a      	ldr	r2, [r3, #0]
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801717c:	429a      	cmp	r2, r3
 801717e:	d10c      	bne.n	801719a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017180:	4a1a      	ldr	r2, [pc, #104]	; (80171ec <chk_lock+0xb4>)
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	011b      	lsls	r3, r3, #4
 8017186:	4413      	add	r3, r2
 8017188:	3308      	adds	r3, #8
 801718a:	681a      	ldr	r2, [r3, #0]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8017190:	429a      	cmp	r2, r3
 8017192:	d102      	bne.n	801719a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017194:	e007      	b.n	80171a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017196:	2301      	movs	r3, #1
 8017198:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	3301      	adds	r3, #1
 801719e:	60fb      	str	r3, [r7, #12]
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	2b01      	cmp	r3, #1
 80171a4:	d9d2      	bls.n	801714c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	2b02      	cmp	r3, #2
 80171aa:	d109      	bne.n	80171c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80171ac:	68bb      	ldr	r3, [r7, #8]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d102      	bne.n	80171b8 <chk_lock+0x80>
 80171b2:	683b      	ldr	r3, [r7, #0]
 80171b4:	2b02      	cmp	r3, #2
 80171b6:	d101      	bne.n	80171bc <chk_lock+0x84>
 80171b8:	2300      	movs	r3, #0
 80171ba:	e010      	b.n	80171de <chk_lock+0xa6>
 80171bc:	2312      	movs	r3, #18
 80171be:	e00e      	b.n	80171de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d108      	bne.n	80171d8 <chk_lock+0xa0>
 80171c6:	4a09      	ldr	r2, [pc, #36]	; (80171ec <chk_lock+0xb4>)
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	011b      	lsls	r3, r3, #4
 80171cc:	4413      	add	r3, r2
 80171ce:	330c      	adds	r3, #12
 80171d0:	881b      	ldrh	r3, [r3, #0]
 80171d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80171d6:	d101      	bne.n	80171dc <chk_lock+0xa4>
 80171d8:	2310      	movs	r3, #16
 80171da:	e000      	b.n	80171de <chk_lock+0xa6>
 80171dc:	2300      	movs	r3, #0
}
 80171de:	4618      	mov	r0, r3
 80171e0:	3714      	adds	r7, #20
 80171e2:	46bd      	mov	sp, r7
 80171e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e8:	4770      	bx	lr
 80171ea:	bf00      	nop
 80171ec:	240011e4 	.word	0x240011e4

080171f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80171f0:	b480      	push	{r7}
 80171f2:	b083      	sub	sp, #12
 80171f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80171f6:	2300      	movs	r3, #0
 80171f8:	607b      	str	r3, [r7, #4]
 80171fa:	e002      	b.n	8017202 <enq_lock+0x12>
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	3301      	adds	r3, #1
 8017200:	607b      	str	r3, [r7, #4]
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	2b01      	cmp	r3, #1
 8017206:	d806      	bhi.n	8017216 <enq_lock+0x26>
 8017208:	4a09      	ldr	r2, [pc, #36]	; (8017230 <enq_lock+0x40>)
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	011b      	lsls	r3, r3, #4
 801720e:	4413      	add	r3, r2
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d1f2      	bne.n	80171fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b02      	cmp	r3, #2
 801721a:	bf14      	ite	ne
 801721c:	2301      	movne	r3, #1
 801721e:	2300      	moveq	r3, #0
 8017220:	b2db      	uxtb	r3, r3
}
 8017222:	4618      	mov	r0, r3
 8017224:	370c      	adds	r7, #12
 8017226:	46bd      	mov	sp, r7
 8017228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722c:	4770      	bx	lr
 801722e:	bf00      	nop
 8017230:	240011e4 	.word	0x240011e4

08017234 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017234:	b480      	push	{r7}
 8017236:	b085      	sub	sp, #20
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
 801723c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801723e:	2300      	movs	r3, #0
 8017240:	60fb      	str	r3, [r7, #12]
 8017242:	e01f      	b.n	8017284 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017244:	4a41      	ldr	r2, [pc, #260]	; (801734c <inc_lock+0x118>)
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	011b      	lsls	r3, r3, #4
 801724a:	4413      	add	r3, r2
 801724c:	681a      	ldr	r2, [r3, #0]
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	429a      	cmp	r2, r3
 8017254:	d113      	bne.n	801727e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017256:	4a3d      	ldr	r2, [pc, #244]	; (801734c <inc_lock+0x118>)
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	011b      	lsls	r3, r3, #4
 801725c:	4413      	add	r3, r2
 801725e:	3304      	adds	r3, #4
 8017260:	681a      	ldr	r2, [r3, #0]
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8017266:	429a      	cmp	r2, r3
 8017268:	d109      	bne.n	801727e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801726a:	4a38      	ldr	r2, [pc, #224]	; (801734c <inc_lock+0x118>)
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	011b      	lsls	r3, r3, #4
 8017270:	4413      	add	r3, r2
 8017272:	3308      	adds	r3, #8
 8017274:	681a      	ldr	r2, [r3, #0]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801727a:	429a      	cmp	r2, r3
 801727c:	d006      	beq.n	801728c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	3301      	adds	r3, #1
 8017282:	60fb      	str	r3, [r7, #12]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	2b01      	cmp	r3, #1
 8017288:	d9dc      	bls.n	8017244 <inc_lock+0x10>
 801728a:	e000      	b.n	801728e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801728c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	2b02      	cmp	r3, #2
 8017292:	d132      	bne.n	80172fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017294:	2300      	movs	r3, #0
 8017296:	60fb      	str	r3, [r7, #12]
 8017298:	e002      	b.n	80172a0 <inc_lock+0x6c>
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	3301      	adds	r3, #1
 801729e:	60fb      	str	r3, [r7, #12]
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	2b01      	cmp	r3, #1
 80172a4:	d806      	bhi.n	80172b4 <inc_lock+0x80>
 80172a6:	4a29      	ldr	r2, [pc, #164]	; (801734c <inc_lock+0x118>)
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	011b      	lsls	r3, r3, #4
 80172ac:	4413      	add	r3, r2
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d1f2      	bne.n	801729a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	2b02      	cmp	r3, #2
 80172b8:	d101      	bne.n	80172be <inc_lock+0x8a>
 80172ba:	2300      	movs	r3, #0
 80172bc:	e040      	b.n	8017340 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	4922      	ldr	r1, [pc, #136]	; (801734c <inc_lock+0x118>)
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	011b      	lsls	r3, r3, #4
 80172c8:	440b      	add	r3, r1
 80172ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	689a      	ldr	r2, [r3, #8]
 80172d0:	491e      	ldr	r1, [pc, #120]	; (801734c <inc_lock+0x118>)
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	011b      	lsls	r3, r3, #4
 80172d6:	440b      	add	r3, r1
 80172d8:	3304      	adds	r3, #4
 80172da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	695a      	ldr	r2, [r3, #20]
 80172e0:	491a      	ldr	r1, [pc, #104]	; (801734c <inc_lock+0x118>)
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	011b      	lsls	r3, r3, #4
 80172e6:	440b      	add	r3, r1
 80172e8:	3308      	adds	r3, #8
 80172ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80172ec:	4a17      	ldr	r2, [pc, #92]	; (801734c <inc_lock+0x118>)
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	011b      	lsls	r3, r3, #4
 80172f2:	4413      	add	r3, r2
 80172f4:	330c      	adds	r3, #12
 80172f6:	2200      	movs	r2, #0
 80172f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d009      	beq.n	8017314 <inc_lock+0xe0>
 8017300:	4a12      	ldr	r2, [pc, #72]	; (801734c <inc_lock+0x118>)
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	011b      	lsls	r3, r3, #4
 8017306:	4413      	add	r3, r2
 8017308:	330c      	adds	r3, #12
 801730a:	881b      	ldrh	r3, [r3, #0]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d001      	beq.n	8017314 <inc_lock+0xe0>
 8017310:	2300      	movs	r3, #0
 8017312:	e015      	b.n	8017340 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017314:	683b      	ldr	r3, [r7, #0]
 8017316:	2b00      	cmp	r3, #0
 8017318:	d108      	bne.n	801732c <inc_lock+0xf8>
 801731a:	4a0c      	ldr	r2, [pc, #48]	; (801734c <inc_lock+0x118>)
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	011b      	lsls	r3, r3, #4
 8017320:	4413      	add	r3, r2
 8017322:	330c      	adds	r3, #12
 8017324:	881b      	ldrh	r3, [r3, #0]
 8017326:	3301      	adds	r3, #1
 8017328:	b29a      	uxth	r2, r3
 801732a:	e001      	b.n	8017330 <inc_lock+0xfc>
 801732c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017330:	4906      	ldr	r1, [pc, #24]	; (801734c <inc_lock+0x118>)
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	011b      	lsls	r3, r3, #4
 8017336:	440b      	add	r3, r1
 8017338:	330c      	adds	r3, #12
 801733a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	3301      	adds	r3, #1
}
 8017340:	4618      	mov	r0, r3
 8017342:	3714      	adds	r7, #20
 8017344:	46bd      	mov	sp, r7
 8017346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734a:	4770      	bx	lr
 801734c:	240011e4 	.word	0x240011e4

08017350 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017350:	b480      	push	{r7}
 8017352:	b085      	sub	sp, #20
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	3b01      	subs	r3, #1
 801735c:	607b      	str	r3, [r7, #4]
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2b01      	cmp	r3, #1
 8017362:	d825      	bhi.n	80173b0 <dec_lock+0x60>
		n = Files[i].ctr;
 8017364:	4a17      	ldr	r2, [pc, #92]	; (80173c4 <dec_lock+0x74>)
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	011b      	lsls	r3, r3, #4
 801736a:	4413      	add	r3, r2
 801736c:	330c      	adds	r3, #12
 801736e:	881b      	ldrh	r3, [r3, #0]
 8017370:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8017372:	89fb      	ldrh	r3, [r7, #14]
 8017374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017378:	d101      	bne.n	801737e <dec_lock+0x2e>
 801737a:	2300      	movs	r3, #0
 801737c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801737e:	89fb      	ldrh	r3, [r7, #14]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d002      	beq.n	801738a <dec_lock+0x3a>
 8017384:	89fb      	ldrh	r3, [r7, #14]
 8017386:	3b01      	subs	r3, #1
 8017388:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801738a:	4a0e      	ldr	r2, [pc, #56]	; (80173c4 <dec_lock+0x74>)
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	011b      	lsls	r3, r3, #4
 8017390:	4413      	add	r3, r2
 8017392:	330c      	adds	r3, #12
 8017394:	89fa      	ldrh	r2, [r7, #14]
 8017396:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017398:	89fb      	ldrh	r3, [r7, #14]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d105      	bne.n	80173aa <dec_lock+0x5a>
 801739e:	4a09      	ldr	r2, [pc, #36]	; (80173c4 <dec_lock+0x74>)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	011b      	lsls	r3, r3, #4
 80173a4:	4413      	add	r3, r2
 80173a6:	2200      	movs	r2, #0
 80173a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80173aa:	2300      	movs	r3, #0
 80173ac:	737b      	strb	r3, [r7, #13]
 80173ae:	e001      	b.n	80173b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80173b0:	2302      	movs	r3, #2
 80173b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80173b4:	7b7b      	ldrb	r3, [r7, #13]
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	3714      	adds	r7, #20
 80173ba:	46bd      	mov	sp, r7
 80173bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c0:	4770      	bx	lr
 80173c2:	bf00      	nop
 80173c4:	240011e4 	.word	0x240011e4

080173c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80173c8:	b480      	push	{r7}
 80173ca:	b085      	sub	sp, #20
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80173d0:	2300      	movs	r3, #0
 80173d2:	60fb      	str	r3, [r7, #12]
 80173d4:	e010      	b.n	80173f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80173d6:	4a0d      	ldr	r2, [pc, #52]	; (801740c <clear_lock+0x44>)
 80173d8:	68fb      	ldr	r3, [r7, #12]
 80173da:	011b      	lsls	r3, r3, #4
 80173dc:	4413      	add	r3, r2
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d105      	bne.n	80173f2 <clear_lock+0x2a>
 80173e6:	4a09      	ldr	r2, [pc, #36]	; (801740c <clear_lock+0x44>)
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	011b      	lsls	r3, r3, #4
 80173ec:	4413      	add	r3, r2
 80173ee:	2200      	movs	r2, #0
 80173f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	3301      	adds	r3, #1
 80173f6:	60fb      	str	r3, [r7, #12]
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	2b01      	cmp	r3, #1
 80173fc:	d9eb      	bls.n	80173d6 <clear_lock+0xe>
	}
}
 80173fe:	bf00      	nop
 8017400:	bf00      	nop
 8017402:	3714      	adds	r7, #20
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr
 801740c:	240011e4 	.word	0x240011e4

08017410 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b086      	sub	sp, #24
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017418:	2300      	movs	r3, #0
 801741a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	78db      	ldrb	r3, [r3, #3]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d034      	beq.n	801748e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017428:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	7858      	ldrb	r0, [r3, #1]
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017434:	2301      	movs	r3, #1
 8017436:	697a      	ldr	r2, [r7, #20]
 8017438:	f7ff fd40 	bl	8016ebc <disk_write>
 801743c:	4603      	mov	r3, r0
 801743e:	2b00      	cmp	r3, #0
 8017440:	d002      	beq.n	8017448 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017442:	2301      	movs	r3, #1
 8017444:	73fb      	strb	r3, [r7, #15]
 8017446:	e022      	b.n	801748e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	2200      	movs	r2, #0
 801744c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6a1b      	ldr	r3, [r3, #32]
 8017452:	697a      	ldr	r2, [r7, #20]
 8017454:	1ad2      	subs	r2, r2, r3
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	699b      	ldr	r3, [r3, #24]
 801745a:	429a      	cmp	r2, r3
 801745c:	d217      	bcs.n	801748e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	789b      	ldrb	r3, [r3, #2]
 8017462:	613b      	str	r3, [r7, #16]
 8017464:	e010      	b.n	8017488 <sync_window+0x78>
					wsect += fs->fsize;
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	699b      	ldr	r3, [r3, #24]
 801746a:	697a      	ldr	r2, [r7, #20]
 801746c:	4413      	add	r3, r2
 801746e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	7858      	ldrb	r0, [r3, #1]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801747a:	2301      	movs	r3, #1
 801747c:	697a      	ldr	r2, [r7, #20]
 801747e:	f7ff fd1d 	bl	8016ebc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017482:	693b      	ldr	r3, [r7, #16]
 8017484:	3b01      	subs	r3, #1
 8017486:	613b      	str	r3, [r7, #16]
 8017488:	693b      	ldr	r3, [r7, #16]
 801748a:	2b01      	cmp	r3, #1
 801748c:	d8eb      	bhi.n	8017466 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801748e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3718      	adds	r7, #24
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}

08017498 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b084      	sub	sp, #16
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
 80174a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80174a2:	2300      	movs	r3, #0
 80174a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174aa:	683a      	ldr	r2, [r7, #0]
 80174ac:	429a      	cmp	r2, r3
 80174ae:	d01b      	beq.n	80174e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	f7ff ffad 	bl	8017410 <sync_window>
 80174b6:	4603      	mov	r3, r0
 80174b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80174ba:	7bfb      	ldrb	r3, [r7, #15]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d113      	bne.n	80174e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	7858      	ldrb	r0, [r3, #1]
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80174ca:	2301      	movs	r3, #1
 80174cc:	683a      	ldr	r2, [r7, #0]
 80174ce:	f7ff fcd5 	bl	8016e7c <disk_read>
 80174d2:	4603      	mov	r3, r0
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d004      	beq.n	80174e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80174d8:	f04f 33ff 	mov.w	r3, #4294967295
 80174dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80174de:	2301      	movs	r3, #1
 80174e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	683a      	ldr	r2, [r7, #0]
 80174e6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80174e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3710      	adds	r7, #16
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}
	...

080174f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b084      	sub	sp, #16
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f7ff ff87 	bl	8017410 <sync_window>
 8017502:	4603      	mov	r3, r0
 8017504:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017506:	7bfb      	ldrb	r3, [r7, #15]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d158      	bne.n	80175be <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	2b03      	cmp	r3, #3
 8017512:	d148      	bne.n	80175a6 <sync_fs+0xb2>
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	791b      	ldrb	r3, [r3, #4]
 8017518:	2b01      	cmp	r3, #1
 801751a:	d144      	bne.n	80175a6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	3330      	adds	r3, #48	; 0x30
 8017520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017524:	2100      	movs	r1, #0
 8017526:	4618      	mov	r0, r3
 8017528:	f7ff fda9 	bl	801707e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	3330      	adds	r3, #48	; 0x30
 8017530:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017534:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017538:	4618      	mov	r0, r3
 801753a:	f7ff fd38 	bl	8016fae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	3330      	adds	r3, #48	; 0x30
 8017542:	4921      	ldr	r1, [pc, #132]	; (80175c8 <sync_fs+0xd4>)
 8017544:	4618      	mov	r0, r3
 8017546:	f7ff fd4d 	bl	8016fe4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	3330      	adds	r3, #48	; 0x30
 801754e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017552:	491e      	ldr	r1, [pc, #120]	; (80175cc <sync_fs+0xd8>)
 8017554:	4618      	mov	r0, r3
 8017556:	f7ff fd45 	bl	8016fe4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	3330      	adds	r3, #48	; 0x30
 801755e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	691b      	ldr	r3, [r3, #16]
 8017566:	4619      	mov	r1, r3
 8017568:	4610      	mov	r0, r2
 801756a:	f7ff fd3b 	bl	8016fe4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	3330      	adds	r3, #48	; 0x30
 8017572:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	68db      	ldr	r3, [r3, #12]
 801757a:	4619      	mov	r1, r3
 801757c:	4610      	mov	r0, r2
 801757e:	f7ff fd31 	bl	8016fe4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	69db      	ldr	r3, [r3, #28]
 8017586:	1c5a      	adds	r2, r3, #1
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	7858      	ldrb	r0, [r3, #1]
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801759a:	2301      	movs	r3, #1
 801759c:	f7ff fc8e 	bl	8016ebc <disk_write>
			fs->fsi_flag = 0;
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	2200      	movs	r2, #0
 80175a4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	785b      	ldrb	r3, [r3, #1]
 80175aa:	2200      	movs	r2, #0
 80175ac:	2100      	movs	r1, #0
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7ff fca4 	bl	8016efc <disk_ioctl>
 80175b4:	4603      	mov	r3, r0
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d001      	beq.n	80175be <sync_fs+0xca>
 80175ba:	2301      	movs	r3, #1
 80175bc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80175be:	7bfb      	ldrb	r3, [r7, #15]
}
 80175c0:	4618      	mov	r0, r3
 80175c2:	3710      	adds	r7, #16
 80175c4:	46bd      	mov	sp, r7
 80175c6:	bd80      	pop	{r7, pc}
 80175c8:	41615252 	.word	0x41615252
 80175cc:	61417272 	.word	0x61417272

080175d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80175d0:	b480      	push	{r7}
 80175d2:	b083      	sub	sp, #12
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
 80175d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	3b02      	subs	r3, #2
 80175de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	695b      	ldr	r3, [r3, #20]
 80175e4:	3b02      	subs	r3, #2
 80175e6:	683a      	ldr	r2, [r7, #0]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d301      	bcc.n	80175f0 <clust2sect+0x20>
 80175ec:	2300      	movs	r3, #0
 80175ee:	e008      	b.n	8017602 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	895b      	ldrh	r3, [r3, #10]
 80175f4:	461a      	mov	r2, r3
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	fb03 f202 	mul.w	r2, r3, r2
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017600:	4413      	add	r3, r2
}
 8017602:	4618      	mov	r0, r3
 8017604:	370c      	adds	r7, #12
 8017606:	46bd      	mov	sp, r7
 8017608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760c:	4770      	bx	lr

0801760e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801760e:	b580      	push	{r7, lr}
 8017610:	b086      	sub	sp, #24
 8017612:	af00      	add	r7, sp, #0
 8017614:	6078      	str	r0, [r7, #4]
 8017616:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	2b01      	cmp	r3, #1
 8017622:	d904      	bls.n	801762e <get_fat+0x20>
 8017624:	693b      	ldr	r3, [r7, #16]
 8017626:	695b      	ldr	r3, [r3, #20]
 8017628:	683a      	ldr	r2, [r7, #0]
 801762a:	429a      	cmp	r2, r3
 801762c:	d302      	bcc.n	8017634 <get_fat+0x26>
		val = 1;	/* Internal error */
 801762e:	2301      	movs	r3, #1
 8017630:	617b      	str	r3, [r7, #20]
 8017632:	e08f      	b.n	8017754 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017634:	f04f 33ff 	mov.w	r3, #4294967295
 8017638:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	2b03      	cmp	r3, #3
 8017640:	d062      	beq.n	8017708 <get_fat+0xfa>
 8017642:	2b03      	cmp	r3, #3
 8017644:	dc7c      	bgt.n	8017740 <get_fat+0x132>
 8017646:	2b01      	cmp	r3, #1
 8017648:	d002      	beq.n	8017650 <get_fat+0x42>
 801764a:	2b02      	cmp	r3, #2
 801764c:	d042      	beq.n	80176d4 <get_fat+0xc6>
 801764e:	e077      	b.n	8017740 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	60fb      	str	r3, [r7, #12]
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	085b      	lsrs	r3, r3, #1
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	4413      	add	r3, r2
 801765c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	6a1a      	ldr	r2, [r3, #32]
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	0a5b      	lsrs	r3, r3, #9
 8017666:	4413      	add	r3, r2
 8017668:	4619      	mov	r1, r3
 801766a:	6938      	ldr	r0, [r7, #16]
 801766c:	f7ff ff14 	bl	8017498 <move_window>
 8017670:	4603      	mov	r3, r0
 8017672:	2b00      	cmp	r3, #0
 8017674:	d167      	bne.n	8017746 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	1c5a      	adds	r2, r3, #1
 801767a:	60fa      	str	r2, [r7, #12]
 801767c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017680:	693a      	ldr	r2, [r7, #16]
 8017682:	4413      	add	r3, r2
 8017684:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017688:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801768a:	693b      	ldr	r3, [r7, #16]
 801768c:	6a1a      	ldr	r2, [r3, #32]
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	0a5b      	lsrs	r3, r3, #9
 8017692:	4413      	add	r3, r2
 8017694:	4619      	mov	r1, r3
 8017696:	6938      	ldr	r0, [r7, #16]
 8017698:	f7ff fefe 	bl	8017498 <move_window>
 801769c:	4603      	mov	r3, r0
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d153      	bne.n	801774a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80176a8:	693a      	ldr	r2, [r7, #16]
 80176aa:	4413      	add	r3, r2
 80176ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80176b0:	021b      	lsls	r3, r3, #8
 80176b2:	461a      	mov	r2, r3
 80176b4:	68bb      	ldr	r3, [r7, #8]
 80176b6:	4313      	orrs	r3, r2
 80176b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	f003 0301 	and.w	r3, r3, #1
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d002      	beq.n	80176ca <get_fat+0xbc>
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	091b      	lsrs	r3, r3, #4
 80176c8:	e002      	b.n	80176d0 <get_fat+0xc2>
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80176d0:	617b      	str	r3, [r7, #20]
			break;
 80176d2:	e03f      	b.n	8017754 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	6a1a      	ldr	r2, [r3, #32]
 80176d8:	683b      	ldr	r3, [r7, #0]
 80176da:	0a1b      	lsrs	r3, r3, #8
 80176dc:	4413      	add	r3, r2
 80176de:	4619      	mov	r1, r3
 80176e0:	6938      	ldr	r0, [r7, #16]
 80176e2:	f7ff fed9 	bl	8017498 <move_window>
 80176e6:	4603      	mov	r3, r0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d130      	bne.n	801774e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80176ec:	693b      	ldr	r3, [r7, #16]
 80176ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80176f2:	683b      	ldr	r3, [r7, #0]
 80176f4:	005b      	lsls	r3, r3, #1
 80176f6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80176fa:	4413      	add	r3, r2
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7ff fc1b 	bl	8016f38 <ld_word>
 8017702:	4603      	mov	r3, r0
 8017704:	617b      	str	r3, [r7, #20]
			break;
 8017706:	e025      	b.n	8017754 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017708:	693b      	ldr	r3, [r7, #16]
 801770a:	6a1a      	ldr	r2, [r3, #32]
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	09db      	lsrs	r3, r3, #7
 8017710:	4413      	add	r3, r2
 8017712:	4619      	mov	r1, r3
 8017714:	6938      	ldr	r0, [r7, #16]
 8017716:	f7ff febf 	bl	8017498 <move_window>
 801771a:	4603      	mov	r3, r0
 801771c:	2b00      	cmp	r3, #0
 801771e:	d118      	bne.n	8017752 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017720:	693b      	ldr	r3, [r7, #16]
 8017722:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017726:	683b      	ldr	r3, [r7, #0]
 8017728:	009b      	lsls	r3, r3, #2
 801772a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801772e:	4413      	add	r3, r2
 8017730:	4618      	mov	r0, r3
 8017732:	f7ff fc19 	bl	8016f68 <ld_dword>
 8017736:	4603      	mov	r3, r0
 8017738:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801773c:	617b      	str	r3, [r7, #20]
			break;
 801773e:	e009      	b.n	8017754 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017740:	2301      	movs	r3, #1
 8017742:	617b      	str	r3, [r7, #20]
 8017744:	e006      	b.n	8017754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017746:	bf00      	nop
 8017748:	e004      	b.n	8017754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801774a:	bf00      	nop
 801774c:	e002      	b.n	8017754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801774e:	bf00      	nop
 8017750:	e000      	b.n	8017754 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017752:	bf00      	nop
		}
	}

	return val;
 8017754:	697b      	ldr	r3, [r7, #20]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3718      	adds	r7, #24
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}

0801775e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801775e:	b590      	push	{r4, r7, lr}
 8017760:	b089      	sub	sp, #36	; 0x24
 8017762:	af00      	add	r7, sp, #0
 8017764:	60f8      	str	r0, [r7, #12]
 8017766:	60b9      	str	r1, [r7, #8]
 8017768:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801776a:	2302      	movs	r3, #2
 801776c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	2b01      	cmp	r3, #1
 8017772:	f240 80d2 	bls.w	801791a <put_fat+0x1bc>
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	695b      	ldr	r3, [r3, #20]
 801777a:	68ba      	ldr	r2, [r7, #8]
 801777c:	429a      	cmp	r2, r3
 801777e:	f080 80cc 	bcs.w	801791a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	2b03      	cmp	r3, #3
 8017788:	f000 8096 	beq.w	80178b8 <put_fat+0x15a>
 801778c:	2b03      	cmp	r3, #3
 801778e:	f300 80cd 	bgt.w	801792c <put_fat+0x1ce>
 8017792:	2b01      	cmp	r3, #1
 8017794:	d002      	beq.n	801779c <put_fat+0x3e>
 8017796:	2b02      	cmp	r3, #2
 8017798:	d06e      	beq.n	8017878 <put_fat+0x11a>
 801779a:	e0c7      	b.n	801792c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801779c:	68bb      	ldr	r3, [r7, #8]
 801779e:	61bb      	str	r3, [r7, #24]
 80177a0:	69bb      	ldr	r3, [r7, #24]
 80177a2:	085b      	lsrs	r3, r3, #1
 80177a4:	69ba      	ldr	r2, [r7, #24]
 80177a6:	4413      	add	r3, r2
 80177a8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	6a1a      	ldr	r2, [r3, #32]
 80177ae:	69bb      	ldr	r3, [r7, #24]
 80177b0:	0a5b      	lsrs	r3, r3, #9
 80177b2:	4413      	add	r3, r2
 80177b4:	4619      	mov	r1, r3
 80177b6:	68f8      	ldr	r0, [r7, #12]
 80177b8:	f7ff fe6e 	bl	8017498 <move_window>
 80177bc:	4603      	mov	r3, r0
 80177be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80177c0:	7ffb      	ldrb	r3, [r7, #31]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	f040 80ab 	bne.w	801791e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80177ce:	69bb      	ldr	r3, [r7, #24]
 80177d0:	1c59      	adds	r1, r3, #1
 80177d2:	61b9      	str	r1, [r7, #24]
 80177d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177d8:	4413      	add	r3, r2
 80177da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	f003 0301 	and.w	r3, r3, #1
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d00d      	beq.n	8017802 <put_fat+0xa4>
 80177e6:	697b      	ldr	r3, [r7, #20]
 80177e8:	781b      	ldrb	r3, [r3, #0]
 80177ea:	b25b      	sxtb	r3, r3
 80177ec:	f003 030f 	and.w	r3, r3, #15
 80177f0:	b25a      	sxtb	r2, r3
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	b2db      	uxtb	r3, r3
 80177f6:	011b      	lsls	r3, r3, #4
 80177f8:	b25b      	sxtb	r3, r3
 80177fa:	4313      	orrs	r3, r2
 80177fc:	b25b      	sxtb	r3, r3
 80177fe:	b2db      	uxtb	r3, r3
 8017800:	e001      	b.n	8017806 <put_fat+0xa8>
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	b2db      	uxtb	r3, r3
 8017806:	697a      	ldr	r2, [r7, #20]
 8017808:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	2201      	movs	r2, #1
 801780e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	6a1a      	ldr	r2, [r3, #32]
 8017814:	69bb      	ldr	r3, [r7, #24]
 8017816:	0a5b      	lsrs	r3, r3, #9
 8017818:	4413      	add	r3, r2
 801781a:	4619      	mov	r1, r3
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	f7ff fe3b 	bl	8017498 <move_window>
 8017822:	4603      	mov	r3, r0
 8017824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017826:	7ffb      	ldrb	r3, [r7, #31]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d17a      	bne.n	8017922 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017832:	69bb      	ldr	r3, [r7, #24]
 8017834:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017838:	4413      	add	r3, r2
 801783a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801783c:	68bb      	ldr	r3, [r7, #8]
 801783e:	f003 0301 	and.w	r3, r3, #1
 8017842:	2b00      	cmp	r3, #0
 8017844:	d003      	beq.n	801784e <put_fat+0xf0>
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	091b      	lsrs	r3, r3, #4
 801784a:	b2db      	uxtb	r3, r3
 801784c:	e00e      	b.n	801786c <put_fat+0x10e>
 801784e:	697b      	ldr	r3, [r7, #20]
 8017850:	781b      	ldrb	r3, [r3, #0]
 8017852:	b25b      	sxtb	r3, r3
 8017854:	f023 030f 	bic.w	r3, r3, #15
 8017858:	b25a      	sxtb	r2, r3
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	0a1b      	lsrs	r3, r3, #8
 801785e:	b25b      	sxtb	r3, r3
 8017860:	f003 030f 	and.w	r3, r3, #15
 8017864:	b25b      	sxtb	r3, r3
 8017866:	4313      	orrs	r3, r2
 8017868:	b25b      	sxtb	r3, r3
 801786a:	b2db      	uxtb	r3, r3
 801786c:	697a      	ldr	r2, [r7, #20]
 801786e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	2201      	movs	r2, #1
 8017874:	70da      	strb	r2, [r3, #3]
			break;
 8017876:	e059      	b.n	801792c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	6a1a      	ldr	r2, [r3, #32]
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	0a1b      	lsrs	r3, r3, #8
 8017880:	4413      	add	r3, r2
 8017882:	4619      	mov	r1, r3
 8017884:	68f8      	ldr	r0, [r7, #12]
 8017886:	f7ff fe07 	bl	8017498 <move_window>
 801788a:	4603      	mov	r3, r0
 801788c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801788e:	7ffb      	ldrb	r3, [r7, #31]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d148      	bne.n	8017926 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801789a:	68bb      	ldr	r3, [r7, #8]
 801789c:	005b      	lsls	r3, r3, #1
 801789e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80178a2:	4413      	add	r3, r2
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	b292      	uxth	r2, r2
 80178a8:	4611      	mov	r1, r2
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7ff fb7f 	bl	8016fae <st_word>
			fs->wflag = 1;
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	2201      	movs	r2, #1
 80178b4:	70da      	strb	r2, [r3, #3]
			break;
 80178b6:	e039      	b.n	801792c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	6a1a      	ldr	r2, [r3, #32]
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	09db      	lsrs	r3, r3, #7
 80178c0:	4413      	add	r3, r2
 80178c2:	4619      	mov	r1, r3
 80178c4:	68f8      	ldr	r0, [r7, #12]
 80178c6:	f7ff fde7 	bl	8017498 <move_window>
 80178ca:	4603      	mov	r3, r0
 80178cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80178ce:	7ffb      	ldrb	r3, [r7, #31]
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d12a      	bne.n	801792a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80178e0:	68bb      	ldr	r3, [r7, #8]
 80178e2:	009b      	lsls	r3, r3, #2
 80178e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80178e8:	4413      	add	r3, r2
 80178ea:	4618      	mov	r0, r3
 80178ec:	f7ff fb3c 	bl	8016f68 <ld_dword>
 80178f0:	4603      	mov	r3, r0
 80178f2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80178f6:	4323      	orrs	r3, r4
 80178f8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017900:	68bb      	ldr	r3, [r7, #8]
 8017902:	009b      	lsls	r3, r3, #2
 8017904:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017908:	4413      	add	r3, r2
 801790a:	6879      	ldr	r1, [r7, #4]
 801790c:	4618      	mov	r0, r3
 801790e:	f7ff fb69 	bl	8016fe4 <st_dword>
			fs->wflag = 1;
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	2201      	movs	r2, #1
 8017916:	70da      	strb	r2, [r3, #3]
			break;
 8017918:	e008      	b.n	801792c <put_fat+0x1ce>
		}
	}
 801791a:	bf00      	nop
 801791c:	e006      	b.n	801792c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801791e:	bf00      	nop
 8017920:	e004      	b.n	801792c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017922:	bf00      	nop
 8017924:	e002      	b.n	801792c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8017926:	bf00      	nop
 8017928:	e000      	b.n	801792c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801792a:	bf00      	nop
	return res;
 801792c:	7ffb      	ldrb	r3, [r7, #31]
}
 801792e:	4618      	mov	r0, r3
 8017930:	3724      	adds	r7, #36	; 0x24
 8017932:	46bd      	mov	sp, r7
 8017934:	bd90      	pop	{r4, r7, pc}

08017936 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017936:	b580      	push	{r7, lr}
 8017938:	b088      	sub	sp, #32
 801793a:	af00      	add	r7, sp, #0
 801793c:	60f8      	str	r0, [r7, #12]
 801793e:	60b9      	str	r1, [r7, #8]
 8017940:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017942:	2300      	movs	r3, #0
 8017944:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	2b01      	cmp	r3, #1
 8017950:	d904      	bls.n	801795c <remove_chain+0x26>
 8017952:	69bb      	ldr	r3, [r7, #24]
 8017954:	695b      	ldr	r3, [r3, #20]
 8017956:	68ba      	ldr	r2, [r7, #8]
 8017958:	429a      	cmp	r2, r3
 801795a:	d301      	bcc.n	8017960 <remove_chain+0x2a>
 801795c:	2302      	movs	r3, #2
 801795e:	e04b      	b.n	80179f8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d00c      	beq.n	8017980 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017966:	f04f 32ff 	mov.w	r2, #4294967295
 801796a:	6879      	ldr	r1, [r7, #4]
 801796c:	69b8      	ldr	r0, [r7, #24]
 801796e:	f7ff fef6 	bl	801775e <put_fat>
 8017972:	4603      	mov	r3, r0
 8017974:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017976:	7ffb      	ldrb	r3, [r7, #31]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d001      	beq.n	8017980 <remove_chain+0x4a>
 801797c:	7ffb      	ldrb	r3, [r7, #31]
 801797e:	e03b      	b.n	80179f8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017980:	68b9      	ldr	r1, [r7, #8]
 8017982:	68f8      	ldr	r0, [r7, #12]
 8017984:	f7ff fe43 	bl	801760e <get_fat>
 8017988:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801798a:	697b      	ldr	r3, [r7, #20]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d031      	beq.n	80179f4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017990:	697b      	ldr	r3, [r7, #20]
 8017992:	2b01      	cmp	r3, #1
 8017994:	d101      	bne.n	801799a <remove_chain+0x64>
 8017996:	2302      	movs	r3, #2
 8017998:	e02e      	b.n	80179f8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179a0:	d101      	bne.n	80179a6 <remove_chain+0x70>
 80179a2:	2301      	movs	r3, #1
 80179a4:	e028      	b.n	80179f8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80179a6:	2200      	movs	r2, #0
 80179a8:	68b9      	ldr	r1, [r7, #8]
 80179aa:	69b8      	ldr	r0, [r7, #24]
 80179ac:	f7ff fed7 	bl	801775e <put_fat>
 80179b0:	4603      	mov	r3, r0
 80179b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80179b4:	7ffb      	ldrb	r3, [r7, #31]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d001      	beq.n	80179be <remove_chain+0x88>
 80179ba:	7ffb      	ldrb	r3, [r7, #31]
 80179bc:	e01c      	b.n	80179f8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80179be:	69bb      	ldr	r3, [r7, #24]
 80179c0:	691a      	ldr	r2, [r3, #16]
 80179c2:	69bb      	ldr	r3, [r7, #24]
 80179c4:	695b      	ldr	r3, [r3, #20]
 80179c6:	3b02      	subs	r3, #2
 80179c8:	429a      	cmp	r2, r3
 80179ca:	d20b      	bcs.n	80179e4 <remove_chain+0xae>
			fs->free_clst++;
 80179cc:	69bb      	ldr	r3, [r7, #24]
 80179ce:	691b      	ldr	r3, [r3, #16]
 80179d0:	1c5a      	adds	r2, r3, #1
 80179d2:	69bb      	ldr	r3, [r7, #24]
 80179d4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80179d6:	69bb      	ldr	r3, [r7, #24]
 80179d8:	791b      	ldrb	r3, [r3, #4]
 80179da:	f043 0301 	orr.w	r3, r3, #1
 80179de:	b2da      	uxtb	r2, r3
 80179e0:	69bb      	ldr	r3, [r7, #24]
 80179e2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80179e4:	697b      	ldr	r3, [r7, #20]
 80179e6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80179e8:	69bb      	ldr	r3, [r7, #24]
 80179ea:	695b      	ldr	r3, [r3, #20]
 80179ec:	68ba      	ldr	r2, [r7, #8]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d3c6      	bcc.n	8017980 <remove_chain+0x4a>
 80179f2:	e000      	b.n	80179f6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80179f4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80179f6:	2300      	movs	r3, #0
}
 80179f8:	4618      	mov	r0, r3
 80179fa:	3720      	adds	r7, #32
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}

08017a00 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b088      	sub	sp, #32
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d10d      	bne.n	8017a32 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017a16:	693b      	ldr	r3, [r7, #16]
 8017a18:	68db      	ldr	r3, [r3, #12]
 8017a1a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017a1c:	69bb      	ldr	r3, [r7, #24]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d004      	beq.n	8017a2c <create_chain+0x2c>
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	695b      	ldr	r3, [r3, #20]
 8017a26:	69ba      	ldr	r2, [r7, #24]
 8017a28:	429a      	cmp	r2, r3
 8017a2a:	d31b      	bcc.n	8017a64 <create_chain+0x64>
 8017a2c:	2301      	movs	r3, #1
 8017a2e:	61bb      	str	r3, [r7, #24]
 8017a30:	e018      	b.n	8017a64 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017a32:	6839      	ldr	r1, [r7, #0]
 8017a34:	6878      	ldr	r0, [r7, #4]
 8017a36:	f7ff fdea 	bl	801760e <get_fat>
 8017a3a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2b01      	cmp	r3, #1
 8017a40:	d801      	bhi.n	8017a46 <create_chain+0x46>
 8017a42:	2301      	movs	r3, #1
 8017a44:	e070      	b.n	8017b28 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017a46:	68fb      	ldr	r3, [r7, #12]
 8017a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a4c:	d101      	bne.n	8017a52 <create_chain+0x52>
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	e06a      	b.n	8017b28 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017a52:	693b      	ldr	r3, [r7, #16]
 8017a54:	695b      	ldr	r3, [r3, #20]
 8017a56:	68fa      	ldr	r2, [r7, #12]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d201      	bcs.n	8017a60 <create_chain+0x60>
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	e063      	b.n	8017b28 <create_chain+0x128>
		scl = clst;
 8017a60:	683b      	ldr	r3, [r7, #0]
 8017a62:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017a64:	69bb      	ldr	r3, [r7, #24]
 8017a66:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	3301      	adds	r3, #1
 8017a6c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017a6e:	693b      	ldr	r3, [r7, #16]
 8017a70:	695b      	ldr	r3, [r3, #20]
 8017a72:	69fa      	ldr	r2, [r7, #28]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d307      	bcc.n	8017a88 <create_chain+0x88>
				ncl = 2;
 8017a78:	2302      	movs	r3, #2
 8017a7a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017a7c:	69fa      	ldr	r2, [r7, #28]
 8017a7e:	69bb      	ldr	r3, [r7, #24]
 8017a80:	429a      	cmp	r2, r3
 8017a82:	d901      	bls.n	8017a88 <create_chain+0x88>
 8017a84:	2300      	movs	r3, #0
 8017a86:	e04f      	b.n	8017b28 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017a88:	69f9      	ldr	r1, [r7, #28]
 8017a8a:	6878      	ldr	r0, [r7, #4]
 8017a8c:	f7ff fdbf 	bl	801760e <get_fat>
 8017a90:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d00e      	beq.n	8017ab6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2b01      	cmp	r3, #1
 8017a9c:	d003      	beq.n	8017aa6 <create_chain+0xa6>
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017aa4:	d101      	bne.n	8017aaa <create_chain+0xaa>
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	e03e      	b.n	8017b28 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8017aaa:	69fa      	ldr	r2, [r7, #28]
 8017aac:	69bb      	ldr	r3, [r7, #24]
 8017aae:	429a      	cmp	r2, r3
 8017ab0:	d1da      	bne.n	8017a68 <create_chain+0x68>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	e038      	b.n	8017b28 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017ab6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8017abc:	69f9      	ldr	r1, [r7, #28]
 8017abe:	6938      	ldr	r0, [r7, #16]
 8017ac0:	f7ff fe4d 	bl	801775e <put_fat>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017ac8:	7dfb      	ldrb	r3, [r7, #23]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d109      	bne.n	8017ae2 <create_chain+0xe2>
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d006      	beq.n	8017ae2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017ad4:	69fa      	ldr	r2, [r7, #28]
 8017ad6:	6839      	ldr	r1, [r7, #0]
 8017ad8:	6938      	ldr	r0, [r7, #16]
 8017ada:	f7ff fe40 	bl	801775e <put_fat>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017ae2:	7dfb      	ldrb	r3, [r7, #23]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d116      	bne.n	8017b16 <create_chain+0x116>
		fs->last_clst = ncl;
 8017ae8:	693b      	ldr	r3, [r7, #16]
 8017aea:	69fa      	ldr	r2, [r7, #28]
 8017aec:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	691a      	ldr	r2, [r3, #16]
 8017af2:	693b      	ldr	r3, [r7, #16]
 8017af4:	695b      	ldr	r3, [r3, #20]
 8017af6:	3b02      	subs	r3, #2
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d804      	bhi.n	8017b06 <create_chain+0x106>
 8017afc:	693b      	ldr	r3, [r7, #16]
 8017afe:	691b      	ldr	r3, [r3, #16]
 8017b00:	1e5a      	subs	r2, r3, #1
 8017b02:	693b      	ldr	r3, [r7, #16]
 8017b04:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8017b06:	693b      	ldr	r3, [r7, #16]
 8017b08:	791b      	ldrb	r3, [r3, #4]
 8017b0a:	f043 0301 	orr.w	r3, r3, #1
 8017b0e:	b2da      	uxtb	r2, r3
 8017b10:	693b      	ldr	r3, [r7, #16]
 8017b12:	711a      	strb	r2, [r3, #4]
 8017b14:	e007      	b.n	8017b26 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017b16:	7dfb      	ldrb	r3, [r7, #23]
 8017b18:	2b01      	cmp	r3, #1
 8017b1a:	d102      	bne.n	8017b22 <create_chain+0x122>
 8017b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b20:	e000      	b.n	8017b24 <create_chain+0x124>
 8017b22:	2301      	movs	r3, #1
 8017b24:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017b26:	69fb      	ldr	r3, [r7, #28]
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3720      	adds	r7, #32
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017b30:	b480      	push	{r7}
 8017b32:	b087      	sub	sp, #28
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b44:	3304      	adds	r3, #4
 8017b46:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	0a5b      	lsrs	r3, r3, #9
 8017b4c:	68fa      	ldr	r2, [r7, #12]
 8017b4e:	8952      	ldrh	r2, [r2, #10]
 8017b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b54:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	1d1a      	adds	r2, r3, #4
 8017b5a:	613a      	str	r2, [r7, #16]
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d101      	bne.n	8017b6a <clmt_clust+0x3a>
 8017b66:	2300      	movs	r3, #0
 8017b68:	e010      	b.n	8017b8c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8017b6a:	697a      	ldr	r2, [r7, #20]
 8017b6c:	68bb      	ldr	r3, [r7, #8]
 8017b6e:	429a      	cmp	r2, r3
 8017b70:	d307      	bcc.n	8017b82 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017b72:	697a      	ldr	r2, [r7, #20]
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	1ad3      	subs	r3, r2, r3
 8017b78:	617b      	str	r3, [r7, #20]
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	3304      	adds	r3, #4
 8017b7e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017b80:	e7e9      	b.n	8017b56 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017b82:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017b84:	693b      	ldr	r3, [r7, #16]
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	4413      	add	r3, r2
}
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	371c      	adds	r7, #28
 8017b90:	46bd      	mov	sp, r7
 8017b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b96:	4770      	bx	lr

08017b98 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b086      	sub	sp, #24
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017bae:	d204      	bcs.n	8017bba <dir_sdi+0x22>
 8017bb0:	683b      	ldr	r3, [r7, #0]
 8017bb2:	f003 031f 	and.w	r3, r3, #31
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d001      	beq.n	8017bbe <dir_sdi+0x26>
		return FR_INT_ERR;
 8017bba:	2302      	movs	r3, #2
 8017bbc:	e063      	b.n	8017c86 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	683a      	ldr	r2, [r7, #0]
 8017bc2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	689b      	ldr	r3, [r3, #8]
 8017bc8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8017bca:	697b      	ldr	r3, [r7, #20]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d106      	bne.n	8017bde <dir_sdi+0x46>
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	781b      	ldrb	r3, [r3, #0]
 8017bd4:	2b02      	cmp	r3, #2
 8017bd6:	d902      	bls.n	8017bde <dir_sdi+0x46>
		clst = fs->dirbase;
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bdc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d10c      	bne.n	8017bfe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	095b      	lsrs	r3, r3, #5
 8017be8:	693a      	ldr	r2, [r7, #16]
 8017bea:	8912      	ldrh	r2, [r2, #8]
 8017bec:	4293      	cmp	r3, r2
 8017bee:	d301      	bcc.n	8017bf4 <dir_sdi+0x5c>
 8017bf0:	2302      	movs	r3, #2
 8017bf2:	e048      	b.n	8017c86 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017bf4:	693b      	ldr	r3, [r7, #16]
 8017bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	61da      	str	r2, [r3, #28]
 8017bfc:	e029      	b.n	8017c52 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017bfe:	693b      	ldr	r3, [r7, #16]
 8017c00:	895b      	ldrh	r3, [r3, #10]
 8017c02:	025b      	lsls	r3, r3, #9
 8017c04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017c06:	e019      	b.n	8017c3c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	6979      	ldr	r1, [r7, #20]
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	f7ff fcfe 	bl	801760e <get_fat>
 8017c12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017c14:	697b      	ldr	r3, [r7, #20]
 8017c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c1a:	d101      	bne.n	8017c20 <dir_sdi+0x88>
 8017c1c:	2301      	movs	r3, #1
 8017c1e:	e032      	b.n	8017c86 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d904      	bls.n	8017c30 <dir_sdi+0x98>
 8017c26:	693b      	ldr	r3, [r7, #16]
 8017c28:	695b      	ldr	r3, [r3, #20]
 8017c2a:	697a      	ldr	r2, [r7, #20]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d301      	bcc.n	8017c34 <dir_sdi+0x9c>
 8017c30:	2302      	movs	r3, #2
 8017c32:	e028      	b.n	8017c86 <dir_sdi+0xee>
			ofs -= csz;
 8017c34:	683a      	ldr	r2, [r7, #0]
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	1ad3      	subs	r3, r2, r3
 8017c3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017c3c:	683a      	ldr	r2, [r7, #0]
 8017c3e:	68fb      	ldr	r3, [r7, #12]
 8017c40:	429a      	cmp	r2, r3
 8017c42:	d2e1      	bcs.n	8017c08 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017c44:	6979      	ldr	r1, [r7, #20]
 8017c46:	6938      	ldr	r0, [r7, #16]
 8017c48:	f7ff fcc2 	bl	80175d0 <clust2sect>
 8017c4c:	4602      	mov	r2, r0
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	697a      	ldr	r2, [r7, #20]
 8017c56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	69db      	ldr	r3, [r3, #28]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d101      	bne.n	8017c64 <dir_sdi+0xcc>
 8017c60:	2302      	movs	r3, #2
 8017c62:	e010      	b.n	8017c86 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	69da      	ldr	r2, [r3, #28]
 8017c68:	683b      	ldr	r3, [r7, #0]
 8017c6a:	0a5b      	lsrs	r3, r3, #9
 8017c6c:	441a      	add	r2, r3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017c72:	693b      	ldr	r3, [r7, #16]
 8017c74:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c7e:	441a      	add	r2, r3
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017c84:	2300      	movs	r3, #0
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3718      	adds	r7, #24
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}

08017c8e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017c8e:	b580      	push	{r7, lr}
 8017c90:	b086      	sub	sp, #24
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	6078      	str	r0, [r7, #4]
 8017c96:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	695b      	ldr	r3, [r3, #20]
 8017ca2:	3320      	adds	r3, #32
 8017ca4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	69db      	ldr	r3, [r3, #28]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d003      	beq.n	8017cb6 <dir_next+0x28>
 8017cae:	68bb      	ldr	r3, [r7, #8]
 8017cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017cb4:	d301      	bcc.n	8017cba <dir_next+0x2c>
 8017cb6:	2304      	movs	r3, #4
 8017cb8:	e0aa      	b.n	8017e10 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017cba:	68bb      	ldr	r3, [r7, #8]
 8017cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	f040 8098 	bne.w	8017df6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	69db      	ldr	r3, [r3, #28]
 8017cca:	1c5a      	adds	r2, r3, #1
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	699b      	ldr	r3, [r3, #24]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d10b      	bne.n	8017cf0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	095b      	lsrs	r3, r3, #5
 8017cdc:	68fa      	ldr	r2, [r7, #12]
 8017cde:	8912      	ldrh	r2, [r2, #8]
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	f0c0 8088 	bcc.w	8017df6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2200      	movs	r2, #0
 8017cea:	61da      	str	r2, [r3, #28]
 8017cec:	2304      	movs	r3, #4
 8017cee:	e08f      	b.n	8017e10 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	0a5b      	lsrs	r3, r3, #9
 8017cf4:	68fa      	ldr	r2, [r7, #12]
 8017cf6:	8952      	ldrh	r2, [r2, #10]
 8017cf8:	3a01      	subs	r2, #1
 8017cfa:	4013      	ands	r3, r2
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d17a      	bne.n	8017df6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017d00:	687a      	ldr	r2, [r7, #4]
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	699b      	ldr	r3, [r3, #24]
 8017d06:	4619      	mov	r1, r3
 8017d08:	4610      	mov	r0, r2
 8017d0a:	f7ff fc80 	bl	801760e <get_fat>
 8017d0e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017d10:	697b      	ldr	r3, [r7, #20]
 8017d12:	2b01      	cmp	r3, #1
 8017d14:	d801      	bhi.n	8017d1a <dir_next+0x8c>
 8017d16:	2302      	movs	r3, #2
 8017d18:	e07a      	b.n	8017e10 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d20:	d101      	bne.n	8017d26 <dir_next+0x98>
 8017d22:	2301      	movs	r3, #1
 8017d24:	e074      	b.n	8017e10 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	695b      	ldr	r3, [r3, #20]
 8017d2a:	697a      	ldr	r2, [r7, #20]
 8017d2c:	429a      	cmp	r2, r3
 8017d2e:	d358      	bcc.n	8017de2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017d30:	683b      	ldr	r3, [r7, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d104      	bne.n	8017d40 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	2200      	movs	r2, #0
 8017d3a:	61da      	str	r2, [r3, #28]
 8017d3c:	2304      	movs	r3, #4
 8017d3e:	e067      	b.n	8017e10 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017d40:	687a      	ldr	r2, [r7, #4]
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	699b      	ldr	r3, [r3, #24]
 8017d46:	4619      	mov	r1, r3
 8017d48:	4610      	mov	r0, r2
 8017d4a:	f7ff fe59 	bl	8017a00 <create_chain>
 8017d4e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017d50:	697b      	ldr	r3, [r7, #20]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d101      	bne.n	8017d5a <dir_next+0xcc>
 8017d56:	2307      	movs	r3, #7
 8017d58:	e05a      	b.n	8017e10 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017d5a:	697b      	ldr	r3, [r7, #20]
 8017d5c:	2b01      	cmp	r3, #1
 8017d5e:	d101      	bne.n	8017d64 <dir_next+0xd6>
 8017d60:	2302      	movs	r3, #2
 8017d62:	e055      	b.n	8017e10 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d6a:	d101      	bne.n	8017d70 <dir_next+0xe2>
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	e04f      	b.n	8017e10 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017d70:	68f8      	ldr	r0, [r7, #12]
 8017d72:	f7ff fb4d 	bl	8017410 <sync_window>
 8017d76:	4603      	mov	r3, r0
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	d001      	beq.n	8017d80 <dir_next+0xf2>
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	e047      	b.n	8017e10 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017d80:	68fb      	ldr	r3, [r7, #12]
 8017d82:	3330      	adds	r3, #48	; 0x30
 8017d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017d88:	2100      	movs	r1, #0
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f7ff f977 	bl	801707e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017d90:	2300      	movs	r3, #0
 8017d92:	613b      	str	r3, [r7, #16]
 8017d94:	6979      	ldr	r1, [r7, #20]
 8017d96:	68f8      	ldr	r0, [r7, #12]
 8017d98:	f7ff fc1a 	bl	80175d0 <clust2sect>
 8017d9c:	4602      	mov	r2, r0
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8017da2:	e012      	b.n	8017dca <dir_next+0x13c>
						fs->wflag = 1;
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	2201      	movs	r2, #1
 8017da8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017daa:	68f8      	ldr	r0, [r7, #12]
 8017dac:	f7ff fb30 	bl	8017410 <sync_window>
 8017db0:	4603      	mov	r3, r0
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d001      	beq.n	8017dba <dir_next+0x12c>
 8017db6:	2301      	movs	r3, #1
 8017db8:	e02a      	b.n	8017e10 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017dba:	693b      	ldr	r3, [r7, #16]
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	613b      	str	r3, [r7, #16]
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc4:	1c5a      	adds	r2, r3, #1
 8017dc6:	68fb      	ldr	r3, [r7, #12]
 8017dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8017dca:	68fb      	ldr	r3, [r7, #12]
 8017dcc:	895b      	ldrh	r3, [r3, #10]
 8017dce:	461a      	mov	r2, r3
 8017dd0:	693b      	ldr	r3, [r7, #16]
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	d3e6      	bcc.n	8017da4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dda:	693b      	ldr	r3, [r7, #16]
 8017ddc:	1ad2      	subs	r2, r2, r3
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	697a      	ldr	r2, [r7, #20]
 8017de6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017de8:	6979      	ldr	r1, [r7, #20]
 8017dea:	68f8      	ldr	r0, [r7, #12]
 8017dec:	f7ff fbf0 	bl	80175d0 <clust2sect>
 8017df0:	4602      	mov	r2, r0
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	68ba      	ldr	r2, [r7, #8]
 8017dfa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017dfc:	68fb      	ldr	r3, [r7, #12]
 8017dfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017e08:	441a      	add	r2, r3
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017e0e:	2300      	movs	r3, #0
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	3718      	adds	r7, #24
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b086      	sub	sp, #24
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
 8017e20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017e28:	2100      	movs	r1, #0
 8017e2a:	6878      	ldr	r0, [r7, #4]
 8017e2c:	f7ff feb4 	bl	8017b98 <dir_sdi>
 8017e30:	4603      	mov	r3, r0
 8017e32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017e34:	7dfb      	ldrb	r3, [r7, #23]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d12b      	bne.n	8017e92 <dir_alloc+0x7a>
		n = 0;
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	69db      	ldr	r3, [r3, #28]
 8017e42:	4619      	mov	r1, r3
 8017e44:	68f8      	ldr	r0, [r7, #12]
 8017e46:	f7ff fb27 	bl	8017498 <move_window>
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017e4e:	7dfb      	ldrb	r3, [r7, #23]
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d11d      	bne.n	8017e90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	6a1b      	ldr	r3, [r3, #32]
 8017e58:	781b      	ldrb	r3, [r3, #0]
 8017e5a:	2be5      	cmp	r3, #229	; 0xe5
 8017e5c:	d004      	beq.n	8017e68 <dir_alloc+0x50>
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6a1b      	ldr	r3, [r3, #32]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d107      	bne.n	8017e78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017e68:	693b      	ldr	r3, [r7, #16]
 8017e6a:	3301      	adds	r3, #1
 8017e6c:	613b      	str	r3, [r7, #16]
 8017e6e:	693a      	ldr	r2, [r7, #16]
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	429a      	cmp	r2, r3
 8017e74:	d102      	bne.n	8017e7c <dir_alloc+0x64>
 8017e76:	e00c      	b.n	8017e92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017e78:	2300      	movs	r3, #0
 8017e7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017e7c:	2101      	movs	r1, #1
 8017e7e:	6878      	ldr	r0, [r7, #4]
 8017e80:	f7ff ff05 	bl	8017c8e <dir_next>
 8017e84:	4603      	mov	r3, r0
 8017e86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017e88:	7dfb      	ldrb	r3, [r7, #23]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d0d7      	beq.n	8017e3e <dir_alloc+0x26>
 8017e8e:	e000      	b.n	8017e92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017e90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017e92:	7dfb      	ldrb	r3, [r7, #23]
 8017e94:	2b04      	cmp	r3, #4
 8017e96:	d101      	bne.n	8017e9c <dir_alloc+0x84>
 8017e98:	2307      	movs	r3, #7
 8017e9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8017e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	3718      	adds	r7, #24
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}

08017ea6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017ea6:	b580      	push	{r7, lr}
 8017ea8:	b084      	sub	sp, #16
 8017eaa:	af00      	add	r7, sp, #0
 8017eac:	6078      	str	r0, [r7, #4]
 8017eae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	331a      	adds	r3, #26
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7ff f83f 	bl	8016f38 <ld_word>
 8017eba:	4603      	mov	r3, r0
 8017ebc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	781b      	ldrb	r3, [r3, #0]
 8017ec2:	2b03      	cmp	r3, #3
 8017ec4:	d109      	bne.n	8017eda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	3314      	adds	r3, #20
 8017eca:	4618      	mov	r0, r3
 8017ecc:	f7ff f834 	bl	8016f38 <ld_word>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	041b      	lsls	r3, r3, #16
 8017ed4:	68fa      	ldr	r2, [r7, #12]
 8017ed6:	4313      	orrs	r3, r2
 8017ed8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017eda:	68fb      	ldr	r3, [r7, #12]
}
 8017edc:	4618      	mov	r0, r3
 8017ede:	3710      	adds	r7, #16
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}

08017ee4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b084      	sub	sp, #16
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	60f8      	str	r0, [r7, #12]
 8017eec:	60b9      	str	r1, [r7, #8]
 8017eee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	331a      	adds	r3, #26
 8017ef4:	687a      	ldr	r2, [r7, #4]
 8017ef6:	b292      	uxth	r2, r2
 8017ef8:	4611      	mov	r1, r2
 8017efa:	4618      	mov	r0, r3
 8017efc:	f7ff f857 	bl	8016fae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	2b03      	cmp	r3, #3
 8017f06:	d109      	bne.n	8017f1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	f103 0214 	add.w	r2, r3, #20
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	0c1b      	lsrs	r3, r3, #16
 8017f12:	b29b      	uxth	r3, r3
 8017f14:	4619      	mov	r1, r3
 8017f16:	4610      	mov	r0, r2
 8017f18:	f7ff f849 	bl	8016fae <st_word>
	}
}
 8017f1c:	bf00      	nop
 8017f1e:	3710      	adds	r7, #16
 8017f20:	46bd      	mov	sp, r7
 8017f22:	bd80      	pop	{r7, pc}

08017f24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b086      	sub	sp, #24
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	681b      	ldr	r3, [r3, #0]
 8017f30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017f32:	2100      	movs	r1, #0
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f7ff fe2f 	bl	8017b98 <dir_sdi>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017f3e:	7dfb      	ldrb	r3, [r7, #23]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d001      	beq.n	8017f48 <dir_find+0x24>
 8017f44:	7dfb      	ldrb	r3, [r7, #23]
 8017f46:	e03e      	b.n	8017fc6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	69db      	ldr	r3, [r3, #28]
 8017f4c:	4619      	mov	r1, r3
 8017f4e:	6938      	ldr	r0, [r7, #16]
 8017f50:	f7ff faa2 	bl	8017498 <move_window>
 8017f54:	4603      	mov	r3, r0
 8017f56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017f58:	7dfb      	ldrb	r3, [r7, #23]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d12f      	bne.n	8017fbe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6a1b      	ldr	r3, [r3, #32]
 8017f62:	781b      	ldrb	r3, [r3, #0]
 8017f64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017f66:	7bfb      	ldrb	r3, [r7, #15]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d102      	bne.n	8017f72 <dir_find+0x4e>
 8017f6c:	2304      	movs	r3, #4
 8017f6e:	75fb      	strb	r3, [r7, #23]
 8017f70:	e028      	b.n	8017fc4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	6a1b      	ldr	r3, [r3, #32]
 8017f76:	330b      	adds	r3, #11
 8017f78:	781b      	ldrb	r3, [r3, #0]
 8017f7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f7e:	b2da      	uxtb	r2, r3
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	6a1b      	ldr	r3, [r3, #32]
 8017f88:	330b      	adds	r3, #11
 8017f8a:	781b      	ldrb	r3, [r3, #0]
 8017f8c:	f003 0308 	and.w	r3, r3, #8
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d10a      	bne.n	8017faa <dir_find+0x86>
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	6a18      	ldr	r0, [r3, #32]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	3324      	adds	r3, #36	; 0x24
 8017f9c:	220b      	movs	r2, #11
 8017f9e:	4619      	mov	r1, r3
 8017fa0:	f7ff f888 	bl	80170b4 <mem_cmp>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d00b      	beq.n	8017fc2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017faa:	2100      	movs	r1, #0
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f7ff fe6e 	bl	8017c8e <dir_next>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017fb6:	7dfb      	ldrb	r3, [r7, #23]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d0c5      	beq.n	8017f48 <dir_find+0x24>
 8017fbc:	e002      	b.n	8017fc4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8017fbe:	bf00      	nop
 8017fc0:	e000      	b.n	8017fc4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017fc2:	bf00      	nop

	return res;
 8017fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3718      	adds	r7, #24
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}

08017fce <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017fce:	b580      	push	{r7, lr}
 8017fd0:	b084      	sub	sp, #16
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017fdc:	2101      	movs	r1, #1
 8017fde:	6878      	ldr	r0, [r7, #4]
 8017fe0:	f7ff ff1a 	bl	8017e18 <dir_alloc>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017fe8:	7bfb      	ldrb	r3, [r7, #15]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d11c      	bne.n	8018028 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	69db      	ldr	r3, [r3, #28]
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	68b8      	ldr	r0, [r7, #8]
 8017ff6:	f7ff fa4f 	bl	8017498 <move_window>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017ffe:	7bfb      	ldrb	r3, [r7, #15]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d111      	bne.n	8018028 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6a1b      	ldr	r3, [r3, #32]
 8018008:	2220      	movs	r2, #32
 801800a:	2100      	movs	r1, #0
 801800c:	4618      	mov	r0, r3
 801800e:	f7ff f836 	bl	801707e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	6a18      	ldr	r0, [r3, #32]
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	3324      	adds	r3, #36	; 0x24
 801801a:	220b      	movs	r2, #11
 801801c:	4619      	mov	r1, r3
 801801e:	f7ff f80d 	bl	801703c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8018022:	68bb      	ldr	r3, [r7, #8]
 8018024:	2201      	movs	r2, #1
 8018026:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018028:	7bfb      	ldrb	r3, [r7, #15]
}
 801802a:	4618      	mov	r0, r3
 801802c:	3710      	adds	r7, #16
 801802e:	46bd      	mov	sp, r7
 8018030:	bd80      	pop	{r7, pc}
	...

08018034 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b088      	sub	sp, #32
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	60fb      	str	r3, [r7, #12]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	3324      	adds	r3, #36	; 0x24
 8018048:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801804a:	220b      	movs	r2, #11
 801804c:	2120      	movs	r1, #32
 801804e:	68b8      	ldr	r0, [r7, #8]
 8018050:	f7ff f815 	bl	801707e <mem_set>
	si = i = 0; ni = 8;
 8018054:	2300      	movs	r3, #0
 8018056:	613b      	str	r3, [r7, #16]
 8018058:	693b      	ldr	r3, [r7, #16]
 801805a:	61fb      	str	r3, [r7, #28]
 801805c:	2308      	movs	r3, #8
 801805e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8018060:	69fb      	ldr	r3, [r7, #28]
 8018062:	1c5a      	adds	r2, r3, #1
 8018064:	61fa      	str	r2, [r7, #28]
 8018066:	68fa      	ldr	r2, [r7, #12]
 8018068:	4413      	add	r3, r2
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801806e:	7efb      	ldrb	r3, [r7, #27]
 8018070:	2b20      	cmp	r3, #32
 8018072:	d94e      	bls.n	8018112 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8018074:	7efb      	ldrb	r3, [r7, #27]
 8018076:	2b2f      	cmp	r3, #47	; 0x2f
 8018078:	d006      	beq.n	8018088 <create_name+0x54>
 801807a:	7efb      	ldrb	r3, [r7, #27]
 801807c:	2b5c      	cmp	r3, #92	; 0x5c
 801807e:	d110      	bne.n	80180a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018080:	e002      	b.n	8018088 <create_name+0x54>
 8018082:	69fb      	ldr	r3, [r7, #28]
 8018084:	3301      	adds	r3, #1
 8018086:	61fb      	str	r3, [r7, #28]
 8018088:	68fa      	ldr	r2, [r7, #12]
 801808a:	69fb      	ldr	r3, [r7, #28]
 801808c:	4413      	add	r3, r2
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	2b2f      	cmp	r3, #47	; 0x2f
 8018092:	d0f6      	beq.n	8018082 <create_name+0x4e>
 8018094:	68fa      	ldr	r2, [r7, #12]
 8018096:	69fb      	ldr	r3, [r7, #28]
 8018098:	4413      	add	r3, r2
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	2b5c      	cmp	r3, #92	; 0x5c
 801809e:	d0f0      	beq.n	8018082 <create_name+0x4e>
			break;
 80180a0:	e038      	b.n	8018114 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80180a2:	7efb      	ldrb	r3, [r7, #27]
 80180a4:	2b2e      	cmp	r3, #46	; 0x2e
 80180a6:	d003      	beq.n	80180b0 <create_name+0x7c>
 80180a8:	693a      	ldr	r2, [r7, #16]
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d30c      	bcc.n	80180ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80180b0:	697b      	ldr	r3, [r7, #20]
 80180b2:	2b0b      	cmp	r3, #11
 80180b4:	d002      	beq.n	80180bc <create_name+0x88>
 80180b6:	7efb      	ldrb	r3, [r7, #27]
 80180b8:	2b2e      	cmp	r3, #46	; 0x2e
 80180ba:	d001      	beq.n	80180c0 <create_name+0x8c>
 80180bc:	2306      	movs	r3, #6
 80180be:	e044      	b.n	801814a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80180c0:	2308      	movs	r3, #8
 80180c2:	613b      	str	r3, [r7, #16]
 80180c4:	230b      	movs	r3, #11
 80180c6:	617b      	str	r3, [r7, #20]
			continue;
 80180c8:	e022      	b.n	8018110 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80180ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	da04      	bge.n	80180dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80180d2:	7efb      	ldrb	r3, [r7, #27]
 80180d4:	3b80      	subs	r3, #128	; 0x80
 80180d6:	4a1f      	ldr	r2, [pc, #124]	; (8018154 <create_name+0x120>)
 80180d8:	5cd3      	ldrb	r3, [r2, r3]
 80180da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80180dc:	7efb      	ldrb	r3, [r7, #27]
 80180de:	4619      	mov	r1, r3
 80180e0:	481d      	ldr	r0, [pc, #116]	; (8018158 <create_name+0x124>)
 80180e2:	f7ff f80e 	bl	8017102 <chk_chr>
 80180e6:	4603      	mov	r3, r0
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d001      	beq.n	80180f0 <create_name+0xbc>
 80180ec:	2306      	movs	r3, #6
 80180ee:	e02c      	b.n	801814a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80180f0:	7efb      	ldrb	r3, [r7, #27]
 80180f2:	2b60      	cmp	r3, #96	; 0x60
 80180f4:	d905      	bls.n	8018102 <create_name+0xce>
 80180f6:	7efb      	ldrb	r3, [r7, #27]
 80180f8:	2b7a      	cmp	r3, #122	; 0x7a
 80180fa:	d802      	bhi.n	8018102 <create_name+0xce>
 80180fc:	7efb      	ldrb	r3, [r7, #27]
 80180fe:	3b20      	subs	r3, #32
 8018100:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8018102:	693b      	ldr	r3, [r7, #16]
 8018104:	1c5a      	adds	r2, r3, #1
 8018106:	613a      	str	r2, [r7, #16]
 8018108:	68ba      	ldr	r2, [r7, #8]
 801810a:	4413      	add	r3, r2
 801810c:	7efa      	ldrb	r2, [r7, #27]
 801810e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8018110:	e7a6      	b.n	8018060 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8018112:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8018114:	68fa      	ldr	r2, [r7, #12]
 8018116:	69fb      	ldr	r3, [r7, #28]
 8018118:	441a      	add	r2, r3
 801811a:	683b      	ldr	r3, [r7, #0]
 801811c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801811e:	693b      	ldr	r3, [r7, #16]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d101      	bne.n	8018128 <create_name+0xf4>
 8018124:	2306      	movs	r3, #6
 8018126:	e010      	b.n	801814a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	781b      	ldrb	r3, [r3, #0]
 801812c:	2be5      	cmp	r3, #229	; 0xe5
 801812e:	d102      	bne.n	8018136 <create_name+0x102>
 8018130:	68bb      	ldr	r3, [r7, #8]
 8018132:	2205      	movs	r2, #5
 8018134:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018136:	7efb      	ldrb	r3, [r7, #27]
 8018138:	2b20      	cmp	r3, #32
 801813a:	d801      	bhi.n	8018140 <create_name+0x10c>
 801813c:	2204      	movs	r2, #4
 801813e:	e000      	b.n	8018142 <create_name+0x10e>
 8018140:	2200      	movs	r2, #0
 8018142:	68bb      	ldr	r3, [r7, #8]
 8018144:	330b      	adds	r3, #11
 8018146:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8018148:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801814a:	4618      	mov	r0, r3
 801814c:	3720      	adds	r7, #32
 801814e:	46bd      	mov	sp, r7
 8018150:	bd80      	pop	{r7, pc}
 8018152:	bf00      	nop
 8018154:	0801d41c 	.word	0x0801d41c
 8018158:	0801d33c 	.word	0x0801d33c

0801815c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801815c:	b580      	push	{r7, lr}
 801815e:	b086      	sub	sp, #24
 8018160:	af00      	add	r7, sp, #0
 8018162:	6078      	str	r0, [r7, #4]
 8018164:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801816a:	693b      	ldr	r3, [r7, #16]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018170:	e002      	b.n	8018178 <follow_path+0x1c>
 8018172:	683b      	ldr	r3, [r7, #0]
 8018174:	3301      	adds	r3, #1
 8018176:	603b      	str	r3, [r7, #0]
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	781b      	ldrb	r3, [r3, #0]
 801817c:	2b2f      	cmp	r3, #47	; 0x2f
 801817e:	d0f8      	beq.n	8018172 <follow_path+0x16>
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	781b      	ldrb	r3, [r3, #0]
 8018184:	2b5c      	cmp	r3, #92	; 0x5c
 8018186:	d0f4      	beq.n	8018172 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018188:	693b      	ldr	r3, [r7, #16]
 801818a:	2200      	movs	r2, #0
 801818c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	781b      	ldrb	r3, [r3, #0]
 8018192:	2b1f      	cmp	r3, #31
 8018194:	d80a      	bhi.n	80181ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	2280      	movs	r2, #128	; 0x80
 801819a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801819e:	2100      	movs	r1, #0
 80181a0:	6878      	ldr	r0, [r7, #4]
 80181a2:	f7ff fcf9 	bl	8017b98 <dir_sdi>
 80181a6:	4603      	mov	r3, r0
 80181a8:	75fb      	strb	r3, [r7, #23]
 80181aa:	e043      	b.n	8018234 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80181ac:	463b      	mov	r3, r7
 80181ae:	4619      	mov	r1, r3
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f7ff ff3f 	bl	8018034 <create_name>
 80181b6:	4603      	mov	r3, r0
 80181b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80181ba:	7dfb      	ldrb	r3, [r7, #23]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d134      	bne.n	801822a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	f7ff feaf 	bl	8017f24 <dir_find>
 80181c6:	4603      	mov	r3, r0
 80181c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80181d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80181d2:	7dfb      	ldrb	r3, [r7, #23]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d00a      	beq.n	80181ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80181d8:	7dfb      	ldrb	r3, [r7, #23]
 80181da:	2b04      	cmp	r3, #4
 80181dc:	d127      	bne.n	801822e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80181de:	7afb      	ldrb	r3, [r7, #11]
 80181e0:	f003 0304 	and.w	r3, r3, #4
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d122      	bne.n	801822e <follow_path+0xd2>
 80181e8:	2305      	movs	r3, #5
 80181ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80181ec:	e01f      	b.n	801822e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80181ee:	7afb      	ldrb	r3, [r7, #11]
 80181f0:	f003 0304 	and.w	r3, r3, #4
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d11c      	bne.n	8018232 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80181f8:	693b      	ldr	r3, [r7, #16]
 80181fa:	799b      	ldrb	r3, [r3, #6]
 80181fc:	f003 0310 	and.w	r3, r3, #16
 8018200:	2b00      	cmp	r3, #0
 8018202:	d102      	bne.n	801820a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018204:	2305      	movs	r3, #5
 8018206:	75fb      	strb	r3, [r7, #23]
 8018208:	e014      	b.n	8018234 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	695b      	ldr	r3, [r3, #20]
 8018214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018218:	4413      	add	r3, r2
 801821a:	4619      	mov	r1, r3
 801821c:	68f8      	ldr	r0, [r7, #12]
 801821e:	f7ff fe42 	bl	8017ea6 <ld_clust>
 8018222:	4602      	mov	r2, r0
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018228:	e7c0      	b.n	80181ac <follow_path+0x50>
			if (res != FR_OK) break;
 801822a:	bf00      	nop
 801822c:	e002      	b.n	8018234 <follow_path+0xd8>
				break;
 801822e:	bf00      	nop
 8018230:	e000      	b.n	8018234 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018232:	bf00      	nop
			}
		}
	}

	return res;
 8018234:	7dfb      	ldrb	r3, [r7, #23]
}
 8018236:	4618      	mov	r0, r3
 8018238:	3718      	adds	r7, #24
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}

0801823e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801823e:	b480      	push	{r7}
 8018240:	b087      	sub	sp, #28
 8018242:	af00      	add	r7, sp, #0
 8018244:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018246:	f04f 33ff 	mov.w	r3, #4294967295
 801824a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d031      	beq.n	80182b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	617b      	str	r3, [r7, #20]
 801825a:	e002      	b.n	8018262 <get_ldnumber+0x24>
 801825c:	697b      	ldr	r3, [r7, #20]
 801825e:	3301      	adds	r3, #1
 8018260:	617b      	str	r3, [r7, #20]
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	781b      	ldrb	r3, [r3, #0]
 8018266:	2b20      	cmp	r3, #32
 8018268:	d903      	bls.n	8018272 <get_ldnumber+0x34>
 801826a:	697b      	ldr	r3, [r7, #20]
 801826c:	781b      	ldrb	r3, [r3, #0]
 801826e:	2b3a      	cmp	r3, #58	; 0x3a
 8018270:	d1f4      	bne.n	801825c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	781b      	ldrb	r3, [r3, #0]
 8018276:	2b3a      	cmp	r3, #58	; 0x3a
 8018278:	d11c      	bne.n	80182b4 <get_ldnumber+0x76>
			tp = *path;
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	1c5a      	adds	r2, r3, #1
 8018284:	60fa      	str	r2, [r7, #12]
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	3b30      	subs	r3, #48	; 0x30
 801828a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	2b09      	cmp	r3, #9
 8018290:	d80e      	bhi.n	80182b0 <get_ldnumber+0x72>
 8018292:	68fa      	ldr	r2, [r7, #12]
 8018294:	697b      	ldr	r3, [r7, #20]
 8018296:	429a      	cmp	r2, r3
 8018298:	d10a      	bne.n	80182b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801829a:	68bb      	ldr	r3, [r7, #8]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d107      	bne.n	80182b0 <get_ldnumber+0x72>
					vol = (int)i;
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80182a4:	697b      	ldr	r3, [r7, #20]
 80182a6:	3301      	adds	r3, #1
 80182a8:	617b      	str	r3, [r7, #20]
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	697a      	ldr	r2, [r7, #20]
 80182ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80182b0:	693b      	ldr	r3, [r7, #16]
 80182b2:	e002      	b.n	80182ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80182b4:	2300      	movs	r3, #0
 80182b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80182b8:	693b      	ldr	r3, [r7, #16]
}
 80182ba:	4618      	mov	r0, r3
 80182bc:	371c      	adds	r7, #28
 80182be:	46bd      	mov	sp, r7
 80182c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182c4:	4770      	bx	lr
	...

080182c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b082      	sub	sp, #8
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
 80182d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	2200      	movs	r2, #0
 80182d6:	70da      	strb	r2, [r3, #3]
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f04f 32ff 	mov.w	r2, #4294967295
 80182de:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80182e0:	6839      	ldr	r1, [r7, #0]
 80182e2:	6878      	ldr	r0, [r7, #4]
 80182e4:	f7ff f8d8 	bl	8017498 <move_window>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d001      	beq.n	80182f2 <check_fs+0x2a>
 80182ee:	2304      	movs	r3, #4
 80182f0:	e038      	b.n	8018364 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	3330      	adds	r3, #48	; 0x30
 80182f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fe fe1c 	bl	8016f38 <ld_word>
 8018300:	4603      	mov	r3, r0
 8018302:	461a      	mov	r2, r3
 8018304:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018308:	429a      	cmp	r2, r3
 801830a:	d001      	beq.n	8018310 <check_fs+0x48>
 801830c:	2303      	movs	r3, #3
 801830e:	e029      	b.n	8018364 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018316:	2be9      	cmp	r3, #233	; 0xe9
 8018318:	d009      	beq.n	801832e <check_fs+0x66>
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018320:	2beb      	cmp	r3, #235	; 0xeb
 8018322:	d11e      	bne.n	8018362 <check_fs+0x9a>
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801832a:	2b90      	cmp	r3, #144	; 0x90
 801832c:	d119      	bne.n	8018362 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	3330      	adds	r3, #48	; 0x30
 8018332:	3336      	adds	r3, #54	; 0x36
 8018334:	4618      	mov	r0, r3
 8018336:	f7fe fe17 	bl	8016f68 <ld_dword>
 801833a:	4603      	mov	r3, r0
 801833c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018340:	4a0a      	ldr	r2, [pc, #40]	; (801836c <check_fs+0xa4>)
 8018342:	4293      	cmp	r3, r2
 8018344:	d101      	bne.n	801834a <check_fs+0x82>
 8018346:	2300      	movs	r3, #0
 8018348:	e00c      	b.n	8018364 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	3330      	adds	r3, #48	; 0x30
 801834e:	3352      	adds	r3, #82	; 0x52
 8018350:	4618      	mov	r0, r3
 8018352:	f7fe fe09 	bl	8016f68 <ld_dword>
 8018356:	4603      	mov	r3, r0
 8018358:	4a05      	ldr	r2, [pc, #20]	; (8018370 <check_fs+0xa8>)
 801835a:	4293      	cmp	r3, r2
 801835c:	d101      	bne.n	8018362 <check_fs+0x9a>
 801835e:	2300      	movs	r3, #0
 8018360:	e000      	b.n	8018364 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018362:	2302      	movs	r3, #2
}
 8018364:	4618      	mov	r0, r3
 8018366:	3708      	adds	r7, #8
 8018368:	46bd      	mov	sp, r7
 801836a:	bd80      	pop	{r7, pc}
 801836c:	00544146 	.word	0x00544146
 8018370:	33544146 	.word	0x33544146

08018374 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8018374:	b580      	push	{r7, lr}
 8018376:	b096      	sub	sp, #88	; 0x58
 8018378:	af00      	add	r7, sp, #0
 801837a:	60f8      	str	r0, [r7, #12]
 801837c:	60b9      	str	r1, [r7, #8]
 801837e:	4613      	mov	r3, r2
 8018380:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	2200      	movs	r2, #0
 8018386:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8018388:	68f8      	ldr	r0, [r7, #12]
 801838a:	f7ff ff58 	bl	801823e <get_ldnumber>
 801838e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8018390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018392:	2b00      	cmp	r3, #0
 8018394:	da01      	bge.n	801839a <find_volume+0x26>
 8018396:	230b      	movs	r3, #11
 8018398:	e22d      	b.n	80187f6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801839a:	4aa1      	ldr	r2, [pc, #644]	; (8018620 <find_volume+0x2ac>)
 801839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801839e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80183a2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80183a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d101      	bne.n	80183ae <find_volume+0x3a>
 80183aa:	230c      	movs	r3, #12
 80183ac:	e223      	b.n	80187f6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80183ae:	68bb      	ldr	r3, [r7, #8]
 80183b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80183b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80183b4:	79fb      	ldrb	r3, [r7, #7]
 80183b6:	f023 0301 	bic.w	r3, r3, #1
 80183ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80183bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d01a      	beq.n	80183fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80183c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183c6:	785b      	ldrb	r3, [r3, #1]
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fe fd17 	bl	8016dfc <disk_status>
 80183ce:	4603      	mov	r3, r0
 80183d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80183d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80183d8:	f003 0301 	and.w	r3, r3, #1
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d10c      	bne.n	80183fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80183e0:	79fb      	ldrb	r3, [r7, #7]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d007      	beq.n	80183f6 <find_volume+0x82>
 80183e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80183ea:	f003 0304 	and.w	r3, r3, #4
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d001      	beq.n	80183f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80183f2:	230a      	movs	r3, #10
 80183f4:	e1ff      	b.n	80187f6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80183f6:	2300      	movs	r3, #0
 80183f8:	e1fd      	b.n	80187f6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80183fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183fc:	2200      	movs	r2, #0
 80183fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018402:	b2da      	uxtb	r2, r3
 8018404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018406:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801840a:	785b      	ldrb	r3, [r3, #1]
 801840c:	4618      	mov	r0, r3
 801840e:	f7fe fd0f 	bl	8016e30 <disk_initialize>
 8018412:	4603      	mov	r3, r0
 8018414:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018418:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801841c:	f003 0301 	and.w	r3, r3, #1
 8018420:	2b00      	cmp	r3, #0
 8018422:	d001      	beq.n	8018428 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018424:	2303      	movs	r3, #3
 8018426:	e1e6      	b.n	80187f6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018428:	79fb      	ldrb	r3, [r7, #7]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d007      	beq.n	801843e <find_volume+0xca>
 801842e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018432:	f003 0304 	and.w	r3, r3, #4
 8018436:	2b00      	cmp	r3, #0
 8018438:	d001      	beq.n	801843e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801843a:	230a      	movs	r3, #10
 801843c:	e1db      	b.n	80187f6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801843e:	2300      	movs	r3, #0
 8018440:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018444:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018446:	f7ff ff3f 	bl	80182c8 <check_fs>
 801844a:	4603      	mov	r3, r0
 801844c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018454:	2b02      	cmp	r3, #2
 8018456:	d149      	bne.n	80184ec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018458:	2300      	movs	r3, #0
 801845a:	643b      	str	r3, [r7, #64]	; 0x40
 801845c:	e01e      	b.n	801849c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018460:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018466:	011b      	lsls	r3, r3, #4
 8018468:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801846c:	4413      	add	r3, r2
 801846e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8018470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018472:	3304      	adds	r3, #4
 8018474:	781b      	ldrb	r3, [r3, #0]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d006      	beq.n	8018488 <find_volume+0x114>
 801847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801847c:	3308      	adds	r3, #8
 801847e:	4618      	mov	r0, r3
 8018480:	f7fe fd72 	bl	8016f68 <ld_dword>
 8018484:	4602      	mov	r2, r0
 8018486:	e000      	b.n	801848a <find_volume+0x116>
 8018488:	2200      	movs	r2, #0
 801848a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801848c:	009b      	lsls	r3, r3, #2
 801848e:	3358      	adds	r3, #88	; 0x58
 8018490:	443b      	add	r3, r7
 8018492:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018498:	3301      	adds	r3, #1
 801849a:	643b      	str	r3, [r7, #64]	; 0x40
 801849c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801849e:	2b03      	cmp	r3, #3
 80184a0:	d9dd      	bls.n	801845e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80184a2:	2300      	movs	r3, #0
 80184a4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80184a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d002      	beq.n	80184b2 <find_volume+0x13e>
 80184ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184ae:	3b01      	subs	r3, #1
 80184b0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80184b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	3358      	adds	r3, #88	; 0x58
 80184b8:	443b      	add	r3, r7
 80184ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80184be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80184c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d005      	beq.n	80184d2 <find_volume+0x15e>
 80184c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80184c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80184ca:	f7ff fefd 	bl	80182c8 <check_fs>
 80184ce:	4603      	mov	r3, r0
 80184d0:	e000      	b.n	80184d4 <find_volume+0x160>
 80184d2:	2303      	movs	r3, #3
 80184d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80184d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184dc:	2b01      	cmp	r3, #1
 80184de:	d905      	bls.n	80184ec <find_volume+0x178>
 80184e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184e2:	3301      	adds	r3, #1
 80184e4:	643b      	str	r3, [r7, #64]	; 0x40
 80184e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184e8:	2b03      	cmp	r3, #3
 80184ea:	d9e2      	bls.n	80184b2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80184ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184f0:	2b04      	cmp	r3, #4
 80184f2:	d101      	bne.n	80184f8 <find_volume+0x184>
 80184f4:	2301      	movs	r3, #1
 80184f6:	e17e      	b.n	80187f6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80184f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184fc:	2b01      	cmp	r3, #1
 80184fe:	d901      	bls.n	8018504 <find_volume+0x190>
 8018500:	230d      	movs	r3, #13
 8018502:	e178      	b.n	80187f6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018506:	3330      	adds	r3, #48	; 0x30
 8018508:	330b      	adds	r3, #11
 801850a:	4618      	mov	r0, r3
 801850c:	f7fe fd14 	bl	8016f38 <ld_word>
 8018510:	4603      	mov	r3, r0
 8018512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018516:	d001      	beq.n	801851c <find_volume+0x1a8>
 8018518:	230d      	movs	r3, #13
 801851a:	e16c      	b.n	80187f6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801851e:	3330      	adds	r3, #48	; 0x30
 8018520:	3316      	adds	r3, #22
 8018522:	4618      	mov	r0, r3
 8018524:	f7fe fd08 	bl	8016f38 <ld_word>
 8018528:	4603      	mov	r3, r0
 801852a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801852c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801852e:	2b00      	cmp	r3, #0
 8018530:	d106      	bne.n	8018540 <find_volume+0x1cc>
 8018532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018534:	3330      	adds	r3, #48	; 0x30
 8018536:	3324      	adds	r3, #36	; 0x24
 8018538:	4618      	mov	r0, r3
 801853a:	f7fe fd15 	bl	8016f68 <ld_dword>
 801853e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018544:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8018546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018548:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 801854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801854e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018552:	789b      	ldrb	r3, [r3, #2]
 8018554:	2b01      	cmp	r3, #1
 8018556:	d005      	beq.n	8018564 <find_volume+0x1f0>
 8018558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801855a:	789b      	ldrb	r3, [r3, #2]
 801855c:	2b02      	cmp	r3, #2
 801855e:	d001      	beq.n	8018564 <find_volume+0x1f0>
 8018560:	230d      	movs	r3, #13
 8018562:	e148      	b.n	80187f6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018566:	789b      	ldrb	r3, [r3, #2]
 8018568:	461a      	mov	r2, r3
 801856a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801856c:	fb02 f303 	mul.w	r3, r2, r3
 8018570:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8018572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8018578:	b29a      	uxth	r2, r3
 801857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801857c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018580:	895b      	ldrh	r3, [r3, #10]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d008      	beq.n	8018598 <find_volume+0x224>
 8018586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018588:	895b      	ldrh	r3, [r3, #10]
 801858a:	461a      	mov	r2, r3
 801858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801858e:	895b      	ldrh	r3, [r3, #10]
 8018590:	3b01      	subs	r3, #1
 8018592:	4013      	ands	r3, r2
 8018594:	2b00      	cmp	r3, #0
 8018596:	d001      	beq.n	801859c <find_volume+0x228>
 8018598:	230d      	movs	r3, #13
 801859a:	e12c      	b.n	80187f6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859e:	3330      	adds	r3, #48	; 0x30
 80185a0:	3311      	adds	r3, #17
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7fe fcc8 	bl	8016f38 <ld_word>
 80185a8:	4603      	mov	r3, r0
 80185aa:	461a      	mov	r2, r3
 80185ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80185b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b2:	891b      	ldrh	r3, [r3, #8]
 80185b4:	f003 030f 	and.w	r3, r3, #15
 80185b8:	b29b      	uxth	r3, r3
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d001      	beq.n	80185c2 <find_volume+0x24e>
 80185be:	230d      	movs	r3, #13
 80185c0:	e119      	b.n	80187f6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80185c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185c4:	3330      	adds	r3, #48	; 0x30
 80185c6:	3313      	adds	r3, #19
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7fe fcb5 	bl	8016f38 <ld_word>
 80185ce:	4603      	mov	r3, r0
 80185d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80185d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d106      	bne.n	80185e6 <find_volume+0x272>
 80185d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185da:	3330      	adds	r3, #48	; 0x30
 80185dc:	3320      	adds	r3, #32
 80185de:	4618      	mov	r0, r3
 80185e0:	f7fe fcc2 	bl	8016f68 <ld_dword>
 80185e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80185e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185e8:	3330      	adds	r3, #48	; 0x30
 80185ea:	330e      	adds	r3, #14
 80185ec:	4618      	mov	r0, r3
 80185ee:	f7fe fca3 	bl	8016f38 <ld_word>
 80185f2:	4603      	mov	r3, r0
 80185f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80185f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d101      	bne.n	8018600 <find_volume+0x28c>
 80185fc:	230d      	movs	r3, #13
 80185fe:	e0fa      	b.n	80187f6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018600:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018604:	4413      	add	r3, r2
 8018606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018608:	8912      	ldrh	r2, [r2, #8]
 801860a:	0912      	lsrs	r2, r2, #4
 801860c:	b292      	uxth	r2, r2
 801860e:	4413      	add	r3, r2
 8018610:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018612:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018616:	429a      	cmp	r2, r3
 8018618:	d204      	bcs.n	8018624 <find_volume+0x2b0>
 801861a:	230d      	movs	r3, #13
 801861c:	e0eb      	b.n	80187f6 <find_volume+0x482>
 801861e:	bf00      	nop
 8018620:	240011dc 	.word	0x240011dc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018628:	1ad3      	subs	r3, r2, r3
 801862a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801862c:	8952      	ldrh	r2, [r2, #10]
 801862e:	fbb3 f3f2 	udiv	r3, r3, r2
 8018632:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018636:	2b00      	cmp	r3, #0
 8018638:	d101      	bne.n	801863e <find_volume+0x2ca>
 801863a:	230d      	movs	r3, #13
 801863c:	e0db      	b.n	80187f6 <find_volume+0x482>
		fmt = FS_FAT32;
 801863e:	2303      	movs	r3, #3
 8018640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018646:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801864a:	4293      	cmp	r3, r2
 801864c:	d802      	bhi.n	8018654 <find_volume+0x2e0>
 801864e:	2302      	movs	r3, #2
 8018650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018656:	f640 72f5 	movw	r2, #4085	; 0xff5
 801865a:	4293      	cmp	r3, r2
 801865c:	d802      	bhi.n	8018664 <find_volume+0x2f0>
 801865e:	2301      	movs	r3, #1
 8018660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018666:	1c9a      	adds	r2, r3, #2
 8018668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801866a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801866e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8018670:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8018672:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018676:	441a      	add	r2, r3
 8018678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801867a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801867c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018680:	441a      	add	r2, r3
 8018682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018684:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8018686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801868a:	2b03      	cmp	r3, #3
 801868c:	d11e      	bne.n	80186cc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801868e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018690:	3330      	adds	r3, #48	; 0x30
 8018692:	332a      	adds	r3, #42	; 0x2a
 8018694:	4618      	mov	r0, r3
 8018696:	f7fe fc4f 	bl	8016f38 <ld_word>
 801869a:	4603      	mov	r3, r0
 801869c:	2b00      	cmp	r3, #0
 801869e:	d001      	beq.n	80186a4 <find_volume+0x330>
 80186a0:	230d      	movs	r3, #13
 80186a2:	e0a8      	b.n	80187f6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80186a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186a6:	891b      	ldrh	r3, [r3, #8]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d001      	beq.n	80186b0 <find_volume+0x33c>
 80186ac:	230d      	movs	r3, #13
 80186ae:	e0a2      	b.n	80187f6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80186b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b2:	3330      	adds	r3, #48	; 0x30
 80186b4:	332c      	adds	r3, #44	; 0x2c
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7fe fc56 	bl	8016f68 <ld_dword>
 80186bc:	4602      	mov	r2, r0
 80186be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186c0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80186c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186c4:	695b      	ldr	r3, [r3, #20]
 80186c6:	009b      	lsls	r3, r3, #2
 80186c8:	647b      	str	r3, [r7, #68]	; 0x44
 80186ca:	e01f      	b.n	801870c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80186cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ce:	891b      	ldrh	r3, [r3, #8]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d101      	bne.n	80186d8 <find_volume+0x364>
 80186d4:	230d      	movs	r3, #13
 80186d6:	e08e      	b.n	80187f6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80186d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186da:	6a1a      	ldr	r2, [r3, #32]
 80186dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80186de:	441a      	add	r2, r3
 80186e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186e2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80186e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80186e8:	2b02      	cmp	r3, #2
 80186ea:	d103      	bne.n	80186f4 <find_volume+0x380>
 80186ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ee:	695b      	ldr	r3, [r3, #20]
 80186f0:	005b      	lsls	r3, r3, #1
 80186f2:	e00a      	b.n	801870a <find_volume+0x396>
 80186f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186f6:	695a      	ldr	r2, [r3, #20]
 80186f8:	4613      	mov	r3, r2
 80186fa:	005b      	lsls	r3, r3, #1
 80186fc:	4413      	add	r3, r2
 80186fe:	085a      	lsrs	r2, r3, #1
 8018700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018702:	695b      	ldr	r3, [r3, #20]
 8018704:	f003 0301 	and.w	r3, r3, #1
 8018708:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801870a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801870c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801870e:	699a      	ldr	r2, [r3, #24]
 8018710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018712:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018716:	0a5b      	lsrs	r3, r3, #9
 8018718:	429a      	cmp	r2, r3
 801871a:	d201      	bcs.n	8018720 <find_volume+0x3ac>
 801871c:	230d      	movs	r3, #13
 801871e:	e06a      	b.n	80187f6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018722:	f04f 32ff 	mov.w	r2, #4294967295
 8018726:	611a      	str	r2, [r3, #16]
 8018728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801872a:	691a      	ldr	r2, [r3, #16]
 801872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801872e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8018730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018732:	2280      	movs	r2, #128	; 0x80
 8018734:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018736:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801873a:	2b03      	cmp	r3, #3
 801873c:	d149      	bne.n	80187d2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801873e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018740:	3330      	adds	r3, #48	; 0x30
 8018742:	3330      	adds	r3, #48	; 0x30
 8018744:	4618      	mov	r0, r3
 8018746:	f7fe fbf7 	bl	8016f38 <ld_word>
 801874a:	4603      	mov	r3, r0
 801874c:	2b01      	cmp	r3, #1
 801874e:	d140      	bne.n	80187d2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018752:	3301      	adds	r3, #1
 8018754:	4619      	mov	r1, r3
 8018756:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018758:	f7fe fe9e 	bl	8017498 <move_window>
 801875c:	4603      	mov	r3, r0
 801875e:	2b00      	cmp	r3, #0
 8018760:	d137      	bne.n	80187d2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8018762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018764:	2200      	movs	r2, #0
 8018766:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801876a:	3330      	adds	r3, #48	; 0x30
 801876c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8018770:	4618      	mov	r0, r3
 8018772:	f7fe fbe1 	bl	8016f38 <ld_word>
 8018776:	4603      	mov	r3, r0
 8018778:	461a      	mov	r2, r3
 801877a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801877e:	429a      	cmp	r2, r3
 8018780:	d127      	bne.n	80187d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018784:	3330      	adds	r3, #48	; 0x30
 8018786:	4618      	mov	r0, r3
 8018788:	f7fe fbee 	bl	8016f68 <ld_dword>
 801878c:	4603      	mov	r3, r0
 801878e:	4a1c      	ldr	r2, [pc, #112]	; (8018800 <find_volume+0x48c>)
 8018790:	4293      	cmp	r3, r2
 8018792:	d11e      	bne.n	80187d2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018796:	3330      	adds	r3, #48	; 0x30
 8018798:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801879c:	4618      	mov	r0, r3
 801879e:	f7fe fbe3 	bl	8016f68 <ld_dword>
 80187a2:	4603      	mov	r3, r0
 80187a4:	4a17      	ldr	r2, [pc, #92]	; (8018804 <find_volume+0x490>)
 80187a6:	4293      	cmp	r3, r2
 80187a8:	d113      	bne.n	80187d2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80187aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ac:	3330      	adds	r3, #48	; 0x30
 80187ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80187b2:	4618      	mov	r0, r3
 80187b4:	f7fe fbd8 	bl	8016f68 <ld_dword>
 80187b8:	4602      	mov	r2, r0
 80187ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187bc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80187be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187c0:	3330      	adds	r3, #48	; 0x30
 80187c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7fe fbce 	bl	8016f68 <ld_dword>
 80187cc:	4602      	mov	r2, r0
 80187ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187d0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80187d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80187d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80187da:	4b0b      	ldr	r3, [pc, #44]	; (8018808 <find_volume+0x494>)
 80187dc:	881b      	ldrh	r3, [r3, #0]
 80187de:	3301      	adds	r3, #1
 80187e0:	b29a      	uxth	r2, r3
 80187e2:	4b09      	ldr	r3, [pc, #36]	; (8018808 <find_volume+0x494>)
 80187e4:	801a      	strh	r2, [r3, #0]
 80187e6:	4b08      	ldr	r3, [pc, #32]	; (8018808 <find_volume+0x494>)
 80187e8:	881a      	ldrh	r2, [r3, #0]
 80187ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80187ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80187f0:	f7fe fdea 	bl	80173c8 <clear_lock>
#endif
	return FR_OK;
 80187f4:	2300      	movs	r3, #0
}
 80187f6:	4618      	mov	r0, r3
 80187f8:	3758      	adds	r7, #88	; 0x58
 80187fa:	46bd      	mov	sp, r7
 80187fc:	bd80      	pop	{r7, pc}
 80187fe:	bf00      	nop
 8018800:	41615252 	.word	0x41615252
 8018804:	61417272 	.word	0x61417272
 8018808:	240011e0 	.word	0x240011e0

0801880c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b084      	sub	sp, #16
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
 8018814:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018816:	2309      	movs	r3, #9
 8018818:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d01c      	beq.n	801885a <validate+0x4e>
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	2b00      	cmp	r3, #0
 8018826:	d018      	beq.n	801885a <validate+0x4e>
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	781b      	ldrb	r3, [r3, #0]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d013      	beq.n	801885a <validate+0x4e>
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	889a      	ldrh	r2, [r3, #4]
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	88db      	ldrh	r3, [r3, #6]
 801883c:	429a      	cmp	r2, r3
 801883e:	d10c      	bne.n	801885a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	785b      	ldrb	r3, [r3, #1]
 8018846:	4618      	mov	r0, r3
 8018848:	f7fe fad8 	bl	8016dfc <disk_status>
 801884c:	4603      	mov	r3, r0
 801884e:	f003 0301 	and.w	r3, r3, #1
 8018852:	2b00      	cmp	r3, #0
 8018854:	d101      	bne.n	801885a <validate+0x4e>
			res = FR_OK;
 8018856:	2300      	movs	r3, #0
 8018858:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801885a:	7bfb      	ldrb	r3, [r7, #15]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d102      	bne.n	8018866 <validate+0x5a>
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	e000      	b.n	8018868 <validate+0x5c>
 8018866:	2300      	movs	r3, #0
 8018868:	683a      	ldr	r2, [r7, #0]
 801886a:	6013      	str	r3, [r2, #0]
	return res;
 801886c:	7bfb      	ldrb	r3, [r7, #15]
}
 801886e:	4618      	mov	r0, r3
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
	...

08018878 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018878:	b580      	push	{r7, lr}
 801887a:	b088      	sub	sp, #32
 801887c:	af00      	add	r7, sp, #0
 801887e:	60f8      	str	r0, [r7, #12]
 8018880:	60b9      	str	r1, [r7, #8]
 8018882:	4613      	mov	r3, r2
 8018884:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801888a:	f107 0310 	add.w	r3, r7, #16
 801888e:	4618      	mov	r0, r3
 8018890:	f7ff fcd5 	bl	801823e <get_ldnumber>
 8018894:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8018896:	69fb      	ldr	r3, [r7, #28]
 8018898:	2b00      	cmp	r3, #0
 801889a:	da01      	bge.n	80188a0 <f_mount+0x28>
 801889c:	230b      	movs	r3, #11
 801889e:	e02b      	b.n	80188f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80188a0:	4a17      	ldr	r2, [pc, #92]	; (8018900 <f_mount+0x88>)
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80188a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80188aa:	69bb      	ldr	r3, [r7, #24]
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d005      	beq.n	80188bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80188b0:	69b8      	ldr	r0, [r7, #24]
 80188b2:	f7fe fd89 	bl	80173c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80188b6:	69bb      	ldr	r3, [r7, #24]
 80188b8:	2200      	movs	r2, #0
 80188ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	d002      	beq.n	80188c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80188c2:	68fb      	ldr	r3, [r7, #12]
 80188c4:	2200      	movs	r2, #0
 80188c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80188c8:	68fa      	ldr	r2, [r7, #12]
 80188ca:	490d      	ldr	r1, [pc, #52]	; (8018900 <f_mount+0x88>)
 80188cc:	69fb      	ldr	r3, [r7, #28]
 80188ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d002      	beq.n	80188de <f_mount+0x66>
 80188d8:	79fb      	ldrb	r3, [r7, #7]
 80188da:	2b01      	cmp	r3, #1
 80188dc:	d001      	beq.n	80188e2 <f_mount+0x6a>
 80188de:	2300      	movs	r3, #0
 80188e0:	e00a      	b.n	80188f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80188e2:	f107 010c 	add.w	r1, r7, #12
 80188e6:	f107 0308 	add.w	r3, r7, #8
 80188ea:	2200      	movs	r2, #0
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7ff fd41 	bl	8018374 <find_volume>
 80188f2:	4603      	mov	r3, r0
 80188f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80188f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80188f8:	4618      	mov	r0, r3
 80188fa:	3720      	adds	r7, #32
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd80      	pop	{r7, pc}
 8018900:	240011dc 	.word	0x240011dc

08018904 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b098      	sub	sp, #96	; 0x60
 8018908:	af00      	add	r7, sp, #0
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	60b9      	str	r1, [r7, #8]
 801890e:	4613      	mov	r3, r2
 8018910:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d101      	bne.n	801891c <f_open+0x18>
 8018918:	2309      	movs	r3, #9
 801891a:	e1ad      	b.n	8018c78 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801891c:	79fb      	ldrb	r3, [r7, #7]
 801891e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018922:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018924:	79fa      	ldrb	r2, [r7, #7]
 8018926:	f107 0110 	add.w	r1, r7, #16
 801892a:	f107 0308 	add.w	r3, r7, #8
 801892e:	4618      	mov	r0, r3
 8018930:	f7ff fd20 	bl	8018374 <find_volume>
 8018934:	4603      	mov	r3, r0
 8018936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801893a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801893e:	2b00      	cmp	r3, #0
 8018940:	f040 8191 	bne.w	8018c66 <f_open+0x362>
		dj.obj.fs = fs;
 8018944:	693b      	ldr	r3, [r7, #16]
 8018946:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018948:	68ba      	ldr	r2, [r7, #8]
 801894a:	f107 0314 	add.w	r3, r7, #20
 801894e:	4611      	mov	r1, r2
 8018950:	4618      	mov	r0, r3
 8018952:	f7ff fc03 	bl	801815c <follow_path>
 8018956:	4603      	mov	r3, r0
 8018958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801895c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018960:	2b00      	cmp	r3, #0
 8018962:	d11a      	bne.n	801899a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018964:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018968:	b25b      	sxtb	r3, r3
 801896a:	2b00      	cmp	r3, #0
 801896c:	da03      	bge.n	8018976 <f_open+0x72>
				res = FR_INVALID_NAME;
 801896e:	2306      	movs	r3, #6
 8018970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018974:	e011      	b.n	801899a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018976:	79fb      	ldrb	r3, [r7, #7]
 8018978:	f023 0301 	bic.w	r3, r3, #1
 801897c:	2b00      	cmp	r3, #0
 801897e:	bf14      	ite	ne
 8018980:	2301      	movne	r3, #1
 8018982:	2300      	moveq	r3, #0
 8018984:	b2db      	uxtb	r3, r3
 8018986:	461a      	mov	r2, r3
 8018988:	f107 0314 	add.w	r3, r7, #20
 801898c:	4611      	mov	r1, r2
 801898e:	4618      	mov	r0, r3
 8018990:	f7fe fbd2 	bl	8017138 <chk_lock>
 8018994:	4603      	mov	r3, r0
 8018996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801899a:	79fb      	ldrb	r3, [r7, #7]
 801899c:	f003 031c 	and.w	r3, r3, #28
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d07f      	beq.n	8018aa4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80189a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d017      	beq.n	80189dc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80189ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80189b0:	2b04      	cmp	r3, #4
 80189b2:	d10e      	bne.n	80189d2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80189b4:	f7fe fc1c 	bl	80171f0 <enq_lock>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d006      	beq.n	80189cc <f_open+0xc8>
 80189be:	f107 0314 	add.w	r3, r7, #20
 80189c2:	4618      	mov	r0, r3
 80189c4:	f7ff fb03 	bl	8017fce <dir_register>
 80189c8:	4603      	mov	r3, r0
 80189ca:	e000      	b.n	80189ce <f_open+0xca>
 80189cc:	2312      	movs	r3, #18
 80189ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80189d2:	79fb      	ldrb	r3, [r7, #7]
 80189d4:	f043 0308 	orr.w	r3, r3, #8
 80189d8:	71fb      	strb	r3, [r7, #7]
 80189da:	e010      	b.n	80189fe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80189dc:	7ebb      	ldrb	r3, [r7, #26]
 80189de:	f003 0311 	and.w	r3, r3, #17
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d003      	beq.n	80189ee <f_open+0xea>
					res = FR_DENIED;
 80189e6:	2307      	movs	r3, #7
 80189e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80189ec:	e007      	b.n	80189fe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80189ee:	79fb      	ldrb	r3, [r7, #7]
 80189f0:	f003 0304 	and.w	r3, r3, #4
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d002      	beq.n	80189fe <f_open+0xfa>
 80189f8:	2308      	movs	r3, #8
 80189fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80189fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d168      	bne.n	8018ad8 <f_open+0x1d4>
 8018a06:	79fb      	ldrb	r3, [r7, #7]
 8018a08:	f003 0308 	and.w	r3, r3, #8
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d063      	beq.n	8018ad8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018a10:	f7fc f834 	bl	8014a7c <get_fattime>
 8018a14:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a18:	330e      	adds	r3, #14
 8018a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7fe fae1 	bl	8016fe4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a24:	3316      	adds	r3, #22
 8018a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018a28:	4618      	mov	r0, r3
 8018a2a:	f7fe fadb 	bl	8016fe4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a30:	330b      	adds	r3, #11
 8018a32:	2220      	movs	r2, #32
 8018a34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018a3a:	4611      	mov	r1, r2
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f7ff fa32 	bl	8017ea6 <ld_clust>
 8018a42:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018a44:	693b      	ldr	r3, [r7, #16]
 8018a46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018a48:	2200      	movs	r2, #0
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7ff fa4a 	bl	8017ee4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a52:	331c      	adds	r3, #28
 8018a54:	2100      	movs	r1, #0
 8018a56:	4618      	mov	r0, r3
 8018a58:	f7fe fac4 	bl	8016fe4 <st_dword>
					fs->wflag = 1;
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	2201      	movs	r2, #1
 8018a60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d037      	beq.n	8018ad8 <f_open+0x1d4>
						dw = fs->winsect;
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a6c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018a6e:	f107 0314 	add.w	r3, r7, #20
 8018a72:	2200      	movs	r2, #0
 8018a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7fe ff5d 	bl	8017936 <remove_chain>
 8018a7c:	4603      	mov	r3, r0
 8018a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8018a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d126      	bne.n	8018ad8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018a8a:	693b      	ldr	r3, [r7, #16]
 8018a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f7fe fd02 	bl	8017498 <move_window>
 8018a94:	4603      	mov	r3, r0
 8018a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018a9a:	693b      	ldr	r3, [r7, #16]
 8018a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018a9e:	3a01      	subs	r2, #1
 8018aa0:	60da      	str	r2, [r3, #12]
 8018aa2:	e019      	b.n	8018ad8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d115      	bne.n	8018ad8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018aac:	7ebb      	ldrb	r3, [r7, #26]
 8018aae:	f003 0310 	and.w	r3, r3, #16
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d003      	beq.n	8018abe <f_open+0x1ba>
					res = FR_NO_FILE;
 8018ab6:	2304      	movs	r3, #4
 8018ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018abc:	e00c      	b.n	8018ad8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018abe:	79fb      	ldrb	r3, [r7, #7]
 8018ac0:	f003 0302 	and.w	r3, r3, #2
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d007      	beq.n	8018ad8 <f_open+0x1d4>
 8018ac8:	7ebb      	ldrb	r3, [r7, #26]
 8018aca:	f003 0301 	and.w	r3, r3, #1
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d002      	beq.n	8018ad8 <f_open+0x1d4>
						res = FR_DENIED;
 8018ad2:	2307      	movs	r3, #7
 8018ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d128      	bne.n	8018b32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018ae0:	79fb      	ldrb	r3, [r7, #7]
 8018ae2:	f003 0308 	and.w	r3, r3, #8
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d003      	beq.n	8018af2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018aea:	79fb      	ldrb	r3, [r7, #7]
 8018aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018af0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018af2:	693b      	ldr	r3, [r7, #16]
 8018af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018af6:	68fb      	ldr	r3, [r7, #12]
 8018af8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8018afa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018b00:	79fb      	ldrb	r3, [r7, #7]
 8018b02:	f023 0301 	bic.w	r3, r3, #1
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	bf14      	ite	ne
 8018b0a:	2301      	movne	r3, #1
 8018b0c:	2300      	moveq	r3, #0
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	461a      	mov	r2, r3
 8018b12:	f107 0314 	add.w	r3, r7, #20
 8018b16:	4611      	mov	r1, r2
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7fe fb8b 	bl	8017234 <inc_lock>
 8018b1e:	4602      	mov	r2, r0
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	691b      	ldr	r3, [r3, #16]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d102      	bne.n	8018b32 <f_open+0x22e>
 8018b2c:	2302      	movs	r3, #2
 8018b2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018b32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	f040 8095 	bne.w	8018c66 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018b3c:	693b      	ldr	r3, [r7, #16]
 8018b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018b40:	4611      	mov	r1, r2
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7ff f9af 	bl	8017ea6 <ld_clust>
 8018b48:	4602      	mov	r2, r0
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b50:	331c      	adds	r3, #28
 8018b52:	4618      	mov	r0, r3
 8018b54:	f7fe fa08 	bl	8016f68 <ld_dword>
 8018b58:	4602      	mov	r2, r0
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	2200      	movs	r2, #0
 8018b62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018b64:	693a      	ldr	r2, [r7, #16]
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018b6a:	693b      	ldr	r3, [r7, #16]
 8018b6c:	88da      	ldrh	r2, [r3, #6]
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	79fa      	ldrb	r2, [r7, #7]
 8018b76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	2200      	movs	r2, #0
 8018b7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018b7e:	68fb      	ldr	r3, [r7, #12]
 8018b80:	2200      	movs	r2, #0
 8018b82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	2200      	movs	r2, #0
 8018b88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	3330      	adds	r3, #48	; 0x30
 8018b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018b92:	2100      	movs	r1, #0
 8018b94:	4618      	mov	r0, r3
 8018b96:	f7fe fa72 	bl	801707e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018b9a:	79fb      	ldrb	r3, [r7, #7]
 8018b9c:	f003 0320 	and.w	r3, r3, #32
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d060      	beq.n	8018c66 <f_open+0x362>
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	68db      	ldr	r3, [r3, #12]
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d05c      	beq.n	8018c66 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	68da      	ldr	r2, [r3, #12]
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018bb4:	693b      	ldr	r3, [r7, #16]
 8018bb6:	895b      	ldrh	r3, [r3, #10]
 8018bb8:	025b      	lsls	r3, r3, #9
 8018bba:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	689b      	ldr	r3, [r3, #8]
 8018bc0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	68db      	ldr	r3, [r3, #12]
 8018bc6:	657b      	str	r3, [r7, #84]	; 0x54
 8018bc8:	e016      	b.n	8018bf8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7fe fd1d 	bl	801760e <get_fat>
 8018bd4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8018bd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d802      	bhi.n	8018be2 <f_open+0x2de>
 8018bdc:	2302      	movs	r3, #2
 8018bde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018be8:	d102      	bne.n	8018bf0 <f_open+0x2ec>
 8018bea:	2301      	movs	r3, #1
 8018bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018bf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018bf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018bf4:	1ad3      	subs	r3, r2, r3
 8018bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8018bf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d103      	bne.n	8018c08 <f_open+0x304>
 8018c00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018c04:	429a      	cmp	r2, r3
 8018c06:	d8e0      	bhi.n	8018bca <f_open+0x2c6>
				}
				fp->clust = clst;
 8018c08:	68fb      	ldr	r3, [r7, #12]
 8018c0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018c0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d127      	bne.n	8018c66 <f_open+0x362>
 8018c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d022      	beq.n	8018c66 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7fe fcd3 	bl	80175d0 <clust2sect>
 8018c2a:	6478      	str	r0, [r7, #68]	; 0x44
 8018c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d103      	bne.n	8018c3a <f_open+0x336>
						res = FR_INT_ERR;
 8018c32:	2302      	movs	r3, #2
 8018c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018c38:	e015      	b.n	8018c66 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018c3c:	0a5a      	lsrs	r2, r3, #9
 8018c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018c40:	441a      	add	r2, r3
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018c46:	693b      	ldr	r3, [r7, #16]
 8018c48:	7858      	ldrb	r0, [r3, #1]
 8018c4a:	68fb      	ldr	r3, [r7, #12]
 8018c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	6a1a      	ldr	r2, [r3, #32]
 8018c54:	2301      	movs	r3, #1
 8018c56:	f7fe f911 	bl	8016e7c <disk_read>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d002      	beq.n	8018c66 <f_open+0x362>
 8018c60:	2301      	movs	r3, #1
 8018c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d002      	beq.n	8018c74 <f_open+0x370>
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	2200      	movs	r2, #0
 8018c72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3760      	adds	r7, #96	; 0x60
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}

08018c80 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b08c      	sub	sp, #48	; 0x30
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	60f8      	str	r0, [r7, #12]
 8018c88:	60b9      	str	r1, [r7, #8]
 8018c8a:	607a      	str	r2, [r7, #4]
 8018c8c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018c92:	683b      	ldr	r3, [r7, #0]
 8018c94:	2200      	movs	r2, #0
 8018c96:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	f107 0210 	add.w	r2, r7, #16
 8018c9e:	4611      	mov	r1, r2
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ff fdb3 	bl	801880c <validate>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d107      	bne.n	8018cc4 <f_write+0x44>
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	7d5b      	ldrb	r3, [r3, #21]
 8018cb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d002      	beq.n	8018cca <f_write+0x4a>
 8018cc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018cc8:	e14b      	b.n	8018f62 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	7d1b      	ldrb	r3, [r3, #20]
 8018cce:	f003 0302 	and.w	r3, r3, #2
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d101      	bne.n	8018cda <f_write+0x5a>
 8018cd6:	2307      	movs	r3, #7
 8018cd8:	e143      	b.n	8018f62 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	699a      	ldr	r2, [r3, #24]
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	441a      	add	r2, r3
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	699b      	ldr	r3, [r3, #24]
 8018ce6:	429a      	cmp	r2, r3
 8018ce8:	f080 812d 	bcs.w	8018f46 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	699b      	ldr	r3, [r3, #24]
 8018cf0:	43db      	mvns	r3, r3
 8018cf2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018cf4:	e127      	b.n	8018f46 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	699b      	ldr	r3, [r3, #24]
 8018cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	f040 80e3 	bne.w	8018eca <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	699b      	ldr	r3, [r3, #24]
 8018d08:	0a5b      	lsrs	r3, r3, #9
 8018d0a:	693a      	ldr	r2, [r7, #16]
 8018d0c:	8952      	ldrh	r2, [r2, #10]
 8018d0e:	3a01      	subs	r2, #1
 8018d10:	4013      	ands	r3, r2
 8018d12:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018d14:	69bb      	ldr	r3, [r7, #24]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d143      	bne.n	8018da2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	699b      	ldr	r3, [r3, #24]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d10c      	bne.n	8018d3c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	689b      	ldr	r3, [r3, #8]
 8018d26:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d11a      	bne.n	8018d64 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	2100      	movs	r1, #0
 8018d32:	4618      	mov	r0, r3
 8018d34:	f7fe fe64 	bl	8017a00 <create_chain>
 8018d38:	62b8      	str	r0, [r7, #40]	; 0x28
 8018d3a:	e013      	b.n	8018d64 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d007      	beq.n	8018d54 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	699b      	ldr	r3, [r3, #24]
 8018d48:	4619      	mov	r1, r3
 8018d4a:	68f8      	ldr	r0, [r7, #12]
 8018d4c:	f7fe fef0 	bl	8017b30 <clmt_clust>
 8018d50:	62b8      	str	r0, [r7, #40]	; 0x28
 8018d52:	e007      	b.n	8018d64 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018d54:	68fa      	ldr	r2, [r7, #12]
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	69db      	ldr	r3, [r3, #28]
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	4610      	mov	r0, r2
 8018d5e:	f7fe fe4f 	bl	8017a00 <create_chain>
 8018d62:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	f000 80f2 	beq.w	8018f50 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d6e:	2b01      	cmp	r3, #1
 8018d70:	d104      	bne.n	8018d7c <f_write+0xfc>
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	2202      	movs	r2, #2
 8018d76:	755a      	strb	r2, [r3, #21]
 8018d78:	2302      	movs	r3, #2
 8018d7a:	e0f2      	b.n	8018f62 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d82:	d104      	bne.n	8018d8e <f_write+0x10e>
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	2201      	movs	r2, #1
 8018d88:	755a      	strb	r2, [r3, #21]
 8018d8a:	2301      	movs	r3, #1
 8018d8c:	e0e9      	b.n	8018f62 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018d92:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	689b      	ldr	r3, [r3, #8]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d102      	bne.n	8018da2 <f_write+0x122>
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018da0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	7d1b      	ldrb	r3, [r3, #20]
 8018da6:	b25b      	sxtb	r3, r3
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	da18      	bge.n	8018dde <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018dac:	693b      	ldr	r3, [r7, #16]
 8018dae:	7858      	ldrb	r0, [r3, #1]
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018db6:	68fb      	ldr	r3, [r7, #12]
 8018db8:	6a1a      	ldr	r2, [r3, #32]
 8018dba:	2301      	movs	r3, #1
 8018dbc:	f7fe f87e 	bl	8016ebc <disk_write>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d004      	beq.n	8018dd0 <f_write+0x150>
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	2201      	movs	r2, #1
 8018dca:	755a      	strb	r2, [r3, #21]
 8018dcc:	2301      	movs	r3, #1
 8018dce:	e0c8      	b.n	8018f62 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	7d1b      	ldrb	r3, [r3, #20]
 8018dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018dd8:	b2da      	uxtb	r2, r3
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018dde:	693a      	ldr	r2, [r7, #16]
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	69db      	ldr	r3, [r3, #28]
 8018de4:	4619      	mov	r1, r3
 8018de6:	4610      	mov	r0, r2
 8018de8:	f7fe fbf2 	bl	80175d0 <clust2sect>
 8018dec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018dee:	697b      	ldr	r3, [r7, #20]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d104      	bne.n	8018dfe <f_write+0x17e>
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2202      	movs	r2, #2
 8018df8:	755a      	strb	r2, [r3, #21]
 8018dfa:	2302      	movs	r3, #2
 8018dfc:	e0b1      	b.n	8018f62 <f_write+0x2e2>
			sect += csect;
 8018dfe:	697a      	ldr	r2, [r7, #20]
 8018e00:	69bb      	ldr	r3, [r7, #24]
 8018e02:	4413      	add	r3, r2
 8018e04:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	0a5b      	lsrs	r3, r3, #9
 8018e0a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018e0c:	6a3b      	ldr	r3, [r7, #32]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d03c      	beq.n	8018e8c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018e12:	69ba      	ldr	r2, [r7, #24]
 8018e14:	6a3b      	ldr	r3, [r7, #32]
 8018e16:	4413      	add	r3, r2
 8018e18:	693a      	ldr	r2, [r7, #16]
 8018e1a:	8952      	ldrh	r2, [r2, #10]
 8018e1c:	4293      	cmp	r3, r2
 8018e1e:	d905      	bls.n	8018e2c <f_write+0x1ac>
					cc = fs->csize - csect;
 8018e20:	693b      	ldr	r3, [r7, #16]
 8018e22:	895b      	ldrh	r3, [r3, #10]
 8018e24:	461a      	mov	r2, r3
 8018e26:	69bb      	ldr	r3, [r7, #24]
 8018e28:	1ad3      	subs	r3, r2, r3
 8018e2a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018e2c:	693b      	ldr	r3, [r7, #16]
 8018e2e:	7858      	ldrb	r0, [r3, #1]
 8018e30:	6a3b      	ldr	r3, [r7, #32]
 8018e32:	697a      	ldr	r2, [r7, #20]
 8018e34:	69f9      	ldr	r1, [r7, #28]
 8018e36:	f7fe f841 	bl	8016ebc <disk_write>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d004      	beq.n	8018e4a <f_write+0x1ca>
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	2201      	movs	r2, #1
 8018e44:	755a      	strb	r2, [r3, #21]
 8018e46:	2301      	movs	r3, #1
 8018e48:	e08b      	b.n	8018f62 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	6a1a      	ldr	r2, [r3, #32]
 8018e4e:	697b      	ldr	r3, [r7, #20]
 8018e50:	1ad3      	subs	r3, r2, r3
 8018e52:	6a3a      	ldr	r2, [r7, #32]
 8018e54:	429a      	cmp	r2, r3
 8018e56:	d915      	bls.n	8018e84 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	6a1a      	ldr	r2, [r3, #32]
 8018e62:	697b      	ldr	r3, [r7, #20]
 8018e64:	1ad3      	subs	r3, r2, r3
 8018e66:	025b      	lsls	r3, r3, #9
 8018e68:	69fa      	ldr	r2, [r7, #28]
 8018e6a:	4413      	add	r3, r2
 8018e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018e70:	4619      	mov	r1, r3
 8018e72:	f7fe f8e3 	bl	801703c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	7d1b      	ldrb	r3, [r3, #20]
 8018e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e7e:	b2da      	uxtb	r2, r3
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018e84:	6a3b      	ldr	r3, [r7, #32]
 8018e86:	025b      	lsls	r3, r3, #9
 8018e88:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018e8a:	e03f      	b.n	8018f0c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	6a1b      	ldr	r3, [r3, #32]
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	429a      	cmp	r2, r3
 8018e94:	d016      	beq.n	8018ec4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018e96:	68fb      	ldr	r3, [r7, #12]
 8018e98:	699a      	ldr	r2, [r3, #24]
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d210      	bcs.n	8018ec4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018ea2:	693b      	ldr	r3, [r7, #16]
 8018ea4:	7858      	ldrb	r0, [r3, #1]
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018eac:	2301      	movs	r3, #1
 8018eae:	697a      	ldr	r2, [r7, #20]
 8018eb0:	f7fd ffe4 	bl	8016e7c <disk_read>
 8018eb4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d004      	beq.n	8018ec4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018eba:	68fb      	ldr	r3, [r7, #12]
 8018ebc:	2201      	movs	r2, #1
 8018ebe:	755a      	strb	r2, [r3, #21]
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	e04e      	b.n	8018f62 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	697a      	ldr	r2, [r7, #20]
 8018ec8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	699b      	ldr	r3, [r3, #24]
 8018ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ed2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018ed6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	429a      	cmp	r2, r3
 8018ede:	d901      	bls.n	8018ee4 <f_write+0x264>
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	699b      	ldr	r3, [r3, #24]
 8018eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ef2:	4413      	add	r3, r2
 8018ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ef6:	69f9      	ldr	r1, [r7, #28]
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7fe f89f 	bl	801703c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	7d1b      	ldrb	r3, [r3, #20]
 8018f02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018f06:	b2da      	uxtb	r2, r3
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018f0c:	69fa      	ldr	r2, [r7, #28]
 8018f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f10:	4413      	add	r3, r2
 8018f12:	61fb      	str	r3, [r7, #28]
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	699a      	ldr	r2, [r3, #24]
 8018f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f1a:	441a      	add	r2, r3
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	619a      	str	r2, [r3, #24]
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	68da      	ldr	r2, [r3, #12]
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	699b      	ldr	r3, [r3, #24]
 8018f28:	429a      	cmp	r2, r3
 8018f2a:	bf38      	it	cc
 8018f2c:	461a      	movcc	r2, r3
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	60da      	str	r2, [r3, #12]
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	681a      	ldr	r2, [r3, #0]
 8018f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f38:	441a      	add	r2, r3
 8018f3a:	683b      	ldr	r3, [r7, #0]
 8018f3c:	601a      	str	r2, [r3, #0]
 8018f3e:	687a      	ldr	r2, [r7, #4]
 8018f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f42:	1ad3      	subs	r3, r2, r3
 8018f44:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	f47f aed4 	bne.w	8018cf6 <f_write+0x76>
 8018f4e:	e000      	b.n	8018f52 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018f50:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018f52:	68fb      	ldr	r3, [r7, #12]
 8018f54:	7d1b      	ldrb	r3, [r3, #20]
 8018f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f5a:	b2da      	uxtb	r2, r3
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018f60:	2300      	movs	r3, #0
}
 8018f62:	4618      	mov	r0, r3
 8018f64:	3730      	adds	r7, #48	; 0x30
 8018f66:	46bd      	mov	sp, r7
 8018f68:	bd80      	pop	{r7, pc}

08018f6a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018f6a:	b580      	push	{r7, lr}
 8018f6c:	b086      	sub	sp, #24
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f107 0208 	add.w	r2, r7, #8
 8018f78:	4611      	mov	r1, r2
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	f7ff fc46 	bl	801880c <validate>
 8018f80:	4603      	mov	r3, r0
 8018f82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018f84:	7dfb      	ldrb	r3, [r7, #23]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d168      	bne.n	801905c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	7d1b      	ldrb	r3, [r3, #20]
 8018f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d062      	beq.n	801905c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	7d1b      	ldrb	r3, [r3, #20]
 8018f9a:	b25b      	sxtb	r3, r3
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	da15      	bge.n	8018fcc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	7858      	ldrb	r0, [r3, #1]
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	6a1a      	ldr	r2, [r3, #32]
 8018fae:	2301      	movs	r3, #1
 8018fb0:	f7fd ff84 	bl	8016ebc <disk_write>
 8018fb4:	4603      	mov	r3, r0
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d001      	beq.n	8018fbe <f_sync+0x54>
 8018fba:	2301      	movs	r3, #1
 8018fbc:	e04f      	b.n	801905e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	7d1b      	ldrb	r3, [r3, #20]
 8018fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018fc6:	b2da      	uxtb	r2, r3
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8018fcc:	f7fb fd56 	bl	8014a7c <get_fattime>
 8018fd0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018fd2:	68ba      	ldr	r2, [r7, #8]
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd8:	4619      	mov	r1, r3
 8018fda:	4610      	mov	r0, r2
 8018fdc:	f7fe fa5c 	bl	8017498 <move_window>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018fe4:	7dfb      	ldrb	r3, [r7, #23]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d138      	bne.n	801905c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	330b      	adds	r3, #11
 8018ff4:	781a      	ldrb	r2, [r3, #0]
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	330b      	adds	r3, #11
 8018ffa:	f042 0220 	orr.w	r2, r2, #32
 8018ffe:	b2d2      	uxtb	r2, r2
 8019000:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	6818      	ldr	r0, [r3, #0]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	689b      	ldr	r3, [r3, #8]
 801900a:	461a      	mov	r2, r3
 801900c:	68f9      	ldr	r1, [r7, #12]
 801900e:	f7fe ff69 	bl	8017ee4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	f103 021c 	add.w	r2, r3, #28
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	68db      	ldr	r3, [r3, #12]
 801901c:	4619      	mov	r1, r3
 801901e:	4610      	mov	r0, r2
 8019020:	f7fd ffe0 	bl	8016fe4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019024:	68fb      	ldr	r3, [r7, #12]
 8019026:	3316      	adds	r3, #22
 8019028:	6939      	ldr	r1, [r7, #16]
 801902a:	4618      	mov	r0, r3
 801902c:	f7fd ffda 	bl	8016fe4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	3312      	adds	r3, #18
 8019034:	2100      	movs	r1, #0
 8019036:	4618      	mov	r0, r3
 8019038:	f7fd ffb9 	bl	8016fae <st_word>
					fs->wflag = 1;
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	2201      	movs	r2, #1
 8019040:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019042:	68bb      	ldr	r3, [r7, #8]
 8019044:	4618      	mov	r0, r3
 8019046:	f7fe fa55 	bl	80174f4 <sync_fs>
 801904a:	4603      	mov	r3, r0
 801904c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	7d1b      	ldrb	r3, [r3, #20]
 8019052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019056:	b2da      	uxtb	r2, r3
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801905c:	7dfb      	ldrb	r3, [r7, #23]
}
 801905e:	4618      	mov	r0, r3
 8019060:	3718      	adds	r7, #24
 8019062:	46bd      	mov	sp, r7
 8019064:	bd80      	pop	{r7, pc}

08019066 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019066:	b580      	push	{r7, lr}
 8019068:	b084      	sub	sp, #16
 801906a:	af00      	add	r7, sp, #0
 801906c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f7ff ff7b 	bl	8018f6a <f_sync>
 8019074:	4603      	mov	r3, r0
 8019076:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019078:	7bfb      	ldrb	r3, [r7, #15]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d118      	bne.n	80190b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	f107 0208 	add.w	r2, r7, #8
 8019084:	4611      	mov	r1, r2
 8019086:	4618      	mov	r0, r3
 8019088:	f7ff fbc0 	bl	801880c <validate>
 801908c:	4603      	mov	r3, r0
 801908e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019090:	7bfb      	ldrb	r3, [r7, #15]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d10c      	bne.n	80190b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	691b      	ldr	r3, [r3, #16]
 801909a:	4618      	mov	r0, r3
 801909c:	f7fe f958 	bl	8017350 <dec_lock>
 80190a0:	4603      	mov	r3, r0
 80190a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80190a4:	7bfb      	ldrb	r3, [r7, #15]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d102      	bne.n	80190b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	2200      	movs	r2, #0
 80190ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80190b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80190b2:	4618      	mov	r0, r3
 80190b4:	3710      	adds	r7, #16
 80190b6:	46bd      	mov	sp, r7
 80190b8:	bd80      	pop	{r7, pc}
	...

080190bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80190bc:	b480      	push	{r7}
 80190be:	b087      	sub	sp, #28
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	60b9      	str	r1, [r7, #8]
 80190c6:	4613      	mov	r3, r2
 80190c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80190ca:	2301      	movs	r3, #1
 80190cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80190ce:	2300      	movs	r3, #0
 80190d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80190d2:	4b1f      	ldr	r3, [pc, #124]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 80190d4:	7a5b      	ldrb	r3, [r3, #9]
 80190d6:	b2db      	uxtb	r3, r3
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d131      	bne.n	8019140 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80190dc:	4b1c      	ldr	r3, [pc, #112]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 80190de:	7a5b      	ldrb	r3, [r3, #9]
 80190e0:	b2db      	uxtb	r3, r3
 80190e2:	461a      	mov	r2, r3
 80190e4:	4b1a      	ldr	r3, [pc, #104]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 80190e6:	2100      	movs	r1, #0
 80190e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80190ea:	4b19      	ldr	r3, [pc, #100]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 80190ec:	7a5b      	ldrb	r3, [r3, #9]
 80190ee:	b2db      	uxtb	r3, r3
 80190f0:	4a17      	ldr	r2, [pc, #92]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 80190f2:	009b      	lsls	r3, r3, #2
 80190f4:	4413      	add	r3, r2
 80190f6:	68fa      	ldr	r2, [r7, #12]
 80190f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80190fa:	4b15      	ldr	r3, [pc, #84]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 80190fc:	7a5b      	ldrb	r3, [r3, #9]
 80190fe:	b2db      	uxtb	r3, r3
 8019100:	461a      	mov	r2, r3
 8019102:	4b13      	ldr	r3, [pc, #76]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 8019104:	4413      	add	r3, r2
 8019106:	79fa      	ldrb	r2, [r7, #7]
 8019108:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801910a:	4b11      	ldr	r3, [pc, #68]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 801910c:	7a5b      	ldrb	r3, [r3, #9]
 801910e:	b2db      	uxtb	r3, r3
 8019110:	1c5a      	adds	r2, r3, #1
 8019112:	b2d1      	uxtb	r1, r2
 8019114:	4a0e      	ldr	r2, [pc, #56]	; (8019150 <FATFS_LinkDriverEx+0x94>)
 8019116:	7251      	strb	r1, [r2, #9]
 8019118:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801911a:	7dbb      	ldrb	r3, [r7, #22]
 801911c:	3330      	adds	r3, #48	; 0x30
 801911e:	b2da      	uxtb	r2, r3
 8019120:	68bb      	ldr	r3, [r7, #8]
 8019122:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8019124:	68bb      	ldr	r3, [r7, #8]
 8019126:	3301      	adds	r3, #1
 8019128:	223a      	movs	r2, #58	; 0x3a
 801912a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801912c:	68bb      	ldr	r3, [r7, #8]
 801912e:	3302      	adds	r3, #2
 8019130:	222f      	movs	r2, #47	; 0x2f
 8019132:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8019134:	68bb      	ldr	r3, [r7, #8]
 8019136:	3303      	adds	r3, #3
 8019138:	2200      	movs	r2, #0
 801913a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801913c:	2300      	movs	r3, #0
 801913e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019140:	7dfb      	ldrb	r3, [r7, #23]
}
 8019142:	4618      	mov	r0, r3
 8019144:	371c      	adds	r7, #28
 8019146:	46bd      	mov	sp, r7
 8019148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914c:	4770      	bx	lr
 801914e:	bf00      	nop
 8019150:	24001204 	.word	0x24001204

08019154 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019154:	b580      	push	{r7, lr}
 8019156:	b082      	sub	sp, #8
 8019158:	af00      	add	r7, sp, #0
 801915a:	6078      	str	r0, [r7, #4]
 801915c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801915e:	2200      	movs	r2, #0
 8019160:	6839      	ldr	r1, [r7, #0]
 8019162:	6878      	ldr	r0, [r7, #4]
 8019164:	f7ff ffaa 	bl	80190bc <FATFS_LinkDriverEx>
 8019168:	4603      	mov	r3, r0
}
 801916a:	4618      	mov	r0, r3
 801916c:	3708      	adds	r7, #8
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}
	...

08019174 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019178:	2200      	movs	r2, #0
 801917a:	4913      	ldr	r1, [pc, #76]	; (80191c8 <MX_USB_DEVICE_Init+0x54>)
 801917c:	4813      	ldr	r0, [pc, #76]	; (80191cc <MX_USB_DEVICE_Init+0x58>)
 801917e:	f7fc fb4b 	bl	8015818 <USBD_Init>
 8019182:	4603      	mov	r3, r0
 8019184:	2b00      	cmp	r3, #0
 8019186:	d001      	beq.n	801918c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019188:	f7e9 fec4 	bl	8002f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801918c:	4910      	ldr	r1, [pc, #64]	; (80191d0 <MX_USB_DEVICE_Init+0x5c>)
 801918e:	480f      	ldr	r0, [pc, #60]	; (80191cc <MX_USB_DEVICE_Init+0x58>)
 8019190:	f7fc fb72 	bl	8015878 <USBD_RegisterClass>
 8019194:	4603      	mov	r3, r0
 8019196:	2b00      	cmp	r3, #0
 8019198:	d001      	beq.n	801919e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801919a:	f7e9 febb 	bl	8002f14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801919e:	490d      	ldr	r1, [pc, #52]	; (80191d4 <MX_USB_DEVICE_Init+0x60>)
 80191a0:	480a      	ldr	r0, [pc, #40]	; (80191cc <MX_USB_DEVICE_Init+0x58>)
 80191a2:	f7fc faa9 	bl	80156f8 <USBD_CDC_RegisterInterface>
 80191a6:	4603      	mov	r3, r0
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d001      	beq.n	80191b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80191ac:	f7e9 feb2 	bl	8002f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80191b0:	4806      	ldr	r0, [pc, #24]	; (80191cc <MX_USB_DEVICE_Init+0x58>)
 80191b2:	f7fc fb97 	bl	80158e4 <USBD_Start>
 80191b6:	4603      	mov	r3, r0
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d001      	beq.n	80191c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80191bc:	f7e9 feaa 	bl	8002f14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80191c0:	f7f0 fd8c 	bl	8009cdc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80191c4:	bf00      	nop
 80191c6:	bd80      	pop	{r7, pc}
 80191c8:	240000b0 	.word	0x240000b0
 80191cc:	24001210 	.word	0x24001210
 80191d0:	2400001c 	.word	0x2400001c
 80191d4:	2400009c 	.word	0x2400009c

080191d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80191dc:	2200      	movs	r2, #0
 80191de:	4905      	ldr	r1, [pc, #20]	; (80191f4 <CDC_Init_FS+0x1c>)
 80191e0:	4805      	ldr	r0, [pc, #20]	; (80191f8 <CDC_Init_FS+0x20>)
 80191e2:	f7fc faa3 	bl	801572c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80191e6:	4905      	ldr	r1, [pc, #20]	; (80191fc <CDC_Init_FS+0x24>)
 80191e8:	4803      	ldr	r0, [pc, #12]	; (80191f8 <CDC_Init_FS+0x20>)
 80191ea:	f7fc fac1 	bl	8015770 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80191ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	bd80      	pop	{r7, pc}
 80191f4:	24001cec 	.word	0x24001cec
 80191f8:	24001210 	.word	0x24001210
 80191fc:	240014ec 	.word	0x240014ec

08019200 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019200:	b480      	push	{r7}
 8019202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019204:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019206:	4618      	mov	r0, r3
 8019208:	46bd      	mov	sp, r7
 801920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801920e:	4770      	bx	lr

08019210 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019210:	b480      	push	{r7}
 8019212:	b083      	sub	sp, #12
 8019214:	af00      	add	r7, sp, #0
 8019216:	4603      	mov	r3, r0
 8019218:	6039      	str	r1, [r7, #0]
 801921a:	71fb      	strb	r3, [r7, #7]
 801921c:	4613      	mov	r3, r2
 801921e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019220:	79fb      	ldrb	r3, [r7, #7]
 8019222:	2b23      	cmp	r3, #35	; 0x23
 8019224:	d84a      	bhi.n	80192bc <CDC_Control_FS+0xac>
 8019226:	a201      	add	r2, pc, #4	; (adr r2, 801922c <CDC_Control_FS+0x1c>)
 8019228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801922c:	080192bd 	.word	0x080192bd
 8019230:	080192bd 	.word	0x080192bd
 8019234:	080192bd 	.word	0x080192bd
 8019238:	080192bd 	.word	0x080192bd
 801923c:	080192bd 	.word	0x080192bd
 8019240:	080192bd 	.word	0x080192bd
 8019244:	080192bd 	.word	0x080192bd
 8019248:	080192bd 	.word	0x080192bd
 801924c:	080192bd 	.word	0x080192bd
 8019250:	080192bd 	.word	0x080192bd
 8019254:	080192bd 	.word	0x080192bd
 8019258:	080192bd 	.word	0x080192bd
 801925c:	080192bd 	.word	0x080192bd
 8019260:	080192bd 	.word	0x080192bd
 8019264:	080192bd 	.word	0x080192bd
 8019268:	080192bd 	.word	0x080192bd
 801926c:	080192bd 	.word	0x080192bd
 8019270:	080192bd 	.word	0x080192bd
 8019274:	080192bd 	.word	0x080192bd
 8019278:	080192bd 	.word	0x080192bd
 801927c:	080192bd 	.word	0x080192bd
 8019280:	080192bd 	.word	0x080192bd
 8019284:	080192bd 	.word	0x080192bd
 8019288:	080192bd 	.word	0x080192bd
 801928c:	080192bd 	.word	0x080192bd
 8019290:	080192bd 	.word	0x080192bd
 8019294:	080192bd 	.word	0x080192bd
 8019298:	080192bd 	.word	0x080192bd
 801929c:	080192bd 	.word	0x080192bd
 80192a0:	080192bd 	.word	0x080192bd
 80192a4:	080192bd 	.word	0x080192bd
 80192a8:	080192bd 	.word	0x080192bd
 80192ac:	080192bd 	.word	0x080192bd
 80192b0:	080192bd 	.word	0x080192bd
 80192b4:	080192bd 	.word	0x080192bd
 80192b8:	080192bd 	.word	0x080192bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80192bc:	bf00      	nop
  }

  return (USBD_OK);
 80192be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80192c0:	4618      	mov	r0, r3
 80192c2:	370c      	adds	r7, #12
 80192c4:	46bd      	mov	sp, r7
 80192c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ca:	4770      	bx	lr

080192cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b082      	sub	sp, #8
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
 80192d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80192d6:	6879      	ldr	r1, [r7, #4]
 80192d8:	4805      	ldr	r0, [pc, #20]	; (80192f0 <CDC_Receive_FS+0x24>)
 80192da:	f7fc fa49 	bl	8015770 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80192de:	4804      	ldr	r0, [pc, #16]	; (80192f0 <CDC_Receive_FS+0x24>)
 80192e0:	f7fc fa64 	bl	80157ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80192e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80192e6:	4618      	mov	r0, r3
 80192e8:	3708      	adds	r7, #8
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	24001210 	.word	0x24001210

080192f4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80192f4:	b480      	push	{r7}
 80192f6:	b087      	sub	sp, #28
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	4613      	mov	r3, r2
 8019300:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019302:	2300      	movs	r3, #0
 8019304:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801930a:	4618      	mov	r0, r3
 801930c:	371c      	adds	r7, #28
 801930e:	46bd      	mov	sp, r7
 8019310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019314:	4770      	bx	lr
	...

08019318 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019318:	b480      	push	{r7}
 801931a:	b083      	sub	sp, #12
 801931c:	af00      	add	r7, sp, #0
 801931e:	4603      	mov	r3, r0
 8019320:	6039      	str	r1, [r7, #0]
 8019322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019324:	683b      	ldr	r3, [r7, #0]
 8019326:	2212      	movs	r2, #18
 8019328:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801932a:	4b03      	ldr	r3, [pc, #12]	; (8019338 <USBD_FS_DeviceDescriptor+0x20>)
}
 801932c:	4618      	mov	r0, r3
 801932e:	370c      	adds	r7, #12
 8019330:	46bd      	mov	sp, r7
 8019332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019336:	4770      	bx	lr
 8019338:	240000cc 	.word	0x240000cc

0801933c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801933c:	b480      	push	{r7}
 801933e:	b083      	sub	sp, #12
 8019340:	af00      	add	r7, sp, #0
 8019342:	4603      	mov	r3, r0
 8019344:	6039      	str	r1, [r7, #0]
 8019346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	2204      	movs	r2, #4
 801934c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801934e:	4b03      	ldr	r3, [pc, #12]	; (801935c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019350:	4618      	mov	r0, r3
 8019352:	370c      	adds	r7, #12
 8019354:	46bd      	mov	sp, r7
 8019356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935a:	4770      	bx	lr
 801935c:	240000e0 	.word	0x240000e0

08019360 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b082      	sub	sp, #8
 8019364:	af00      	add	r7, sp, #0
 8019366:	4603      	mov	r3, r0
 8019368:	6039      	str	r1, [r7, #0]
 801936a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801936c:	79fb      	ldrb	r3, [r7, #7]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d105      	bne.n	801937e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019372:	683a      	ldr	r2, [r7, #0]
 8019374:	4907      	ldr	r1, [pc, #28]	; (8019394 <USBD_FS_ProductStrDescriptor+0x34>)
 8019376:	4808      	ldr	r0, [pc, #32]	; (8019398 <USBD_FS_ProductStrDescriptor+0x38>)
 8019378:	f7fd fc60 	bl	8016c3c <USBD_GetString>
 801937c:	e004      	b.n	8019388 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801937e:	683a      	ldr	r2, [r7, #0]
 8019380:	4904      	ldr	r1, [pc, #16]	; (8019394 <USBD_FS_ProductStrDescriptor+0x34>)
 8019382:	4805      	ldr	r0, [pc, #20]	; (8019398 <USBD_FS_ProductStrDescriptor+0x38>)
 8019384:	f7fd fc5a 	bl	8016c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019388:	4b02      	ldr	r3, [pc, #8]	; (8019394 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801938a:	4618      	mov	r0, r3
 801938c:	3708      	adds	r7, #8
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}
 8019392:	bf00      	nop
 8019394:	240024ec 	.word	0x240024ec
 8019398:	0801d380 	.word	0x0801d380

0801939c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	4603      	mov	r3, r0
 80193a4:	6039      	str	r1, [r7, #0]
 80193a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80193a8:	683a      	ldr	r2, [r7, #0]
 80193aa:	4904      	ldr	r1, [pc, #16]	; (80193bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80193ac:	4804      	ldr	r0, [pc, #16]	; (80193c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80193ae:	f7fd fc45 	bl	8016c3c <USBD_GetString>
  return USBD_StrDesc;
 80193b2:	4b02      	ldr	r3, [pc, #8]	; (80193bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80193b4:	4618      	mov	r0, r3
 80193b6:	3708      	adds	r7, #8
 80193b8:	46bd      	mov	sp, r7
 80193ba:	bd80      	pop	{r7, pc}
 80193bc:	240024ec 	.word	0x240024ec
 80193c0:	0801d398 	.word	0x0801d398

080193c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	4603      	mov	r3, r0
 80193cc:	6039      	str	r1, [r7, #0]
 80193ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80193d0:	683b      	ldr	r3, [r7, #0]
 80193d2:	221a      	movs	r2, #26
 80193d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80193d6:	f000 f843 	bl	8019460 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80193da:	4b02      	ldr	r3, [pc, #8]	; (80193e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80193dc:	4618      	mov	r0, r3
 80193de:	3708      	adds	r7, #8
 80193e0:	46bd      	mov	sp, r7
 80193e2:	bd80      	pop	{r7, pc}
 80193e4:	240000e4 	.word	0x240000e4

080193e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193e8:	b580      	push	{r7, lr}
 80193ea:	b082      	sub	sp, #8
 80193ec:	af00      	add	r7, sp, #0
 80193ee:	4603      	mov	r3, r0
 80193f0:	6039      	str	r1, [r7, #0]
 80193f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80193f4:	79fb      	ldrb	r3, [r7, #7]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d105      	bne.n	8019406 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80193fa:	683a      	ldr	r2, [r7, #0]
 80193fc:	4907      	ldr	r1, [pc, #28]	; (801941c <USBD_FS_ConfigStrDescriptor+0x34>)
 80193fe:	4808      	ldr	r0, [pc, #32]	; (8019420 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019400:	f7fd fc1c 	bl	8016c3c <USBD_GetString>
 8019404:	e004      	b.n	8019410 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019406:	683a      	ldr	r2, [r7, #0]
 8019408:	4904      	ldr	r1, [pc, #16]	; (801941c <USBD_FS_ConfigStrDescriptor+0x34>)
 801940a:	4805      	ldr	r0, [pc, #20]	; (8019420 <USBD_FS_ConfigStrDescriptor+0x38>)
 801940c:	f7fd fc16 	bl	8016c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019410:	4b02      	ldr	r3, [pc, #8]	; (801941c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019412:	4618      	mov	r0, r3
 8019414:	3708      	adds	r7, #8
 8019416:	46bd      	mov	sp, r7
 8019418:	bd80      	pop	{r7, pc}
 801941a:	bf00      	nop
 801941c:	240024ec 	.word	0x240024ec
 8019420:	0801d3ac 	.word	0x0801d3ac

08019424 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b082      	sub	sp, #8
 8019428:	af00      	add	r7, sp, #0
 801942a:	4603      	mov	r3, r0
 801942c:	6039      	str	r1, [r7, #0]
 801942e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019430:	79fb      	ldrb	r3, [r7, #7]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d105      	bne.n	8019442 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019436:	683a      	ldr	r2, [r7, #0]
 8019438:	4907      	ldr	r1, [pc, #28]	; (8019458 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801943a:	4808      	ldr	r0, [pc, #32]	; (801945c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801943c:	f7fd fbfe 	bl	8016c3c <USBD_GetString>
 8019440:	e004      	b.n	801944c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019442:	683a      	ldr	r2, [r7, #0]
 8019444:	4904      	ldr	r1, [pc, #16]	; (8019458 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019446:	4805      	ldr	r0, [pc, #20]	; (801945c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019448:	f7fd fbf8 	bl	8016c3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801944c:	4b02      	ldr	r3, [pc, #8]	; (8019458 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801944e:	4618      	mov	r0, r3
 8019450:	3708      	adds	r7, #8
 8019452:	46bd      	mov	sp, r7
 8019454:	bd80      	pop	{r7, pc}
 8019456:	bf00      	nop
 8019458:	240024ec 	.word	0x240024ec
 801945c:	0801d3b8 	.word	0x0801d3b8

08019460 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b084      	sub	sp, #16
 8019464:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019466:	4b0f      	ldr	r3, [pc, #60]	; (80194a4 <Get_SerialNum+0x44>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801946c:	4b0e      	ldr	r3, [pc, #56]	; (80194a8 <Get_SerialNum+0x48>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019472:	4b0e      	ldr	r3, [pc, #56]	; (80194ac <Get_SerialNum+0x4c>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019478:	68fa      	ldr	r2, [r7, #12]
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	4413      	add	r3, r2
 801947e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d009      	beq.n	801949a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019486:	2208      	movs	r2, #8
 8019488:	4909      	ldr	r1, [pc, #36]	; (80194b0 <Get_SerialNum+0x50>)
 801948a:	68f8      	ldr	r0, [r7, #12]
 801948c:	f000 f814 	bl	80194b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019490:	2204      	movs	r2, #4
 8019492:	4908      	ldr	r1, [pc, #32]	; (80194b4 <Get_SerialNum+0x54>)
 8019494:	68b8      	ldr	r0, [r7, #8]
 8019496:	f000 f80f 	bl	80194b8 <IntToUnicode>
  }
}
 801949a:	bf00      	nop
 801949c:	3710      	adds	r7, #16
 801949e:	46bd      	mov	sp, r7
 80194a0:	bd80      	pop	{r7, pc}
 80194a2:	bf00      	nop
 80194a4:	1ff1e800 	.word	0x1ff1e800
 80194a8:	1ff1e804 	.word	0x1ff1e804
 80194ac:	1ff1e808 	.word	0x1ff1e808
 80194b0:	240000e6 	.word	0x240000e6
 80194b4:	240000f6 	.word	0x240000f6

080194b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b087      	sub	sp, #28
 80194bc:	af00      	add	r7, sp, #0
 80194be:	60f8      	str	r0, [r7, #12]
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	4613      	mov	r3, r2
 80194c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80194c6:	2300      	movs	r3, #0
 80194c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80194ca:	2300      	movs	r3, #0
 80194cc:	75fb      	strb	r3, [r7, #23]
 80194ce:	e027      	b.n	8019520 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	0f1b      	lsrs	r3, r3, #28
 80194d4:	2b09      	cmp	r3, #9
 80194d6:	d80b      	bhi.n	80194f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	0f1b      	lsrs	r3, r3, #28
 80194dc:	b2da      	uxtb	r2, r3
 80194de:	7dfb      	ldrb	r3, [r7, #23]
 80194e0:	005b      	lsls	r3, r3, #1
 80194e2:	4619      	mov	r1, r3
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	440b      	add	r3, r1
 80194e8:	3230      	adds	r2, #48	; 0x30
 80194ea:	b2d2      	uxtb	r2, r2
 80194ec:	701a      	strb	r2, [r3, #0]
 80194ee:	e00a      	b.n	8019506 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80194f0:	68fb      	ldr	r3, [r7, #12]
 80194f2:	0f1b      	lsrs	r3, r3, #28
 80194f4:	b2da      	uxtb	r2, r3
 80194f6:	7dfb      	ldrb	r3, [r7, #23]
 80194f8:	005b      	lsls	r3, r3, #1
 80194fa:	4619      	mov	r1, r3
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	440b      	add	r3, r1
 8019500:	3237      	adds	r2, #55	; 0x37
 8019502:	b2d2      	uxtb	r2, r2
 8019504:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	011b      	lsls	r3, r3, #4
 801950a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801950c:	7dfb      	ldrb	r3, [r7, #23]
 801950e:	005b      	lsls	r3, r3, #1
 8019510:	3301      	adds	r3, #1
 8019512:	68ba      	ldr	r2, [r7, #8]
 8019514:	4413      	add	r3, r2
 8019516:	2200      	movs	r2, #0
 8019518:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801951a:	7dfb      	ldrb	r3, [r7, #23]
 801951c:	3301      	adds	r3, #1
 801951e:	75fb      	strb	r3, [r7, #23]
 8019520:	7dfa      	ldrb	r2, [r7, #23]
 8019522:	79fb      	ldrb	r3, [r7, #7]
 8019524:	429a      	cmp	r2, r3
 8019526:	d3d3      	bcc.n	80194d0 <IntToUnicode+0x18>
  }
}
 8019528:	bf00      	nop
 801952a:	bf00      	nop
 801952c:	371c      	adds	r7, #28
 801952e:	46bd      	mov	sp, r7
 8019530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019534:	4770      	bx	lr
	...

08019538 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019538:	b580      	push	{r7, lr}
 801953a:	b0b8      	sub	sp, #224	; 0xe0
 801953c:	af00      	add	r7, sp, #0
 801953e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019540:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8019544:	2200      	movs	r2, #0
 8019546:	601a      	str	r2, [r3, #0]
 8019548:	605a      	str	r2, [r3, #4]
 801954a:	609a      	str	r2, [r3, #8]
 801954c:	60da      	str	r2, [r3, #12]
 801954e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019550:	f107 0310 	add.w	r3, r7, #16
 8019554:	22bc      	movs	r2, #188	; 0xbc
 8019556:	2100      	movs	r1, #0
 8019558:	4618      	mov	r0, r3
 801955a:	f000 fb5b 	bl	8019c14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	4a32      	ldr	r2, [pc, #200]	; (801962c <HAL_PCD_MspInit+0xf4>)
 8019564:	4293      	cmp	r3, r2
 8019566:	d15d      	bne.n	8019624 <HAL_PCD_MspInit+0xec>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019568:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801956c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 4;
 801956e:	2304      	movs	r3, #4
 8019570:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 60;
 8019572:	233c      	movs	r3, #60	; 0x3c
 8019574:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8019576:	2302      	movs	r3, #2
 8019578:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 801957a:	2304      	movs	r3, #4
 801957c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801957e:	2302      	movs	r3, #2
 8019580:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8019582:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019586:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8019588:	2300      	movs	r3, #0
 801958a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801958c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019590:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8019594:	f107 0310 	add.w	r3, r7, #16
 8019598:	4618      	mov	r0, r3
 801959a:	f7f1 fb69 	bl	800ac70 <HAL_RCCEx_PeriphCLKConfig>
 801959e:	4603      	mov	r3, r0
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d001      	beq.n	80195a8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80195a4:	f7e9 fcb6 	bl	8002f14 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80195a8:	f7f0 fb98 	bl	8009cdc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80195ac:	4b20      	ldr	r3, [pc, #128]	; (8019630 <HAL_PCD_MspInit+0xf8>)
 80195ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80195b2:	4a1f      	ldr	r2, [pc, #124]	; (8019630 <HAL_PCD_MspInit+0xf8>)
 80195b4:	f043 0301 	orr.w	r3, r3, #1
 80195b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80195bc:	4b1c      	ldr	r3, [pc, #112]	; (8019630 <HAL_PCD_MspInit+0xf8>)
 80195be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80195c2:	f003 0301 	and.w	r3, r3, #1
 80195c6:	60fb      	str	r3, [r7, #12]
 80195c8:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80195ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80195ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80195d2:	2302      	movs	r3, #2
 80195d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80195d8:	2300      	movs	r3, #0
 80195da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80195de:	2300      	movs	r3, #0
 80195e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80195e4:	230a      	movs	r3, #10
 80195e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80195ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80195ee:	4619      	mov	r1, r3
 80195f0:	4810      	ldr	r0, [pc, #64]	; (8019634 <HAL_PCD_MspInit+0xfc>)
 80195f2:	f7ee f837 	bl	8007664 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80195f6:	4b0e      	ldr	r3, [pc, #56]	; (8019630 <HAL_PCD_MspInit+0xf8>)
 80195f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80195fc:	4a0c      	ldr	r2, [pc, #48]	; (8019630 <HAL_PCD_MspInit+0xf8>)
 80195fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8019602:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8019606:	4b0a      	ldr	r3, [pc, #40]	; (8019630 <HAL_PCD_MspInit+0xf8>)
 8019608:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801960c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019610:	60bb      	str	r3, [r7, #8]
 8019612:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019614:	2200      	movs	r2, #0
 8019616:	2100      	movs	r1, #0
 8019618:	2065      	movs	r0, #101	; 0x65
 801961a:	f7ec f92e 	bl	800587a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801961e:	2065      	movs	r0, #101	; 0x65
 8019620:	f7ec f945 	bl	80058ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019624:	bf00      	nop
 8019626:	37e0      	adds	r7, #224	; 0xe0
 8019628:	46bd      	mov	sp, r7
 801962a:	bd80      	pop	{r7, pc}
 801962c:	40080000 	.word	0x40080000
 8019630:	58024400 	.word	0x58024400
 8019634:	58020000 	.word	0x58020000

08019638 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b082      	sub	sp, #8
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801964c:	4619      	mov	r1, r3
 801964e:	4610      	mov	r0, r2
 8019650:	f7fc f995 	bl	801597e <USBD_LL_SetupStage>
}
 8019654:	bf00      	nop
 8019656:	3708      	adds	r7, #8
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}

0801965c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b082      	sub	sp, #8
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
 8019664:	460b      	mov	r3, r1
 8019666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801966e:	78fa      	ldrb	r2, [r7, #3]
 8019670:	6879      	ldr	r1, [r7, #4]
 8019672:	4613      	mov	r3, r2
 8019674:	00db      	lsls	r3, r3, #3
 8019676:	4413      	add	r3, r2
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	440b      	add	r3, r1
 801967c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019680:	681a      	ldr	r2, [r3, #0]
 8019682:	78fb      	ldrb	r3, [r7, #3]
 8019684:	4619      	mov	r1, r3
 8019686:	f7fc f9cf 	bl	8015a28 <USBD_LL_DataOutStage>
}
 801968a:	bf00      	nop
 801968c:	3708      	adds	r7, #8
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}

08019692 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019692:	b580      	push	{r7, lr}
 8019694:	b082      	sub	sp, #8
 8019696:	af00      	add	r7, sp, #0
 8019698:	6078      	str	r0, [r7, #4]
 801969a:	460b      	mov	r3, r1
 801969c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80196a4:	78fa      	ldrb	r2, [r7, #3]
 80196a6:	6879      	ldr	r1, [r7, #4]
 80196a8:	4613      	mov	r3, r2
 80196aa:	00db      	lsls	r3, r3, #3
 80196ac:	4413      	add	r3, r2
 80196ae:	009b      	lsls	r3, r3, #2
 80196b0:	440b      	add	r3, r1
 80196b2:	334c      	adds	r3, #76	; 0x4c
 80196b4:	681a      	ldr	r2, [r3, #0]
 80196b6:	78fb      	ldrb	r3, [r7, #3]
 80196b8:	4619      	mov	r1, r3
 80196ba:	f7fc fa68 	bl	8015b8e <USBD_LL_DataInStage>
}
 80196be:	bf00      	nop
 80196c0:	3708      	adds	r7, #8
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}

080196c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196c6:	b580      	push	{r7, lr}
 80196c8:	b082      	sub	sp, #8
 80196ca:	af00      	add	r7, sp, #0
 80196cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80196d4:	4618      	mov	r0, r3
 80196d6:	f7fc fb9c 	bl	8015e12 <USBD_LL_SOF>
}
 80196da:	bf00      	nop
 80196dc:	3708      	adds	r7, #8
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}

080196e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196e2:	b580      	push	{r7, lr}
 80196e4:	b084      	sub	sp, #16
 80196e6:	af00      	add	r7, sp, #0
 80196e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80196ea:	2301      	movs	r3, #1
 80196ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	68db      	ldr	r3, [r3, #12]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d102      	bne.n	80196fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80196f6:	2300      	movs	r3, #0
 80196f8:	73fb      	strb	r3, [r7, #15]
 80196fa:	e008      	b.n	801970e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	68db      	ldr	r3, [r3, #12]
 8019700:	2b02      	cmp	r3, #2
 8019702:	d102      	bne.n	801970a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019704:	2301      	movs	r3, #1
 8019706:	73fb      	strb	r3, [r7, #15]
 8019708:	e001      	b.n	801970e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801970a:	f7e9 fc03 	bl	8002f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019714:	7bfa      	ldrb	r2, [r7, #15]
 8019716:	4611      	mov	r1, r2
 8019718:	4618      	mov	r0, r3
 801971a:	f7fc fb3c 	bl	8015d96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019724:	4618      	mov	r0, r3
 8019726:	f7fc fae4 	bl	8015cf2 <USBD_LL_Reset>
}
 801972a:	bf00      	nop
 801972c:	3710      	adds	r7, #16
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}
	...

08019734 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b082      	sub	sp, #8
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019742:	4618      	mov	r0, r3
 8019744:	f7fc fb37 	bl	8015db6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	687a      	ldr	r2, [r7, #4]
 8019754:	6812      	ldr	r2, [r2, #0]
 8019756:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801975a:	f043 0301 	orr.w	r3, r3, #1
 801975e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	6a1b      	ldr	r3, [r3, #32]
 8019764:	2b00      	cmp	r3, #0
 8019766:	d005      	beq.n	8019774 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019768:	4b04      	ldr	r3, [pc, #16]	; (801977c <HAL_PCD_SuspendCallback+0x48>)
 801976a:	691b      	ldr	r3, [r3, #16]
 801976c:	4a03      	ldr	r2, [pc, #12]	; (801977c <HAL_PCD_SuspendCallback+0x48>)
 801976e:	f043 0306 	orr.w	r3, r3, #6
 8019772:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019774:	bf00      	nop
 8019776:	3708      	adds	r7, #8
 8019778:	46bd      	mov	sp, r7
 801977a:	bd80      	pop	{r7, pc}
 801977c:	e000ed00 	.word	0xe000ed00

08019780 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801978e:	4618      	mov	r0, r3
 8019790:	f7fc fb27 	bl	8015de2 <USBD_LL_Resume>
}
 8019794:	bf00      	nop
 8019796:	3708      	adds	r7, #8
 8019798:	46bd      	mov	sp, r7
 801979a:	bd80      	pop	{r7, pc}

0801979c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801979c:	b580      	push	{r7, lr}
 801979e:	b082      	sub	sp, #8
 80197a0:	af00      	add	r7, sp, #0
 80197a2:	6078      	str	r0, [r7, #4]
 80197a4:	460b      	mov	r3, r1
 80197a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197ae:	78fa      	ldrb	r2, [r7, #3]
 80197b0:	4611      	mov	r1, r2
 80197b2:	4618      	mov	r0, r3
 80197b4:	f7fc fb7f 	bl	8015eb6 <USBD_LL_IsoOUTIncomplete>
}
 80197b8:	bf00      	nop
 80197ba:	3708      	adds	r7, #8
 80197bc:	46bd      	mov	sp, r7
 80197be:	bd80      	pop	{r7, pc}

080197c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b082      	sub	sp, #8
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
 80197c8:	460b      	mov	r3, r1
 80197ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197d2:	78fa      	ldrb	r2, [r7, #3]
 80197d4:	4611      	mov	r1, r2
 80197d6:	4618      	mov	r0, r3
 80197d8:	f7fc fb3b 	bl	8015e52 <USBD_LL_IsoINIncomplete>
}
 80197dc:	bf00      	nop
 80197de:	3708      	adds	r7, #8
 80197e0:	46bd      	mov	sp, r7
 80197e2:	bd80      	pop	{r7, pc}

080197e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7fc fb91 	bl	8015f1a <USBD_LL_DevConnected>
}
 80197f8:	bf00      	nop
 80197fa:	3708      	adds	r7, #8
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}

08019800 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b082      	sub	sp, #8
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801980e:	4618      	mov	r0, r3
 8019810:	f7fc fb8e 	bl	8015f30 <USBD_LL_DevDisconnected>
}
 8019814:	bf00      	nop
 8019816:	3708      	adds	r7, #8
 8019818:	46bd      	mov	sp, r7
 801981a:	bd80      	pop	{r7, pc}

0801981c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b082      	sub	sp, #8
 8019820:	af00      	add	r7, sp, #0
 8019822:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	781b      	ldrb	r3, [r3, #0]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d13e      	bne.n	80198aa <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801982c:	4a21      	ldr	r2, [pc, #132]	; (80198b4 <USBD_LL_Init+0x98>)
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	4a1f      	ldr	r2, [pc, #124]	; (80198b4 <USBD_LL_Init+0x98>)
 8019838:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801983c:	4b1d      	ldr	r3, [pc, #116]	; (80198b4 <USBD_LL_Init+0x98>)
 801983e:	4a1e      	ldr	r2, [pc, #120]	; (80198b8 <USBD_LL_Init+0x9c>)
 8019840:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8019842:	4b1c      	ldr	r3, [pc, #112]	; (80198b4 <USBD_LL_Init+0x98>)
 8019844:	2209      	movs	r2, #9
 8019846:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019848:	4b1a      	ldr	r3, [pc, #104]	; (80198b4 <USBD_LL_Init+0x98>)
 801984a:	2202      	movs	r2, #2
 801984c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801984e:	4b19      	ldr	r3, [pc, #100]	; (80198b4 <USBD_LL_Init+0x98>)
 8019850:	2200      	movs	r2, #0
 8019852:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019854:	4b17      	ldr	r3, [pc, #92]	; (80198b4 <USBD_LL_Init+0x98>)
 8019856:	2202      	movs	r2, #2
 8019858:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801985a:	4b16      	ldr	r3, [pc, #88]	; (80198b4 <USBD_LL_Init+0x98>)
 801985c:	2200      	movs	r2, #0
 801985e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019860:	4b14      	ldr	r3, [pc, #80]	; (80198b4 <USBD_LL_Init+0x98>)
 8019862:	2200      	movs	r2, #0
 8019864:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019866:	4b13      	ldr	r3, [pc, #76]	; (80198b4 <USBD_LL_Init+0x98>)
 8019868:	2200      	movs	r2, #0
 801986a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801986c:	4b11      	ldr	r3, [pc, #68]	; (80198b4 <USBD_LL_Init+0x98>)
 801986e:	2200      	movs	r2, #0
 8019870:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019872:	4b10      	ldr	r3, [pc, #64]	; (80198b4 <USBD_LL_Init+0x98>)
 8019874:	2200      	movs	r2, #0
 8019876:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019878:	4b0e      	ldr	r3, [pc, #56]	; (80198b4 <USBD_LL_Init+0x98>)
 801987a:	2200      	movs	r2, #0
 801987c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801987e:	480d      	ldr	r0, [pc, #52]	; (80198b4 <USBD_LL_Init+0x98>)
 8019880:	f7ee ff0c 	bl	800869c <HAL_PCD_Init>
 8019884:	4603      	mov	r3, r0
 8019886:	2b00      	cmp	r3, #0
 8019888:	d001      	beq.n	801988e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801988a:	f7e9 fb43 	bl	8002f14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801988e:	2180      	movs	r1, #128	; 0x80
 8019890:	4808      	ldr	r0, [pc, #32]	; (80198b4 <USBD_LL_Init+0x98>)
 8019892:	f7f0 f998 	bl	8009bc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019896:	2240      	movs	r2, #64	; 0x40
 8019898:	2100      	movs	r1, #0
 801989a:	4806      	ldr	r0, [pc, #24]	; (80198b4 <USBD_LL_Init+0x98>)
 801989c:	f7f0 f94c 	bl	8009b38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80198a0:	2280      	movs	r2, #128	; 0x80
 80198a2:	2101      	movs	r1, #1
 80198a4:	4803      	ldr	r0, [pc, #12]	; (80198b4 <USBD_LL_Init+0x98>)
 80198a6:	f7f0 f947 	bl	8009b38 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 80198aa:	2300      	movs	r3, #0
}
 80198ac:	4618      	mov	r0, r3
 80198ae:	3708      	adds	r7, #8
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}
 80198b4:	240026ec 	.word	0x240026ec
 80198b8:	40080000 	.word	0x40080000

080198bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b084      	sub	sp, #16
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198c4:	2300      	movs	r3, #0
 80198c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198c8:	2300      	movs	r3, #0
 80198ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7ef f806 	bl	80088e4 <HAL_PCD_Start>
 80198d8:	4603      	mov	r3, r0
 80198da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198dc:	7bfb      	ldrb	r3, [r7, #15]
 80198de:	4618      	mov	r0, r3
 80198e0:	f000 f942 	bl	8019b68 <USBD_Get_USB_Status>
 80198e4:	4603      	mov	r3, r0
 80198e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80198e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	3710      	adds	r7, #16
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bd80      	pop	{r7, pc}

080198f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80198f2:	b580      	push	{r7, lr}
 80198f4:	b084      	sub	sp, #16
 80198f6:	af00      	add	r7, sp, #0
 80198f8:	6078      	str	r0, [r7, #4]
 80198fa:	4608      	mov	r0, r1
 80198fc:	4611      	mov	r1, r2
 80198fe:	461a      	mov	r2, r3
 8019900:	4603      	mov	r3, r0
 8019902:	70fb      	strb	r3, [r7, #3]
 8019904:	460b      	mov	r3, r1
 8019906:	70bb      	strb	r3, [r7, #2]
 8019908:	4613      	mov	r3, r2
 801990a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801990c:	2300      	movs	r3, #0
 801990e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019910:	2300      	movs	r3, #0
 8019912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801991a:	78bb      	ldrb	r3, [r7, #2]
 801991c:	883a      	ldrh	r2, [r7, #0]
 801991e:	78f9      	ldrb	r1, [r7, #3]
 8019920:	f7ef fd04 	bl	800932c <HAL_PCD_EP_Open>
 8019924:	4603      	mov	r3, r0
 8019926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019928:	7bfb      	ldrb	r3, [r7, #15]
 801992a:	4618      	mov	r0, r3
 801992c:	f000 f91c 	bl	8019b68 <USBD_Get_USB_Status>
 8019930:	4603      	mov	r3, r0
 8019932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019934:	7bbb      	ldrb	r3, [r7, #14]
}
 8019936:	4618      	mov	r0, r3
 8019938:	3710      	adds	r7, #16
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}

0801993e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801993e:	b580      	push	{r7, lr}
 8019940:	b084      	sub	sp, #16
 8019942:	af00      	add	r7, sp, #0
 8019944:	6078      	str	r0, [r7, #4]
 8019946:	460b      	mov	r3, r1
 8019948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801994a:	2300      	movs	r3, #0
 801994c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801994e:	2300      	movs	r3, #0
 8019950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019958:	78fa      	ldrb	r2, [r7, #3]
 801995a:	4611      	mov	r1, r2
 801995c:	4618      	mov	r0, r3
 801995e:	f7ef fd4d 	bl	80093fc <HAL_PCD_EP_Close>
 8019962:	4603      	mov	r3, r0
 8019964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019966:	7bfb      	ldrb	r3, [r7, #15]
 8019968:	4618      	mov	r0, r3
 801996a:	f000 f8fd 	bl	8019b68 <USBD_Get_USB_Status>
 801996e:	4603      	mov	r3, r0
 8019970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019972:	7bbb      	ldrb	r3, [r7, #14]
}
 8019974:	4618      	mov	r0, r3
 8019976:	3710      	adds	r7, #16
 8019978:	46bd      	mov	sp, r7
 801997a:	bd80      	pop	{r7, pc}

0801997c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801997c:	b580      	push	{r7, lr}
 801997e:	b084      	sub	sp, #16
 8019980:	af00      	add	r7, sp, #0
 8019982:	6078      	str	r0, [r7, #4]
 8019984:	460b      	mov	r3, r1
 8019986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019988:	2300      	movs	r3, #0
 801998a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801998c:	2300      	movs	r3, #0
 801998e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019996:	78fa      	ldrb	r2, [r7, #3]
 8019998:	4611      	mov	r1, r2
 801999a:	4618      	mov	r0, r3
 801999c:	f7ef fe25 	bl	80095ea <HAL_PCD_EP_SetStall>
 80199a0:	4603      	mov	r3, r0
 80199a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199a4:	7bfb      	ldrb	r3, [r7, #15]
 80199a6:	4618      	mov	r0, r3
 80199a8:	f000 f8de 	bl	8019b68 <USBD_Get_USB_Status>
 80199ac:	4603      	mov	r3, r0
 80199ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80199b2:	4618      	mov	r0, r3
 80199b4:	3710      	adds	r7, #16
 80199b6:	46bd      	mov	sp, r7
 80199b8:	bd80      	pop	{r7, pc}

080199ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199ba:	b580      	push	{r7, lr}
 80199bc:	b084      	sub	sp, #16
 80199be:	af00      	add	r7, sp, #0
 80199c0:	6078      	str	r0, [r7, #4]
 80199c2:	460b      	mov	r3, r1
 80199c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199c6:	2300      	movs	r3, #0
 80199c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199ca:	2300      	movs	r3, #0
 80199cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80199d4:	78fa      	ldrb	r2, [r7, #3]
 80199d6:	4611      	mov	r1, r2
 80199d8:	4618      	mov	r0, r3
 80199da:	f7ef fe6a 	bl	80096b2 <HAL_PCD_EP_ClrStall>
 80199de:	4603      	mov	r3, r0
 80199e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199e2:	7bfb      	ldrb	r3, [r7, #15]
 80199e4:	4618      	mov	r0, r3
 80199e6:	f000 f8bf 	bl	8019b68 <USBD_Get_USB_Status>
 80199ea:	4603      	mov	r3, r0
 80199ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80199f0:	4618      	mov	r0, r3
 80199f2:	3710      	adds	r7, #16
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bd80      	pop	{r7, pc}

080199f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199f8:	b480      	push	{r7}
 80199fa:	b085      	sub	sp, #20
 80199fc:	af00      	add	r7, sp, #0
 80199fe:	6078      	str	r0, [r7, #4]
 8019a00:	460b      	mov	r3, r1
 8019a02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019a0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	da0b      	bge.n	8019a2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019a14:	78fb      	ldrb	r3, [r7, #3]
 8019a16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a1a:	68f9      	ldr	r1, [r7, #12]
 8019a1c:	4613      	mov	r3, r2
 8019a1e:	00db      	lsls	r3, r3, #3
 8019a20:	4413      	add	r3, r2
 8019a22:	009b      	lsls	r3, r3, #2
 8019a24:	440b      	add	r3, r1
 8019a26:	333e      	adds	r3, #62	; 0x3e
 8019a28:	781b      	ldrb	r3, [r3, #0]
 8019a2a:	e00b      	b.n	8019a44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019a2c:	78fb      	ldrb	r3, [r7, #3]
 8019a2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019a32:	68f9      	ldr	r1, [r7, #12]
 8019a34:	4613      	mov	r3, r2
 8019a36:	00db      	lsls	r3, r3, #3
 8019a38:	4413      	add	r3, r2
 8019a3a:	009b      	lsls	r3, r3, #2
 8019a3c:	440b      	add	r3, r1
 8019a3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8019a42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a44:	4618      	mov	r0, r3
 8019a46:	3714      	adds	r7, #20
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4e:	4770      	bx	lr

08019a50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b084      	sub	sp, #16
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
 8019a58:	460b      	mov	r3, r1
 8019a5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a5c:	2300      	movs	r3, #0
 8019a5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a60:	2300      	movs	r3, #0
 8019a62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019a6a:	78fa      	ldrb	r2, [r7, #3]
 8019a6c:	4611      	mov	r1, r2
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f7ef fc37 	bl	80092e2 <HAL_PCD_SetAddress>
 8019a74:	4603      	mov	r3, r0
 8019a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a78:	7bfb      	ldrb	r3, [r7, #15]
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	f000 f874 	bl	8019b68 <USBD_Get_USB_Status>
 8019a80:	4603      	mov	r3, r0
 8019a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a86:	4618      	mov	r0, r3
 8019a88:	3710      	adds	r7, #16
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bd80      	pop	{r7, pc}

08019a8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019a8e:	b580      	push	{r7, lr}
 8019a90:	b086      	sub	sp, #24
 8019a92:	af00      	add	r7, sp, #0
 8019a94:	60f8      	str	r0, [r7, #12]
 8019a96:	607a      	str	r2, [r7, #4]
 8019a98:	603b      	str	r3, [r7, #0]
 8019a9a:	460b      	mov	r3, r1
 8019a9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019aa2:	2300      	movs	r3, #0
 8019aa4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019aac:	7af9      	ldrb	r1, [r7, #11]
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	687a      	ldr	r2, [r7, #4]
 8019ab2:	f7ef fd50 	bl	8009556 <HAL_PCD_EP_Transmit>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019aba:	7dfb      	ldrb	r3, [r7, #23]
 8019abc:	4618      	mov	r0, r3
 8019abe:	f000 f853 	bl	8019b68 <USBD_Get_USB_Status>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019ac6:	7dbb      	ldrb	r3, [r7, #22]
}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	3718      	adds	r7, #24
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}

08019ad0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b086      	sub	sp, #24
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	607a      	str	r2, [r7, #4]
 8019ada:	603b      	str	r3, [r7, #0]
 8019adc:	460b      	mov	r3, r1
 8019ade:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8019aee:	7af9      	ldrb	r1, [r7, #11]
 8019af0:	683b      	ldr	r3, [r7, #0]
 8019af2:	687a      	ldr	r2, [r7, #4]
 8019af4:	f7ef fccc 	bl	8009490 <HAL_PCD_EP_Receive>
 8019af8:	4603      	mov	r3, r0
 8019afa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019afc:	7dfb      	ldrb	r3, [r7, #23]
 8019afe:	4618      	mov	r0, r3
 8019b00:	f000 f832 	bl	8019b68 <USBD_Get_USB_Status>
 8019b04:	4603      	mov	r3, r0
 8019b06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b08:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	3718      	adds	r7, #24
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}

08019b12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b12:	b580      	push	{r7, lr}
 8019b14:	b082      	sub	sp, #8
 8019b16:	af00      	add	r7, sp, #0
 8019b18:	6078      	str	r0, [r7, #4]
 8019b1a:	460b      	mov	r3, r1
 8019b1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019b24:	78fa      	ldrb	r2, [r7, #3]
 8019b26:	4611      	mov	r1, r2
 8019b28:	4618      	mov	r0, r3
 8019b2a:	f7ef fcfc 	bl	8009526 <HAL_PCD_EP_GetRxCount>
 8019b2e:	4603      	mov	r3, r0
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	3708      	adds	r7, #8
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd80      	pop	{r7, pc}

08019b38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019b38:	b480      	push	{r7}
 8019b3a:	b083      	sub	sp, #12
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019b40:	4b03      	ldr	r3, [pc, #12]	; (8019b50 <USBD_static_malloc+0x18>)
}
 8019b42:	4618      	mov	r0, r3
 8019b44:	370c      	adds	r7, #12
 8019b46:	46bd      	mov	sp, r7
 8019b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4c:	4770      	bx	lr
 8019b4e:	bf00      	nop
 8019b50:	24002bf8 	.word	0x24002bf8

08019b54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019b54:	b480      	push	{r7}
 8019b56:	b083      	sub	sp, #12
 8019b58:	af00      	add	r7, sp, #0
 8019b5a:	6078      	str	r0, [r7, #4]

}
 8019b5c:	bf00      	nop
 8019b5e:	370c      	adds	r7, #12
 8019b60:	46bd      	mov	sp, r7
 8019b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b66:	4770      	bx	lr

08019b68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019b68:	b480      	push	{r7}
 8019b6a:	b085      	sub	sp, #20
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	4603      	mov	r3, r0
 8019b70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b72:	2300      	movs	r3, #0
 8019b74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019b76:	79fb      	ldrb	r3, [r7, #7]
 8019b78:	2b03      	cmp	r3, #3
 8019b7a:	d817      	bhi.n	8019bac <USBD_Get_USB_Status+0x44>
 8019b7c:	a201      	add	r2, pc, #4	; (adr r2, 8019b84 <USBD_Get_USB_Status+0x1c>)
 8019b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b82:	bf00      	nop
 8019b84:	08019b95 	.word	0x08019b95
 8019b88:	08019b9b 	.word	0x08019b9b
 8019b8c:	08019ba1 	.word	0x08019ba1
 8019b90:	08019ba7 	.word	0x08019ba7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019b94:	2300      	movs	r3, #0
 8019b96:	73fb      	strb	r3, [r7, #15]
    break;
 8019b98:	e00b      	b.n	8019bb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b9a:	2303      	movs	r3, #3
 8019b9c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b9e:	e008      	b.n	8019bb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ba0:	2301      	movs	r3, #1
 8019ba2:	73fb      	strb	r3, [r7, #15]
    break;
 8019ba4:	e005      	b.n	8019bb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ba6:	2303      	movs	r3, #3
 8019ba8:	73fb      	strb	r3, [r7, #15]
    break;
 8019baa:	e002      	b.n	8019bb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019bac:	2303      	movs	r3, #3
 8019bae:	73fb      	strb	r3, [r7, #15]
    break;
 8019bb0:	bf00      	nop
  }
  return usb_status;
 8019bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	3714      	adds	r7, #20
 8019bb8:	46bd      	mov	sp, r7
 8019bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bbe:	4770      	bx	lr

08019bc0 <__errno>:
 8019bc0:	4b01      	ldr	r3, [pc, #4]	; (8019bc8 <__errno+0x8>)
 8019bc2:	6818      	ldr	r0, [r3, #0]
 8019bc4:	4770      	bx	lr
 8019bc6:	bf00      	nop
 8019bc8:	24000100 	.word	0x24000100

08019bcc <__libc_init_array>:
 8019bcc:	b570      	push	{r4, r5, r6, lr}
 8019bce:	4d0d      	ldr	r5, [pc, #52]	; (8019c04 <__libc_init_array+0x38>)
 8019bd0:	4c0d      	ldr	r4, [pc, #52]	; (8019c08 <__libc_init_array+0x3c>)
 8019bd2:	1b64      	subs	r4, r4, r5
 8019bd4:	10a4      	asrs	r4, r4, #2
 8019bd6:	2600      	movs	r6, #0
 8019bd8:	42a6      	cmp	r6, r4
 8019bda:	d109      	bne.n	8019bf0 <__libc_init_array+0x24>
 8019bdc:	4d0b      	ldr	r5, [pc, #44]	; (8019c0c <__libc_init_array+0x40>)
 8019bde:	4c0c      	ldr	r4, [pc, #48]	; (8019c10 <__libc_init_array+0x44>)
 8019be0:	f003 f9ce 	bl	801cf80 <_init>
 8019be4:	1b64      	subs	r4, r4, r5
 8019be6:	10a4      	asrs	r4, r4, #2
 8019be8:	2600      	movs	r6, #0
 8019bea:	42a6      	cmp	r6, r4
 8019bec:	d105      	bne.n	8019bfa <__libc_init_array+0x2e>
 8019bee:	bd70      	pop	{r4, r5, r6, pc}
 8019bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bf4:	4798      	blx	r3
 8019bf6:	3601      	adds	r6, #1
 8019bf8:	e7ee      	b.n	8019bd8 <__libc_init_array+0xc>
 8019bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bfe:	4798      	blx	r3
 8019c00:	3601      	adds	r6, #1
 8019c02:	e7f2      	b.n	8019bea <__libc_init_array+0x1e>
 8019c04:	0801f138 	.word	0x0801f138
 8019c08:	0801f138 	.word	0x0801f138
 8019c0c:	0801f138 	.word	0x0801f138
 8019c10:	0801f13c 	.word	0x0801f13c

08019c14 <memset>:
 8019c14:	4402      	add	r2, r0
 8019c16:	4603      	mov	r3, r0
 8019c18:	4293      	cmp	r3, r2
 8019c1a:	d100      	bne.n	8019c1e <memset+0xa>
 8019c1c:	4770      	bx	lr
 8019c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8019c22:	e7f9      	b.n	8019c18 <memset+0x4>

08019c24 <__cvt>:
 8019c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c26:	ed2d 8b02 	vpush	{d8}
 8019c2a:	eeb0 8b40 	vmov.f64	d8, d0
 8019c2e:	b085      	sub	sp, #20
 8019c30:	4617      	mov	r7, r2
 8019c32:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019c34:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019c36:	ee18 2a90 	vmov	r2, s17
 8019c3a:	f025 0520 	bic.w	r5, r5, #32
 8019c3e:	2a00      	cmp	r2, #0
 8019c40:	bfb6      	itet	lt
 8019c42:	222d      	movlt	r2, #45	; 0x2d
 8019c44:	2200      	movge	r2, #0
 8019c46:	eeb1 8b40 	vneglt.f64	d8, d0
 8019c4a:	2d46      	cmp	r5, #70	; 0x46
 8019c4c:	460c      	mov	r4, r1
 8019c4e:	701a      	strb	r2, [r3, #0]
 8019c50:	d004      	beq.n	8019c5c <__cvt+0x38>
 8019c52:	2d45      	cmp	r5, #69	; 0x45
 8019c54:	d100      	bne.n	8019c58 <__cvt+0x34>
 8019c56:	3401      	adds	r4, #1
 8019c58:	2102      	movs	r1, #2
 8019c5a:	e000      	b.n	8019c5e <__cvt+0x3a>
 8019c5c:	2103      	movs	r1, #3
 8019c5e:	ab03      	add	r3, sp, #12
 8019c60:	9301      	str	r3, [sp, #4]
 8019c62:	ab02      	add	r3, sp, #8
 8019c64:	9300      	str	r3, [sp, #0]
 8019c66:	4622      	mov	r2, r4
 8019c68:	4633      	mov	r3, r6
 8019c6a:	eeb0 0b48 	vmov.f64	d0, d8
 8019c6e:	f000 fcf7 	bl	801a660 <_dtoa_r>
 8019c72:	2d47      	cmp	r5, #71	; 0x47
 8019c74:	d101      	bne.n	8019c7a <__cvt+0x56>
 8019c76:	07fb      	lsls	r3, r7, #31
 8019c78:	d51a      	bpl.n	8019cb0 <__cvt+0x8c>
 8019c7a:	2d46      	cmp	r5, #70	; 0x46
 8019c7c:	eb00 0204 	add.w	r2, r0, r4
 8019c80:	d10c      	bne.n	8019c9c <__cvt+0x78>
 8019c82:	7803      	ldrb	r3, [r0, #0]
 8019c84:	2b30      	cmp	r3, #48	; 0x30
 8019c86:	d107      	bne.n	8019c98 <__cvt+0x74>
 8019c88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c90:	bf1c      	itt	ne
 8019c92:	f1c4 0401 	rsbne	r4, r4, #1
 8019c96:	6034      	strne	r4, [r6, #0]
 8019c98:	6833      	ldr	r3, [r6, #0]
 8019c9a:	441a      	add	r2, r3
 8019c9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca4:	bf08      	it	eq
 8019ca6:	9203      	streq	r2, [sp, #12]
 8019ca8:	2130      	movs	r1, #48	; 0x30
 8019caa:	9b03      	ldr	r3, [sp, #12]
 8019cac:	4293      	cmp	r3, r2
 8019cae:	d307      	bcc.n	8019cc0 <__cvt+0x9c>
 8019cb0:	9b03      	ldr	r3, [sp, #12]
 8019cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019cb4:	1a1b      	subs	r3, r3, r0
 8019cb6:	6013      	str	r3, [r2, #0]
 8019cb8:	b005      	add	sp, #20
 8019cba:	ecbd 8b02 	vpop	{d8}
 8019cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cc0:	1c5c      	adds	r4, r3, #1
 8019cc2:	9403      	str	r4, [sp, #12]
 8019cc4:	7019      	strb	r1, [r3, #0]
 8019cc6:	e7f0      	b.n	8019caa <__cvt+0x86>

08019cc8 <__exponent>:
 8019cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cca:	4603      	mov	r3, r0
 8019ccc:	2900      	cmp	r1, #0
 8019cce:	bfb8      	it	lt
 8019cd0:	4249      	neglt	r1, r1
 8019cd2:	f803 2b02 	strb.w	r2, [r3], #2
 8019cd6:	bfb4      	ite	lt
 8019cd8:	222d      	movlt	r2, #45	; 0x2d
 8019cda:	222b      	movge	r2, #43	; 0x2b
 8019cdc:	2909      	cmp	r1, #9
 8019cde:	7042      	strb	r2, [r0, #1]
 8019ce0:	dd2a      	ble.n	8019d38 <__exponent+0x70>
 8019ce2:	f10d 0407 	add.w	r4, sp, #7
 8019ce6:	46a4      	mov	ip, r4
 8019ce8:	270a      	movs	r7, #10
 8019cea:	46a6      	mov	lr, r4
 8019cec:	460a      	mov	r2, r1
 8019cee:	fb91 f6f7 	sdiv	r6, r1, r7
 8019cf2:	fb07 1516 	mls	r5, r7, r6, r1
 8019cf6:	3530      	adds	r5, #48	; 0x30
 8019cf8:	2a63      	cmp	r2, #99	; 0x63
 8019cfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8019cfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019d02:	4631      	mov	r1, r6
 8019d04:	dcf1      	bgt.n	8019cea <__exponent+0x22>
 8019d06:	3130      	adds	r1, #48	; 0x30
 8019d08:	f1ae 0502 	sub.w	r5, lr, #2
 8019d0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019d10:	1c44      	adds	r4, r0, #1
 8019d12:	4629      	mov	r1, r5
 8019d14:	4561      	cmp	r1, ip
 8019d16:	d30a      	bcc.n	8019d2e <__exponent+0x66>
 8019d18:	f10d 0209 	add.w	r2, sp, #9
 8019d1c:	eba2 020e 	sub.w	r2, r2, lr
 8019d20:	4565      	cmp	r5, ip
 8019d22:	bf88      	it	hi
 8019d24:	2200      	movhi	r2, #0
 8019d26:	4413      	add	r3, r2
 8019d28:	1a18      	subs	r0, r3, r0
 8019d2a:	b003      	add	sp, #12
 8019d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019d32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019d36:	e7ed      	b.n	8019d14 <__exponent+0x4c>
 8019d38:	2330      	movs	r3, #48	; 0x30
 8019d3a:	3130      	adds	r1, #48	; 0x30
 8019d3c:	7083      	strb	r3, [r0, #2]
 8019d3e:	70c1      	strb	r1, [r0, #3]
 8019d40:	1d03      	adds	r3, r0, #4
 8019d42:	e7f1      	b.n	8019d28 <__exponent+0x60>
 8019d44:	0000      	movs	r0, r0
	...

08019d48 <_printf_float>:
 8019d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d4c:	b08b      	sub	sp, #44	; 0x2c
 8019d4e:	460c      	mov	r4, r1
 8019d50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019d54:	4616      	mov	r6, r2
 8019d56:	461f      	mov	r7, r3
 8019d58:	4605      	mov	r5, r0
 8019d5a:	f001 fae5 	bl	801b328 <_localeconv_r>
 8019d5e:	f8d0 b000 	ldr.w	fp, [r0]
 8019d62:	4658      	mov	r0, fp
 8019d64:	f7e6 fabc 	bl	80002e0 <strlen>
 8019d68:	2300      	movs	r3, #0
 8019d6a:	9308      	str	r3, [sp, #32]
 8019d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8019d70:	f894 9018 	ldrb.w	r9, [r4, #24]
 8019d74:	6822      	ldr	r2, [r4, #0]
 8019d76:	3307      	adds	r3, #7
 8019d78:	f023 0307 	bic.w	r3, r3, #7
 8019d7c:	f103 0108 	add.w	r1, r3, #8
 8019d80:	f8c8 1000 	str.w	r1, [r8]
 8019d84:	4682      	mov	sl, r0
 8019d86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019d8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8019d8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8019ff0 <_printf_float+0x2a8>
 8019d92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8019d96:	eeb0 6bc0 	vabs.f64	d6, d0
 8019d9a:	eeb4 6b47 	vcmp.f64	d6, d7
 8019d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019da2:	dd24      	ble.n	8019dee <_printf_float+0xa6>
 8019da4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dac:	d502      	bpl.n	8019db4 <_printf_float+0x6c>
 8019dae:	232d      	movs	r3, #45	; 0x2d
 8019db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019db4:	4b90      	ldr	r3, [pc, #576]	; (8019ff8 <_printf_float+0x2b0>)
 8019db6:	4891      	ldr	r0, [pc, #580]	; (8019ffc <_printf_float+0x2b4>)
 8019db8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019dbc:	bf94      	ite	ls
 8019dbe:	4698      	movls	r8, r3
 8019dc0:	4680      	movhi	r8, r0
 8019dc2:	2303      	movs	r3, #3
 8019dc4:	6123      	str	r3, [r4, #16]
 8019dc6:	f022 0204 	bic.w	r2, r2, #4
 8019dca:	2300      	movs	r3, #0
 8019dcc:	6022      	str	r2, [r4, #0]
 8019dce:	9304      	str	r3, [sp, #16]
 8019dd0:	9700      	str	r7, [sp, #0]
 8019dd2:	4633      	mov	r3, r6
 8019dd4:	aa09      	add	r2, sp, #36	; 0x24
 8019dd6:	4621      	mov	r1, r4
 8019dd8:	4628      	mov	r0, r5
 8019dda:	f000 f9d3 	bl	801a184 <_printf_common>
 8019dde:	3001      	adds	r0, #1
 8019de0:	f040 808a 	bne.w	8019ef8 <_printf_float+0x1b0>
 8019de4:	f04f 30ff 	mov.w	r0, #4294967295
 8019de8:	b00b      	add	sp, #44	; 0x2c
 8019dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dee:	eeb4 0b40 	vcmp.f64	d0, d0
 8019df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019df6:	d709      	bvc.n	8019e0c <_printf_float+0xc4>
 8019df8:	ee10 3a90 	vmov	r3, s1
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	bfbc      	itt	lt
 8019e00:	232d      	movlt	r3, #45	; 0x2d
 8019e02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019e06:	487e      	ldr	r0, [pc, #504]	; (801a000 <_printf_float+0x2b8>)
 8019e08:	4b7e      	ldr	r3, [pc, #504]	; (801a004 <_printf_float+0x2bc>)
 8019e0a:	e7d5      	b.n	8019db8 <_printf_float+0x70>
 8019e0c:	6863      	ldr	r3, [r4, #4]
 8019e0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8019e12:	9104      	str	r1, [sp, #16]
 8019e14:	1c59      	adds	r1, r3, #1
 8019e16:	d13c      	bne.n	8019e92 <_printf_float+0x14a>
 8019e18:	2306      	movs	r3, #6
 8019e1a:	6063      	str	r3, [r4, #4]
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	9303      	str	r3, [sp, #12]
 8019e20:	ab08      	add	r3, sp, #32
 8019e22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8019e26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8019e2a:	ab07      	add	r3, sp, #28
 8019e2c:	6861      	ldr	r1, [r4, #4]
 8019e2e:	9300      	str	r3, [sp, #0]
 8019e30:	6022      	str	r2, [r4, #0]
 8019e32:	f10d 031b 	add.w	r3, sp, #27
 8019e36:	4628      	mov	r0, r5
 8019e38:	f7ff fef4 	bl	8019c24 <__cvt>
 8019e3c:	9b04      	ldr	r3, [sp, #16]
 8019e3e:	9907      	ldr	r1, [sp, #28]
 8019e40:	2b47      	cmp	r3, #71	; 0x47
 8019e42:	4680      	mov	r8, r0
 8019e44:	d108      	bne.n	8019e58 <_printf_float+0x110>
 8019e46:	1cc8      	adds	r0, r1, #3
 8019e48:	db02      	blt.n	8019e50 <_printf_float+0x108>
 8019e4a:	6863      	ldr	r3, [r4, #4]
 8019e4c:	4299      	cmp	r1, r3
 8019e4e:	dd41      	ble.n	8019ed4 <_printf_float+0x18c>
 8019e50:	f1a9 0902 	sub.w	r9, r9, #2
 8019e54:	fa5f f989 	uxtb.w	r9, r9
 8019e58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019e5c:	d820      	bhi.n	8019ea0 <_printf_float+0x158>
 8019e5e:	3901      	subs	r1, #1
 8019e60:	464a      	mov	r2, r9
 8019e62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019e66:	9107      	str	r1, [sp, #28]
 8019e68:	f7ff ff2e 	bl	8019cc8 <__exponent>
 8019e6c:	9a08      	ldr	r2, [sp, #32]
 8019e6e:	9004      	str	r0, [sp, #16]
 8019e70:	1813      	adds	r3, r2, r0
 8019e72:	2a01      	cmp	r2, #1
 8019e74:	6123      	str	r3, [r4, #16]
 8019e76:	dc02      	bgt.n	8019e7e <_printf_float+0x136>
 8019e78:	6822      	ldr	r2, [r4, #0]
 8019e7a:	07d2      	lsls	r2, r2, #31
 8019e7c:	d501      	bpl.n	8019e82 <_printf_float+0x13a>
 8019e7e:	3301      	adds	r3, #1
 8019e80:	6123      	str	r3, [r4, #16]
 8019e82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d0a2      	beq.n	8019dd0 <_printf_float+0x88>
 8019e8a:	232d      	movs	r3, #45	; 0x2d
 8019e8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e90:	e79e      	b.n	8019dd0 <_printf_float+0x88>
 8019e92:	9904      	ldr	r1, [sp, #16]
 8019e94:	2947      	cmp	r1, #71	; 0x47
 8019e96:	d1c1      	bne.n	8019e1c <_printf_float+0xd4>
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d1bf      	bne.n	8019e1c <_printf_float+0xd4>
 8019e9c:	2301      	movs	r3, #1
 8019e9e:	e7bc      	b.n	8019e1a <_printf_float+0xd2>
 8019ea0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019ea4:	d118      	bne.n	8019ed8 <_printf_float+0x190>
 8019ea6:	2900      	cmp	r1, #0
 8019ea8:	6863      	ldr	r3, [r4, #4]
 8019eaa:	dd0b      	ble.n	8019ec4 <_printf_float+0x17c>
 8019eac:	6121      	str	r1, [r4, #16]
 8019eae:	b913      	cbnz	r3, 8019eb6 <_printf_float+0x16e>
 8019eb0:	6822      	ldr	r2, [r4, #0]
 8019eb2:	07d0      	lsls	r0, r2, #31
 8019eb4:	d502      	bpl.n	8019ebc <_printf_float+0x174>
 8019eb6:	3301      	adds	r3, #1
 8019eb8:	440b      	add	r3, r1
 8019eba:	6123      	str	r3, [r4, #16]
 8019ebc:	2300      	movs	r3, #0
 8019ebe:	65a1      	str	r1, [r4, #88]	; 0x58
 8019ec0:	9304      	str	r3, [sp, #16]
 8019ec2:	e7de      	b.n	8019e82 <_printf_float+0x13a>
 8019ec4:	b913      	cbnz	r3, 8019ecc <_printf_float+0x184>
 8019ec6:	6822      	ldr	r2, [r4, #0]
 8019ec8:	07d2      	lsls	r2, r2, #31
 8019eca:	d501      	bpl.n	8019ed0 <_printf_float+0x188>
 8019ecc:	3302      	adds	r3, #2
 8019ece:	e7f4      	b.n	8019eba <_printf_float+0x172>
 8019ed0:	2301      	movs	r3, #1
 8019ed2:	e7f2      	b.n	8019eba <_printf_float+0x172>
 8019ed4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019ed8:	9b08      	ldr	r3, [sp, #32]
 8019eda:	4299      	cmp	r1, r3
 8019edc:	db05      	blt.n	8019eea <_printf_float+0x1a2>
 8019ede:	6823      	ldr	r3, [r4, #0]
 8019ee0:	6121      	str	r1, [r4, #16]
 8019ee2:	07d8      	lsls	r0, r3, #31
 8019ee4:	d5ea      	bpl.n	8019ebc <_printf_float+0x174>
 8019ee6:	1c4b      	adds	r3, r1, #1
 8019ee8:	e7e7      	b.n	8019eba <_printf_float+0x172>
 8019eea:	2900      	cmp	r1, #0
 8019eec:	bfd4      	ite	le
 8019eee:	f1c1 0202 	rsble	r2, r1, #2
 8019ef2:	2201      	movgt	r2, #1
 8019ef4:	4413      	add	r3, r2
 8019ef6:	e7e0      	b.n	8019eba <_printf_float+0x172>
 8019ef8:	6823      	ldr	r3, [r4, #0]
 8019efa:	055a      	lsls	r2, r3, #21
 8019efc:	d407      	bmi.n	8019f0e <_printf_float+0x1c6>
 8019efe:	6923      	ldr	r3, [r4, #16]
 8019f00:	4642      	mov	r2, r8
 8019f02:	4631      	mov	r1, r6
 8019f04:	4628      	mov	r0, r5
 8019f06:	47b8      	blx	r7
 8019f08:	3001      	adds	r0, #1
 8019f0a:	d12a      	bne.n	8019f62 <_printf_float+0x21a>
 8019f0c:	e76a      	b.n	8019de4 <_printf_float+0x9c>
 8019f0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019f12:	f240 80e2 	bls.w	801a0da <_printf_float+0x392>
 8019f16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019f1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f22:	d133      	bne.n	8019f8c <_printf_float+0x244>
 8019f24:	4a38      	ldr	r2, [pc, #224]	; (801a008 <_printf_float+0x2c0>)
 8019f26:	2301      	movs	r3, #1
 8019f28:	4631      	mov	r1, r6
 8019f2a:	4628      	mov	r0, r5
 8019f2c:	47b8      	blx	r7
 8019f2e:	3001      	adds	r0, #1
 8019f30:	f43f af58 	beq.w	8019de4 <_printf_float+0x9c>
 8019f34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	db02      	blt.n	8019f42 <_printf_float+0x1fa>
 8019f3c:	6823      	ldr	r3, [r4, #0]
 8019f3e:	07d8      	lsls	r0, r3, #31
 8019f40:	d50f      	bpl.n	8019f62 <_printf_float+0x21a>
 8019f42:	4653      	mov	r3, sl
 8019f44:	465a      	mov	r2, fp
 8019f46:	4631      	mov	r1, r6
 8019f48:	4628      	mov	r0, r5
 8019f4a:	47b8      	blx	r7
 8019f4c:	3001      	adds	r0, #1
 8019f4e:	f43f af49 	beq.w	8019de4 <_printf_float+0x9c>
 8019f52:	f04f 0800 	mov.w	r8, #0
 8019f56:	f104 091a 	add.w	r9, r4, #26
 8019f5a:	9b08      	ldr	r3, [sp, #32]
 8019f5c:	3b01      	subs	r3, #1
 8019f5e:	4543      	cmp	r3, r8
 8019f60:	dc09      	bgt.n	8019f76 <_printf_float+0x22e>
 8019f62:	6823      	ldr	r3, [r4, #0]
 8019f64:	079b      	lsls	r3, r3, #30
 8019f66:	f100 8108 	bmi.w	801a17a <_printf_float+0x432>
 8019f6a:	68e0      	ldr	r0, [r4, #12]
 8019f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f6e:	4298      	cmp	r0, r3
 8019f70:	bfb8      	it	lt
 8019f72:	4618      	movlt	r0, r3
 8019f74:	e738      	b.n	8019de8 <_printf_float+0xa0>
 8019f76:	2301      	movs	r3, #1
 8019f78:	464a      	mov	r2, r9
 8019f7a:	4631      	mov	r1, r6
 8019f7c:	4628      	mov	r0, r5
 8019f7e:	47b8      	blx	r7
 8019f80:	3001      	adds	r0, #1
 8019f82:	f43f af2f 	beq.w	8019de4 <_printf_float+0x9c>
 8019f86:	f108 0801 	add.w	r8, r8, #1
 8019f8a:	e7e6      	b.n	8019f5a <_printf_float+0x212>
 8019f8c:	9b07      	ldr	r3, [sp, #28]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	dc3c      	bgt.n	801a00c <_printf_float+0x2c4>
 8019f92:	4a1d      	ldr	r2, [pc, #116]	; (801a008 <_printf_float+0x2c0>)
 8019f94:	2301      	movs	r3, #1
 8019f96:	4631      	mov	r1, r6
 8019f98:	4628      	mov	r0, r5
 8019f9a:	47b8      	blx	r7
 8019f9c:	3001      	adds	r0, #1
 8019f9e:	f43f af21 	beq.w	8019de4 <_printf_float+0x9c>
 8019fa2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019fa6:	4313      	orrs	r3, r2
 8019fa8:	d102      	bne.n	8019fb0 <_printf_float+0x268>
 8019faa:	6823      	ldr	r3, [r4, #0]
 8019fac:	07d9      	lsls	r1, r3, #31
 8019fae:	d5d8      	bpl.n	8019f62 <_printf_float+0x21a>
 8019fb0:	4653      	mov	r3, sl
 8019fb2:	465a      	mov	r2, fp
 8019fb4:	4631      	mov	r1, r6
 8019fb6:	4628      	mov	r0, r5
 8019fb8:	47b8      	blx	r7
 8019fba:	3001      	adds	r0, #1
 8019fbc:	f43f af12 	beq.w	8019de4 <_printf_float+0x9c>
 8019fc0:	f04f 0900 	mov.w	r9, #0
 8019fc4:	f104 0a1a 	add.w	sl, r4, #26
 8019fc8:	9b07      	ldr	r3, [sp, #28]
 8019fca:	425b      	negs	r3, r3
 8019fcc:	454b      	cmp	r3, r9
 8019fce:	dc01      	bgt.n	8019fd4 <_printf_float+0x28c>
 8019fd0:	9b08      	ldr	r3, [sp, #32]
 8019fd2:	e795      	b.n	8019f00 <_printf_float+0x1b8>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	4652      	mov	r2, sl
 8019fd8:	4631      	mov	r1, r6
 8019fda:	4628      	mov	r0, r5
 8019fdc:	47b8      	blx	r7
 8019fde:	3001      	adds	r0, #1
 8019fe0:	f43f af00 	beq.w	8019de4 <_printf_float+0x9c>
 8019fe4:	f109 0901 	add.w	r9, r9, #1
 8019fe8:	e7ee      	b.n	8019fc8 <_printf_float+0x280>
 8019fea:	bf00      	nop
 8019fec:	f3af 8000 	nop.w
 8019ff0:	ffffffff 	.word	0xffffffff
 8019ff4:	7fefffff 	.word	0x7fefffff
 8019ff8:	0801d4a0 	.word	0x0801d4a0
 8019ffc:	0801d4a4 	.word	0x0801d4a4
 801a000:	0801d4ac 	.word	0x0801d4ac
 801a004:	0801d4a8 	.word	0x0801d4a8
 801a008:	0801d4b0 	.word	0x0801d4b0
 801a00c:	9a08      	ldr	r2, [sp, #32]
 801a00e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a010:	429a      	cmp	r2, r3
 801a012:	bfa8      	it	ge
 801a014:	461a      	movge	r2, r3
 801a016:	2a00      	cmp	r2, #0
 801a018:	4691      	mov	r9, r2
 801a01a:	dc38      	bgt.n	801a08e <_printf_float+0x346>
 801a01c:	2300      	movs	r3, #0
 801a01e:	9305      	str	r3, [sp, #20]
 801a020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a024:	f104 021a 	add.w	r2, r4, #26
 801a028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a02a:	9905      	ldr	r1, [sp, #20]
 801a02c:	9304      	str	r3, [sp, #16]
 801a02e:	eba3 0309 	sub.w	r3, r3, r9
 801a032:	428b      	cmp	r3, r1
 801a034:	dc33      	bgt.n	801a09e <_printf_float+0x356>
 801a036:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a03a:	429a      	cmp	r2, r3
 801a03c:	db3c      	blt.n	801a0b8 <_printf_float+0x370>
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	07da      	lsls	r2, r3, #31
 801a042:	d439      	bmi.n	801a0b8 <_printf_float+0x370>
 801a044:	9b08      	ldr	r3, [sp, #32]
 801a046:	9a04      	ldr	r2, [sp, #16]
 801a048:	9907      	ldr	r1, [sp, #28]
 801a04a:	1a9a      	subs	r2, r3, r2
 801a04c:	eba3 0901 	sub.w	r9, r3, r1
 801a050:	4591      	cmp	r9, r2
 801a052:	bfa8      	it	ge
 801a054:	4691      	movge	r9, r2
 801a056:	f1b9 0f00 	cmp.w	r9, #0
 801a05a:	dc35      	bgt.n	801a0c8 <_printf_float+0x380>
 801a05c:	f04f 0800 	mov.w	r8, #0
 801a060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a064:	f104 0a1a 	add.w	sl, r4, #26
 801a068:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a06c:	1a9b      	subs	r3, r3, r2
 801a06e:	eba3 0309 	sub.w	r3, r3, r9
 801a072:	4543      	cmp	r3, r8
 801a074:	f77f af75 	ble.w	8019f62 <_printf_float+0x21a>
 801a078:	2301      	movs	r3, #1
 801a07a:	4652      	mov	r2, sl
 801a07c:	4631      	mov	r1, r6
 801a07e:	4628      	mov	r0, r5
 801a080:	47b8      	blx	r7
 801a082:	3001      	adds	r0, #1
 801a084:	f43f aeae 	beq.w	8019de4 <_printf_float+0x9c>
 801a088:	f108 0801 	add.w	r8, r8, #1
 801a08c:	e7ec      	b.n	801a068 <_printf_float+0x320>
 801a08e:	4613      	mov	r3, r2
 801a090:	4631      	mov	r1, r6
 801a092:	4642      	mov	r2, r8
 801a094:	4628      	mov	r0, r5
 801a096:	47b8      	blx	r7
 801a098:	3001      	adds	r0, #1
 801a09a:	d1bf      	bne.n	801a01c <_printf_float+0x2d4>
 801a09c:	e6a2      	b.n	8019de4 <_printf_float+0x9c>
 801a09e:	2301      	movs	r3, #1
 801a0a0:	4631      	mov	r1, r6
 801a0a2:	4628      	mov	r0, r5
 801a0a4:	9204      	str	r2, [sp, #16]
 801a0a6:	47b8      	blx	r7
 801a0a8:	3001      	adds	r0, #1
 801a0aa:	f43f ae9b 	beq.w	8019de4 <_printf_float+0x9c>
 801a0ae:	9b05      	ldr	r3, [sp, #20]
 801a0b0:	9a04      	ldr	r2, [sp, #16]
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	9305      	str	r3, [sp, #20]
 801a0b6:	e7b7      	b.n	801a028 <_printf_float+0x2e0>
 801a0b8:	4653      	mov	r3, sl
 801a0ba:	465a      	mov	r2, fp
 801a0bc:	4631      	mov	r1, r6
 801a0be:	4628      	mov	r0, r5
 801a0c0:	47b8      	blx	r7
 801a0c2:	3001      	adds	r0, #1
 801a0c4:	d1be      	bne.n	801a044 <_printf_float+0x2fc>
 801a0c6:	e68d      	b.n	8019de4 <_printf_float+0x9c>
 801a0c8:	9a04      	ldr	r2, [sp, #16]
 801a0ca:	464b      	mov	r3, r9
 801a0cc:	4442      	add	r2, r8
 801a0ce:	4631      	mov	r1, r6
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	47b8      	blx	r7
 801a0d4:	3001      	adds	r0, #1
 801a0d6:	d1c1      	bne.n	801a05c <_printf_float+0x314>
 801a0d8:	e684      	b.n	8019de4 <_printf_float+0x9c>
 801a0da:	9a08      	ldr	r2, [sp, #32]
 801a0dc:	2a01      	cmp	r2, #1
 801a0de:	dc01      	bgt.n	801a0e4 <_printf_float+0x39c>
 801a0e0:	07db      	lsls	r3, r3, #31
 801a0e2:	d537      	bpl.n	801a154 <_printf_float+0x40c>
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	4642      	mov	r2, r8
 801a0e8:	4631      	mov	r1, r6
 801a0ea:	4628      	mov	r0, r5
 801a0ec:	47b8      	blx	r7
 801a0ee:	3001      	adds	r0, #1
 801a0f0:	f43f ae78 	beq.w	8019de4 <_printf_float+0x9c>
 801a0f4:	4653      	mov	r3, sl
 801a0f6:	465a      	mov	r2, fp
 801a0f8:	4631      	mov	r1, r6
 801a0fa:	4628      	mov	r0, r5
 801a0fc:	47b8      	blx	r7
 801a0fe:	3001      	adds	r0, #1
 801a100:	f43f ae70 	beq.w	8019de4 <_printf_float+0x9c>
 801a104:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801a108:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a110:	d01b      	beq.n	801a14a <_printf_float+0x402>
 801a112:	9b08      	ldr	r3, [sp, #32]
 801a114:	f108 0201 	add.w	r2, r8, #1
 801a118:	3b01      	subs	r3, #1
 801a11a:	4631      	mov	r1, r6
 801a11c:	4628      	mov	r0, r5
 801a11e:	47b8      	blx	r7
 801a120:	3001      	adds	r0, #1
 801a122:	d10e      	bne.n	801a142 <_printf_float+0x3fa>
 801a124:	e65e      	b.n	8019de4 <_printf_float+0x9c>
 801a126:	2301      	movs	r3, #1
 801a128:	464a      	mov	r2, r9
 801a12a:	4631      	mov	r1, r6
 801a12c:	4628      	mov	r0, r5
 801a12e:	47b8      	blx	r7
 801a130:	3001      	adds	r0, #1
 801a132:	f43f ae57 	beq.w	8019de4 <_printf_float+0x9c>
 801a136:	f108 0801 	add.w	r8, r8, #1
 801a13a:	9b08      	ldr	r3, [sp, #32]
 801a13c:	3b01      	subs	r3, #1
 801a13e:	4543      	cmp	r3, r8
 801a140:	dcf1      	bgt.n	801a126 <_printf_float+0x3de>
 801a142:	9b04      	ldr	r3, [sp, #16]
 801a144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a148:	e6db      	b.n	8019f02 <_printf_float+0x1ba>
 801a14a:	f04f 0800 	mov.w	r8, #0
 801a14e:	f104 091a 	add.w	r9, r4, #26
 801a152:	e7f2      	b.n	801a13a <_printf_float+0x3f2>
 801a154:	2301      	movs	r3, #1
 801a156:	4642      	mov	r2, r8
 801a158:	e7df      	b.n	801a11a <_printf_float+0x3d2>
 801a15a:	2301      	movs	r3, #1
 801a15c:	464a      	mov	r2, r9
 801a15e:	4631      	mov	r1, r6
 801a160:	4628      	mov	r0, r5
 801a162:	47b8      	blx	r7
 801a164:	3001      	adds	r0, #1
 801a166:	f43f ae3d 	beq.w	8019de4 <_printf_float+0x9c>
 801a16a:	f108 0801 	add.w	r8, r8, #1
 801a16e:	68e3      	ldr	r3, [r4, #12]
 801a170:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a172:	1a5b      	subs	r3, r3, r1
 801a174:	4543      	cmp	r3, r8
 801a176:	dcf0      	bgt.n	801a15a <_printf_float+0x412>
 801a178:	e6f7      	b.n	8019f6a <_printf_float+0x222>
 801a17a:	f04f 0800 	mov.w	r8, #0
 801a17e:	f104 0919 	add.w	r9, r4, #25
 801a182:	e7f4      	b.n	801a16e <_printf_float+0x426>

0801a184 <_printf_common>:
 801a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a188:	4616      	mov	r6, r2
 801a18a:	4699      	mov	r9, r3
 801a18c:	688a      	ldr	r2, [r1, #8]
 801a18e:	690b      	ldr	r3, [r1, #16]
 801a190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a194:	4293      	cmp	r3, r2
 801a196:	bfb8      	it	lt
 801a198:	4613      	movlt	r3, r2
 801a19a:	6033      	str	r3, [r6, #0]
 801a19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a1a0:	4607      	mov	r7, r0
 801a1a2:	460c      	mov	r4, r1
 801a1a4:	b10a      	cbz	r2, 801a1aa <_printf_common+0x26>
 801a1a6:	3301      	adds	r3, #1
 801a1a8:	6033      	str	r3, [r6, #0]
 801a1aa:	6823      	ldr	r3, [r4, #0]
 801a1ac:	0699      	lsls	r1, r3, #26
 801a1ae:	bf42      	ittt	mi
 801a1b0:	6833      	ldrmi	r3, [r6, #0]
 801a1b2:	3302      	addmi	r3, #2
 801a1b4:	6033      	strmi	r3, [r6, #0]
 801a1b6:	6825      	ldr	r5, [r4, #0]
 801a1b8:	f015 0506 	ands.w	r5, r5, #6
 801a1bc:	d106      	bne.n	801a1cc <_printf_common+0x48>
 801a1be:	f104 0a19 	add.w	sl, r4, #25
 801a1c2:	68e3      	ldr	r3, [r4, #12]
 801a1c4:	6832      	ldr	r2, [r6, #0]
 801a1c6:	1a9b      	subs	r3, r3, r2
 801a1c8:	42ab      	cmp	r3, r5
 801a1ca:	dc26      	bgt.n	801a21a <_printf_common+0x96>
 801a1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a1d0:	1e13      	subs	r3, r2, #0
 801a1d2:	6822      	ldr	r2, [r4, #0]
 801a1d4:	bf18      	it	ne
 801a1d6:	2301      	movne	r3, #1
 801a1d8:	0692      	lsls	r2, r2, #26
 801a1da:	d42b      	bmi.n	801a234 <_printf_common+0xb0>
 801a1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a1e0:	4649      	mov	r1, r9
 801a1e2:	4638      	mov	r0, r7
 801a1e4:	47c0      	blx	r8
 801a1e6:	3001      	adds	r0, #1
 801a1e8:	d01e      	beq.n	801a228 <_printf_common+0xa4>
 801a1ea:	6823      	ldr	r3, [r4, #0]
 801a1ec:	68e5      	ldr	r5, [r4, #12]
 801a1ee:	6832      	ldr	r2, [r6, #0]
 801a1f0:	f003 0306 	and.w	r3, r3, #6
 801a1f4:	2b04      	cmp	r3, #4
 801a1f6:	bf08      	it	eq
 801a1f8:	1aad      	subeq	r5, r5, r2
 801a1fa:	68a3      	ldr	r3, [r4, #8]
 801a1fc:	6922      	ldr	r2, [r4, #16]
 801a1fe:	bf0c      	ite	eq
 801a200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a204:	2500      	movne	r5, #0
 801a206:	4293      	cmp	r3, r2
 801a208:	bfc4      	itt	gt
 801a20a:	1a9b      	subgt	r3, r3, r2
 801a20c:	18ed      	addgt	r5, r5, r3
 801a20e:	2600      	movs	r6, #0
 801a210:	341a      	adds	r4, #26
 801a212:	42b5      	cmp	r5, r6
 801a214:	d11a      	bne.n	801a24c <_printf_common+0xc8>
 801a216:	2000      	movs	r0, #0
 801a218:	e008      	b.n	801a22c <_printf_common+0xa8>
 801a21a:	2301      	movs	r3, #1
 801a21c:	4652      	mov	r2, sl
 801a21e:	4649      	mov	r1, r9
 801a220:	4638      	mov	r0, r7
 801a222:	47c0      	blx	r8
 801a224:	3001      	adds	r0, #1
 801a226:	d103      	bne.n	801a230 <_printf_common+0xac>
 801a228:	f04f 30ff 	mov.w	r0, #4294967295
 801a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a230:	3501      	adds	r5, #1
 801a232:	e7c6      	b.n	801a1c2 <_printf_common+0x3e>
 801a234:	18e1      	adds	r1, r4, r3
 801a236:	1c5a      	adds	r2, r3, #1
 801a238:	2030      	movs	r0, #48	; 0x30
 801a23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a23e:	4422      	add	r2, r4
 801a240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a248:	3302      	adds	r3, #2
 801a24a:	e7c7      	b.n	801a1dc <_printf_common+0x58>
 801a24c:	2301      	movs	r3, #1
 801a24e:	4622      	mov	r2, r4
 801a250:	4649      	mov	r1, r9
 801a252:	4638      	mov	r0, r7
 801a254:	47c0      	blx	r8
 801a256:	3001      	adds	r0, #1
 801a258:	d0e6      	beq.n	801a228 <_printf_common+0xa4>
 801a25a:	3601      	adds	r6, #1
 801a25c:	e7d9      	b.n	801a212 <_printf_common+0x8e>
	...

0801a260 <_printf_i>:
 801a260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a264:	7e0f      	ldrb	r7, [r1, #24]
 801a266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a268:	2f78      	cmp	r7, #120	; 0x78
 801a26a:	4691      	mov	r9, r2
 801a26c:	4680      	mov	r8, r0
 801a26e:	460c      	mov	r4, r1
 801a270:	469a      	mov	sl, r3
 801a272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a276:	d807      	bhi.n	801a288 <_printf_i+0x28>
 801a278:	2f62      	cmp	r7, #98	; 0x62
 801a27a:	d80a      	bhi.n	801a292 <_printf_i+0x32>
 801a27c:	2f00      	cmp	r7, #0
 801a27e:	f000 80d8 	beq.w	801a432 <_printf_i+0x1d2>
 801a282:	2f58      	cmp	r7, #88	; 0x58
 801a284:	f000 80a3 	beq.w	801a3ce <_printf_i+0x16e>
 801a288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a290:	e03a      	b.n	801a308 <_printf_i+0xa8>
 801a292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a296:	2b15      	cmp	r3, #21
 801a298:	d8f6      	bhi.n	801a288 <_printf_i+0x28>
 801a29a:	a101      	add	r1, pc, #4	; (adr r1, 801a2a0 <_printf_i+0x40>)
 801a29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a2a0:	0801a2f9 	.word	0x0801a2f9
 801a2a4:	0801a30d 	.word	0x0801a30d
 801a2a8:	0801a289 	.word	0x0801a289
 801a2ac:	0801a289 	.word	0x0801a289
 801a2b0:	0801a289 	.word	0x0801a289
 801a2b4:	0801a289 	.word	0x0801a289
 801a2b8:	0801a30d 	.word	0x0801a30d
 801a2bc:	0801a289 	.word	0x0801a289
 801a2c0:	0801a289 	.word	0x0801a289
 801a2c4:	0801a289 	.word	0x0801a289
 801a2c8:	0801a289 	.word	0x0801a289
 801a2cc:	0801a419 	.word	0x0801a419
 801a2d0:	0801a33d 	.word	0x0801a33d
 801a2d4:	0801a3fb 	.word	0x0801a3fb
 801a2d8:	0801a289 	.word	0x0801a289
 801a2dc:	0801a289 	.word	0x0801a289
 801a2e0:	0801a43b 	.word	0x0801a43b
 801a2e4:	0801a289 	.word	0x0801a289
 801a2e8:	0801a33d 	.word	0x0801a33d
 801a2ec:	0801a289 	.word	0x0801a289
 801a2f0:	0801a289 	.word	0x0801a289
 801a2f4:	0801a403 	.word	0x0801a403
 801a2f8:	682b      	ldr	r3, [r5, #0]
 801a2fa:	1d1a      	adds	r2, r3, #4
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	602a      	str	r2, [r5, #0]
 801a300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a308:	2301      	movs	r3, #1
 801a30a:	e0a3      	b.n	801a454 <_printf_i+0x1f4>
 801a30c:	6820      	ldr	r0, [r4, #0]
 801a30e:	6829      	ldr	r1, [r5, #0]
 801a310:	0606      	lsls	r6, r0, #24
 801a312:	f101 0304 	add.w	r3, r1, #4
 801a316:	d50a      	bpl.n	801a32e <_printf_i+0xce>
 801a318:	680e      	ldr	r6, [r1, #0]
 801a31a:	602b      	str	r3, [r5, #0]
 801a31c:	2e00      	cmp	r6, #0
 801a31e:	da03      	bge.n	801a328 <_printf_i+0xc8>
 801a320:	232d      	movs	r3, #45	; 0x2d
 801a322:	4276      	negs	r6, r6
 801a324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a328:	485e      	ldr	r0, [pc, #376]	; (801a4a4 <_printf_i+0x244>)
 801a32a:	230a      	movs	r3, #10
 801a32c:	e019      	b.n	801a362 <_printf_i+0x102>
 801a32e:	680e      	ldr	r6, [r1, #0]
 801a330:	602b      	str	r3, [r5, #0]
 801a332:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a336:	bf18      	it	ne
 801a338:	b236      	sxthne	r6, r6
 801a33a:	e7ef      	b.n	801a31c <_printf_i+0xbc>
 801a33c:	682b      	ldr	r3, [r5, #0]
 801a33e:	6820      	ldr	r0, [r4, #0]
 801a340:	1d19      	adds	r1, r3, #4
 801a342:	6029      	str	r1, [r5, #0]
 801a344:	0601      	lsls	r1, r0, #24
 801a346:	d501      	bpl.n	801a34c <_printf_i+0xec>
 801a348:	681e      	ldr	r6, [r3, #0]
 801a34a:	e002      	b.n	801a352 <_printf_i+0xf2>
 801a34c:	0646      	lsls	r6, r0, #25
 801a34e:	d5fb      	bpl.n	801a348 <_printf_i+0xe8>
 801a350:	881e      	ldrh	r6, [r3, #0]
 801a352:	4854      	ldr	r0, [pc, #336]	; (801a4a4 <_printf_i+0x244>)
 801a354:	2f6f      	cmp	r7, #111	; 0x6f
 801a356:	bf0c      	ite	eq
 801a358:	2308      	moveq	r3, #8
 801a35a:	230a      	movne	r3, #10
 801a35c:	2100      	movs	r1, #0
 801a35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a362:	6865      	ldr	r5, [r4, #4]
 801a364:	60a5      	str	r5, [r4, #8]
 801a366:	2d00      	cmp	r5, #0
 801a368:	bfa2      	ittt	ge
 801a36a:	6821      	ldrge	r1, [r4, #0]
 801a36c:	f021 0104 	bicge.w	r1, r1, #4
 801a370:	6021      	strge	r1, [r4, #0]
 801a372:	b90e      	cbnz	r6, 801a378 <_printf_i+0x118>
 801a374:	2d00      	cmp	r5, #0
 801a376:	d04d      	beq.n	801a414 <_printf_i+0x1b4>
 801a378:	4615      	mov	r5, r2
 801a37a:	fbb6 f1f3 	udiv	r1, r6, r3
 801a37e:	fb03 6711 	mls	r7, r3, r1, r6
 801a382:	5dc7      	ldrb	r7, [r0, r7]
 801a384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a388:	4637      	mov	r7, r6
 801a38a:	42bb      	cmp	r3, r7
 801a38c:	460e      	mov	r6, r1
 801a38e:	d9f4      	bls.n	801a37a <_printf_i+0x11a>
 801a390:	2b08      	cmp	r3, #8
 801a392:	d10b      	bne.n	801a3ac <_printf_i+0x14c>
 801a394:	6823      	ldr	r3, [r4, #0]
 801a396:	07de      	lsls	r6, r3, #31
 801a398:	d508      	bpl.n	801a3ac <_printf_i+0x14c>
 801a39a:	6923      	ldr	r3, [r4, #16]
 801a39c:	6861      	ldr	r1, [r4, #4]
 801a39e:	4299      	cmp	r1, r3
 801a3a0:	bfde      	ittt	le
 801a3a2:	2330      	movle	r3, #48	; 0x30
 801a3a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a3a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a3ac:	1b52      	subs	r2, r2, r5
 801a3ae:	6122      	str	r2, [r4, #16]
 801a3b0:	f8cd a000 	str.w	sl, [sp]
 801a3b4:	464b      	mov	r3, r9
 801a3b6:	aa03      	add	r2, sp, #12
 801a3b8:	4621      	mov	r1, r4
 801a3ba:	4640      	mov	r0, r8
 801a3bc:	f7ff fee2 	bl	801a184 <_printf_common>
 801a3c0:	3001      	adds	r0, #1
 801a3c2:	d14c      	bne.n	801a45e <_printf_i+0x1fe>
 801a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 801a3c8:	b004      	add	sp, #16
 801a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3ce:	4835      	ldr	r0, [pc, #212]	; (801a4a4 <_printf_i+0x244>)
 801a3d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a3d4:	6829      	ldr	r1, [r5, #0]
 801a3d6:	6823      	ldr	r3, [r4, #0]
 801a3d8:	f851 6b04 	ldr.w	r6, [r1], #4
 801a3dc:	6029      	str	r1, [r5, #0]
 801a3de:	061d      	lsls	r5, r3, #24
 801a3e0:	d514      	bpl.n	801a40c <_printf_i+0x1ac>
 801a3e2:	07df      	lsls	r7, r3, #31
 801a3e4:	bf44      	itt	mi
 801a3e6:	f043 0320 	orrmi.w	r3, r3, #32
 801a3ea:	6023      	strmi	r3, [r4, #0]
 801a3ec:	b91e      	cbnz	r6, 801a3f6 <_printf_i+0x196>
 801a3ee:	6823      	ldr	r3, [r4, #0]
 801a3f0:	f023 0320 	bic.w	r3, r3, #32
 801a3f4:	6023      	str	r3, [r4, #0]
 801a3f6:	2310      	movs	r3, #16
 801a3f8:	e7b0      	b.n	801a35c <_printf_i+0xfc>
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	f043 0320 	orr.w	r3, r3, #32
 801a400:	6023      	str	r3, [r4, #0]
 801a402:	2378      	movs	r3, #120	; 0x78
 801a404:	4828      	ldr	r0, [pc, #160]	; (801a4a8 <_printf_i+0x248>)
 801a406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a40a:	e7e3      	b.n	801a3d4 <_printf_i+0x174>
 801a40c:	0659      	lsls	r1, r3, #25
 801a40e:	bf48      	it	mi
 801a410:	b2b6      	uxthmi	r6, r6
 801a412:	e7e6      	b.n	801a3e2 <_printf_i+0x182>
 801a414:	4615      	mov	r5, r2
 801a416:	e7bb      	b.n	801a390 <_printf_i+0x130>
 801a418:	682b      	ldr	r3, [r5, #0]
 801a41a:	6826      	ldr	r6, [r4, #0]
 801a41c:	6961      	ldr	r1, [r4, #20]
 801a41e:	1d18      	adds	r0, r3, #4
 801a420:	6028      	str	r0, [r5, #0]
 801a422:	0635      	lsls	r5, r6, #24
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	d501      	bpl.n	801a42c <_printf_i+0x1cc>
 801a428:	6019      	str	r1, [r3, #0]
 801a42a:	e002      	b.n	801a432 <_printf_i+0x1d2>
 801a42c:	0670      	lsls	r0, r6, #25
 801a42e:	d5fb      	bpl.n	801a428 <_printf_i+0x1c8>
 801a430:	8019      	strh	r1, [r3, #0]
 801a432:	2300      	movs	r3, #0
 801a434:	6123      	str	r3, [r4, #16]
 801a436:	4615      	mov	r5, r2
 801a438:	e7ba      	b.n	801a3b0 <_printf_i+0x150>
 801a43a:	682b      	ldr	r3, [r5, #0]
 801a43c:	1d1a      	adds	r2, r3, #4
 801a43e:	602a      	str	r2, [r5, #0]
 801a440:	681d      	ldr	r5, [r3, #0]
 801a442:	6862      	ldr	r2, [r4, #4]
 801a444:	2100      	movs	r1, #0
 801a446:	4628      	mov	r0, r5
 801a448:	f7e5 ff52 	bl	80002f0 <memchr>
 801a44c:	b108      	cbz	r0, 801a452 <_printf_i+0x1f2>
 801a44e:	1b40      	subs	r0, r0, r5
 801a450:	6060      	str	r0, [r4, #4]
 801a452:	6863      	ldr	r3, [r4, #4]
 801a454:	6123      	str	r3, [r4, #16]
 801a456:	2300      	movs	r3, #0
 801a458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a45c:	e7a8      	b.n	801a3b0 <_printf_i+0x150>
 801a45e:	6923      	ldr	r3, [r4, #16]
 801a460:	462a      	mov	r2, r5
 801a462:	4649      	mov	r1, r9
 801a464:	4640      	mov	r0, r8
 801a466:	47d0      	blx	sl
 801a468:	3001      	adds	r0, #1
 801a46a:	d0ab      	beq.n	801a3c4 <_printf_i+0x164>
 801a46c:	6823      	ldr	r3, [r4, #0]
 801a46e:	079b      	lsls	r3, r3, #30
 801a470:	d413      	bmi.n	801a49a <_printf_i+0x23a>
 801a472:	68e0      	ldr	r0, [r4, #12]
 801a474:	9b03      	ldr	r3, [sp, #12]
 801a476:	4298      	cmp	r0, r3
 801a478:	bfb8      	it	lt
 801a47a:	4618      	movlt	r0, r3
 801a47c:	e7a4      	b.n	801a3c8 <_printf_i+0x168>
 801a47e:	2301      	movs	r3, #1
 801a480:	4632      	mov	r2, r6
 801a482:	4649      	mov	r1, r9
 801a484:	4640      	mov	r0, r8
 801a486:	47d0      	blx	sl
 801a488:	3001      	adds	r0, #1
 801a48a:	d09b      	beq.n	801a3c4 <_printf_i+0x164>
 801a48c:	3501      	adds	r5, #1
 801a48e:	68e3      	ldr	r3, [r4, #12]
 801a490:	9903      	ldr	r1, [sp, #12]
 801a492:	1a5b      	subs	r3, r3, r1
 801a494:	42ab      	cmp	r3, r5
 801a496:	dcf2      	bgt.n	801a47e <_printf_i+0x21e>
 801a498:	e7eb      	b.n	801a472 <_printf_i+0x212>
 801a49a:	2500      	movs	r5, #0
 801a49c:	f104 0619 	add.w	r6, r4, #25
 801a4a0:	e7f5      	b.n	801a48e <_printf_i+0x22e>
 801a4a2:	bf00      	nop
 801a4a4:	0801d4b2 	.word	0x0801d4b2
 801a4a8:	0801d4c3 	.word	0x0801d4c3

0801a4ac <iprintf>:
 801a4ac:	b40f      	push	{r0, r1, r2, r3}
 801a4ae:	4b0a      	ldr	r3, [pc, #40]	; (801a4d8 <iprintf+0x2c>)
 801a4b0:	b513      	push	{r0, r1, r4, lr}
 801a4b2:	681c      	ldr	r4, [r3, #0]
 801a4b4:	b124      	cbz	r4, 801a4c0 <iprintf+0x14>
 801a4b6:	69a3      	ldr	r3, [r4, #24]
 801a4b8:	b913      	cbnz	r3, 801a4c0 <iprintf+0x14>
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	f000 fe96 	bl	801b1ec <__sinit>
 801a4c0:	ab05      	add	r3, sp, #20
 801a4c2:	9a04      	ldr	r2, [sp, #16]
 801a4c4:	68a1      	ldr	r1, [r4, #8]
 801a4c6:	9301      	str	r3, [sp, #4]
 801a4c8:	4620      	mov	r0, r4
 801a4ca:	f001 fd4b 	bl	801bf64 <_vfiprintf_r>
 801a4ce:	b002      	add	sp, #8
 801a4d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4d4:	b004      	add	sp, #16
 801a4d6:	4770      	bx	lr
 801a4d8:	24000100 	.word	0x24000100

0801a4dc <putchar>:
 801a4dc:	4b09      	ldr	r3, [pc, #36]	; (801a504 <putchar+0x28>)
 801a4de:	b513      	push	{r0, r1, r4, lr}
 801a4e0:	681c      	ldr	r4, [r3, #0]
 801a4e2:	4601      	mov	r1, r0
 801a4e4:	b134      	cbz	r4, 801a4f4 <putchar+0x18>
 801a4e6:	69a3      	ldr	r3, [r4, #24]
 801a4e8:	b923      	cbnz	r3, 801a4f4 <putchar+0x18>
 801a4ea:	9001      	str	r0, [sp, #4]
 801a4ec:	4620      	mov	r0, r4
 801a4ee:	f000 fe7d 	bl	801b1ec <__sinit>
 801a4f2:	9901      	ldr	r1, [sp, #4]
 801a4f4:	68a2      	ldr	r2, [r4, #8]
 801a4f6:	4620      	mov	r0, r4
 801a4f8:	b002      	add	sp, #8
 801a4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4fe:	f001 be61 	b.w	801c1c4 <_putc_r>
 801a502:	bf00      	nop
 801a504:	24000100 	.word	0x24000100

0801a508 <siprintf>:
 801a508:	b40e      	push	{r1, r2, r3}
 801a50a:	b500      	push	{lr}
 801a50c:	b09c      	sub	sp, #112	; 0x70
 801a50e:	ab1d      	add	r3, sp, #116	; 0x74
 801a510:	9002      	str	r0, [sp, #8]
 801a512:	9006      	str	r0, [sp, #24]
 801a514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a518:	4809      	ldr	r0, [pc, #36]	; (801a540 <siprintf+0x38>)
 801a51a:	9107      	str	r1, [sp, #28]
 801a51c:	9104      	str	r1, [sp, #16]
 801a51e:	4909      	ldr	r1, [pc, #36]	; (801a544 <siprintf+0x3c>)
 801a520:	f853 2b04 	ldr.w	r2, [r3], #4
 801a524:	9105      	str	r1, [sp, #20]
 801a526:	6800      	ldr	r0, [r0, #0]
 801a528:	9301      	str	r3, [sp, #4]
 801a52a:	a902      	add	r1, sp, #8
 801a52c:	f001 fbf0 	bl	801bd10 <_svfiprintf_r>
 801a530:	9b02      	ldr	r3, [sp, #8]
 801a532:	2200      	movs	r2, #0
 801a534:	701a      	strb	r2, [r3, #0]
 801a536:	b01c      	add	sp, #112	; 0x70
 801a538:	f85d eb04 	ldr.w	lr, [sp], #4
 801a53c:	b003      	add	sp, #12
 801a53e:	4770      	bx	lr
 801a540:	24000100 	.word	0x24000100
 801a544:	ffff0208 	.word	0xffff0208

0801a548 <quorem>:
 801a548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a54c:	6903      	ldr	r3, [r0, #16]
 801a54e:	690c      	ldr	r4, [r1, #16]
 801a550:	42a3      	cmp	r3, r4
 801a552:	4607      	mov	r7, r0
 801a554:	f2c0 8081 	blt.w	801a65a <quorem+0x112>
 801a558:	3c01      	subs	r4, #1
 801a55a:	f101 0814 	add.w	r8, r1, #20
 801a55e:	f100 0514 	add.w	r5, r0, #20
 801a562:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a566:	9301      	str	r3, [sp, #4]
 801a568:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a56c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a570:	3301      	adds	r3, #1
 801a572:	429a      	cmp	r2, r3
 801a574:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a578:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a57c:	fbb2 f6f3 	udiv	r6, r2, r3
 801a580:	d331      	bcc.n	801a5e6 <quorem+0x9e>
 801a582:	f04f 0e00 	mov.w	lr, #0
 801a586:	4640      	mov	r0, r8
 801a588:	46ac      	mov	ip, r5
 801a58a:	46f2      	mov	sl, lr
 801a58c:	f850 2b04 	ldr.w	r2, [r0], #4
 801a590:	b293      	uxth	r3, r2
 801a592:	fb06 e303 	mla	r3, r6, r3, lr
 801a596:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801a59a:	b29b      	uxth	r3, r3
 801a59c:	ebaa 0303 	sub.w	r3, sl, r3
 801a5a0:	f8dc a000 	ldr.w	sl, [ip]
 801a5a4:	0c12      	lsrs	r2, r2, #16
 801a5a6:	fa13 f38a 	uxtah	r3, r3, sl
 801a5aa:	fb06 e202 	mla	r2, r6, r2, lr
 801a5ae:	9300      	str	r3, [sp, #0]
 801a5b0:	9b00      	ldr	r3, [sp, #0]
 801a5b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a5b6:	b292      	uxth	r2, r2
 801a5b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a5bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a5c0:	f8bd 3000 	ldrh.w	r3, [sp]
 801a5c4:	4581      	cmp	r9, r0
 801a5c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a5ca:	f84c 3b04 	str.w	r3, [ip], #4
 801a5ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a5d2:	d2db      	bcs.n	801a58c <quorem+0x44>
 801a5d4:	f855 300b 	ldr.w	r3, [r5, fp]
 801a5d8:	b92b      	cbnz	r3, 801a5e6 <quorem+0x9e>
 801a5da:	9b01      	ldr	r3, [sp, #4]
 801a5dc:	3b04      	subs	r3, #4
 801a5de:	429d      	cmp	r5, r3
 801a5e0:	461a      	mov	r2, r3
 801a5e2:	d32e      	bcc.n	801a642 <quorem+0xfa>
 801a5e4:	613c      	str	r4, [r7, #16]
 801a5e6:	4638      	mov	r0, r7
 801a5e8:	f001 f93e 	bl	801b868 <__mcmp>
 801a5ec:	2800      	cmp	r0, #0
 801a5ee:	db24      	blt.n	801a63a <quorem+0xf2>
 801a5f0:	3601      	adds	r6, #1
 801a5f2:	4628      	mov	r0, r5
 801a5f4:	f04f 0c00 	mov.w	ip, #0
 801a5f8:	f858 2b04 	ldr.w	r2, [r8], #4
 801a5fc:	f8d0 e000 	ldr.w	lr, [r0]
 801a600:	b293      	uxth	r3, r2
 801a602:	ebac 0303 	sub.w	r3, ip, r3
 801a606:	0c12      	lsrs	r2, r2, #16
 801a608:	fa13 f38e 	uxtah	r3, r3, lr
 801a60c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801a610:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a614:	b29b      	uxth	r3, r3
 801a616:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a61a:	45c1      	cmp	r9, r8
 801a61c:	f840 3b04 	str.w	r3, [r0], #4
 801a620:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801a624:	d2e8      	bcs.n	801a5f8 <quorem+0xb0>
 801a626:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a62a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a62e:	b922      	cbnz	r2, 801a63a <quorem+0xf2>
 801a630:	3b04      	subs	r3, #4
 801a632:	429d      	cmp	r5, r3
 801a634:	461a      	mov	r2, r3
 801a636:	d30a      	bcc.n	801a64e <quorem+0x106>
 801a638:	613c      	str	r4, [r7, #16]
 801a63a:	4630      	mov	r0, r6
 801a63c:	b003      	add	sp, #12
 801a63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a642:	6812      	ldr	r2, [r2, #0]
 801a644:	3b04      	subs	r3, #4
 801a646:	2a00      	cmp	r2, #0
 801a648:	d1cc      	bne.n	801a5e4 <quorem+0x9c>
 801a64a:	3c01      	subs	r4, #1
 801a64c:	e7c7      	b.n	801a5de <quorem+0x96>
 801a64e:	6812      	ldr	r2, [r2, #0]
 801a650:	3b04      	subs	r3, #4
 801a652:	2a00      	cmp	r2, #0
 801a654:	d1f0      	bne.n	801a638 <quorem+0xf0>
 801a656:	3c01      	subs	r4, #1
 801a658:	e7eb      	b.n	801a632 <quorem+0xea>
 801a65a:	2000      	movs	r0, #0
 801a65c:	e7ee      	b.n	801a63c <quorem+0xf4>
	...

0801a660 <_dtoa_r>:
 801a660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a664:	ed2d 8b02 	vpush	{d8}
 801a668:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801a66a:	b091      	sub	sp, #68	; 0x44
 801a66c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a670:	ec59 8b10 	vmov	r8, r9, d0
 801a674:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a676:	9106      	str	r1, [sp, #24]
 801a678:	4606      	mov	r6, r0
 801a67a:	9208      	str	r2, [sp, #32]
 801a67c:	930c      	str	r3, [sp, #48]	; 0x30
 801a67e:	b975      	cbnz	r5, 801a69e <_dtoa_r+0x3e>
 801a680:	2010      	movs	r0, #16
 801a682:	f000 fe59 	bl	801b338 <malloc>
 801a686:	4602      	mov	r2, r0
 801a688:	6270      	str	r0, [r6, #36]	; 0x24
 801a68a:	b920      	cbnz	r0, 801a696 <_dtoa_r+0x36>
 801a68c:	4baa      	ldr	r3, [pc, #680]	; (801a938 <_dtoa_r+0x2d8>)
 801a68e:	21ea      	movs	r1, #234	; 0xea
 801a690:	48aa      	ldr	r0, [pc, #680]	; (801a93c <_dtoa_r+0x2dc>)
 801a692:	f001 ff05 	bl	801c4a0 <__assert_func>
 801a696:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a69a:	6005      	str	r5, [r0, #0]
 801a69c:	60c5      	str	r5, [r0, #12]
 801a69e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a6a0:	6819      	ldr	r1, [r3, #0]
 801a6a2:	b151      	cbz	r1, 801a6ba <_dtoa_r+0x5a>
 801a6a4:	685a      	ldr	r2, [r3, #4]
 801a6a6:	604a      	str	r2, [r1, #4]
 801a6a8:	2301      	movs	r3, #1
 801a6aa:	4093      	lsls	r3, r2
 801a6ac:	608b      	str	r3, [r1, #8]
 801a6ae:	4630      	mov	r0, r6
 801a6b0:	f000 fe98 	bl	801b3e4 <_Bfree>
 801a6b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801a6b6:	2200      	movs	r2, #0
 801a6b8:	601a      	str	r2, [r3, #0]
 801a6ba:	f1b9 0300 	subs.w	r3, r9, #0
 801a6be:	bfbb      	ittet	lt
 801a6c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a6c4:	9303      	strlt	r3, [sp, #12]
 801a6c6:	2300      	movge	r3, #0
 801a6c8:	2201      	movlt	r2, #1
 801a6ca:	bfac      	ite	ge
 801a6cc:	6023      	strge	r3, [r4, #0]
 801a6ce:	6022      	strlt	r2, [r4, #0]
 801a6d0:	4b9b      	ldr	r3, [pc, #620]	; (801a940 <_dtoa_r+0x2e0>)
 801a6d2:	9c03      	ldr	r4, [sp, #12]
 801a6d4:	43a3      	bics	r3, r4
 801a6d6:	d11c      	bne.n	801a712 <_dtoa_r+0xb2>
 801a6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a6da:	f242 730f 	movw	r3, #9999	; 0x270f
 801a6de:	6013      	str	r3, [r2, #0]
 801a6e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a6e4:	ea53 0308 	orrs.w	r3, r3, r8
 801a6e8:	f000 84fd 	beq.w	801b0e6 <_dtoa_r+0xa86>
 801a6ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a6ee:	b963      	cbnz	r3, 801a70a <_dtoa_r+0xaa>
 801a6f0:	4b94      	ldr	r3, [pc, #592]	; (801a944 <_dtoa_r+0x2e4>)
 801a6f2:	e01f      	b.n	801a734 <_dtoa_r+0xd4>
 801a6f4:	4b94      	ldr	r3, [pc, #592]	; (801a948 <_dtoa_r+0x2e8>)
 801a6f6:	9301      	str	r3, [sp, #4]
 801a6f8:	3308      	adds	r3, #8
 801a6fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a6fc:	6013      	str	r3, [r2, #0]
 801a6fe:	9801      	ldr	r0, [sp, #4]
 801a700:	b011      	add	sp, #68	; 0x44
 801a702:	ecbd 8b02 	vpop	{d8}
 801a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a70a:	4b8e      	ldr	r3, [pc, #568]	; (801a944 <_dtoa_r+0x2e4>)
 801a70c:	9301      	str	r3, [sp, #4]
 801a70e:	3303      	adds	r3, #3
 801a710:	e7f3      	b.n	801a6fa <_dtoa_r+0x9a>
 801a712:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a716:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71e:	d10b      	bne.n	801a738 <_dtoa_r+0xd8>
 801a720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a722:	2301      	movs	r3, #1
 801a724:	6013      	str	r3, [r2, #0]
 801a726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a728:	2b00      	cmp	r3, #0
 801a72a:	f000 84d9 	beq.w	801b0e0 <_dtoa_r+0xa80>
 801a72e:	4887      	ldr	r0, [pc, #540]	; (801a94c <_dtoa_r+0x2ec>)
 801a730:	6018      	str	r0, [r3, #0]
 801a732:	1e43      	subs	r3, r0, #1
 801a734:	9301      	str	r3, [sp, #4]
 801a736:	e7e2      	b.n	801a6fe <_dtoa_r+0x9e>
 801a738:	a90f      	add	r1, sp, #60	; 0x3c
 801a73a:	aa0e      	add	r2, sp, #56	; 0x38
 801a73c:	4630      	mov	r0, r6
 801a73e:	eeb0 0b48 	vmov.f64	d0, d8
 801a742:	f001 f937 	bl	801b9b4 <__d2b>
 801a746:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801a74a:	4605      	mov	r5, r0
 801a74c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a74e:	2900      	cmp	r1, #0
 801a750:	d046      	beq.n	801a7e0 <_dtoa_r+0x180>
 801a752:	ee18 4a90 	vmov	r4, s17
 801a756:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a75a:	ec53 2b18 	vmov	r2, r3, d8
 801a75e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801a762:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a766:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a76a:	2400      	movs	r4, #0
 801a76c:	ec43 2b16 	vmov	d6, r2, r3
 801a770:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801a774:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a920 <_dtoa_r+0x2c0>
 801a778:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a77c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801a928 <_dtoa_r+0x2c8>
 801a780:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a784:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801a930 <_dtoa_r+0x2d0>
 801a788:	ee07 1a90 	vmov	s15, r1
 801a78c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a790:	eeb0 7b46 	vmov.f64	d7, d6
 801a794:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a798:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a79c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7a4:	ee16 ba90 	vmov	fp, s13
 801a7a8:	940a      	str	r4, [sp, #40]	; 0x28
 801a7aa:	d508      	bpl.n	801a7be <_dtoa_r+0x15e>
 801a7ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a7b0:	eeb4 6b47 	vcmp.f64	d6, d7
 801a7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b8:	bf18      	it	ne
 801a7ba:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a7be:	f1bb 0f16 	cmp.w	fp, #22
 801a7c2:	d82f      	bhi.n	801a824 <_dtoa_r+0x1c4>
 801a7c4:	4b62      	ldr	r3, [pc, #392]	; (801a950 <_dtoa_r+0x2f0>)
 801a7c6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a7ca:	ed93 7b00 	vldr	d7, [r3]
 801a7ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7d6:	d501      	bpl.n	801a7dc <_dtoa_r+0x17c>
 801a7d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a7dc:	2300      	movs	r3, #0
 801a7de:	e022      	b.n	801a826 <_dtoa_r+0x1c6>
 801a7e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a7e2:	4401      	add	r1, r0
 801a7e4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801a7e8:	2b20      	cmp	r3, #32
 801a7ea:	bfc1      	itttt	gt
 801a7ec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801a7f0:	fa04 f303 	lslgt.w	r3, r4, r3
 801a7f4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801a7f8:	fa28 f804 	lsrgt.w	r8, r8, r4
 801a7fc:	bfd6      	itet	le
 801a7fe:	f1c3 0320 	rsble	r3, r3, #32
 801a802:	ea43 0808 	orrgt.w	r8, r3, r8
 801a806:	fa08 f803 	lslle.w	r8, r8, r3
 801a80a:	ee07 8a90 	vmov	s15, r8
 801a80e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a812:	3901      	subs	r1, #1
 801a814:	ee17 4a90 	vmov	r4, s15
 801a818:	ec53 2b17 	vmov	r2, r3, d7
 801a81c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801a820:	2401      	movs	r4, #1
 801a822:	e7a3      	b.n	801a76c <_dtoa_r+0x10c>
 801a824:	2301      	movs	r3, #1
 801a826:	930b      	str	r3, [sp, #44]	; 0x2c
 801a828:	1a43      	subs	r3, r0, r1
 801a82a:	1e5a      	subs	r2, r3, #1
 801a82c:	bf45      	ittet	mi
 801a82e:	f1c3 0301 	rsbmi	r3, r3, #1
 801a832:	9304      	strmi	r3, [sp, #16]
 801a834:	2300      	movpl	r3, #0
 801a836:	2300      	movmi	r3, #0
 801a838:	9205      	str	r2, [sp, #20]
 801a83a:	bf54      	ite	pl
 801a83c:	9304      	strpl	r3, [sp, #16]
 801a83e:	9305      	strmi	r3, [sp, #20]
 801a840:	f1bb 0f00 	cmp.w	fp, #0
 801a844:	db18      	blt.n	801a878 <_dtoa_r+0x218>
 801a846:	9b05      	ldr	r3, [sp, #20]
 801a848:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801a84c:	445b      	add	r3, fp
 801a84e:	9305      	str	r3, [sp, #20]
 801a850:	2300      	movs	r3, #0
 801a852:	9a06      	ldr	r2, [sp, #24]
 801a854:	2a09      	cmp	r2, #9
 801a856:	d849      	bhi.n	801a8ec <_dtoa_r+0x28c>
 801a858:	2a05      	cmp	r2, #5
 801a85a:	bfc4      	itt	gt
 801a85c:	3a04      	subgt	r2, #4
 801a85e:	9206      	strgt	r2, [sp, #24]
 801a860:	9a06      	ldr	r2, [sp, #24]
 801a862:	f1a2 0202 	sub.w	r2, r2, #2
 801a866:	bfcc      	ite	gt
 801a868:	2400      	movgt	r4, #0
 801a86a:	2401      	movle	r4, #1
 801a86c:	2a03      	cmp	r2, #3
 801a86e:	d848      	bhi.n	801a902 <_dtoa_r+0x2a2>
 801a870:	e8df f002 	tbb	[pc, r2]
 801a874:	3a2c2e0b 	.word	0x3a2c2e0b
 801a878:	9b04      	ldr	r3, [sp, #16]
 801a87a:	2200      	movs	r2, #0
 801a87c:	eba3 030b 	sub.w	r3, r3, fp
 801a880:	9304      	str	r3, [sp, #16]
 801a882:	9209      	str	r2, [sp, #36]	; 0x24
 801a884:	f1cb 0300 	rsb	r3, fp, #0
 801a888:	e7e3      	b.n	801a852 <_dtoa_r+0x1f2>
 801a88a:	2200      	movs	r2, #0
 801a88c:	9207      	str	r2, [sp, #28]
 801a88e:	9a08      	ldr	r2, [sp, #32]
 801a890:	2a00      	cmp	r2, #0
 801a892:	dc39      	bgt.n	801a908 <_dtoa_r+0x2a8>
 801a894:	f04f 0a01 	mov.w	sl, #1
 801a898:	46d1      	mov	r9, sl
 801a89a:	4652      	mov	r2, sl
 801a89c:	f8cd a020 	str.w	sl, [sp, #32]
 801a8a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801a8a2:	2100      	movs	r1, #0
 801a8a4:	6079      	str	r1, [r7, #4]
 801a8a6:	2004      	movs	r0, #4
 801a8a8:	f100 0c14 	add.w	ip, r0, #20
 801a8ac:	4594      	cmp	ip, r2
 801a8ae:	6879      	ldr	r1, [r7, #4]
 801a8b0:	d92f      	bls.n	801a912 <_dtoa_r+0x2b2>
 801a8b2:	4630      	mov	r0, r6
 801a8b4:	930d      	str	r3, [sp, #52]	; 0x34
 801a8b6:	f000 fd55 	bl	801b364 <_Balloc>
 801a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a8bc:	9001      	str	r0, [sp, #4]
 801a8be:	4602      	mov	r2, r0
 801a8c0:	2800      	cmp	r0, #0
 801a8c2:	d149      	bne.n	801a958 <_dtoa_r+0x2f8>
 801a8c4:	4b23      	ldr	r3, [pc, #140]	; (801a954 <_dtoa_r+0x2f4>)
 801a8c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801a8ca:	e6e1      	b.n	801a690 <_dtoa_r+0x30>
 801a8cc:	2201      	movs	r2, #1
 801a8ce:	e7dd      	b.n	801a88c <_dtoa_r+0x22c>
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	9207      	str	r2, [sp, #28]
 801a8d4:	9a08      	ldr	r2, [sp, #32]
 801a8d6:	eb0b 0a02 	add.w	sl, fp, r2
 801a8da:	f10a 0901 	add.w	r9, sl, #1
 801a8de:	464a      	mov	r2, r9
 801a8e0:	2a01      	cmp	r2, #1
 801a8e2:	bfb8      	it	lt
 801a8e4:	2201      	movlt	r2, #1
 801a8e6:	e7db      	b.n	801a8a0 <_dtoa_r+0x240>
 801a8e8:	2201      	movs	r2, #1
 801a8ea:	e7f2      	b.n	801a8d2 <_dtoa_r+0x272>
 801a8ec:	2401      	movs	r4, #1
 801a8ee:	2200      	movs	r2, #0
 801a8f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a8f4:	f04f 3aff 	mov.w	sl, #4294967295
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	46d1      	mov	r9, sl
 801a8fc:	2212      	movs	r2, #18
 801a8fe:	9108      	str	r1, [sp, #32]
 801a900:	e7ce      	b.n	801a8a0 <_dtoa_r+0x240>
 801a902:	2201      	movs	r2, #1
 801a904:	9207      	str	r2, [sp, #28]
 801a906:	e7f5      	b.n	801a8f4 <_dtoa_r+0x294>
 801a908:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a90c:	46d1      	mov	r9, sl
 801a90e:	4652      	mov	r2, sl
 801a910:	e7c6      	b.n	801a8a0 <_dtoa_r+0x240>
 801a912:	3101      	adds	r1, #1
 801a914:	6079      	str	r1, [r7, #4]
 801a916:	0040      	lsls	r0, r0, #1
 801a918:	e7c6      	b.n	801a8a8 <_dtoa_r+0x248>
 801a91a:	bf00      	nop
 801a91c:	f3af 8000 	nop.w
 801a920:	636f4361 	.word	0x636f4361
 801a924:	3fd287a7 	.word	0x3fd287a7
 801a928:	8b60c8b3 	.word	0x8b60c8b3
 801a92c:	3fc68a28 	.word	0x3fc68a28
 801a930:	509f79fb 	.word	0x509f79fb
 801a934:	3fd34413 	.word	0x3fd34413
 801a938:	0801d4e1 	.word	0x0801d4e1
 801a93c:	0801d4f8 	.word	0x0801d4f8
 801a940:	7ff00000 	.word	0x7ff00000
 801a944:	0801d4dd 	.word	0x0801d4dd
 801a948:	0801d4d4 	.word	0x0801d4d4
 801a94c:	0801d4b1 	.word	0x0801d4b1
 801a950:	0801d648 	.word	0x0801d648
 801a954:	0801d553 	.word	0x0801d553
 801a958:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a95a:	9901      	ldr	r1, [sp, #4]
 801a95c:	6011      	str	r1, [r2, #0]
 801a95e:	f1b9 0f0e 	cmp.w	r9, #14
 801a962:	d86c      	bhi.n	801aa3e <_dtoa_r+0x3de>
 801a964:	2c00      	cmp	r4, #0
 801a966:	d06a      	beq.n	801aa3e <_dtoa_r+0x3de>
 801a968:	f1bb 0f00 	cmp.w	fp, #0
 801a96c:	f340 80a0 	ble.w	801aab0 <_dtoa_r+0x450>
 801a970:	49c1      	ldr	r1, [pc, #772]	; (801ac78 <_dtoa_r+0x618>)
 801a972:	f00b 020f 	and.w	r2, fp, #15
 801a976:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801a97a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a97e:	ed92 7b00 	vldr	d7, [r2]
 801a982:	ea4f 112b 	mov.w	r1, fp, asr #4
 801a986:	f000 8087 	beq.w	801aa98 <_dtoa_r+0x438>
 801a98a:	4abc      	ldr	r2, [pc, #752]	; (801ac7c <_dtoa_r+0x61c>)
 801a98c:	ed92 6b08 	vldr	d6, [r2, #32]
 801a990:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a994:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a998:	f001 010f 	and.w	r1, r1, #15
 801a99c:	2203      	movs	r2, #3
 801a99e:	48b7      	ldr	r0, [pc, #732]	; (801ac7c <_dtoa_r+0x61c>)
 801a9a0:	2900      	cmp	r1, #0
 801a9a2:	d17b      	bne.n	801aa9c <_dtoa_r+0x43c>
 801a9a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a9a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a9b2:	2900      	cmp	r1, #0
 801a9b4:	f000 80a2 	beq.w	801aafc <_dtoa_r+0x49c>
 801a9b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a9bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a9c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9c8:	f140 8098 	bpl.w	801aafc <_dtoa_r+0x49c>
 801a9cc:	f1b9 0f00 	cmp.w	r9, #0
 801a9d0:	f000 8094 	beq.w	801aafc <_dtoa_r+0x49c>
 801a9d4:	f1ba 0f00 	cmp.w	sl, #0
 801a9d8:	dd2f      	ble.n	801aa3a <_dtoa_r+0x3da>
 801a9da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a9de:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a9e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a9e6:	f10b 37ff 	add.w	r7, fp, #4294967295
 801a9ea:	3201      	adds	r2, #1
 801a9ec:	4650      	mov	r0, sl
 801a9ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a9f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a9f6:	ee07 2a90 	vmov	s15, r2
 801a9fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a9fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 801aa02:	ee15 4a90 	vmov	r4, s11
 801aa06:	ec52 1b15 	vmov	r1, r2, d5
 801aa0a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801aa0e:	2800      	cmp	r0, #0
 801aa10:	d177      	bne.n	801ab02 <_dtoa_r+0x4a2>
 801aa12:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801aa16:	ee36 6b47 	vsub.f64	d6, d6, d7
 801aa1a:	ec42 1b17 	vmov	d7, r1, r2
 801aa1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa26:	f300 8263 	bgt.w	801aef0 <_dtoa_r+0x890>
 801aa2a:	eeb1 7b47 	vneg.f64	d7, d7
 801aa2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa36:	f100 8258 	bmi.w	801aeea <_dtoa_r+0x88a>
 801aa3a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801aa3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aa40:	2a00      	cmp	r2, #0
 801aa42:	f2c0 811d 	blt.w	801ac80 <_dtoa_r+0x620>
 801aa46:	f1bb 0f0e 	cmp.w	fp, #14
 801aa4a:	f300 8119 	bgt.w	801ac80 <_dtoa_r+0x620>
 801aa4e:	4b8a      	ldr	r3, [pc, #552]	; (801ac78 <_dtoa_r+0x618>)
 801aa50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801aa54:	ed93 6b00 	vldr	d6, [r3]
 801aa58:	9b08      	ldr	r3, [sp, #32]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	f280 80b7 	bge.w	801abce <_dtoa_r+0x56e>
 801aa60:	f1b9 0f00 	cmp.w	r9, #0
 801aa64:	f300 80b3 	bgt.w	801abce <_dtoa_r+0x56e>
 801aa68:	f040 823f 	bne.w	801aeea <_dtoa_r+0x88a>
 801aa6c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801aa70:	ee26 6b07 	vmul.f64	d6, d6, d7
 801aa74:	ed9d 7b02 	vldr	d7, [sp, #8]
 801aa78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801aa7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa80:	464c      	mov	r4, r9
 801aa82:	464f      	mov	r7, r9
 801aa84:	f280 8215 	bge.w	801aeb2 <_dtoa_r+0x852>
 801aa88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aa8c:	2331      	movs	r3, #49	; 0x31
 801aa8e:	f808 3b01 	strb.w	r3, [r8], #1
 801aa92:	f10b 0b01 	add.w	fp, fp, #1
 801aa96:	e211      	b.n	801aebc <_dtoa_r+0x85c>
 801aa98:	2202      	movs	r2, #2
 801aa9a:	e780      	b.n	801a99e <_dtoa_r+0x33e>
 801aa9c:	07cc      	lsls	r4, r1, #31
 801aa9e:	d504      	bpl.n	801aaaa <_dtoa_r+0x44a>
 801aaa0:	ed90 6b00 	vldr	d6, [r0]
 801aaa4:	3201      	adds	r2, #1
 801aaa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aaaa:	1049      	asrs	r1, r1, #1
 801aaac:	3008      	adds	r0, #8
 801aaae:	e777      	b.n	801a9a0 <_dtoa_r+0x340>
 801aab0:	d022      	beq.n	801aaf8 <_dtoa_r+0x498>
 801aab2:	f1cb 0100 	rsb	r1, fp, #0
 801aab6:	4a70      	ldr	r2, [pc, #448]	; (801ac78 <_dtoa_r+0x618>)
 801aab8:	f001 000f 	and.w	r0, r1, #15
 801aabc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801aac0:	ed92 7b00 	vldr	d7, [r2]
 801aac4:	ee28 7b07 	vmul.f64	d7, d8, d7
 801aac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aacc:	486b      	ldr	r0, [pc, #428]	; (801ac7c <_dtoa_r+0x61c>)
 801aace:	1109      	asrs	r1, r1, #4
 801aad0:	2400      	movs	r4, #0
 801aad2:	2202      	movs	r2, #2
 801aad4:	b929      	cbnz	r1, 801aae2 <_dtoa_r+0x482>
 801aad6:	2c00      	cmp	r4, #0
 801aad8:	f43f af6a 	beq.w	801a9b0 <_dtoa_r+0x350>
 801aadc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801aae0:	e766      	b.n	801a9b0 <_dtoa_r+0x350>
 801aae2:	07cf      	lsls	r7, r1, #31
 801aae4:	d505      	bpl.n	801aaf2 <_dtoa_r+0x492>
 801aae6:	ed90 6b00 	vldr	d6, [r0]
 801aaea:	3201      	adds	r2, #1
 801aaec:	2401      	movs	r4, #1
 801aaee:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aaf2:	1049      	asrs	r1, r1, #1
 801aaf4:	3008      	adds	r0, #8
 801aaf6:	e7ed      	b.n	801aad4 <_dtoa_r+0x474>
 801aaf8:	2202      	movs	r2, #2
 801aafa:	e759      	b.n	801a9b0 <_dtoa_r+0x350>
 801aafc:	465f      	mov	r7, fp
 801aafe:	4648      	mov	r0, r9
 801ab00:	e775      	b.n	801a9ee <_dtoa_r+0x38e>
 801ab02:	ec42 1b17 	vmov	d7, r1, r2
 801ab06:	4a5c      	ldr	r2, [pc, #368]	; (801ac78 <_dtoa_r+0x618>)
 801ab08:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ab0c:	ed12 4b02 	vldr	d4, [r2, #-8]
 801ab10:	9a01      	ldr	r2, [sp, #4]
 801ab12:	1814      	adds	r4, r2, r0
 801ab14:	9a07      	ldr	r2, [sp, #28]
 801ab16:	b352      	cbz	r2, 801ab6e <_dtoa_r+0x50e>
 801ab18:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ab1c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ab20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab24:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ab28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ab2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ab30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ab34:	ee14 2a90 	vmov	r2, s9
 801ab38:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ab3c:	3230      	adds	r2, #48	; 0x30
 801ab3e:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ab42:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab4a:	f808 2b01 	strb.w	r2, [r8], #1
 801ab4e:	d439      	bmi.n	801abc4 <_dtoa_r+0x564>
 801ab50:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ab54:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ab58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab5c:	d472      	bmi.n	801ac44 <_dtoa_r+0x5e4>
 801ab5e:	45a0      	cmp	r8, r4
 801ab60:	f43f af6b 	beq.w	801aa3a <_dtoa_r+0x3da>
 801ab64:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ab68:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ab6c:	e7e0      	b.n	801ab30 <_dtoa_r+0x4d0>
 801ab6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ab72:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ab76:	4621      	mov	r1, r4
 801ab78:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ab7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ab80:	ee14 2a90 	vmov	r2, s9
 801ab84:	3230      	adds	r2, #48	; 0x30
 801ab86:	f808 2b01 	strb.w	r2, [r8], #1
 801ab8a:	45a0      	cmp	r8, r4
 801ab8c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ab90:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ab94:	d118      	bne.n	801abc8 <_dtoa_r+0x568>
 801ab96:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801ab9a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801ab9e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba6:	dc4d      	bgt.n	801ac44 <_dtoa_r+0x5e4>
 801aba8:	ee35 7b47 	vsub.f64	d7, d5, d7
 801abac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801abb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abb4:	f57f af41 	bpl.w	801aa3a <_dtoa_r+0x3da>
 801abb8:	4688      	mov	r8, r1
 801abba:	3901      	subs	r1, #1
 801abbc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801abc0:	2b30      	cmp	r3, #48	; 0x30
 801abc2:	d0f9      	beq.n	801abb8 <_dtoa_r+0x558>
 801abc4:	46bb      	mov	fp, r7
 801abc6:	e02a      	b.n	801ac1e <_dtoa_r+0x5be>
 801abc8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801abcc:	e7d6      	b.n	801ab7c <_dtoa_r+0x51c>
 801abce:	ed9d 7b02 	vldr	d7, [sp, #8]
 801abd2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801abd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801abda:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801abde:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801abe2:	ee15 3a10 	vmov	r3, s10
 801abe6:	3330      	adds	r3, #48	; 0x30
 801abe8:	f808 3b01 	strb.w	r3, [r8], #1
 801abec:	9b01      	ldr	r3, [sp, #4]
 801abee:	eba8 0303 	sub.w	r3, r8, r3
 801abf2:	4599      	cmp	r9, r3
 801abf4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801abf8:	eea3 7b46 	vfms.f64	d7, d3, d6
 801abfc:	d133      	bne.n	801ac66 <_dtoa_r+0x606>
 801abfe:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ac02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ac06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac0a:	dc1a      	bgt.n	801ac42 <_dtoa_r+0x5e2>
 801ac0c:	eeb4 7b46 	vcmp.f64	d7, d6
 801ac10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac14:	d103      	bne.n	801ac1e <_dtoa_r+0x5be>
 801ac16:	ee15 3a10 	vmov	r3, s10
 801ac1a:	07d9      	lsls	r1, r3, #31
 801ac1c:	d411      	bmi.n	801ac42 <_dtoa_r+0x5e2>
 801ac1e:	4629      	mov	r1, r5
 801ac20:	4630      	mov	r0, r6
 801ac22:	f000 fbdf 	bl	801b3e4 <_Bfree>
 801ac26:	2300      	movs	r3, #0
 801ac28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac2a:	f888 3000 	strb.w	r3, [r8]
 801ac2e:	f10b 0301 	add.w	r3, fp, #1
 801ac32:	6013      	str	r3, [r2, #0]
 801ac34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	f43f ad61 	beq.w	801a6fe <_dtoa_r+0x9e>
 801ac3c:	f8c3 8000 	str.w	r8, [r3]
 801ac40:	e55d      	b.n	801a6fe <_dtoa_r+0x9e>
 801ac42:	465f      	mov	r7, fp
 801ac44:	4643      	mov	r3, r8
 801ac46:	4698      	mov	r8, r3
 801ac48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ac4c:	2a39      	cmp	r2, #57	; 0x39
 801ac4e:	d106      	bne.n	801ac5e <_dtoa_r+0x5fe>
 801ac50:	9a01      	ldr	r2, [sp, #4]
 801ac52:	429a      	cmp	r2, r3
 801ac54:	d1f7      	bne.n	801ac46 <_dtoa_r+0x5e6>
 801ac56:	9901      	ldr	r1, [sp, #4]
 801ac58:	2230      	movs	r2, #48	; 0x30
 801ac5a:	3701      	adds	r7, #1
 801ac5c:	700a      	strb	r2, [r1, #0]
 801ac5e:	781a      	ldrb	r2, [r3, #0]
 801ac60:	3201      	adds	r2, #1
 801ac62:	701a      	strb	r2, [r3, #0]
 801ac64:	e7ae      	b.n	801abc4 <_dtoa_r+0x564>
 801ac66:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ac6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac72:	d1b2      	bne.n	801abda <_dtoa_r+0x57a>
 801ac74:	e7d3      	b.n	801ac1e <_dtoa_r+0x5be>
 801ac76:	bf00      	nop
 801ac78:	0801d648 	.word	0x0801d648
 801ac7c:	0801d620 	.word	0x0801d620
 801ac80:	9907      	ldr	r1, [sp, #28]
 801ac82:	2900      	cmp	r1, #0
 801ac84:	f000 80d0 	beq.w	801ae28 <_dtoa_r+0x7c8>
 801ac88:	9906      	ldr	r1, [sp, #24]
 801ac8a:	2901      	cmp	r1, #1
 801ac8c:	f300 80b4 	bgt.w	801adf8 <_dtoa_r+0x798>
 801ac90:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ac92:	2900      	cmp	r1, #0
 801ac94:	f000 80ac 	beq.w	801adf0 <_dtoa_r+0x790>
 801ac98:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801ac9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801aca0:	461c      	mov	r4, r3
 801aca2:	930a      	str	r3, [sp, #40]	; 0x28
 801aca4:	9b04      	ldr	r3, [sp, #16]
 801aca6:	4413      	add	r3, r2
 801aca8:	9304      	str	r3, [sp, #16]
 801acaa:	9b05      	ldr	r3, [sp, #20]
 801acac:	2101      	movs	r1, #1
 801acae:	4413      	add	r3, r2
 801acb0:	4630      	mov	r0, r6
 801acb2:	9305      	str	r3, [sp, #20]
 801acb4:	f000 fc4e 	bl	801b554 <__i2b>
 801acb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801acba:	4607      	mov	r7, r0
 801acbc:	f1b8 0f00 	cmp.w	r8, #0
 801acc0:	dd0d      	ble.n	801acde <_dtoa_r+0x67e>
 801acc2:	9a05      	ldr	r2, [sp, #20]
 801acc4:	2a00      	cmp	r2, #0
 801acc6:	dd0a      	ble.n	801acde <_dtoa_r+0x67e>
 801acc8:	4542      	cmp	r2, r8
 801acca:	9904      	ldr	r1, [sp, #16]
 801accc:	bfa8      	it	ge
 801acce:	4642      	movge	r2, r8
 801acd0:	1a89      	subs	r1, r1, r2
 801acd2:	9104      	str	r1, [sp, #16]
 801acd4:	9905      	ldr	r1, [sp, #20]
 801acd6:	eba8 0802 	sub.w	r8, r8, r2
 801acda:	1a8a      	subs	r2, r1, r2
 801acdc:	9205      	str	r2, [sp, #20]
 801acde:	b303      	cbz	r3, 801ad22 <_dtoa_r+0x6c2>
 801ace0:	9a07      	ldr	r2, [sp, #28]
 801ace2:	2a00      	cmp	r2, #0
 801ace4:	f000 80a5 	beq.w	801ae32 <_dtoa_r+0x7d2>
 801ace8:	2c00      	cmp	r4, #0
 801acea:	dd13      	ble.n	801ad14 <_dtoa_r+0x6b4>
 801acec:	4639      	mov	r1, r7
 801acee:	4622      	mov	r2, r4
 801acf0:	4630      	mov	r0, r6
 801acf2:	930d      	str	r3, [sp, #52]	; 0x34
 801acf4:	f000 fcee 	bl	801b6d4 <__pow5mult>
 801acf8:	462a      	mov	r2, r5
 801acfa:	4601      	mov	r1, r0
 801acfc:	4607      	mov	r7, r0
 801acfe:	4630      	mov	r0, r6
 801ad00:	f000 fc3e 	bl	801b580 <__multiply>
 801ad04:	4629      	mov	r1, r5
 801ad06:	900a      	str	r0, [sp, #40]	; 0x28
 801ad08:	4630      	mov	r0, r6
 801ad0a:	f000 fb6b 	bl	801b3e4 <_Bfree>
 801ad0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad12:	4615      	mov	r5, r2
 801ad14:	1b1a      	subs	r2, r3, r4
 801ad16:	d004      	beq.n	801ad22 <_dtoa_r+0x6c2>
 801ad18:	4629      	mov	r1, r5
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	f000 fcda 	bl	801b6d4 <__pow5mult>
 801ad20:	4605      	mov	r5, r0
 801ad22:	2101      	movs	r1, #1
 801ad24:	4630      	mov	r0, r6
 801ad26:	f000 fc15 	bl	801b554 <__i2b>
 801ad2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	4604      	mov	r4, r0
 801ad30:	f340 8081 	ble.w	801ae36 <_dtoa_r+0x7d6>
 801ad34:	461a      	mov	r2, r3
 801ad36:	4601      	mov	r1, r0
 801ad38:	4630      	mov	r0, r6
 801ad3a:	f000 fccb 	bl	801b6d4 <__pow5mult>
 801ad3e:	9b06      	ldr	r3, [sp, #24]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	4604      	mov	r4, r0
 801ad44:	dd7a      	ble.n	801ae3c <_dtoa_r+0x7dc>
 801ad46:	2300      	movs	r3, #0
 801ad48:	930a      	str	r3, [sp, #40]	; 0x28
 801ad4a:	6922      	ldr	r2, [r4, #16]
 801ad4c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ad50:	6910      	ldr	r0, [r2, #16]
 801ad52:	f000 fbaf 	bl	801b4b4 <__hi0bits>
 801ad56:	f1c0 0020 	rsb	r0, r0, #32
 801ad5a:	9b05      	ldr	r3, [sp, #20]
 801ad5c:	4418      	add	r0, r3
 801ad5e:	f010 001f 	ands.w	r0, r0, #31
 801ad62:	f000 808c 	beq.w	801ae7e <_dtoa_r+0x81e>
 801ad66:	f1c0 0220 	rsb	r2, r0, #32
 801ad6a:	2a04      	cmp	r2, #4
 801ad6c:	f340 8085 	ble.w	801ae7a <_dtoa_r+0x81a>
 801ad70:	f1c0 001c 	rsb	r0, r0, #28
 801ad74:	9b04      	ldr	r3, [sp, #16]
 801ad76:	4403      	add	r3, r0
 801ad78:	9304      	str	r3, [sp, #16]
 801ad7a:	9b05      	ldr	r3, [sp, #20]
 801ad7c:	4403      	add	r3, r0
 801ad7e:	4480      	add	r8, r0
 801ad80:	9305      	str	r3, [sp, #20]
 801ad82:	9b04      	ldr	r3, [sp, #16]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	dd05      	ble.n	801ad94 <_dtoa_r+0x734>
 801ad88:	4629      	mov	r1, r5
 801ad8a:	461a      	mov	r2, r3
 801ad8c:	4630      	mov	r0, r6
 801ad8e:	f000 fcfb 	bl	801b788 <__lshift>
 801ad92:	4605      	mov	r5, r0
 801ad94:	9b05      	ldr	r3, [sp, #20]
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	dd05      	ble.n	801ada6 <_dtoa_r+0x746>
 801ad9a:	4621      	mov	r1, r4
 801ad9c:	461a      	mov	r2, r3
 801ad9e:	4630      	mov	r0, r6
 801ada0:	f000 fcf2 	bl	801b788 <__lshift>
 801ada4:	4604      	mov	r4, r0
 801ada6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d06a      	beq.n	801ae82 <_dtoa_r+0x822>
 801adac:	4621      	mov	r1, r4
 801adae:	4628      	mov	r0, r5
 801adb0:	f000 fd5a 	bl	801b868 <__mcmp>
 801adb4:	2800      	cmp	r0, #0
 801adb6:	da64      	bge.n	801ae82 <_dtoa_r+0x822>
 801adb8:	2300      	movs	r3, #0
 801adba:	4629      	mov	r1, r5
 801adbc:	220a      	movs	r2, #10
 801adbe:	4630      	mov	r0, r6
 801adc0:	f000 fb32 	bl	801b428 <__multadd>
 801adc4:	9b07      	ldr	r3, [sp, #28]
 801adc6:	f10b 3bff 	add.w	fp, fp, #4294967295
 801adca:	4605      	mov	r5, r0
 801adcc:	2b00      	cmp	r3, #0
 801adce:	f000 8191 	beq.w	801b0f4 <_dtoa_r+0xa94>
 801add2:	4639      	mov	r1, r7
 801add4:	2300      	movs	r3, #0
 801add6:	220a      	movs	r2, #10
 801add8:	4630      	mov	r0, r6
 801adda:	f000 fb25 	bl	801b428 <__multadd>
 801adde:	f1ba 0f00 	cmp.w	sl, #0
 801ade2:	4607      	mov	r7, r0
 801ade4:	f300 808d 	bgt.w	801af02 <_dtoa_r+0x8a2>
 801ade8:	9b06      	ldr	r3, [sp, #24]
 801adea:	2b02      	cmp	r3, #2
 801adec:	dc50      	bgt.n	801ae90 <_dtoa_r+0x830>
 801adee:	e088      	b.n	801af02 <_dtoa_r+0x8a2>
 801adf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801adf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801adf6:	e751      	b.n	801ac9c <_dtoa_r+0x63c>
 801adf8:	f109 34ff 	add.w	r4, r9, #4294967295
 801adfc:	42a3      	cmp	r3, r4
 801adfe:	bfbf      	itttt	lt
 801ae00:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801ae02:	1ae3      	sublt	r3, r4, r3
 801ae04:	18d2      	addlt	r2, r2, r3
 801ae06:	9209      	strlt	r2, [sp, #36]	; 0x24
 801ae08:	bfb6      	itet	lt
 801ae0a:	4623      	movlt	r3, r4
 801ae0c:	1b1c      	subge	r4, r3, r4
 801ae0e:	2400      	movlt	r4, #0
 801ae10:	f1b9 0f00 	cmp.w	r9, #0
 801ae14:	bfb5      	itete	lt
 801ae16:	9a04      	ldrlt	r2, [sp, #16]
 801ae18:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801ae1c:	eba2 0809 	sublt.w	r8, r2, r9
 801ae20:	464a      	movge	r2, r9
 801ae22:	bfb8      	it	lt
 801ae24:	2200      	movlt	r2, #0
 801ae26:	e73c      	b.n	801aca2 <_dtoa_r+0x642>
 801ae28:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ae2c:	9f07      	ldr	r7, [sp, #28]
 801ae2e:	461c      	mov	r4, r3
 801ae30:	e744      	b.n	801acbc <_dtoa_r+0x65c>
 801ae32:	461a      	mov	r2, r3
 801ae34:	e770      	b.n	801ad18 <_dtoa_r+0x6b8>
 801ae36:	9b06      	ldr	r3, [sp, #24]
 801ae38:	2b01      	cmp	r3, #1
 801ae3a:	dc18      	bgt.n	801ae6e <_dtoa_r+0x80e>
 801ae3c:	9b02      	ldr	r3, [sp, #8]
 801ae3e:	b9b3      	cbnz	r3, 801ae6e <_dtoa_r+0x80e>
 801ae40:	9b03      	ldr	r3, [sp, #12]
 801ae42:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801ae46:	b9a2      	cbnz	r2, 801ae72 <_dtoa_r+0x812>
 801ae48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ae4c:	0d12      	lsrs	r2, r2, #20
 801ae4e:	0512      	lsls	r2, r2, #20
 801ae50:	b18a      	cbz	r2, 801ae76 <_dtoa_r+0x816>
 801ae52:	9b04      	ldr	r3, [sp, #16]
 801ae54:	3301      	adds	r3, #1
 801ae56:	9304      	str	r3, [sp, #16]
 801ae58:	9b05      	ldr	r3, [sp, #20]
 801ae5a:	3301      	adds	r3, #1
 801ae5c:	9305      	str	r3, [sp, #20]
 801ae5e:	2301      	movs	r3, #1
 801ae60:	930a      	str	r3, [sp, #40]	; 0x28
 801ae62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae64:	2b00      	cmp	r3, #0
 801ae66:	f47f af70 	bne.w	801ad4a <_dtoa_r+0x6ea>
 801ae6a:	2001      	movs	r0, #1
 801ae6c:	e775      	b.n	801ad5a <_dtoa_r+0x6fa>
 801ae6e:	2300      	movs	r3, #0
 801ae70:	e7f6      	b.n	801ae60 <_dtoa_r+0x800>
 801ae72:	9b02      	ldr	r3, [sp, #8]
 801ae74:	e7f4      	b.n	801ae60 <_dtoa_r+0x800>
 801ae76:	920a      	str	r2, [sp, #40]	; 0x28
 801ae78:	e7f3      	b.n	801ae62 <_dtoa_r+0x802>
 801ae7a:	d082      	beq.n	801ad82 <_dtoa_r+0x722>
 801ae7c:	4610      	mov	r0, r2
 801ae7e:	301c      	adds	r0, #28
 801ae80:	e778      	b.n	801ad74 <_dtoa_r+0x714>
 801ae82:	f1b9 0f00 	cmp.w	r9, #0
 801ae86:	dc37      	bgt.n	801aef8 <_dtoa_r+0x898>
 801ae88:	9b06      	ldr	r3, [sp, #24]
 801ae8a:	2b02      	cmp	r3, #2
 801ae8c:	dd34      	ble.n	801aef8 <_dtoa_r+0x898>
 801ae8e:	46ca      	mov	sl, r9
 801ae90:	f1ba 0f00 	cmp.w	sl, #0
 801ae94:	d10d      	bne.n	801aeb2 <_dtoa_r+0x852>
 801ae96:	4621      	mov	r1, r4
 801ae98:	4653      	mov	r3, sl
 801ae9a:	2205      	movs	r2, #5
 801ae9c:	4630      	mov	r0, r6
 801ae9e:	f000 fac3 	bl	801b428 <__multadd>
 801aea2:	4601      	mov	r1, r0
 801aea4:	4604      	mov	r4, r0
 801aea6:	4628      	mov	r0, r5
 801aea8:	f000 fcde 	bl	801b868 <__mcmp>
 801aeac:	2800      	cmp	r0, #0
 801aeae:	f73f adeb 	bgt.w	801aa88 <_dtoa_r+0x428>
 801aeb2:	9b08      	ldr	r3, [sp, #32]
 801aeb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aeb8:	ea6f 0b03 	mvn.w	fp, r3
 801aebc:	f04f 0900 	mov.w	r9, #0
 801aec0:	4621      	mov	r1, r4
 801aec2:	4630      	mov	r0, r6
 801aec4:	f000 fa8e 	bl	801b3e4 <_Bfree>
 801aec8:	2f00      	cmp	r7, #0
 801aeca:	f43f aea8 	beq.w	801ac1e <_dtoa_r+0x5be>
 801aece:	f1b9 0f00 	cmp.w	r9, #0
 801aed2:	d005      	beq.n	801aee0 <_dtoa_r+0x880>
 801aed4:	45b9      	cmp	r9, r7
 801aed6:	d003      	beq.n	801aee0 <_dtoa_r+0x880>
 801aed8:	4649      	mov	r1, r9
 801aeda:	4630      	mov	r0, r6
 801aedc:	f000 fa82 	bl	801b3e4 <_Bfree>
 801aee0:	4639      	mov	r1, r7
 801aee2:	4630      	mov	r0, r6
 801aee4:	f000 fa7e 	bl	801b3e4 <_Bfree>
 801aee8:	e699      	b.n	801ac1e <_dtoa_r+0x5be>
 801aeea:	2400      	movs	r4, #0
 801aeec:	4627      	mov	r7, r4
 801aeee:	e7e0      	b.n	801aeb2 <_dtoa_r+0x852>
 801aef0:	46bb      	mov	fp, r7
 801aef2:	4604      	mov	r4, r0
 801aef4:	4607      	mov	r7, r0
 801aef6:	e5c7      	b.n	801aa88 <_dtoa_r+0x428>
 801aef8:	9b07      	ldr	r3, [sp, #28]
 801aefa:	46ca      	mov	sl, r9
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	f000 8100 	beq.w	801b102 <_dtoa_r+0xaa2>
 801af02:	f1b8 0f00 	cmp.w	r8, #0
 801af06:	dd05      	ble.n	801af14 <_dtoa_r+0x8b4>
 801af08:	4639      	mov	r1, r7
 801af0a:	4642      	mov	r2, r8
 801af0c:	4630      	mov	r0, r6
 801af0e:	f000 fc3b 	bl	801b788 <__lshift>
 801af12:	4607      	mov	r7, r0
 801af14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af16:	2b00      	cmp	r3, #0
 801af18:	d05d      	beq.n	801afd6 <_dtoa_r+0x976>
 801af1a:	6879      	ldr	r1, [r7, #4]
 801af1c:	4630      	mov	r0, r6
 801af1e:	f000 fa21 	bl	801b364 <_Balloc>
 801af22:	4680      	mov	r8, r0
 801af24:	b928      	cbnz	r0, 801af32 <_dtoa_r+0x8d2>
 801af26:	4b82      	ldr	r3, [pc, #520]	; (801b130 <_dtoa_r+0xad0>)
 801af28:	4602      	mov	r2, r0
 801af2a:	f240 21ea 	movw	r1, #746	; 0x2ea
 801af2e:	f7ff bbaf 	b.w	801a690 <_dtoa_r+0x30>
 801af32:	693a      	ldr	r2, [r7, #16]
 801af34:	3202      	adds	r2, #2
 801af36:	0092      	lsls	r2, r2, #2
 801af38:	f107 010c 	add.w	r1, r7, #12
 801af3c:	300c      	adds	r0, #12
 801af3e:	f000 fa03 	bl	801b348 <memcpy>
 801af42:	2201      	movs	r2, #1
 801af44:	4641      	mov	r1, r8
 801af46:	4630      	mov	r0, r6
 801af48:	f000 fc1e 	bl	801b788 <__lshift>
 801af4c:	9b01      	ldr	r3, [sp, #4]
 801af4e:	3301      	adds	r3, #1
 801af50:	9304      	str	r3, [sp, #16]
 801af52:	9b01      	ldr	r3, [sp, #4]
 801af54:	4453      	add	r3, sl
 801af56:	9308      	str	r3, [sp, #32]
 801af58:	9b02      	ldr	r3, [sp, #8]
 801af5a:	f003 0301 	and.w	r3, r3, #1
 801af5e:	46b9      	mov	r9, r7
 801af60:	9307      	str	r3, [sp, #28]
 801af62:	4607      	mov	r7, r0
 801af64:	9b04      	ldr	r3, [sp, #16]
 801af66:	4621      	mov	r1, r4
 801af68:	3b01      	subs	r3, #1
 801af6a:	4628      	mov	r0, r5
 801af6c:	9302      	str	r3, [sp, #8]
 801af6e:	f7ff faeb 	bl	801a548 <quorem>
 801af72:	4603      	mov	r3, r0
 801af74:	3330      	adds	r3, #48	; 0x30
 801af76:	9005      	str	r0, [sp, #20]
 801af78:	4649      	mov	r1, r9
 801af7a:	4628      	mov	r0, r5
 801af7c:	9309      	str	r3, [sp, #36]	; 0x24
 801af7e:	f000 fc73 	bl	801b868 <__mcmp>
 801af82:	463a      	mov	r2, r7
 801af84:	4682      	mov	sl, r0
 801af86:	4621      	mov	r1, r4
 801af88:	4630      	mov	r0, r6
 801af8a:	f000 fc89 	bl	801b8a0 <__mdiff>
 801af8e:	68c2      	ldr	r2, [r0, #12]
 801af90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af92:	4680      	mov	r8, r0
 801af94:	bb0a      	cbnz	r2, 801afda <_dtoa_r+0x97a>
 801af96:	4601      	mov	r1, r0
 801af98:	4628      	mov	r0, r5
 801af9a:	f000 fc65 	bl	801b868 <__mcmp>
 801af9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afa0:	4602      	mov	r2, r0
 801afa2:	4641      	mov	r1, r8
 801afa4:	4630      	mov	r0, r6
 801afa6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801afaa:	f000 fa1b 	bl	801b3e4 <_Bfree>
 801afae:	9b06      	ldr	r3, [sp, #24]
 801afb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801afb2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801afb6:	ea43 0102 	orr.w	r1, r3, r2
 801afba:	9b07      	ldr	r3, [sp, #28]
 801afbc:	430b      	orrs	r3, r1
 801afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afc0:	d10d      	bne.n	801afde <_dtoa_r+0x97e>
 801afc2:	2b39      	cmp	r3, #57	; 0x39
 801afc4:	d029      	beq.n	801b01a <_dtoa_r+0x9ba>
 801afc6:	f1ba 0f00 	cmp.w	sl, #0
 801afca:	dd01      	ble.n	801afd0 <_dtoa_r+0x970>
 801afcc:	9b05      	ldr	r3, [sp, #20]
 801afce:	3331      	adds	r3, #49	; 0x31
 801afd0:	9a02      	ldr	r2, [sp, #8]
 801afd2:	7013      	strb	r3, [r2, #0]
 801afd4:	e774      	b.n	801aec0 <_dtoa_r+0x860>
 801afd6:	4638      	mov	r0, r7
 801afd8:	e7b8      	b.n	801af4c <_dtoa_r+0x8ec>
 801afda:	2201      	movs	r2, #1
 801afdc:	e7e1      	b.n	801afa2 <_dtoa_r+0x942>
 801afde:	f1ba 0f00 	cmp.w	sl, #0
 801afe2:	db06      	blt.n	801aff2 <_dtoa_r+0x992>
 801afe4:	9906      	ldr	r1, [sp, #24]
 801afe6:	ea41 0a0a 	orr.w	sl, r1, sl
 801afea:	9907      	ldr	r1, [sp, #28]
 801afec:	ea5a 0101 	orrs.w	r1, sl, r1
 801aff0:	d120      	bne.n	801b034 <_dtoa_r+0x9d4>
 801aff2:	2a00      	cmp	r2, #0
 801aff4:	ddec      	ble.n	801afd0 <_dtoa_r+0x970>
 801aff6:	4629      	mov	r1, r5
 801aff8:	2201      	movs	r2, #1
 801affa:	4630      	mov	r0, r6
 801affc:	9304      	str	r3, [sp, #16]
 801affe:	f000 fbc3 	bl	801b788 <__lshift>
 801b002:	4621      	mov	r1, r4
 801b004:	4605      	mov	r5, r0
 801b006:	f000 fc2f 	bl	801b868 <__mcmp>
 801b00a:	2800      	cmp	r0, #0
 801b00c:	9b04      	ldr	r3, [sp, #16]
 801b00e:	dc02      	bgt.n	801b016 <_dtoa_r+0x9b6>
 801b010:	d1de      	bne.n	801afd0 <_dtoa_r+0x970>
 801b012:	07da      	lsls	r2, r3, #31
 801b014:	d5dc      	bpl.n	801afd0 <_dtoa_r+0x970>
 801b016:	2b39      	cmp	r3, #57	; 0x39
 801b018:	d1d8      	bne.n	801afcc <_dtoa_r+0x96c>
 801b01a:	9a02      	ldr	r2, [sp, #8]
 801b01c:	2339      	movs	r3, #57	; 0x39
 801b01e:	7013      	strb	r3, [r2, #0]
 801b020:	4643      	mov	r3, r8
 801b022:	4698      	mov	r8, r3
 801b024:	3b01      	subs	r3, #1
 801b026:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801b02a:	2a39      	cmp	r2, #57	; 0x39
 801b02c:	d051      	beq.n	801b0d2 <_dtoa_r+0xa72>
 801b02e:	3201      	adds	r2, #1
 801b030:	701a      	strb	r2, [r3, #0]
 801b032:	e745      	b.n	801aec0 <_dtoa_r+0x860>
 801b034:	2a00      	cmp	r2, #0
 801b036:	dd03      	ble.n	801b040 <_dtoa_r+0x9e0>
 801b038:	2b39      	cmp	r3, #57	; 0x39
 801b03a:	d0ee      	beq.n	801b01a <_dtoa_r+0x9ba>
 801b03c:	3301      	adds	r3, #1
 801b03e:	e7c7      	b.n	801afd0 <_dtoa_r+0x970>
 801b040:	9a04      	ldr	r2, [sp, #16]
 801b042:	9908      	ldr	r1, [sp, #32]
 801b044:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b048:	428a      	cmp	r2, r1
 801b04a:	d02b      	beq.n	801b0a4 <_dtoa_r+0xa44>
 801b04c:	4629      	mov	r1, r5
 801b04e:	2300      	movs	r3, #0
 801b050:	220a      	movs	r2, #10
 801b052:	4630      	mov	r0, r6
 801b054:	f000 f9e8 	bl	801b428 <__multadd>
 801b058:	45b9      	cmp	r9, r7
 801b05a:	4605      	mov	r5, r0
 801b05c:	f04f 0300 	mov.w	r3, #0
 801b060:	f04f 020a 	mov.w	r2, #10
 801b064:	4649      	mov	r1, r9
 801b066:	4630      	mov	r0, r6
 801b068:	d107      	bne.n	801b07a <_dtoa_r+0xa1a>
 801b06a:	f000 f9dd 	bl	801b428 <__multadd>
 801b06e:	4681      	mov	r9, r0
 801b070:	4607      	mov	r7, r0
 801b072:	9b04      	ldr	r3, [sp, #16]
 801b074:	3301      	adds	r3, #1
 801b076:	9304      	str	r3, [sp, #16]
 801b078:	e774      	b.n	801af64 <_dtoa_r+0x904>
 801b07a:	f000 f9d5 	bl	801b428 <__multadd>
 801b07e:	4639      	mov	r1, r7
 801b080:	4681      	mov	r9, r0
 801b082:	2300      	movs	r3, #0
 801b084:	220a      	movs	r2, #10
 801b086:	4630      	mov	r0, r6
 801b088:	f000 f9ce 	bl	801b428 <__multadd>
 801b08c:	4607      	mov	r7, r0
 801b08e:	e7f0      	b.n	801b072 <_dtoa_r+0xa12>
 801b090:	f1ba 0f00 	cmp.w	sl, #0
 801b094:	9a01      	ldr	r2, [sp, #4]
 801b096:	bfcc      	ite	gt
 801b098:	46d0      	movgt	r8, sl
 801b09a:	f04f 0801 	movle.w	r8, #1
 801b09e:	4490      	add	r8, r2
 801b0a0:	f04f 0900 	mov.w	r9, #0
 801b0a4:	4629      	mov	r1, r5
 801b0a6:	2201      	movs	r2, #1
 801b0a8:	4630      	mov	r0, r6
 801b0aa:	9302      	str	r3, [sp, #8]
 801b0ac:	f000 fb6c 	bl	801b788 <__lshift>
 801b0b0:	4621      	mov	r1, r4
 801b0b2:	4605      	mov	r5, r0
 801b0b4:	f000 fbd8 	bl	801b868 <__mcmp>
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	dcb1      	bgt.n	801b020 <_dtoa_r+0x9c0>
 801b0bc:	d102      	bne.n	801b0c4 <_dtoa_r+0xa64>
 801b0be:	9b02      	ldr	r3, [sp, #8]
 801b0c0:	07db      	lsls	r3, r3, #31
 801b0c2:	d4ad      	bmi.n	801b020 <_dtoa_r+0x9c0>
 801b0c4:	4643      	mov	r3, r8
 801b0c6:	4698      	mov	r8, r3
 801b0c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b0cc:	2a30      	cmp	r2, #48	; 0x30
 801b0ce:	d0fa      	beq.n	801b0c6 <_dtoa_r+0xa66>
 801b0d0:	e6f6      	b.n	801aec0 <_dtoa_r+0x860>
 801b0d2:	9a01      	ldr	r2, [sp, #4]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d1a4      	bne.n	801b022 <_dtoa_r+0x9c2>
 801b0d8:	f10b 0b01 	add.w	fp, fp, #1
 801b0dc:	2331      	movs	r3, #49	; 0x31
 801b0de:	e778      	b.n	801afd2 <_dtoa_r+0x972>
 801b0e0:	4b14      	ldr	r3, [pc, #80]	; (801b134 <_dtoa_r+0xad4>)
 801b0e2:	f7ff bb27 	b.w	801a734 <_dtoa_r+0xd4>
 801b0e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	f47f ab03 	bne.w	801a6f4 <_dtoa_r+0x94>
 801b0ee:	4b12      	ldr	r3, [pc, #72]	; (801b138 <_dtoa_r+0xad8>)
 801b0f0:	f7ff bb20 	b.w	801a734 <_dtoa_r+0xd4>
 801b0f4:	f1ba 0f00 	cmp.w	sl, #0
 801b0f8:	dc03      	bgt.n	801b102 <_dtoa_r+0xaa2>
 801b0fa:	9b06      	ldr	r3, [sp, #24]
 801b0fc:	2b02      	cmp	r3, #2
 801b0fe:	f73f aec7 	bgt.w	801ae90 <_dtoa_r+0x830>
 801b102:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b106:	4621      	mov	r1, r4
 801b108:	4628      	mov	r0, r5
 801b10a:	f7ff fa1d 	bl	801a548 <quorem>
 801b10e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801b112:	f808 3b01 	strb.w	r3, [r8], #1
 801b116:	9a01      	ldr	r2, [sp, #4]
 801b118:	eba8 0202 	sub.w	r2, r8, r2
 801b11c:	4592      	cmp	sl, r2
 801b11e:	ddb7      	ble.n	801b090 <_dtoa_r+0xa30>
 801b120:	4629      	mov	r1, r5
 801b122:	2300      	movs	r3, #0
 801b124:	220a      	movs	r2, #10
 801b126:	4630      	mov	r0, r6
 801b128:	f000 f97e 	bl	801b428 <__multadd>
 801b12c:	4605      	mov	r5, r0
 801b12e:	e7ea      	b.n	801b106 <_dtoa_r+0xaa6>
 801b130:	0801d553 	.word	0x0801d553
 801b134:	0801d4b0 	.word	0x0801d4b0
 801b138:	0801d4d4 	.word	0x0801d4d4

0801b13c <std>:
 801b13c:	2300      	movs	r3, #0
 801b13e:	b510      	push	{r4, lr}
 801b140:	4604      	mov	r4, r0
 801b142:	e9c0 3300 	strd	r3, r3, [r0]
 801b146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b14a:	6083      	str	r3, [r0, #8]
 801b14c:	8181      	strh	r1, [r0, #12]
 801b14e:	6643      	str	r3, [r0, #100]	; 0x64
 801b150:	81c2      	strh	r2, [r0, #14]
 801b152:	6183      	str	r3, [r0, #24]
 801b154:	4619      	mov	r1, r3
 801b156:	2208      	movs	r2, #8
 801b158:	305c      	adds	r0, #92	; 0x5c
 801b15a:	f7fe fd5b 	bl	8019c14 <memset>
 801b15e:	4b05      	ldr	r3, [pc, #20]	; (801b174 <std+0x38>)
 801b160:	6263      	str	r3, [r4, #36]	; 0x24
 801b162:	4b05      	ldr	r3, [pc, #20]	; (801b178 <std+0x3c>)
 801b164:	62a3      	str	r3, [r4, #40]	; 0x28
 801b166:	4b05      	ldr	r3, [pc, #20]	; (801b17c <std+0x40>)
 801b168:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b16a:	4b05      	ldr	r3, [pc, #20]	; (801b180 <std+0x44>)
 801b16c:	6224      	str	r4, [r4, #32]
 801b16e:	6323      	str	r3, [r4, #48]	; 0x30
 801b170:	bd10      	pop	{r4, pc}
 801b172:	bf00      	nop
 801b174:	0801c275 	.word	0x0801c275
 801b178:	0801c297 	.word	0x0801c297
 801b17c:	0801c2cf 	.word	0x0801c2cf
 801b180:	0801c2f3 	.word	0x0801c2f3

0801b184 <_cleanup_r>:
 801b184:	4901      	ldr	r1, [pc, #4]	; (801b18c <_cleanup_r+0x8>)
 801b186:	f000 b8af 	b.w	801b2e8 <_fwalk_reent>
 801b18a:	bf00      	nop
 801b18c:	0801c609 	.word	0x0801c609

0801b190 <__sfmoreglue>:
 801b190:	b570      	push	{r4, r5, r6, lr}
 801b192:	2268      	movs	r2, #104	; 0x68
 801b194:	1e4d      	subs	r5, r1, #1
 801b196:	4355      	muls	r5, r2
 801b198:	460e      	mov	r6, r1
 801b19a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b19e:	f000 fce7 	bl	801bb70 <_malloc_r>
 801b1a2:	4604      	mov	r4, r0
 801b1a4:	b140      	cbz	r0, 801b1b8 <__sfmoreglue+0x28>
 801b1a6:	2100      	movs	r1, #0
 801b1a8:	e9c0 1600 	strd	r1, r6, [r0]
 801b1ac:	300c      	adds	r0, #12
 801b1ae:	60a0      	str	r0, [r4, #8]
 801b1b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b1b4:	f7fe fd2e 	bl	8019c14 <memset>
 801b1b8:	4620      	mov	r0, r4
 801b1ba:	bd70      	pop	{r4, r5, r6, pc}

0801b1bc <__sfp_lock_acquire>:
 801b1bc:	4801      	ldr	r0, [pc, #4]	; (801b1c4 <__sfp_lock_acquire+0x8>)
 801b1be:	f000 b8b8 	b.w	801b332 <__retarget_lock_acquire_recursive>
 801b1c2:	bf00      	nop
 801b1c4:	24002e19 	.word	0x24002e19

0801b1c8 <__sfp_lock_release>:
 801b1c8:	4801      	ldr	r0, [pc, #4]	; (801b1d0 <__sfp_lock_release+0x8>)
 801b1ca:	f000 b8b3 	b.w	801b334 <__retarget_lock_release_recursive>
 801b1ce:	bf00      	nop
 801b1d0:	24002e19 	.word	0x24002e19

0801b1d4 <__sinit_lock_acquire>:
 801b1d4:	4801      	ldr	r0, [pc, #4]	; (801b1dc <__sinit_lock_acquire+0x8>)
 801b1d6:	f000 b8ac 	b.w	801b332 <__retarget_lock_acquire_recursive>
 801b1da:	bf00      	nop
 801b1dc:	24002e1a 	.word	0x24002e1a

0801b1e0 <__sinit_lock_release>:
 801b1e0:	4801      	ldr	r0, [pc, #4]	; (801b1e8 <__sinit_lock_release+0x8>)
 801b1e2:	f000 b8a7 	b.w	801b334 <__retarget_lock_release_recursive>
 801b1e6:	bf00      	nop
 801b1e8:	24002e1a 	.word	0x24002e1a

0801b1ec <__sinit>:
 801b1ec:	b510      	push	{r4, lr}
 801b1ee:	4604      	mov	r4, r0
 801b1f0:	f7ff fff0 	bl	801b1d4 <__sinit_lock_acquire>
 801b1f4:	69a3      	ldr	r3, [r4, #24]
 801b1f6:	b11b      	cbz	r3, 801b200 <__sinit+0x14>
 801b1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1fc:	f7ff bff0 	b.w	801b1e0 <__sinit_lock_release>
 801b200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b204:	6523      	str	r3, [r4, #80]	; 0x50
 801b206:	4b13      	ldr	r3, [pc, #76]	; (801b254 <__sinit+0x68>)
 801b208:	4a13      	ldr	r2, [pc, #76]	; (801b258 <__sinit+0x6c>)
 801b20a:	681b      	ldr	r3, [r3, #0]
 801b20c:	62a2      	str	r2, [r4, #40]	; 0x28
 801b20e:	42a3      	cmp	r3, r4
 801b210:	bf04      	itt	eq
 801b212:	2301      	moveq	r3, #1
 801b214:	61a3      	streq	r3, [r4, #24]
 801b216:	4620      	mov	r0, r4
 801b218:	f000 f820 	bl	801b25c <__sfp>
 801b21c:	6060      	str	r0, [r4, #4]
 801b21e:	4620      	mov	r0, r4
 801b220:	f000 f81c 	bl	801b25c <__sfp>
 801b224:	60a0      	str	r0, [r4, #8]
 801b226:	4620      	mov	r0, r4
 801b228:	f000 f818 	bl	801b25c <__sfp>
 801b22c:	2200      	movs	r2, #0
 801b22e:	60e0      	str	r0, [r4, #12]
 801b230:	2104      	movs	r1, #4
 801b232:	6860      	ldr	r0, [r4, #4]
 801b234:	f7ff ff82 	bl	801b13c <std>
 801b238:	68a0      	ldr	r0, [r4, #8]
 801b23a:	2201      	movs	r2, #1
 801b23c:	2109      	movs	r1, #9
 801b23e:	f7ff ff7d 	bl	801b13c <std>
 801b242:	68e0      	ldr	r0, [r4, #12]
 801b244:	2202      	movs	r2, #2
 801b246:	2112      	movs	r1, #18
 801b248:	f7ff ff78 	bl	801b13c <std>
 801b24c:	2301      	movs	r3, #1
 801b24e:	61a3      	str	r3, [r4, #24]
 801b250:	e7d2      	b.n	801b1f8 <__sinit+0xc>
 801b252:	bf00      	nop
 801b254:	0801d49c 	.word	0x0801d49c
 801b258:	0801b185 	.word	0x0801b185

0801b25c <__sfp>:
 801b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b25e:	4607      	mov	r7, r0
 801b260:	f7ff ffac 	bl	801b1bc <__sfp_lock_acquire>
 801b264:	4b1e      	ldr	r3, [pc, #120]	; (801b2e0 <__sfp+0x84>)
 801b266:	681e      	ldr	r6, [r3, #0]
 801b268:	69b3      	ldr	r3, [r6, #24]
 801b26a:	b913      	cbnz	r3, 801b272 <__sfp+0x16>
 801b26c:	4630      	mov	r0, r6
 801b26e:	f7ff ffbd 	bl	801b1ec <__sinit>
 801b272:	3648      	adds	r6, #72	; 0x48
 801b274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b278:	3b01      	subs	r3, #1
 801b27a:	d503      	bpl.n	801b284 <__sfp+0x28>
 801b27c:	6833      	ldr	r3, [r6, #0]
 801b27e:	b30b      	cbz	r3, 801b2c4 <__sfp+0x68>
 801b280:	6836      	ldr	r6, [r6, #0]
 801b282:	e7f7      	b.n	801b274 <__sfp+0x18>
 801b284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b288:	b9d5      	cbnz	r5, 801b2c0 <__sfp+0x64>
 801b28a:	4b16      	ldr	r3, [pc, #88]	; (801b2e4 <__sfp+0x88>)
 801b28c:	60e3      	str	r3, [r4, #12]
 801b28e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b292:	6665      	str	r5, [r4, #100]	; 0x64
 801b294:	f000 f84c 	bl	801b330 <__retarget_lock_init_recursive>
 801b298:	f7ff ff96 	bl	801b1c8 <__sfp_lock_release>
 801b29c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b2a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b2a4:	6025      	str	r5, [r4, #0]
 801b2a6:	61a5      	str	r5, [r4, #24]
 801b2a8:	2208      	movs	r2, #8
 801b2aa:	4629      	mov	r1, r5
 801b2ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b2b0:	f7fe fcb0 	bl	8019c14 <memset>
 801b2b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b2b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b2bc:	4620      	mov	r0, r4
 801b2be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b2c0:	3468      	adds	r4, #104	; 0x68
 801b2c2:	e7d9      	b.n	801b278 <__sfp+0x1c>
 801b2c4:	2104      	movs	r1, #4
 801b2c6:	4638      	mov	r0, r7
 801b2c8:	f7ff ff62 	bl	801b190 <__sfmoreglue>
 801b2cc:	4604      	mov	r4, r0
 801b2ce:	6030      	str	r0, [r6, #0]
 801b2d0:	2800      	cmp	r0, #0
 801b2d2:	d1d5      	bne.n	801b280 <__sfp+0x24>
 801b2d4:	f7ff ff78 	bl	801b1c8 <__sfp_lock_release>
 801b2d8:	230c      	movs	r3, #12
 801b2da:	603b      	str	r3, [r7, #0]
 801b2dc:	e7ee      	b.n	801b2bc <__sfp+0x60>
 801b2de:	bf00      	nop
 801b2e0:	0801d49c 	.word	0x0801d49c
 801b2e4:	ffff0001 	.word	0xffff0001

0801b2e8 <_fwalk_reent>:
 801b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2ec:	4606      	mov	r6, r0
 801b2ee:	4688      	mov	r8, r1
 801b2f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b2f4:	2700      	movs	r7, #0
 801b2f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b2fa:	f1b9 0901 	subs.w	r9, r9, #1
 801b2fe:	d505      	bpl.n	801b30c <_fwalk_reent+0x24>
 801b300:	6824      	ldr	r4, [r4, #0]
 801b302:	2c00      	cmp	r4, #0
 801b304:	d1f7      	bne.n	801b2f6 <_fwalk_reent+0xe>
 801b306:	4638      	mov	r0, r7
 801b308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b30c:	89ab      	ldrh	r3, [r5, #12]
 801b30e:	2b01      	cmp	r3, #1
 801b310:	d907      	bls.n	801b322 <_fwalk_reent+0x3a>
 801b312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b316:	3301      	adds	r3, #1
 801b318:	d003      	beq.n	801b322 <_fwalk_reent+0x3a>
 801b31a:	4629      	mov	r1, r5
 801b31c:	4630      	mov	r0, r6
 801b31e:	47c0      	blx	r8
 801b320:	4307      	orrs	r7, r0
 801b322:	3568      	adds	r5, #104	; 0x68
 801b324:	e7e9      	b.n	801b2fa <_fwalk_reent+0x12>
	...

0801b328 <_localeconv_r>:
 801b328:	4800      	ldr	r0, [pc, #0]	; (801b32c <_localeconv_r+0x4>)
 801b32a:	4770      	bx	lr
 801b32c:	24000254 	.word	0x24000254

0801b330 <__retarget_lock_init_recursive>:
 801b330:	4770      	bx	lr

0801b332 <__retarget_lock_acquire_recursive>:
 801b332:	4770      	bx	lr

0801b334 <__retarget_lock_release_recursive>:
 801b334:	4770      	bx	lr
	...

0801b338 <malloc>:
 801b338:	4b02      	ldr	r3, [pc, #8]	; (801b344 <malloc+0xc>)
 801b33a:	4601      	mov	r1, r0
 801b33c:	6818      	ldr	r0, [r3, #0]
 801b33e:	f000 bc17 	b.w	801bb70 <_malloc_r>
 801b342:	bf00      	nop
 801b344:	24000100 	.word	0x24000100

0801b348 <memcpy>:
 801b348:	440a      	add	r2, r1
 801b34a:	4291      	cmp	r1, r2
 801b34c:	f100 33ff 	add.w	r3, r0, #4294967295
 801b350:	d100      	bne.n	801b354 <memcpy+0xc>
 801b352:	4770      	bx	lr
 801b354:	b510      	push	{r4, lr}
 801b356:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b35a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b35e:	4291      	cmp	r1, r2
 801b360:	d1f9      	bne.n	801b356 <memcpy+0xe>
 801b362:	bd10      	pop	{r4, pc}

0801b364 <_Balloc>:
 801b364:	b570      	push	{r4, r5, r6, lr}
 801b366:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b368:	4604      	mov	r4, r0
 801b36a:	460d      	mov	r5, r1
 801b36c:	b976      	cbnz	r6, 801b38c <_Balloc+0x28>
 801b36e:	2010      	movs	r0, #16
 801b370:	f7ff ffe2 	bl	801b338 <malloc>
 801b374:	4602      	mov	r2, r0
 801b376:	6260      	str	r0, [r4, #36]	; 0x24
 801b378:	b920      	cbnz	r0, 801b384 <_Balloc+0x20>
 801b37a:	4b18      	ldr	r3, [pc, #96]	; (801b3dc <_Balloc+0x78>)
 801b37c:	4818      	ldr	r0, [pc, #96]	; (801b3e0 <_Balloc+0x7c>)
 801b37e:	2166      	movs	r1, #102	; 0x66
 801b380:	f001 f88e 	bl	801c4a0 <__assert_func>
 801b384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b388:	6006      	str	r6, [r0, #0]
 801b38a:	60c6      	str	r6, [r0, #12]
 801b38c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b38e:	68f3      	ldr	r3, [r6, #12]
 801b390:	b183      	cbz	r3, 801b3b4 <_Balloc+0x50>
 801b392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b394:	68db      	ldr	r3, [r3, #12]
 801b396:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b39a:	b9b8      	cbnz	r0, 801b3cc <_Balloc+0x68>
 801b39c:	2101      	movs	r1, #1
 801b39e:	fa01 f605 	lsl.w	r6, r1, r5
 801b3a2:	1d72      	adds	r2, r6, #5
 801b3a4:	0092      	lsls	r2, r2, #2
 801b3a6:	4620      	mov	r0, r4
 801b3a8:	f000 fb60 	bl	801ba6c <_calloc_r>
 801b3ac:	b160      	cbz	r0, 801b3c8 <_Balloc+0x64>
 801b3ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b3b2:	e00e      	b.n	801b3d2 <_Balloc+0x6e>
 801b3b4:	2221      	movs	r2, #33	; 0x21
 801b3b6:	2104      	movs	r1, #4
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	f000 fb57 	bl	801ba6c <_calloc_r>
 801b3be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b3c0:	60f0      	str	r0, [r6, #12]
 801b3c2:	68db      	ldr	r3, [r3, #12]
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	d1e4      	bne.n	801b392 <_Balloc+0x2e>
 801b3c8:	2000      	movs	r0, #0
 801b3ca:	bd70      	pop	{r4, r5, r6, pc}
 801b3cc:	6802      	ldr	r2, [r0, #0]
 801b3ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b3d8:	e7f7      	b.n	801b3ca <_Balloc+0x66>
 801b3da:	bf00      	nop
 801b3dc:	0801d4e1 	.word	0x0801d4e1
 801b3e0:	0801d5c4 	.word	0x0801d5c4

0801b3e4 <_Bfree>:
 801b3e4:	b570      	push	{r4, r5, r6, lr}
 801b3e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b3e8:	4605      	mov	r5, r0
 801b3ea:	460c      	mov	r4, r1
 801b3ec:	b976      	cbnz	r6, 801b40c <_Bfree+0x28>
 801b3ee:	2010      	movs	r0, #16
 801b3f0:	f7ff ffa2 	bl	801b338 <malloc>
 801b3f4:	4602      	mov	r2, r0
 801b3f6:	6268      	str	r0, [r5, #36]	; 0x24
 801b3f8:	b920      	cbnz	r0, 801b404 <_Bfree+0x20>
 801b3fa:	4b09      	ldr	r3, [pc, #36]	; (801b420 <_Bfree+0x3c>)
 801b3fc:	4809      	ldr	r0, [pc, #36]	; (801b424 <_Bfree+0x40>)
 801b3fe:	218a      	movs	r1, #138	; 0x8a
 801b400:	f001 f84e 	bl	801c4a0 <__assert_func>
 801b404:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b408:	6006      	str	r6, [r0, #0]
 801b40a:	60c6      	str	r6, [r0, #12]
 801b40c:	b13c      	cbz	r4, 801b41e <_Bfree+0x3a>
 801b40e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b410:	6862      	ldr	r2, [r4, #4]
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b418:	6021      	str	r1, [r4, #0]
 801b41a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b41e:	bd70      	pop	{r4, r5, r6, pc}
 801b420:	0801d4e1 	.word	0x0801d4e1
 801b424:	0801d5c4 	.word	0x0801d5c4

0801b428 <__multadd>:
 801b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b42c:	690d      	ldr	r5, [r1, #16]
 801b42e:	4607      	mov	r7, r0
 801b430:	460c      	mov	r4, r1
 801b432:	461e      	mov	r6, r3
 801b434:	f101 0c14 	add.w	ip, r1, #20
 801b438:	2000      	movs	r0, #0
 801b43a:	f8dc 3000 	ldr.w	r3, [ip]
 801b43e:	b299      	uxth	r1, r3
 801b440:	fb02 6101 	mla	r1, r2, r1, r6
 801b444:	0c1e      	lsrs	r6, r3, #16
 801b446:	0c0b      	lsrs	r3, r1, #16
 801b448:	fb02 3306 	mla	r3, r2, r6, r3
 801b44c:	b289      	uxth	r1, r1
 801b44e:	3001      	adds	r0, #1
 801b450:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b454:	4285      	cmp	r5, r0
 801b456:	f84c 1b04 	str.w	r1, [ip], #4
 801b45a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b45e:	dcec      	bgt.n	801b43a <__multadd+0x12>
 801b460:	b30e      	cbz	r6, 801b4a6 <__multadd+0x7e>
 801b462:	68a3      	ldr	r3, [r4, #8]
 801b464:	42ab      	cmp	r3, r5
 801b466:	dc19      	bgt.n	801b49c <__multadd+0x74>
 801b468:	6861      	ldr	r1, [r4, #4]
 801b46a:	4638      	mov	r0, r7
 801b46c:	3101      	adds	r1, #1
 801b46e:	f7ff ff79 	bl	801b364 <_Balloc>
 801b472:	4680      	mov	r8, r0
 801b474:	b928      	cbnz	r0, 801b482 <__multadd+0x5a>
 801b476:	4602      	mov	r2, r0
 801b478:	4b0c      	ldr	r3, [pc, #48]	; (801b4ac <__multadd+0x84>)
 801b47a:	480d      	ldr	r0, [pc, #52]	; (801b4b0 <__multadd+0x88>)
 801b47c:	21b5      	movs	r1, #181	; 0xb5
 801b47e:	f001 f80f 	bl	801c4a0 <__assert_func>
 801b482:	6922      	ldr	r2, [r4, #16]
 801b484:	3202      	adds	r2, #2
 801b486:	f104 010c 	add.w	r1, r4, #12
 801b48a:	0092      	lsls	r2, r2, #2
 801b48c:	300c      	adds	r0, #12
 801b48e:	f7ff ff5b 	bl	801b348 <memcpy>
 801b492:	4621      	mov	r1, r4
 801b494:	4638      	mov	r0, r7
 801b496:	f7ff ffa5 	bl	801b3e4 <_Bfree>
 801b49a:	4644      	mov	r4, r8
 801b49c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b4a0:	3501      	adds	r5, #1
 801b4a2:	615e      	str	r6, [r3, #20]
 801b4a4:	6125      	str	r5, [r4, #16]
 801b4a6:	4620      	mov	r0, r4
 801b4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4ac:	0801d553 	.word	0x0801d553
 801b4b0:	0801d5c4 	.word	0x0801d5c4

0801b4b4 <__hi0bits>:
 801b4b4:	0c03      	lsrs	r3, r0, #16
 801b4b6:	041b      	lsls	r3, r3, #16
 801b4b8:	b9d3      	cbnz	r3, 801b4f0 <__hi0bits+0x3c>
 801b4ba:	0400      	lsls	r0, r0, #16
 801b4bc:	2310      	movs	r3, #16
 801b4be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b4c2:	bf04      	itt	eq
 801b4c4:	0200      	lsleq	r0, r0, #8
 801b4c6:	3308      	addeq	r3, #8
 801b4c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b4cc:	bf04      	itt	eq
 801b4ce:	0100      	lsleq	r0, r0, #4
 801b4d0:	3304      	addeq	r3, #4
 801b4d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b4d6:	bf04      	itt	eq
 801b4d8:	0080      	lsleq	r0, r0, #2
 801b4da:	3302      	addeq	r3, #2
 801b4dc:	2800      	cmp	r0, #0
 801b4de:	db05      	blt.n	801b4ec <__hi0bits+0x38>
 801b4e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b4e4:	f103 0301 	add.w	r3, r3, #1
 801b4e8:	bf08      	it	eq
 801b4ea:	2320      	moveq	r3, #32
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	4770      	bx	lr
 801b4f0:	2300      	movs	r3, #0
 801b4f2:	e7e4      	b.n	801b4be <__hi0bits+0xa>

0801b4f4 <__lo0bits>:
 801b4f4:	6803      	ldr	r3, [r0, #0]
 801b4f6:	f013 0207 	ands.w	r2, r3, #7
 801b4fa:	4601      	mov	r1, r0
 801b4fc:	d00b      	beq.n	801b516 <__lo0bits+0x22>
 801b4fe:	07da      	lsls	r2, r3, #31
 801b500:	d423      	bmi.n	801b54a <__lo0bits+0x56>
 801b502:	0798      	lsls	r0, r3, #30
 801b504:	bf49      	itett	mi
 801b506:	085b      	lsrmi	r3, r3, #1
 801b508:	089b      	lsrpl	r3, r3, #2
 801b50a:	2001      	movmi	r0, #1
 801b50c:	600b      	strmi	r3, [r1, #0]
 801b50e:	bf5c      	itt	pl
 801b510:	600b      	strpl	r3, [r1, #0]
 801b512:	2002      	movpl	r0, #2
 801b514:	4770      	bx	lr
 801b516:	b298      	uxth	r0, r3
 801b518:	b9a8      	cbnz	r0, 801b546 <__lo0bits+0x52>
 801b51a:	0c1b      	lsrs	r3, r3, #16
 801b51c:	2010      	movs	r0, #16
 801b51e:	b2da      	uxtb	r2, r3
 801b520:	b90a      	cbnz	r2, 801b526 <__lo0bits+0x32>
 801b522:	3008      	adds	r0, #8
 801b524:	0a1b      	lsrs	r3, r3, #8
 801b526:	071a      	lsls	r2, r3, #28
 801b528:	bf04      	itt	eq
 801b52a:	091b      	lsreq	r3, r3, #4
 801b52c:	3004      	addeq	r0, #4
 801b52e:	079a      	lsls	r2, r3, #30
 801b530:	bf04      	itt	eq
 801b532:	089b      	lsreq	r3, r3, #2
 801b534:	3002      	addeq	r0, #2
 801b536:	07da      	lsls	r2, r3, #31
 801b538:	d403      	bmi.n	801b542 <__lo0bits+0x4e>
 801b53a:	085b      	lsrs	r3, r3, #1
 801b53c:	f100 0001 	add.w	r0, r0, #1
 801b540:	d005      	beq.n	801b54e <__lo0bits+0x5a>
 801b542:	600b      	str	r3, [r1, #0]
 801b544:	4770      	bx	lr
 801b546:	4610      	mov	r0, r2
 801b548:	e7e9      	b.n	801b51e <__lo0bits+0x2a>
 801b54a:	2000      	movs	r0, #0
 801b54c:	4770      	bx	lr
 801b54e:	2020      	movs	r0, #32
 801b550:	4770      	bx	lr
	...

0801b554 <__i2b>:
 801b554:	b510      	push	{r4, lr}
 801b556:	460c      	mov	r4, r1
 801b558:	2101      	movs	r1, #1
 801b55a:	f7ff ff03 	bl	801b364 <_Balloc>
 801b55e:	4602      	mov	r2, r0
 801b560:	b928      	cbnz	r0, 801b56e <__i2b+0x1a>
 801b562:	4b05      	ldr	r3, [pc, #20]	; (801b578 <__i2b+0x24>)
 801b564:	4805      	ldr	r0, [pc, #20]	; (801b57c <__i2b+0x28>)
 801b566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801b56a:	f000 ff99 	bl	801c4a0 <__assert_func>
 801b56e:	2301      	movs	r3, #1
 801b570:	6144      	str	r4, [r0, #20]
 801b572:	6103      	str	r3, [r0, #16]
 801b574:	bd10      	pop	{r4, pc}
 801b576:	bf00      	nop
 801b578:	0801d553 	.word	0x0801d553
 801b57c:	0801d5c4 	.word	0x0801d5c4

0801b580 <__multiply>:
 801b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b584:	4691      	mov	r9, r2
 801b586:	690a      	ldr	r2, [r1, #16]
 801b588:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b58c:	429a      	cmp	r2, r3
 801b58e:	bfb8      	it	lt
 801b590:	460b      	movlt	r3, r1
 801b592:	460c      	mov	r4, r1
 801b594:	bfbc      	itt	lt
 801b596:	464c      	movlt	r4, r9
 801b598:	4699      	movlt	r9, r3
 801b59a:	6927      	ldr	r7, [r4, #16]
 801b59c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b5a0:	68a3      	ldr	r3, [r4, #8]
 801b5a2:	6861      	ldr	r1, [r4, #4]
 801b5a4:	eb07 060a 	add.w	r6, r7, sl
 801b5a8:	42b3      	cmp	r3, r6
 801b5aa:	b085      	sub	sp, #20
 801b5ac:	bfb8      	it	lt
 801b5ae:	3101      	addlt	r1, #1
 801b5b0:	f7ff fed8 	bl	801b364 <_Balloc>
 801b5b4:	b930      	cbnz	r0, 801b5c4 <__multiply+0x44>
 801b5b6:	4602      	mov	r2, r0
 801b5b8:	4b44      	ldr	r3, [pc, #272]	; (801b6cc <__multiply+0x14c>)
 801b5ba:	4845      	ldr	r0, [pc, #276]	; (801b6d0 <__multiply+0x150>)
 801b5bc:	f240 115d 	movw	r1, #349	; 0x15d
 801b5c0:	f000 ff6e 	bl	801c4a0 <__assert_func>
 801b5c4:	f100 0514 	add.w	r5, r0, #20
 801b5c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b5cc:	462b      	mov	r3, r5
 801b5ce:	2200      	movs	r2, #0
 801b5d0:	4543      	cmp	r3, r8
 801b5d2:	d321      	bcc.n	801b618 <__multiply+0x98>
 801b5d4:	f104 0314 	add.w	r3, r4, #20
 801b5d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b5dc:	f109 0314 	add.w	r3, r9, #20
 801b5e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b5e4:	9202      	str	r2, [sp, #8]
 801b5e6:	1b3a      	subs	r2, r7, r4
 801b5e8:	3a15      	subs	r2, #21
 801b5ea:	f022 0203 	bic.w	r2, r2, #3
 801b5ee:	3204      	adds	r2, #4
 801b5f0:	f104 0115 	add.w	r1, r4, #21
 801b5f4:	428f      	cmp	r7, r1
 801b5f6:	bf38      	it	cc
 801b5f8:	2204      	movcc	r2, #4
 801b5fa:	9201      	str	r2, [sp, #4]
 801b5fc:	9a02      	ldr	r2, [sp, #8]
 801b5fe:	9303      	str	r3, [sp, #12]
 801b600:	429a      	cmp	r2, r3
 801b602:	d80c      	bhi.n	801b61e <__multiply+0x9e>
 801b604:	2e00      	cmp	r6, #0
 801b606:	dd03      	ble.n	801b610 <__multiply+0x90>
 801b608:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d05a      	beq.n	801b6c6 <__multiply+0x146>
 801b610:	6106      	str	r6, [r0, #16]
 801b612:	b005      	add	sp, #20
 801b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b618:	f843 2b04 	str.w	r2, [r3], #4
 801b61c:	e7d8      	b.n	801b5d0 <__multiply+0x50>
 801b61e:	f8b3 a000 	ldrh.w	sl, [r3]
 801b622:	f1ba 0f00 	cmp.w	sl, #0
 801b626:	d024      	beq.n	801b672 <__multiply+0xf2>
 801b628:	f104 0e14 	add.w	lr, r4, #20
 801b62c:	46a9      	mov	r9, r5
 801b62e:	f04f 0c00 	mov.w	ip, #0
 801b632:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b636:	f8d9 1000 	ldr.w	r1, [r9]
 801b63a:	fa1f fb82 	uxth.w	fp, r2
 801b63e:	b289      	uxth	r1, r1
 801b640:	fb0a 110b 	mla	r1, sl, fp, r1
 801b644:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b648:	f8d9 2000 	ldr.w	r2, [r9]
 801b64c:	4461      	add	r1, ip
 801b64e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b652:	fb0a c20b 	mla	r2, sl, fp, ip
 801b656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b65a:	b289      	uxth	r1, r1
 801b65c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b660:	4577      	cmp	r7, lr
 801b662:	f849 1b04 	str.w	r1, [r9], #4
 801b666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b66a:	d8e2      	bhi.n	801b632 <__multiply+0xb2>
 801b66c:	9a01      	ldr	r2, [sp, #4]
 801b66e:	f845 c002 	str.w	ip, [r5, r2]
 801b672:	9a03      	ldr	r2, [sp, #12]
 801b674:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b678:	3304      	adds	r3, #4
 801b67a:	f1b9 0f00 	cmp.w	r9, #0
 801b67e:	d020      	beq.n	801b6c2 <__multiply+0x142>
 801b680:	6829      	ldr	r1, [r5, #0]
 801b682:	f104 0c14 	add.w	ip, r4, #20
 801b686:	46ae      	mov	lr, r5
 801b688:	f04f 0a00 	mov.w	sl, #0
 801b68c:	f8bc b000 	ldrh.w	fp, [ip]
 801b690:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b694:	fb09 220b 	mla	r2, r9, fp, r2
 801b698:	4492      	add	sl, r2
 801b69a:	b289      	uxth	r1, r1
 801b69c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801b6a0:	f84e 1b04 	str.w	r1, [lr], #4
 801b6a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b6a8:	f8be 1000 	ldrh.w	r1, [lr]
 801b6ac:	0c12      	lsrs	r2, r2, #16
 801b6ae:	fb09 1102 	mla	r1, r9, r2, r1
 801b6b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801b6b6:	4567      	cmp	r7, ip
 801b6b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b6bc:	d8e6      	bhi.n	801b68c <__multiply+0x10c>
 801b6be:	9a01      	ldr	r2, [sp, #4]
 801b6c0:	50a9      	str	r1, [r5, r2]
 801b6c2:	3504      	adds	r5, #4
 801b6c4:	e79a      	b.n	801b5fc <__multiply+0x7c>
 801b6c6:	3e01      	subs	r6, #1
 801b6c8:	e79c      	b.n	801b604 <__multiply+0x84>
 801b6ca:	bf00      	nop
 801b6cc:	0801d553 	.word	0x0801d553
 801b6d0:	0801d5c4 	.word	0x0801d5c4

0801b6d4 <__pow5mult>:
 801b6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6d8:	4615      	mov	r5, r2
 801b6da:	f012 0203 	ands.w	r2, r2, #3
 801b6de:	4606      	mov	r6, r0
 801b6e0:	460f      	mov	r7, r1
 801b6e2:	d007      	beq.n	801b6f4 <__pow5mult+0x20>
 801b6e4:	4c25      	ldr	r4, [pc, #148]	; (801b77c <__pow5mult+0xa8>)
 801b6e6:	3a01      	subs	r2, #1
 801b6e8:	2300      	movs	r3, #0
 801b6ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b6ee:	f7ff fe9b 	bl	801b428 <__multadd>
 801b6f2:	4607      	mov	r7, r0
 801b6f4:	10ad      	asrs	r5, r5, #2
 801b6f6:	d03d      	beq.n	801b774 <__pow5mult+0xa0>
 801b6f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b6fa:	b97c      	cbnz	r4, 801b71c <__pow5mult+0x48>
 801b6fc:	2010      	movs	r0, #16
 801b6fe:	f7ff fe1b 	bl	801b338 <malloc>
 801b702:	4602      	mov	r2, r0
 801b704:	6270      	str	r0, [r6, #36]	; 0x24
 801b706:	b928      	cbnz	r0, 801b714 <__pow5mult+0x40>
 801b708:	4b1d      	ldr	r3, [pc, #116]	; (801b780 <__pow5mult+0xac>)
 801b70a:	481e      	ldr	r0, [pc, #120]	; (801b784 <__pow5mult+0xb0>)
 801b70c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801b710:	f000 fec6 	bl	801c4a0 <__assert_func>
 801b714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b718:	6004      	str	r4, [r0, #0]
 801b71a:	60c4      	str	r4, [r0, #12]
 801b71c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b724:	b94c      	cbnz	r4, 801b73a <__pow5mult+0x66>
 801b726:	f240 2171 	movw	r1, #625	; 0x271
 801b72a:	4630      	mov	r0, r6
 801b72c:	f7ff ff12 	bl	801b554 <__i2b>
 801b730:	2300      	movs	r3, #0
 801b732:	f8c8 0008 	str.w	r0, [r8, #8]
 801b736:	4604      	mov	r4, r0
 801b738:	6003      	str	r3, [r0, #0]
 801b73a:	f04f 0900 	mov.w	r9, #0
 801b73e:	07eb      	lsls	r3, r5, #31
 801b740:	d50a      	bpl.n	801b758 <__pow5mult+0x84>
 801b742:	4639      	mov	r1, r7
 801b744:	4622      	mov	r2, r4
 801b746:	4630      	mov	r0, r6
 801b748:	f7ff ff1a 	bl	801b580 <__multiply>
 801b74c:	4639      	mov	r1, r7
 801b74e:	4680      	mov	r8, r0
 801b750:	4630      	mov	r0, r6
 801b752:	f7ff fe47 	bl	801b3e4 <_Bfree>
 801b756:	4647      	mov	r7, r8
 801b758:	106d      	asrs	r5, r5, #1
 801b75a:	d00b      	beq.n	801b774 <__pow5mult+0xa0>
 801b75c:	6820      	ldr	r0, [r4, #0]
 801b75e:	b938      	cbnz	r0, 801b770 <__pow5mult+0x9c>
 801b760:	4622      	mov	r2, r4
 801b762:	4621      	mov	r1, r4
 801b764:	4630      	mov	r0, r6
 801b766:	f7ff ff0b 	bl	801b580 <__multiply>
 801b76a:	6020      	str	r0, [r4, #0]
 801b76c:	f8c0 9000 	str.w	r9, [r0]
 801b770:	4604      	mov	r4, r0
 801b772:	e7e4      	b.n	801b73e <__pow5mult+0x6a>
 801b774:	4638      	mov	r0, r7
 801b776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b77a:	bf00      	nop
 801b77c:	0801d710 	.word	0x0801d710
 801b780:	0801d4e1 	.word	0x0801d4e1
 801b784:	0801d5c4 	.word	0x0801d5c4

0801b788 <__lshift>:
 801b788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b78c:	460c      	mov	r4, r1
 801b78e:	6849      	ldr	r1, [r1, #4]
 801b790:	6923      	ldr	r3, [r4, #16]
 801b792:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b796:	68a3      	ldr	r3, [r4, #8]
 801b798:	4607      	mov	r7, r0
 801b79a:	4691      	mov	r9, r2
 801b79c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b7a0:	f108 0601 	add.w	r6, r8, #1
 801b7a4:	42b3      	cmp	r3, r6
 801b7a6:	db0b      	blt.n	801b7c0 <__lshift+0x38>
 801b7a8:	4638      	mov	r0, r7
 801b7aa:	f7ff fddb 	bl	801b364 <_Balloc>
 801b7ae:	4605      	mov	r5, r0
 801b7b0:	b948      	cbnz	r0, 801b7c6 <__lshift+0x3e>
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	4b2a      	ldr	r3, [pc, #168]	; (801b860 <__lshift+0xd8>)
 801b7b6:	482b      	ldr	r0, [pc, #172]	; (801b864 <__lshift+0xdc>)
 801b7b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801b7bc:	f000 fe70 	bl	801c4a0 <__assert_func>
 801b7c0:	3101      	adds	r1, #1
 801b7c2:	005b      	lsls	r3, r3, #1
 801b7c4:	e7ee      	b.n	801b7a4 <__lshift+0x1c>
 801b7c6:	2300      	movs	r3, #0
 801b7c8:	f100 0114 	add.w	r1, r0, #20
 801b7cc:	f100 0210 	add.w	r2, r0, #16
 801b7d0:	4618      	mov	r0, r3
 801b7d2:	4553      	cmp	r3, sl
 801b7d4:	db37      	blt.n	801b846 <__lshift+0xbe>
 801b7d6:	6920      	ldr	r0, [r4, #16]
 801b7d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b7dc:	f104 0314 	add.w	r3, r4, #20
 801b7e0:	f019 091f 	ands.w	r9, r9, #31
 801b7e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b7e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801b7ec:	d02f      	beq.n	801b84e <__lshift+0xc6>
 801b7ee:	f1c9 0e20 	rsb	lr, r9, #32
 801b7f2:	468a      	mov	sl, r1
 801b7f4:	f04f 0c00 	mov.w	ip, #0
 801b7f8:	681a      	ldr	r2, [r3, #0]
 801b7fa:	fa02 f209 	lsl.w	r2, r2, r9
 801b7fe:	ea42 020c 	orr.w	r2, r2, ip
 801b802:	f84a 2b04 	str.w	r2, [sl], #4
 801b806:	f853 2b04 	ldr.w	r2, [r3], #4
 801b80a:	4298      	cmp	r0, r3
 801b80c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801b810:	d8f2      	bhi.n	801b7f8 <__lshift+0x70>
 801b812:	1b03      	subs	r3, r0, r4
 801b814:	3b15      	subs	r3, #21
 801b816:	f023 0303 	bic.w	r3, r3, #3
 801b81a:	3304      	adds	r3, #4
 801b81c:	f104 0215 	add.w	r2, r4, #21
 801b820:	4290      	cmp	r0, r2
 801b822:	bf38      	it	cc
 801b824:	2304      	movcc	r3, #4
 801b826:	f841 c003 	str.w	ip, [r1, r3]
 801b82a:	f1bc 0f00 	cmp.w	ip, #0
 801b82e:	d001      	beq.n	801b834 <__lshift+0xac>
 801b830:	f108 0602 	add.w	r6, r8, #2
 801b834:	3e01      	subs	r6, #1
 801b836:	4638      	mov	r0, r7
 801b838:	612e      	str	r6, [r5, #16]
 801b83a:	4621      	mov	r1, r4
 801b83c:	f7ff fdd2 	bl	801b3e4 <_Bfree>
 801b840:	4628      	mov	r0, r5
 801b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b846:	f842 0f04 	str.w	r0, [r2, #4]!
 801b84a:	3301      	adds	r3, #1
 801b84c:	e7c1      	b.n	801b7d2 <__lshift+0x4a>
 801b84e:	3904      	subs	r1, #4
 801b850:	f853 2b04 	ldr.w	r2, [r3], #4
 801b854:	f841 2f04 	str.w	r2, [r1, #4]!
 801b858:	4298      	cmp	r0, r3
 801b85a:	d8f9      	bhi.n	801b850 <__lshift+0xc8>
 801b85c:	e7ea      	b.n	801b834 <__lshift+0xac>
 801b85e:	bf00      	nop
 801b860:	0801d553 	.word	0x0801d553
 801b864:	0801d5c4 	.word	0x0801d5c4

0801b868 <__mcmp>:
 801b868:	b530      	push	{r4, r5, lr}
 801b86a:	6902      	ldr	r2, [r0, #16]
 801b86c:	690c      	ldr	r4, [r1, #16]
 801b86e:	1b12      	subs	r2, r2, r4
 801b870:	d10e      	bne.n	801b890 <__mcmp+0x28>
 801b872:	f100 0314 	add.w	r3, r0, #20
 801b876:	3114      	adds	r1, #20
 801b878:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b87c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b880:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b884:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b888:	42a5      	cmp	r5, r4
 801b88a:	d003      	beq.n	801b894 <__mcmp+0x2c>
 801b88c:	d305      	bcc.n	801b89a <__mcmp+0x32>
 801b88e:	2201      	movs	r2, #1
 801b890:	4610      	mov	r0, r2
 801b892:	bd30      	pop	{r4, r5, pc}
 801b894:	4283      	cmp	r3, r0
 801b896:	d3f3      	bcc.n	801b880 <__mcmp+0x18>
 801b898:	e7fa      	b.n	801b890 <__mcmp+0x28>
 801b89a:	f04f 32ff 	mov.w	r2, #4294967295
 801b89e:	e7f7      	b.n	801b890 <__mcmp+0x28>

0801b8a0 <__mdiff>:
 801b8a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8a4:	460c      	mov	r4, r1
 801b8a6:	4606      	mov	r6, r0
 801b8a8:	4611      	mov	r1, r2
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	4690      	mov	r8, r2
 801b8ae:	f7ff ffdb 	bl	801b868 <__mcmp>
 801b8b2:	1e05      	subs	r5, r0, #0
 801b8b4:	d110      	bne.n	801b8d8 <__mdiff+0x38>
 801b8b6:	4629      	mov	r1, r5
 801b8b8:	4630      	mov	r0, r6
 801b8ba:	f7ff fd53 	bl	801b364 <_Balloc>
 801b8be:	b930      	cbnz	r0, 801b8ce <__mdiff+0x2e>
 801b8c0:	4b3a      	ldr	r3, [pc, #232]	; (801b9ac <__mdiff+0x10c>)
 801b8c2:	4602      	mov	r2, r0
 801b8c4:	f240 2132 	movw	r1, #562	; 0x232
 801b8c8:	4839      	ldr	r0, [pc, #228]	; (801b9b0 <__mdiff+0x110>)
 801b8ca:	f000 fde9 	bl	801c4a0 <__assert_func>
 801b8ce:	2301      	movs	r3, #1
 801b8d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b8d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8d8:	bfa4      	itt	ge
 801b8da:	4643      	movge	r3, r8
 801b8dc:	46a0      	movge	r8, r4
 801b8de:	4630      	mov	r0, r6
 801b8e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b8e4:	bfa6      	itte	ge
 801b8e6:	461c      	movge	r4, r3
 801b8e8:	2500      	movge	r5, #0
 801b8ea:	2501      	movlt	r5, #1
 801b8ec:	f7ff fd3a 	bl	801b364 <_Balloc>
 801b8f0:	b920      	cbnz	r0, 801b8fc <__mdiff+0x5c>
 801b8f2:	4b2e      	ldr	r3, [pc, #184]	; (801b9ac <__mdiff+0x10c>)
 801b8f4:	4602      	mov	r2, r0
 801b8f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 801b8fa:	e7e5      	b.n	801b8c8 <__mdiff+0x28>
 801b8fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b900:	6926      	ldr	r6, [r4, #16]
 801b902:	60c5      	str	r5, [r0, #12]
 801b904:	f104 0914 	add.w	r9, r4, #20
 801b908:	f108 0514 	add.w	r5, r8, #20
 801b90c:	f100 0e14 	add.w	lr, r0, #20
 801b910:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b914:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b918:	f108 0210 	add.w	r2, r8, #16
 801b91c:	46f2      	mov	sl, lr
 801b91e:	2100      	movs	r1, #0
 801b920:	f859 3b04 	ldr.w	r3, [r9], #4
 801b924:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b928:	fa1f f883 	uxth.w	r8, r3
 801b92c:	fa11 f18b 	uxtah	r1, r1, fp
 801b930:	0c1b      	lsrs	r3, r3, #16
 801b932:	eba1 0808 	sub.w	r8, r1, r8
 801b936:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b93a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b93e:	fa1f f888 	uxth.w	r8, r8
 801b942:	1419      	asrs	r1, r3, #16
 801b944:	454e      	cmp	r6, r9
 801b946:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b94a:	f84a 3b04 	str.w	r3, [sl], #4
 801b94e:	d8e7      	bhi.n	801b920 <__mdiff+0x80>
 801b950:	1b33      	subs	r3, r6, r4
 801b952:	3b15      	subs	r3, #21
 801b954:	f023 0303 	bic.w	r3, r3, #3
 801b958:	3304      	adds	r3, #4
 801b95a:	3415      	adds	r4, #21
 801b95c:	42a6      	cmp	r6, r4
 801b95e:	bf38      	it	cc
 801b960:	2304      	movcc	r3, #4
 801b962:	441d      	add	r5, r3
 801b964:	4473      	add	r3, lr
 801b966:	469e      	mov	lr, r3
 801b968:	462e      	mov	r6, r5
 801b96a:	4566      	cmp	r6, ip
 801b96c:	d30e      	bcc.n	801b98c <__mdiff+0xec>
 801b96e:	f10c 0203 	add.w	r2, ip, #3
 801b972:	1b52      	subs	r2, r2, r5
 801b974:	f022 0203 	bic.w	r2, r2, #3
 801b978:	3d03      	subs	r5, #3
 801b97a:	45ac      	cmp	ip, r5
 801b97c:	bf38      	it	cc
 801b97e:	2200      	movcc	r2, #0
 801b980:	441a      	add	r2, r3
 801b982:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801b986:	b17b      	cbz	r3, 801b9a8 <__mdiff+0x108>
 801b988:	6107      	str	r7, [r0, #16]
 801b98a:	e7a3      	b.n	801b8d4 <__mdiff+0x34>
 801b98c:	f856 8b04 	ldr.w	r8, [r6], #4
 801b990:	fa11 f288 	uxtah	r2, r1, r8
 801b994:	1414      	asrs	r4, r2, #16
 801b996:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b99a:	b292      	uxth	r2, r2
 801b99c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b9a0:	f84e 2b04 	str.w	r2, [lr], #4
 801b9a4:	1421      	asrs	r1, r4, #16
 801b9a6:	e7e0      	b.n	801b96a <__mdiff+0xca>
 801b9a8:	3f01      	subs	r7, #1
 801b9aa:	e7ea      	b.n	801b982 <__mdiff+0xe2>
 801b9ac:	0801d553 	.word	0x0801d553
 801b9b0:	0801d5c4 	.word	0x0801d5c4

0801b9b4 <__d2b>:
 801b9b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b9b8:	4689      	mov	r9, r1
 801b9ba:	2101      	movs	r1, #1
 801b9bc:	ec57 6b10 	vmov	r6, r7, d0
 801b9c0:	4690      	mov	r8, r2
 801b9c2:	f7ff fccf 	bl	801b364 <_Balloc>
 801b9c6:	4604      	mov	r4, r0
 801b9c8:	b930      	cbnz	r0, 801b9d8 <__d2b+0x24>
 801b9ca:	4602      	mov	r2, r0
 801b9cc:	4b25      	ldr	r3, [pc, #148]	; (801ba64 <__d2b+0xb0>)
 801b9ce:	4826      	ldr	r0, [pc, #152]	; (801ba68 <__d2b+0xb4>)
 801b9d0:	f240 310a 	movw	r1, #778	; 0x30a
 801b9d4:	f000 fd64 	bl	801c4a0 <__assert_func>
 801b9d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801b9dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b9e0:	bb35      	cbnz	r5, 801ba30 <__d2b+0x7c>
 801b9e2:	2e00      	cmp	r6, #0
 801b9e4:	9301      	str	r3, [sp, #4]
 801b9e6:	d028      	beq.n	801ba3a <__d2b+0x86>
 801b9e8:	4668      	mov	r0, sp
 801b9ea:	9600      	str	r6, [sp, #0]
 801b9ec:	f7ff fd82 	bl	801b4f4 <__lo0bits>
 801b9f0:	9900      	ldr	r1, [sp, #0]
 801b9f2:	b300      	cbz	r0, 801ba36 <__d2b+0x82>
 801b9f4:	9a01      	ldr	r2, [sp, #4]
 801b9f6:	f1c0 0320 	rsb	r3, r0, #32
 801b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 801b9fe:	430b      	orrs	r3, r1
 801ba00:	40c2      	lsrs	r2, r0
 801ba02:	6163      	str	r3, [r4, #20]
 801ba04:	9201      	str	r2, [sp, #4]
 801ba06:	9b01      	ldr	r3, [sp, #4]
 801ba08:	61a3      	str	r3, [r4, #24]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	bf14      	ite	ne
 801ba0e:	2202      	movne	r2, #2
 801ba10:	2201      	moveq	r2, #1
 801ba12:	6122      	str	r2, [r4, #16]
 801ba14:	b1d5      	cbz	r5, 801ba4c <__d2b+0x98>
 801ba16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ba1a:	4405      	add	r5, r0
 801ba1c:	f8c9 5000 	str.w	r5, [r9]
 801ba20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ba24:	f8c8 0000 	str.w	r0, [r8]
 801ba28:	4620      	mov	r0, r4
 801ba2a:	b003      	add	sp, #12
 801ba2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ba34:	e7d5      	b.n	801b9e2 <__d2b+0x2e>
 801ba36:	6161      	str	r1, [r4, #20]
 801ba38:	e7e5      	b.n	801ba06 <__d2b+0x52>
 801ba3a:	a801      	add	r0, sp, #4
 801ba3c:	f7ff fd5a 	bl	801b4f4 <__lo0bits>
 801ba40:	9b01      	ldr	r3, [sp, #4]
 801ba42:	6163      	str	r3, [r4, #20]
 801ba44:	2201      	movs	r2, #1
 801ba46:	6122      	str	r2, [r4, #16]
 801ba48:	3020      	adds	r0, #32
 801ba4a:	e7e3      	b.n	801ba14 <__d2b+0x60>
 801ba4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ba50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ba54:	f8c9 0000 	str.w	r0, [r9]
 801ba58:	6918      	ldr	r0, [r3, #16]
 801ba5a:	f7ff fd2b 	bl	801b4b4 <__hi0bits>
 801ba5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ba62:	e7df      	b.n	801ba24 <__d2b+0x70>
 801ba64:	0801d553 	.word	0x0801d553
 801ba68:	0801d5c4 	.word	0x0801d5c4

0801ba6c <_calloc_r>:
 801ba6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba6e:	fba1 2402 	umull	r2, r4, r1, r2
 801ba72:	b94c      	cbnz	r4, 801ba88 <_calloc_r+0x1c>
 801ba74:	4611      	mov	r1, r2
 801ba76:	9201      	str	r2, [sp, #4]
 801ba78:	f000 f87a 	bl	801bb70 <_malloc_r>
 801ba7c:	9a01      	ldr	r2, [sp, #4]
 801ba7e:	4605      	mov	r5, r0
 801ba80:	b930      	cbnz	r0, 801ba90 <_calloc_r+0x24>
 801ba82:	4628      	mov	r0, r5
 801ba84:	b003      	add	sp, #12
 801ba86:	bd30      	pop	{r4, r5, pc}
 801ba88:	220c      	movs	r2, #12
 801ba8a:	6002      	str	r2, [r0, #0]
 801ba8c:	2500      	movs	r5, #0
 801ba8e:	e7f8      	b.n	801ba82 <_calloc_r+0x16>
 801ba90:	4621      	mov	r1, r4
 801ba92:	f7fe f8bf 	bl	8019c14 <memset>
 801ba96:	e7f4      	b.n	801ba82 <_calloc_r+0x16>

0801ba98 <_free_r>:
 801ba98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ba9a:	2900      	cmp	r1, #0
 801ba9c:	d044      	beq.n	801bb28 <_free_r+0x90>
 801ba9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801baa2:	9001      	str	r0, [sp, #4]
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	f1a1 0404 	sub.w	r4, r1, #4
 801baaa:	bfb8      	it	lt
 801baac:	18e4      	addlt	r4, r4, r3
 801baae:	f000 fe9d 	bl	801c7ec <__malloc_lock>
 801bab2:	4a1e      	ldr	r2, [pc, #120]	; (801bb2c <_free_r+0x94>)
 801bab4:	9801      	ldr	r0, [sp, #4]
 801bab6:	6813      	ldr	r3, [r2, #0]
 801bab8:	b933      	cbnz	r3, 801bac8 <_free_r+0x30>
 801baba:	6063      	str	r3, [r4, #4]
 801babc:	6014      	str	r4, [r2, #0]
 801babe:	b003      	add	sp, #12
 801bac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bac4:	f000 be98 	b.w	801c7f8 <__malloc_unlock>
 801bac8:	42a3      	cmp	r3, r4
 801baca:	d908      	bls.n	801bade <_free_r+0x46>
 801bacc:	6825      	ldr	r5, [r4, #0]
 801bace:	1961      	adds	r1, r4, r5
 801bad0:	428b      	cmp	r3, r1
 801bad2:	bf01      	itttt	eq
 801bad4:	6819      	ldreq	r1, [r3, #0]
 801bad6:	685b      	ldreq	r3, [r3, #4]
 801bad8:	1949      	addeq	r1, r1, r5
 801bada:	6021      	streq	r1, [r4, #0]
 801badc:	e7ed      	b.n	801baba <_free_r+0x22>
 801bade:	461a      	mov	r2, r3
 801bae0:	685b      	ldr	r3, [r3, #4]
 801bae2:	b10b      	cbz	r3, 801bae8 <_free_r+0x50>
 801bae4:	42a3      	cmp	r3, r4
 801bae6:	d9fa      	bls.n	801bade <_free_r+0x46>
 801bae8:	6811      	ldr	r1, [r2, #0]
 801baea:	1855      	adds	r5, r2, r1
 801baec:	42a5      	cmp	r5, r4
 801baee:	d10b      	bne.n	801bb08 <_free_r+0x70>
 801baf0:	6824      	ldr	r4, [r4, #0]
 801baf2:	4421      	add	r1, r4
 801baf4:	1854      	adds	r4, r2, r1
 801baf6:	42a3      	cmp	r3, r4
 801baf8:	6011      	str	r1, [r2, #0]
 801bafa:	d1e0      	bne.n	801babe <_free_r+0x26>
 801bafc:	681c      	ldr	r4, [r3, #0]
 801bafe:	685b      	ldr	r3, [r3, #4]
 801bb00:	6053      	str	r3, [r2, #4]
 801bb02:	4421      	add	r1, r4
 801bb04:	6011      	str	r1, [r2, #0]
 801bb06:	e7da      	b.n	801babe <_free_r+0x26>
 801bb08:	d902      	bls.n	801bb10 <_free_r+0x78>
 801bb0a:	230c      	movs	r3, #12
 801bb0c:	6003      	str	r3, [r0, #0]
 801bb0e:	e7d6      	b.n	801babe <_free_r+0x26>
 801bb10:	6825      	ldr	r5, [r4, #0]
 801bb12:	1961      	adds	r1, r4, r5
 801bb14:	428b      	cmp	r3, r1
 801bb16:	bf04      	itt	eq
 801bb18:	6819      	ldreq	r1, [r3, #0]
 801bb1a:	685b      	ldreq	r3, [r3, #4]
 801bb1c:	6063      	str	r3, [r4, #4]
 801bb1e:	bf04      	itt	eq
 801bb20:	1949      	addeq	r1, r1, r5
 801bb22:	6021      	streq	r1, [r4, #0]
 801bb24:	6054      	str	r4, [r2, #4]
 801bb26:	e7ca      	b.n	801babe <_free_r+0x26>
 801bb28:	b003      	add	sp, #12
 801bb2a:	bd30      	pop	{r4, r5, pc}
 801bb2c:	24002e1c 	.word	0x24002e1c

0801bb30 <sbrk_aligned>:
 801bb30:	b570      	push	{r4, r5, r6, lr}
 801bb32:	4e0e      	ldr	r6, [pc, #56]	; (801bb6c <sbrk_aligned+0x3c>)
 801bb34:	460c      	mov	r4, r1
 801bb36:	6831      	ldr	r1, [r6, #0]
 801bb38:	4605      	mov	r5, r0
 801bb3a:	b911      	cbnz	r1, 801bb42 <sbrk_aligned+0x12>
 801bb3c:	f000 fb8a 	bl	801c254 <_sbrk_r>
 801bb40:	6030      	str	r0, [r6, #0]
 801bb42:	4621      	mov	r1, r4
 801bb44:	4628      	mov	r0, r5
 801bb46:	f000 fb85 	bl	801c254 <_sbrk_r>
 801bb4a:	1c43      	adds	r3, r0, #1
 801bb4c:	d00a      	beq.n	801bb64 <sbrk_aligned+0x34>
 801bb4e:	1cc4      	adds	r4, r0, #3
 801bb50:	f024 0403 	bic.w	r4, r4, #3
 801bb54:	42a0      	cmp	r0, r4
 801bb56:	d007      	beq.n	801bb68 <sbrk_aligned+0x38>
 801bb58:	1a21      	subs	r1, r4, r0
 801bb5a:	4628      	mov	r0, r5
 801bb5c:	f000 fb7a 	bl	801c254 <_sbrk_r>
 801bb60:	3001      	adds	r0, #1
 801bb62:	d101      	bne.n	801bb68 <sbrk_aligned+0x38>
 801bb64:	f04f 34ff 	mov.w	r4, #4294967295
 801bb68:	4620      	mov	r0, r4
 801bb6a:	bd70      	pop	{r4, r5, r6, pc}
 801bb6c:	24002e20 	.word	0x24002e20

0801bb70 <_malloc_r>:
 801bb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb74:	1ccd      	adds	r5, r1, #3
 801bb76:	f025 0503 	bic.w	r5, r5, #3
 801bb7a:	3508      	adds	r5, #8
 801bb7c:	2d0c      	cmp	r5, #12
 801bb7e:	bf38      	it	cc
 801bb80:	250c      	movcc	r5, #12
 801bb82:	2d00      	cmp	r5, #0
 801bb84:	4607      	mov	r7, r0
 801bb86:	db01      	blt.n	801bb8c <_malloc_r+0x1c>
 801bb88:	42a9      	cmp	r1, r5
 801bb8a:	d905      	bls.n	801bb98 <_malloc_r+0x28>
 801bb8c:	230c      	movs	r3, #12
 801bb8e:	603b      	str	r3, [r7, #0]
 801bb90:	2600      	movs	r6, #0
 801bb92:	4630      	mov	r0, r6
 801bb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb98:	4e2e      	ldr	r6, [pc, #184]	; (801bc54 <_malloc_r+0xe4>)
 801bb9a:	f000 fe27 	bl	801c7ec <__malloc_lock>
 801bb9e:	6833      	ldr	r3, [r6, #0]
 801bba0:	461c      	mov	r4, r3
 801bba2:	bb34      	cbnz	r4, 801bbf2 <_malloc_r+0x82>
 801bba4:	4629      	mov	r1, r5
 801bba6:	4638      	mov	r0, r7
 801bba8:	f7ff ffc2 	bl	801bb30 <sbrk_aligned>
 801bbac:	1c43      	adds	r3, r0, #1
 801bbae:	4604      	mov	r4, r0
 801bbb0:	d14d      	bne.n	801bc4e <_malloc_r+0xde>
 801bbb2:	6834      	ldr	r4, [r6, #0]
 801bbb4:	4626      	mov	r6, r4
 801bbb6:	2e00      	cmp	r6, #0
 801bbb8:	d140      	bne.n	801bc3c <_malloc_r+0xcc>
 801bbba:	6823      	ldr	r3, [r4, #0]
 801bbbc:	4631      	mov	r1, r6
 801bbbe:	4638      	mov	r0, r7
 801bbc0:	eb04 0803 	add.w	r8, r4, r3
 801bbc4:	f000 fb46 	bl	801c254 <_sbrk_r>
 801bbc8:	4580      	cmp	r8, r0
 801bbca:	d13a      	bne.n	801bc42 <_malloc_r+0xd2>
 801bbcc:	6821      	ldr	r1, [r4, #0]
 801bbce:	3503      	adds	r5, #3
 801bbd0:	1a6d      	subs	r5, r5, r1
 801bbd2:	f025 0503 	bic.w	r5, r5, #3
 801bbd6:	3508      	adds	r5, #8
 801bbd8:	2d0c      	cmp	r5, #12
 801bbda:	bf38      	it	cc
 801bbdc:	250c      	movcc	r5, #12
 801bbde:	4629      	mov	r1, r5
 801bbe0:	4638      	mov	r0, r7
 801bbe2:	f7ff ffa5 	bl	801bb30 <sbrk_aligned>
 801bbe6:	3001      	adds	r0, #1
 801bbe8:	d02b      	beq.n	801bc42 <_malloc_r+0xd2>
 801bbea:	6823      	ldr	r3, [r4, #0]
 801bbec:	442b      	add	r3, r5
 801bbee:	6023      	str	r3, [r4, #0]
 801bbf0:	e00e      	b.n	801bc10 <_malloc_r+0xa0>
 801bbf2:	6822      	ldr	r2, [r4, #0]
 801bbf4:	1b52      	subs	r2, r2, r5
 801bbf6:	d41e      	bmi.n	801bc36 <_malloc_r+0xc6>
 801bbf8:	2a0b      	cmp	r2, #11
 801bbfa:	d916      	bls.n	801bc2a <_malloc_r+0xba>
 801bbfc:	1961      	adds	r1, r4, r5
 801bbfe:	42a3      	cmp	r3, r4
 801bc00:	6025      	str	r5, [r4, #0]
 801bc02:	bf18      	it	ne
 801bc04:	6059      	strne	r1, [r3, #4]
 801bc06:	6863      	ldr	r3, [r4, #4]
 801bc08:	bf08      	it	eq
 801bc0a:	6031      	streq	r1, [r6, #0]
 801bc0c:	5162      	str	r2, [r4, r5]
 801bc0e:	604b      	str	r3, [r1, #4]
 801bc10:	4638      	mov	r0, r7
 801bc12:	f104 060b 	add.w	r6, r4, #11
 801bc16:	f000 fdef 	bl	801c7f8 <__malloc_unlock>
 801bc1a:	f026 0607 	bic.w	r6, r6, #7
 801bc1e:	1d23      	adds	r3, r4, #4
 801bc20:	1af2      	subs	r2, r6, r3
 801bc22:	d0b6      	beq.n	801bb92 <_malloc_r+0x22>
 801bc24:	1b9b      	subs	r3, r3, r6
 801bc26:	50a3      	str	r3, [r4, r2]
 801bc28:	e7b3      	b.n	801bb92 <_malloc_r+0x22>
 801bc2a:	6862      	ldr	r2, [r4, #4]
 801bc2c:	42a3      	cmp	r3, r4
 801bc2e:	bf0c      	ite	eq
 801bc30:	6032      	streq	r2, [r6, #0]
 801bc32:	605a      	strne	r2, [r3, #4]
 801bc34:	e7ec      	b.n	801bc10 <_malloc_r+0xa0>
 801bc36:	4623      	mov	r3, r4
 801bc38:	6864      	ldr	r4, [r4, #4]
 801bc3a:	e7b2      	b.n	801bba2 <_malloc_r+0x32>
 801bc3c:	4634      	mov	r4, r6
 801bc3e:	6876      	ldr	r6, [r6, #4]
 801bc40:	e7b9      	b.n	801bbb6 <_malloc_r+0x46>
 801bc42:	230c      	movs	r3, #12
 801bc44:	603b      	str	r3, [r7, #0]
 801bc46:	4638      	mov	r0, r7
 801bc48:	f000 fdd6 	bl	801c7f8 <__malloc_unlock>
 801bc4c:	e7a1      	b.n	801bb92 <_malloc_r+0x22>
 801bc4e:	6025      	str	r5, [r4, #0]
 801bc50:	e7de      	b.n	801bc10 <_malloc_r+0xa0>
 801bc52:	bf00      	nop
 801bc54:	24002e1c 	.word	0x24002e1c

0801bc58 <__ssputs_r>:
 801bc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc5c:	688e      	ldr	r6, [r1, #8]
 801bc5e:	429e      	cmp	r6, r3
 801bc60:	4682      	mov	sl, r0
 801bc62:	460c      	mov	r4, r1
 801bc64:	4690      	mov	r8, r2
 801bc66:	461f      	mov	r7, r3
 801bc68:	d838      	bhi.n	801bcdc <__ssputs_r+0x84>
 801bc6a:	898a      	ldrh	r2, [r1, #12]
 801bc6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bc70:	d032      	beq.n	801bcd8 <__ssputs_r+0x80>
 801bc72:	6825      	ldr	r5, [r4, #0]
 801bc74:	6909      	ldr	r1, [r1, #16]
 801bc76:	eba5 0901 	sub.w	r9, r5, r1
 801bc7a:	6965      	ldr	r5, [r4, #20]
 801bc7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bc80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bc84:	3301      	adds	r3, #1
 801bc86:	444b      	add	r3, r9
 801bc88:	106d      	asrs	r5, r5, #1
 801bc8a:	429d      	cmp	r5, r3
 801bc8c:	bf38      	it	cc
 801bc8e:	461d      	movcc	r5, r3
 801bc90:	0553      	lsls	r3, r2, #21
 801bc92:	d531      	bpl.n	801bcf8 <__ssputs_r+0xa0>
 801bc94:	4629      	mov	r1, r5
 801bc96:	f7ff ff6b 	bl	801bb70 <_malloc_r>
 801bc9a:	4606      	mov	r6, r0
 801bc9c:	b950      	cbnz	r0, 801bcb4 <__ssputs_r+0x5c>
 801bc9e:	230c      	movs	r3, #12
 801bca0:	f8ca 3000 	str.w	r3, [sl]
 801bca4:	89a3      	ldrh	r3, [r4, #12]
 801bca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bcaa:	81a3      	strh	r3, [r4, #12]
 801bcac:	f04f 30ff 	mov.w	r0, #4294967295
 801bcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bcb4:	6921      	ldr	r1, [r4, #16]
 801bcb6:	464a      	mov	r2, r9
 801bcb8:	f7ff fb46 	bl	801b348 <memcpy>
 801bcbc:	89a3      	ldrh	r3, [r4, #12]
 801bcbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bcc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bcc6:	81a3      	strh	r3, [r4, #12]
 801bcc8:	6126      	str	r6, [r4, #16]
 801bcca:	6165      	str	r5, [r4, #20]
 801bccc:	444e      	add	r6, r9
 801bcce:	eba5 0509 	sub.w	r5, r5, r9
 801bcd2:	6026      	str	r6, [r4, #0]
 801bcd4:	60a5      	str	r5, [r4, #8]
 801bcd6:	463e      	mov	r6, r7
 801bcd8:	42be      	cmp	r6, r7
 801bcda:	d900      	bls.n	801bcde <__ssputs_r+0x86>
 801bcdc:	463e      	mov	r6, r7
 801bcde:	6820      	ldr	r0, [r4, #0]
 801bce0:	4632      	mov	r2, r6
 801bce2:	4641      	mov	r1, r8
 801bce4:	f000 fd68 	bl	801c7b8 <memmove>
 801bce8:	68a3      	ldr	r3, [r4, #8]
 801bcea:	1b9b      	subs	r3, r3, r6
 801bcec:	60a3      	str	r3, [r4, #8]
 801bcee:	6823      	ldr	r3, [r4, #0]
 801bcf0:	4433      	add	r3, r6
 801bcf2:	6023      	str	r3, [r4, #0]
 801bcf4:	2000      	movs	r0, #0
 801bcf6:	e7db      	b.n	801bcb0 <__ssputs_r+0x58>
 801bcf8:	462a      	mov	r2, r5
 801bcfa:	f000 fd83 	bl	801c804 <_realloc_r>
 801bcfe:	4606      	mov	r6, r0
 801bd00:	2800      	cmp	r0, #0
 801bd02:	d1e1      	bne.n	801bcc8 <__ssputs_r+0x70>
 801bd04:	6921      	ldr	r1, [r4, #16]
 801bd06:	4650      	mov	r0, sl
 801bd08:	f7ff fec6 	bl	801ba98 <_free_r>
 801bd0c:	e7c7      	b.n	801bc9e <__ssputs_r+0x46>
	...

0801bd10 <_svfiprintf_r>:
 801bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd14:	4698      	mov	r8, r3
 801bd16:	898b      	ldrh	r3, [r1, #12]
 801bd18:	061b      	lsls	r3, r3, #24
 801bd1a:	b09d      	sub	sp, #116	; 0x74
 801bd1c:	4607      	mov	r7, r0
 801bd1e:	460d      	mov	r5, r1
 801bd20:	4614      	mov	r4, r2
 801bd22:	d50e      	bpl.n	801bd42 <_svfiprintf_r+0x32>
 801bd24:	690b      	ldr	r3, [r1, #16]
 801bd26:	b963      	cbnz	r3, 801bd42 <_svfiprintf_r+0x32>
 801bd28:	2140      	movs	r1, #64	; 0x40
 801bd2a:	f7ff ff21 	bl	801bb70 <_malloc_r>
 801bd2e:	6028      	str	r0, [r5, #0]
 801bd30:	6128      	str	r0, [r5, #16]
 801bd32:	b920      	cbnz	r0, 801bd3e <_svfiprintf_r+0x2e>
 801bd34:	230c      	movs	r3, #12
 801bd36:	603b      	str	r3, [r7, #0]
 801bd38:	f04f 30ff 	mov.w	r0, #4294967295
 801bd3c:	e0d1      	b.n	801bee2 <_svfiprintf_r+0x1d2>
 801bd3e:	2340      	movs	r3, #64	; 0x40
 801bd40:	616b      	str	r3, [r5, #20]
 801bd42:	2300      	movs	r3, #0
 801bd44:	9309      	str	r3, [sp, #36]	; 0x24
 801bd46:	2320      	movs	r3, #32
 801bd48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd4c:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd50:	2330      	movs	r3, #48	; 0x30
 801bd52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801befc <_svfiprintf_r+0x1ec>
 801bd56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd5a:	f04f 0901 	mov.w	r9, #1
 801bd5e:	4623      	mov	r3, r4
 801bd60:	469a      	mov	sl, r3
 801bd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd66:	b10a      	cbz	r2, 801bd6c <_svfiprintf_r+0x5c>
 801bd68:	2a25      	cmp	r2, #37	; 0x25
 801bd6a:	d1f9      	bne.n	801bd60 <_svfiprintf_r+0x50>
 801bd6c:	ebba 0b04 	subs.w	fp, sl, r4
 801bd70:	d00b      	beq.n	801bd8a <_svfiprintf_r+0x7a>
 801bd72:	465b      	mov	r3, fp
 801bd74:	4622      	mov	r2, r4
 801bd76:	4629      	mov	r1, r5
 801bd78:	4638      	mov	r0, r7
 801bd7a:	f7ff ff6d 	bl	801bc58 <__ssputs_r>
 801bd7e:	3001      	adds	r0, #1
 801bd80:	f000 80aa 	beq.w	801bed8 <_svfiprintf_r+0x1c8>
 801bd84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd86:	445a      	add	r2, fp
 801bd88:	9209      	str	r2, [sp, #36]	; 0x24
 801bd8a:	f89a 3000 	ldrb.w	r3, [sl]
 801bd8e:	2b00      	cmp	r3, #0
 801bd90:	f000 80a2 	beq.w	801bed8 <_svfiprintf_r+0x1c8>
 801bd94:	2300      	movs	r3, #0
 801bd96:	f04f 32ff 	mov.w	r2, #4294967295
 801bd9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd9e:	f10a 0a01 	add.w	sl, sl, #1
 801bda2:	9304      	str	r3, [sp, #16]
 801bda4:	9307      	str	r3, [sp, #28]
 801bda6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bdaa:	931a      	str	r3, [sp, #104]	; 0x68
 801bdac:	4654      	mov	r4, sl
 801bdae:	2205      	movs	r2, #5
 801bdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdb4:	4851      	ldr	r0, [pc, #324]	; (801befc <_svfiprintf_r+0x1ec>)
 801bdb6:	f7e4 fa9b 	bl	80002f0 <memchr>
 801bdba:	9a04      	ldr	r2, [sp, #16]
 801bdbc:	b9d8      	cbnz	r0, 801bdf6 <_svfiprintf_r+0xe6>
 801bdbe:	06d0      	lsls	r0, r2, #27
 801bdc0:	bf44      	itt	mi
 801bdc2:	2320      	movmi	r3, #32
 801bdc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdc8:	0711      	lsls	r1, r2, #28
 801bdca:	bf44      	itt	mi
 801bdcc:	232b      	movmi	r3, #43	; 0x2b
 801bdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bdd2:	f89a 3000 	ldrb.w	r3, [sl]
 801bdd6:	2b2a      	cmp	r3, #42	; 0x2a
 801bdd8:	d015      	beq.n	801be06 <_svfiprintf_r+0xf6>
 801bdda:	9a07      	ldr	r2, [sp, #28]
 801bddc:	4654      	mov	r4, sl
 801bdde:	2000      	movs	r0, #0
 801bde0:	f04f 0c0a 	mov.w	ip, #10
 801bde4:	4621      	mov	r1, r4
 801bde6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdea:	3b30      	subs	r3, #48	; 0x30
 801bdec:	2b09      	cmp	r3, #9
 801bdee:	d94e      	bls.n	801be8e <_svfiprintf_r+0x17e>
 801bdf0:	b1b0      	cbz	r0, 801be20 <_svfiprintf_r+0x110>
 801bdf2:	9207      	str	r2, [sp, #28]
 801bdf4:	e014      	b.n	801be20 <_svfiprintf_r+0x110>
 801bdf6:	eba0 0308 	sub.w	r3, r0, r8
 801bdfa:	fa09 f303 	lsl.w	r3, r9, r3
 801bdfe:	4313      	orrs	r3, r2
 801be00:	9304      	str	r3, [sp, #16]
 801be02:	46a2      	mov	sl, r4
 801be04:	e7d2      	b.n	801bdac <_svfiprintf_r+0x9c>
 801be06:	9b03      	ldr	r3, [sp, #12]
 801be08:	1d19      	adds	r1, r3, #4
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	9103      	str	r1, [sp, #12]
 801be0e:	2b00      	cmp	r3, #0
 801be10:	bfbb      	ittet	lt
 801be12:	425b      	neglt	r3, r3
 801be14:	f042 0202 	orrlt.w	r2, r2, #2
 801be18:	9307      	strge	r3, [sp, #28]
 801be1a:	9307      	strlt	r3, [sp, #28]
 801be1c:	bfb8      	it	lt
 801be1e:	9204      	strlt	r2, [sp, #16]
 801be20:	7823      	ldrb	r3, [r4, #0]
 801be22:	2b2e      	cmp	r3, #46	; 0x2e
 801be24:	d10c      	bne.n	801be40 <_svfiprintf_r+0x130>
 801be26:	7863      	ldrb	r3, [r4, #1]
 801be28:	2b2a      	cmp	r3, #42	; 0x2a
 801be2a:	d135      	bne.n	801be98 <_svfiprintf_r+0x188>
 801be2c:	9b03      	ldr	r3, [sp, #12]
 801be2e:	1d1a      	adds	r2, r3, #4
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	9203      	str	r2, [sp, #12]
 801be34:	2b00      	cmp	r3, #0
 801be36:	bfb8      	it	lt
 801be38:	f04f 33ff 	movlt.w	r3, #4294967295
 801be3c:	3402      	adds	r4, #2
 801be3e:	9305      	str	r3, [sp, #20]
 801be40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801bf0c <_svfiprintf_r+0x1fc>
 801be44:	7821      	ldrb	r1, [r4, #0]
 801be46:	2203      	movs	r2, #3
 801be48:	4650      	mov	r0, sl
 801be4a:	f7e4 fa51 	bl	80002f0 <memchr>
 801be4e:	b140      	cbz	r0, 801be62 <_svfiprintf_r+0x152>
 801be50:	2340      	movs	r3, #64	; 0x40
 801be52:	eba0 000a 	sub.w	r0, r0, sl
 801be56:	fa03 f000 	lsl.w	r0, r3, r0
 801be5a:	9b04      	ldr	r3, [sp, #16]
 801be5c:	4303      	orrs	r3, r0
 801be5e:	3401      	adds	r4, #1
 801be60:	9304      	str	r3, [sp, #16]
 801be62:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be66:	4826      	ldr	r0, [pc, #152]	; (801bf00 <_svfiprintf_r+0x1f0>)
 801be68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be6c:	2206      	movs	r2, #6
 801be6e:	f7e4 fa3f 	bl	80002f0 <memchr>
 801be72:	2800      	cmp	r0, #0
 801be74:	d038      	beq.n	801bee8 <_svfiprintf_r+0x1d8>
 801be76:	4b23      	ldr	r3, [pc, #140]	; (801bf04 <_svfiprintf_r+0x1f4>)
 801be78:	bb1b      	cbnz	r3, 801bec2 <_svfiprintf_r+0x1b2>
 801be7a:	9b03      	ldr	r3, [sp, #12]
 801be7c:	3307      	adds	r3, #7
 801be7e:	f023 0307 	bic.w	r3, r3, #7
 801be82:	3308      	adds	r3, #8
 801be84:	9303      	str	r3, [sp, #12]
 801be86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be88:	4433      	add	r3, r6
 801be8a:	9309      	str	r3, [sp, #36]	; 0x24
 801be8c:	e767      	b.n	801bd5e <_svfiprintf_r+0x4e>
 801be8e:	fb0c 3202 	mla	r2, ip, r2, r3
 801be92:	460c      	mov	r4, r1
 801be94:	2001      	movs	r0, #1
 801be96:	e7a5      	b.n	801bde4 <_svfiprintf_r+0xd4>
 801be98:	2300      	movs	r3, #0
 801be9a:	3401      	adds	r4, #1
 801be9c:	9305      	str	r3, [sp, #20]
 801be9e:	4619      	mov	r1, r3
 801bea0:	f04f 0c0a 	mov.w	ip, #10
 801bea4:	4620      	mov	r0, r4
 801bea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801beaa:	3a30      	subs	r2, #48	; 0x30
 801beac:	2a09      	cmp	r2, #9
 801beae:	d903      	bls.n	801beb8 <_svfiprintf_r+0x1a8>
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d0c5      	beq.n	801be40 <_svfiprintf_r+0x130>
 801beb4:	9105      	str	r1, [sp, #20]
 801beb6:	e7c3      	b.n	801be40 <_svfiprintf_r+0x130>
 801beb8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bebc:	4604      	mov	r4, r0
 801bebe:	2301      	movs	r3, #1
 801bec0:	e7f0      	b.n	801bea4 <_svfiprintf_r+0x194>
 801bec2:	ab03      	add	r3, sp, #12
 801bec4:	9300      	str	r3, [sp, #0]
 801bec6:	462a      	mov	r2, r5
 801bec8:	4b0f      	ldr	r3, [pc, #60]	; (801bf08 <_svfiprintf_r+0x1f8>)
 801beca:	a904      	add	r1, sp, #16
 801becc:	4638      	mov	r0, r7
 801bece:	f7fd ff3b 	bl	8019d48 <_printf_float>
 801bed2:	1c42      	adds	r2, r0, #1
 801bed4:	4606      	mov	r6, r0
 801bed6:	d1d6      	bne.n	801be86 <_svfiprintf_r+0x176>
 801bed8:	89ab      	ldrh	r3, [r5, #12]
 801beda:	065b      	lsls	r3, r3, #25
 801bedc:	f53f af2c 	bmi.w	801bd38 <_svfiprintf_r+0x28>
 801bee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bee2:	b01d      	add	sp, #116	; 0x74
 801bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bee8:	ab03      	add	r3, sp, #12
 801beea:	9300      	str	r3, [sp, #0]
 801beec:	462a      	mov	r2, r5
 801beee:	4b06      	ldr	r3, [pc, #24]	; (801bf08 <_svfiprintf_r+0x1f8>)
 801bef0:	a904      	add	r1, sp, #16
 801bef2:	4638      	mov	r0, r7
 801bef4:	f7fe f9b4 	bl	801a260 <_printf_i>
 801bef8:	e7eb      	b.n	801bed2 <_svfiprintf_r+0x1c2>
 801befa:	bf00      	nop
 801befc:	0801d71c 	.word	0x0801d71c
 801bf00:	0801d726 	.word	0x0801d726
 801bf04:	08019d49 	.word	0x08019d49
 801bf08:	0801bc59 	.word	0x0801bc59
 801bf0c:	0801d722 	.word	0x0801d722

0801bf10 <__sfputc_r>:
 801bf10:	6893      	ldr	r3, [r2, #8]
 801bf12:	3b01      	subs	r3, #1
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	b410      	push	{r4}
 801bf18:	6093      	str	r3, [r2, #8]
 801bf1a:	da08      	bge.n	801bf2e <__sfputc_r+0x1e>
 801bf1c:	6994      	ldr	r4, [r2, #24]
 801bf1e:	42a3      	cmp	r3, r4
 801bf20:	db01      	blt.n	801bf26 <__sfputc_r+0x16>
 801bf22:	290a      	cmp	r1, #10
 801bf24:	d103      	bne.n	801bf2e <__sfputc_r+0x1e>
 801bf26:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf2a:	f000 b9e7 	b.w	801c2fc <__swbuf_r>
 801bf2e:	6813      	ldr	r3, [r2, #0]
 801bf30:	1c58      	adds	r0, r3, #1
 801bf32:	6010      	str	r0, [r2, #0]
 801bf34:	7019      	strb	r1, [r3, #0]
 801bf36:	4608      	mov	r0, r1
 801bf38:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf3c:	4770      	bx	lr

0801bf3e <__sfputs_r>:
 801bf3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf40:	4606      	mov	r6, r0
 801bf42:	460f      	mov	r7, r1
 801bf44:	4614      	mov	r4, r2
 801bf46:	18d5      	adds	r5, r2, r3
 801bf48:	42ac      	cmp	r4, r5
 801bf4a:	d101      	bne.n	801bf50 <__sfputs_r+0x12>
 801bf4c:	2000      	movs	r0, #0
 801bf4e:	e007      	b.n	801bf60 <__sfputs_r+0x22>
 801bf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf54:	463a      	mov	r2, r7
 801bf56:	4630      	mov	r0, r6
 801bf58:	f7ff ffda 	bl	801bf10 <__sfputc_r>
 801bf5c:	1c43      	adds	r3, r0, #1
 801bf5e:	d1f3      	bne.n	801bf48 <__sfputs_r+0xa>
 801bf60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bf64 <_vfiprintf_r>:
 801bf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf68:	460d      	mov	r5, r1
 801bf6a:	b09d      	sub	sp, #116	; 0x74
 801bf6c:	4614      	mov	r4, r2
 801bf6e:	4698      	mov	r8, r3
 801bf70:	4606      	mov	r6, r0
 801bf72:	b118      	cbz	r0, 801bf7c <_vfiprintf_r+0x18>
 801bf74:	6983      	ldr	r3, [r0, #24]
 801bf76:	b90b      	cbnz	r3, 801bf7c <_vfiprintf_r+0x18>
 801bf78:	f7ff f938 	bl	801b1ec <__sinit>
 801bf7c:	4b89      	ldr	r3, [pc, #548]	; (801c1a4 <_vfiprintf_r+0x240>)
 801bf7e:	429d      	cmp	r5, r3
 801bf80:	d11b      	bne.n	801bfba <_vfiprintf_r+0x56>
 801bf82:	6875      	ldr	r5, [r6, #4]
 801bf84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bf86:	07d9      	lsls	r1, r3, #31
 801bf88:	d405      	bmi.n	801bf96 <_vfiprintf_r+0x32>
 801bf8a:	89ab      	ldrh	r3, [r5, #12]
 801bf8c:	059a      	lsls	r2, r3, #22
 801bf8e:	d402      	bmi.n	801bf96 <_vfiprintf_r+0x32>
 801bf90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bf92:	f7ff f9ce 	bl	801b332 <__retarget_lock_acquire_recursive>
 801bf96:	89ab      	ldrh	r3, [r5, #12]
 801bf98:	071b      	lsls	r3, r3, #28
 801bf9a:	d501      	bpl.n	801bfa0 <_vfiprintf_r+0x3c>
 801bf9c:	692b      	ldr	r3, [r5, #16]
 801bf9e:	b9eb      	cbnz	r3, 801bfdc <_vfiprintf_r+0x78>
 801bfa0:	4629      	mov	r1, r5
 801bfa2:	4630      	mov	r0, r6
 801bfa4:	f000 fa0e 	bl	801c3c4 <__swsetup_r>
 801bfa8:	b1c0      	cbz	r0, 801bfdc <_vfiprintf_r+0x78>
 801bfaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bfac:	07dc      	lsls	r4, r3, #31
 801bfae:	d50e      	bpl.n	801bfce <_vfiprintf_r+0x6a>
 801bfb0:	f04f 30ff 	mov.w	r0, #4294967295
 801bfb4:	b01d      	add	sp, #116	; 0x74
 801bfb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfba:	4b7b      	ldr	r3, [pc, #492]	; (801c1a8 <_vfiprintf_r+0x244>)
 801bfbc:	429d      	cmp	r5, r3
 801bfbe:	d101      	bne.n	801bfc4 <_vfiprintf_r+0x60>
 801bfc0:	68b5      	ldr	r5, [r6, #8]
 801bfc2:	e7df      	b.n	801bf84 <_vfiprintf_r+0x20>
 801bfc4:	4b79      	ldr	r3, [pc, #484]	; (801c1ac <_vfiprintf_r+0x248>)
 801bfc6:	429d      	cmp	r5, r3
 801bfc8:	bf08      	it	eq
 801bfca:	68f5      	ldreq	r5, [r6, #12]
 801bfcc:	e7da      	b.n	801bf84 <_vfiprintf_r+0x20>
 801bfce:	89ab      	ldrh	r3, [r5, #12]
 801bfd0:	0598      	lsls	r0, r3, #22
 801bfd2:	d4ed      	bmi.n	801bfb0 <_vfiprintf_r+0x4c>
 801bfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bfd6:	f7ff f9ad 	bl	801b334 <__retarget_lock_release_recursive>
 801bfda:	e7e9      	b.n	801bfb0 <_vfiprintf_r+0x4c>
 801bfdc:	2300      	movs	r3, #0
 801bfde:	9309      	str	r3, [sp, #36]	; 0x24
 801bfe0:	2320      	movs	r3, #32
 801bfe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bfe6:	f8cd 800c 	str.w	r8, [sp, #12]
 801bfea:	2330      	movs	r3, #48	; 0x30
 801bfec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c1b0 <_vfiprintf_r+0x24c>
 801bff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bff4:	f04f 0901 	mov.w	r9, #1
 801bff8:	4623      	mov	r3, r4
 801bffa:	469a      	mov	sl, r3
 801bffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c000:	b10a      	cbz	r2, 801c006 <_vfiprintf_r+0xa2>
 801c002:	2a25      	cmp	r2, #37	; 0x25
 801c004:	d1f9      	bne.n	801bffa <_vfiprintf_r+0x96>
 801c006:	ebba 0b04 	subs.w	fp, sl, r4
 801c00a:	d00b      	beq.n	801c024 <_vfiprintf_r+0xc0>
 801c00c:	465b      	mov	r3, fp
 801c00e:	4622      	mov	r2, r4
 801c010:	4629      	mov	r1, r5
 801c012:	4630      	mov	r0, r6
 801c014:	f7ff ff93 	bl	801bf3e <__sfputs_r>
 801c018:	3001      	adds	r0, #1
 801c01a:	f000 80aa 	beq.w	801c172 <_vfiprintf_r+0x20e>
 801c01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c020:	445a      	add	r2, fp
 801c022:	9209      	str	r2, [sp, #36]	; 0x24
 801c024:	f89a 3000 	ldrb.w	r3, [sl]
 801c028:	2b00      	cmp	r3, #0
 801c02a:	f000 80a2 	beq.w	801c172 <_vfiprintf_r+0x20e>
 801c02e:	2300      	movs	r3, #0
 801c030:	f04f 32ff 	mov.w	r2, #4294967295
 801c034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c038:	f10a 0a01 	add.w	sl, sl, #1
 801c03c:	9304      	str	r3, [sp, #16]
 801c03e:	9307      	str	r3, [sp, #28]
 801c040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c044:	931a      	str	r3, [sp, #104]	; 0x68
 801c046:	4654      	mov	r4, sl
 801c048:	2205      	movs	r2, #5
 801c04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c04e:	4858      	ldr	r0, [pc, #352]	; (801c1b0 <_vfiprintf_r+0x24c>)
 801c050:	f7e4 f94e 	bl	80002f0 <memchr>
 801c054:	9a04      	ldr	r2, [sp, #16]
 801c056:	b9d8      	cbnz	r0, 801c090 <_vfiprintf_r+0x12c>
 801c058:	06d1      	lsls	r1, r2, #27
 801c05a:	bf44      	itt	mi
 801c05c:	2320      	movmi	r3, #32
 801c05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c062:	0713      	lsls	r3, r2, #28
 801c064:	bf44      	itt	mi
 801c066:	232b      	movmi	r3, #43	; 0x2b
 801c068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c06c:	f89a 3000 	ldrb.w	r3, [sl]
 801c070:	2b2a      	cmp	r3, #42	; 0x2a
 801c072:	d015      	beq.n	801c0a0 <_vfiprintf_r+0x13c>
 801c074:	9a07      	ldr	r2, [sp, #28]
 801c076:	4654      	mov	r4, sl
 801c078:	2000      	movs	r0, #0
 801c07a:	f04f 0c0a 	mov.w	ip, #10
 801c07e:	4621      	mov	r1, r4
 801c080:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c084:	3b30      	subs	r3, #48	; 0x30
 801c086:	2b09      	cmp	r3, #9
 801c088:	d94e      	bls.n	801c128 <_vfiprintf_r+0x1c4>
 801c08a:	b1b0      	cbz	r0, 801c0ba <_vfiprintf_r+0x156>
 801c08c:	9207      	str	r2, [sp, #28]
 801c08e:	e014      	b.n	801c0ba <_vfiprintf_r+0x156>
 801c090:	eba0 0308 	sub.w	r3, r0, r8
 801c094:	fa09 f303 	lsl.w	r3, r9, r3
 801c098:	4313      	orrs	r3, r2
 801c09a:	9304      	str	r3, [sp, #16]
 801c09c:	46a2      	mov	sl, r4
 801c09e:	e7d2      	b.n	801c046 <_vfiprintf_r+0xe2>
 801c0a0:	9b03      	ldr	r3, [sp, #12]
 801c0a2:	1d19      	adds	r1, r3, #4
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	9103      	str	r1, [sp, #12]
 801c0a8:	2b00      	cmp	r3, #0
 801c0aa:	bfbb      	ittet	lt
 801c0ac:	425b      	neglt	r3, r3
 801c0ae:	f042 0202 	orrlt.w	r2, r2, #2
 801c0b2:	9307      	strge	r3, [sp, #28]
 801c0b4:	9307      	strlt	r3, [sp, #28]
 801c0b6:	bfb8      	it	lt
 801c0b8:	9204      	strlt	r2, [sp, #16]
 801c0ba:	7823      	ldrb	r3, [r4, #0]
 801c0bc:	2b2e      	cmp	r3, #46	; 0x2e
 801c0be:	d10c      	bne.n	801c0da <_vfiprintf_r+0x176>
 801c0c0:	7863      	ldrb	r3, [r4, #1]
 801c0c2:	2b2a      	cmp	r3, #42	; 0x2a
 801c0c4:	d135      	bne.n	801c132 <_vfiprintf_r+0x1ce>
 801c0c6:	9b03      	ldr	r3, [sp, #12]
 801c0c8:	1d1a      	adds	r2, r3, #4
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	9203      	str	r2, [sp, #12]
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	bfb8      	it	lt
 801c0d2:	f04f 33ff 	movlt.w	r3, #4294967295
 801c0d6:	3402      	adds	r4, #2
 801c0d8:	9305      	str	r3, [sp, #20]
 801c0da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c1c0 <_vfiprintf_r+0x25c>
 801c0de:	7821      	ldrb	r1, [r4, #0]
 801c0e0:	2203      	movs	r2, #3
 801c0e2:	4650      	mov	r0, sl
 801c0e4:	f7e4 f904 	bl	80002f0 <memchr>
 801c0e8:	b140      	cbz	r0, 801c0fc <_vfiprintf_r+0x198>
 801c0ea:	2340      	movs	r3, #64	; 0x40
 801c0ec:	eba0 000a 	sub.w	r0, r0, sl
 801c0f0:	fa03 f000 	lsl.w	r0, r3, r0
 801c0f4:	9b04      	ldr	r3, [sp, #16]
 801c0f6:	4303      	orrs	r3, r0
 801c0f8:	3401      	adds	r4, #1
 801c0fa:	9304      	str	r3, [sp, #16]
 801c0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c100:	482c      	ldr	r0, [pc, #176]	; (801c1b4 <_vfiprintf_r+0x250>)
 801c102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c106:	2206      	movs	r2, #6
 801c108:	f7e4 f8f2 	bl	80002f0 <memchr>
 801c10c:	2800      	cmp	r0, #0
 801c10e:	d03f      	beq.n	801c190 <_vfiprintf_r+0x22c>
 801c110:	4b29      	ldr	r3, [pc, #164]	; (801c1b8 <_vfiprintf_r+0x254>)
 801c112:	bb1b      	cbnz	r3, 801c15c <_vfiprintf_r+0x1f8>
 801c114:	9b03      	ldr	r3, [sp, #12]
 801c116:	3307      	adds	r3, #7
 801c118:	f023 0307 	bic.w	r3, r3, #7
 801c11c:	3308      	adds	r3, #8
 801c11e:	9303      	str	r3, [sp, #12]
 801c120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c122:	443b      	add	r3, r7
 801c124:	9309      	str	r3, [sp, #36]	; 0x24
 801c126:	e767      	b.n	801bff8 <_vfiprintf_r+0x94>
 801c128:	fb0c 3202 	mla	r2, ip, r2, r3
 801c12c:	460c      	mov	r4, r1
 801c12e:	2001      	movs	r0, #1
 801c130:	e7a5      	b.n	801c07e <_vfiprintf_r+0x11a>
 801c132:	2300      	movs	r3, #0
 801c134:	3401      	adds	r4, #1
 801c136:	9305      	str	r3, [sp, #20]
 801c138:	4619      	mov	r1, r3
 801c13a:	f04f 0c0a 	mov.w	ip, #10
 801c13e:	4620      	mov	r0, r4
 801c140:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c144:	3a30      	subs	r2, #48	; 0x30
 801c146:	2a09      	cmp	r2, #9
 801c148:	d903      	bls.n	801c152 <_vfiprintf_r+0x1ee>
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d0c5      	beq.n	801c0da <_vfiprintf_r+0x176>
 801c14e:	9105      	str	r1, [sp, #20]
 801c150:	e7c3      	b.n	801c0da <_vfiprintf_r+0x176>
 801c152:	fb0c 2101 	mla	r1, ip, r1, r2
 801c156:	4604      	mov	r4, r0
 801c158:	2301      	movs	r3, #1
 801c15a:	e7f0      	b.n	801c13e <_vfiprintf_r+0x1da>
 801c15c:	ab03      	add	r3, sp, #12
 801c15e:	9300      	str	r3, [sp, #0]
 801c160:	462a      	mov	r2, r5
 801c162:	4b16      	ldr	r3, [pc, #88]	; (801c1bc <_vfiprintf_r+0x258>)
 801c164:	a904      	add	r1, sp, #16
 801c166:	4630      	mov	r0, r6
 801c168:	f7fd fdee 	bl	8019d48 <_printf_float>
 801c16c:	4607      	mov	r7, r0
 801c16e:	1c78      	adds	r0, r7, #1
 801c170:	d1d6      	bne.n	801c120 <_vfiprintf_r+0x1bc>
 801c172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c174:	07d9      	lsls	r1, r3, #31
 801c176:	d405      	bmi.n	801c184 <_vfiprintf_r+0x220>
 801c178:	89ab      	ldrh	r3, [r5, #12]
 801c17a:	059a      	lsls	r2, r3, #22
 801c17c:	d402      	bmi.n	801c184 <_vfiprintf_r+0x220>
 801c17e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c180:	f7ff f8d8 	bl	801b334 <__retarget_lock_release_recursive>
 801c184:	89ab      	ldrh	r3, [r5, #12]
 801c186:	065b      	lsls	r3, r3, #25
 801c188:	f53f af12 	bmi.w	801bfb0 <_vfiprintf_r+0x4c>
 801c18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c18e:	e711      	b.n	801bfb4 <_vfiprintf_r+0x50>
 801c190:	ab03      	add	r3, sp, #12
 801c192:	9300      	str	r3, [sp, #0]
 801c194:	462a      	mov	r2, r5
 801c196:	4b09      	ldr	r3, [pc, #36]	; (801c1bc <_vfiprintf_r+0x258>)
 801c198:	a904      	add	r1, sp, #16
 801c19a:	4630      	mov	r0, r6
 801c19c:	f7fe f860 	bl	801a260 <_printf_i>
 801c1a0:	e7e4      	b.n	801c16c <_vfiprintf_r+0x208>
 801c1a2:	bf00      	nop
 801c1a4:	0801d584 	.word	0x0801d584
 801c1a8:	0801d5a4 	.word	0x0801d5a4
 801c1ac:	0801d564 	.word	0x0801d564
 801c1b0:	0801d71c 	.word	0x0801d71c
 801c1b4:	0801d726 	.word	0x0801d726
 801c1b8:	08019d49 	.word	0x08019d49
 801c1bc:	0801bf3f 	.word	0x0801bf3f
 801c1c0:	0801d722 	.word	0x0801d722

0801c1c4 <_putc_r>:
 801c1c4:	b570      	push	{r4, r5, r6, lr}
 801c1c6:	460d      	mov	r5, r1
 801c1c8:	4614      	mov	r4, r2
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	b118      	cbz	r0, 801c1d6 <_putc_r+0x12>
 801c1ce:	6983      	ldr	r3, [r0, #24]
 801c1d0:	b90b      	cbnz	r3, 801c1d6 <_putc_r+0x12>
 801c1d2:	f7ff f80b 	bl	801b1ec <__sinit>
 801c1d6:	4b1c      	ldr	r3, [pc, #112]	; (801c248 <_putc_r+0x84>)
 801c1d8:	429c      	cmp	r4, r3
 801c1da:	d124      	bne.n	801c226 <_putc_r+0x62>
 801c1dc:	6874      	ldr	r4, [r6, #4]
 801c1de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c1e0:	07d8      	lsls	r0, r3, #31
 801c1e2:	d405      	bmi.n	801c1f0 <_putc_r+0x2c>
 801c1e4:	89a3      	ldrh	r3, [r4, #12]
 801c1e6:	0599      	lsls	r1, r3, #22
 801c1e8:	d402      	bmi.n	801c1f0 <_putc_r+0x2c>
 801c1ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c1ec:	f7ff f8a1 	bl	801b332 <__retarget_lock_acquire_recursive>
 801c1f0:	68a3      	ldr	r3, [r4, #8]
 801c1f2:	3b01      	subs	r3, #1
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	60a3      	str	r3, [r4, #8]
 801c1f8:	da05      	bge.n	801c206 <_putc_r+0x42>
 801c1fa:	69a2      	ldr	r2, [r4, #24]
 801c1fc:	4293      	cmp	r3, r2
 801c1fe:	db1c      	blt.n	801c23a <_putc_r+0x76>
 801c200:	b2eb      	uxtb	r3, r5
 801c202:	2b0a      	cmp	r3, #10
 801c204:	d019      	beq.n	801c23a <_putc_r+0x76>
 801c206:	6823      	ldr	r3, [r4, #0]
 801c208:	1c5a      	adds	r2, r3, #1
 801c20a:	6022      	str	r2, [r4, #0]
 801c20c:	701d      	strb	r5, [r3, #0]
 801c20e:	b2ed      	uxtb	r5, r5
 801c210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c212:	07da      	lsls	r2, r3, #31
 801c214:	d405      	bmi.n	801c222 <_putc_r+0x5e>
 801c216:	89a3      	ldrh	r3, [r4, #12]
 801c218:	059b      	lsls	r3, r3, #22
 801c21a:	d402      	bmi.n	801c222 <_putc_r+0x5e>
 801c21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c21e:	f7ff f889 	bl	801b334 <__retarget_lock_release_recursive>
 801c222:	4628      	mov	r0, r5
 801c224:	bd70      	pop	{r4, r5, r6, pc}
 801c226:	4b09      	ldr	r3, [pc, #36]	; (801c24c <_putc_r+0x88>)
 801c228:	429c      	cmp	r4, r3
 801c22a:	d101      	bne.n	801c230 <_putc_r+0x6c>
 801c22c:	68b4      	ldr	r4, [r6, #8]
 801c22e:	e7d6      	b.n	801c1de <_putc_r+0x1a>
 801c230:	4b07      	ldr	r3, [pc, #28]	; (801c250 <_putc_r+0x8c>)
 801c232:	429c      	cmp	r4, r3
 801c234:	bf08      	it	eq
 801c236:	68f4      	ldreq	r4, [r6, #12]
 801c238:	e7d1      	b.n	801c1de <_putc_r+0x1a>
 801c23a:	4629      	mov	r1, r5
 801c23c:	4622      	mov	r2, r4
 801c23e:	4630      	mov	r0, r6
 801c240:	f000 f85c 	bl	801c2fc <__swbuf_r>
 801c244:	4605      	mov	r5, r0
 801c246:	e7e3      	b.n	801c210 <_putc_r+0x4c>
 801c248:	0801d584 	.word	0x0801d584
 801c24c:	0801d5a4 	.word	0x0801d5a4
 801c250:	0801d564 	.word	0x0801d564

0801c254 <_sbrk_r>:
 801c254:	b538      	push	{r3, r4, r5, lr}
 801c256:	4d06      	ldr	r5, [pc, #24]	; (801c270 <_sbrk_r+0x1c>)
 801c258:	2300      	movs	r3, #0
 801c25a:	4604      	mov	r4, r0
 801c25c:	4608      	mov	r0, r1
 801c25e:	602b      	str	r3, [r5, #0]
 801c260:	f7e7 faa8 	bl	80037b4 <_sbrk>
 801c264:	1c43      	adds	r3, r0, #1
 801c266:	d102      	bne.n	801c26e <_sbrk_r+0x1a>
 801c268:	682b      	ldr	r3, [r5, #0]
 801c26a:	b103      	cbz	r3, 801c26e <_sbrk_r+0x1a>
 801c26c:	6023      	str	r3, [r4, #0]
 801c26e:	bd38      	pop	{r3, r4, r5, pc}
 801c270:	24002e24 	.word	0x24002e24

0801c274 <__sread>:
 801c274:	b510      	push	{r4, lr}
 801c276:	460c      	mov	r4, r1
 801c278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c27c:	f000 faf2 	bl	801c864 <_read_r>
 801c280:	2800      	cmp	r0, #0
 801c282:	bfab      	itete	ge
 801c284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c286:	89a3      	ldrhlt	r3, [r4, #12]
 801c288:	181b      	addge	r3, r3, r0
 801c28a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c28e:	bfac      	ite	ge
 801c290:	6563      	strge	r3, [r4, #84]	; 0x54
 801c292:	81a3      	strhlt	r3, [r4, #12]
 801c294:	bd10      	pop	{r4, pc}

0801c296 <__swrite>:
 801c296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c29a:	461f      	mov	r7, r3
 801c29c:	898b      	ldrh	r3, [r1, #12]
 801c29e:	05db      	lsls	r3, r3, #23
 801c2a0:	4605      	mov	r5, r0
 801c2a2:	460c      	mov	r4, r1
 801c2a4:	4616      	mov	r6, r2
 801c2a6:	d505      	bpl.n	801c2b4 <__swrite+0x1e>
 801c2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2ac:	2302      	movs	r3, #2
 801c2ae:	2200      	movs	r2, #0
 801c2b0:	f000 f9f8 	bl	801c6a4 <_lseek_r>
 801c2b4:	89a3      	ldrh	r3, [r4, #12]
 801c2b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c2be:	81a3      	strh	r3, [r4, #12]
 801c2c0:	4632      	mov	r2, r6
 801c2c2:	463b      	mov	r3, r7
 801c2c4:	4628      	mov	r0, r5
 801c2c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2ca:	f000 b869 	b.w	801c3a0 <_write_r>

0801c2ce <__sseek>:
 801c2ce:	b510      	push	{r4, lr}
 801c2d0:	460c      	mov	r4, r1
 801c2d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2d6:	f000 f9e5 	bl	801c6a4 <_lseek_r>
 801c2da:	1c43      	adds	r3, r0, #1
 801c2dc:	89a3      	ldrh	r3, [r4, #12]
 801c2de:	bf15      	itete	ne
 801c2e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801c2e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c2e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c2ea:	81a3      	strheq	r3, [r4, #12]
 801c2ec:	bf18      	it	ne
 801c2ee:	81a3      	strhne	r3, [r4, #12]
 801c2f0:	bd10      	pop	{r4, pc}

0801c2f2 <__sclose>:
 801c2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c2f6:	f000 b8f1 	b.w	801c4dc <_close_r>
	...

0801c2fc <__swbuf_r>:
 801c2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2fe:	460e      	mov	r6, r1
 801c300:	4614      	mov	r4, r2
 801c302:	4605      	mov	r5, r0
 801c304:	b118      	cbz	r0, 801c30e <__swbuf_r+0x12>
 801c306:	6983      	ldr	r3, [r0, #24]
 801c308:	b90b      	cbnz	r3, 801c30e <__swbuf_r+0x12>
 801c30a:	f7fe ff6f 	bl	801b1ec <__sinit>
 801c30e:	4b21      	ldr	r3, [pc, #132]	; (801c394 <__swbuf_r+0x98>)
 801c310:	429c      	cmp	r4, r3
 801c312:	d12b      	bne.n	801c36c <__swbuf_r+0x70>
 801c314:	686c      	ldr	r4, [r5, #4]
 801c316:	69a3      	ldr	r3, [r4, #24]
 801c318:	60a3      	str	r3, [r4, #8]
 801c31a:	89a3      	ldrh	r3, [r4, #12]
 801c31c:	071a      	lsls	r2, r3, #28
 801c31e:	d52f      	bpl.n	801c380 <__swbuf_r+0x84>
 801c320:	6923      	ldr	r3, [r4, #16]
 801c322:	b36b      	cbz	r3, 801c380 <__swbuf_r+0x84>
 801c324:	6923      	ldr	r3, [r4, #16]
 801c326:	6820      	ldr	r0, [r4, #0]
 801c328:	1ac0      	subs	r0, r0, r3
 801c32a:	6963      	ldr	r3, [r4, #20]
 801c32c:	b2f6      	uxtb	r6, r6
 801c32e:	4283      	cmp	r3, r0
 801c330:	4637      	mov	r7, r6
 801c332:	dc04      	bgt.n	801c33e <__swbuf_r+0x42>
 801c334:	4621      	mov	r1, r4
 801c336:	4628      	mov	r0, r5
 801c338:	f000 f966 	bl	801c608 <_fflush_r>
 801c33c:	bb30      	cbnz	r0, 801c38c <__swbuf_r+0x90>
 801c33e:	68a3      	ldr	r3, [r4, #8]
 801c340:	3b01      	subs	r3, #1
 801c342:	60a3      	str	r3, [r4, #8]
 801c344:	6823      	ldr	r3, [r4, #0]
 801c346:	1c5a      	adds	r2, r3, #1
 801c348:	6022      	str	r2, [r4, #0]
 801c34a:	701e      	strb	r6, [r3, #0]
 801c34c:	6963      	ldr	r3, [r4, #20]
 801c34e:	3001      	adds	r0, #1
 801c350:	4283      	cmp	r3, r0
 801c352:	d004      	beq.n	801c35e <__swbuf_r+0x62>
 801c354:	89a3      	ldrh	r3, [r4, #12]
 801c356:	07db      	lsls	r3, r3, #31
 801c358:	d506      	bpl.n	801c368 <__swbuf_r+0x6c>
 801c35a:	2e0a      	cmp	r6, #10
 801c35c:	d104      	bne.n	801c368 <__swbuf_r+0x6c>
 801c35e:	4621      	mov	r1, r4
 801c360:	4628      	mov	r0, r5
 801c362:	f000 f951 	bl	801c608 <_fflush_r>
 801c366:	b988      	cbnz	r0, 801c38c <__swbuf_r+0x90>
 801c368:	4638      	mov	r0, r7
 801c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c36c:	4b0a      	ldr	r3, [pc, #40]	; (801c398 <__swbuf_r+0x9c>)
 801c36e:	429c      	cmp	r4, r3
 801c370:	d101      	bne.n	801c376 <__swbuf_r+0x7a>
 801c372:	68ac      	ldr	r4, [r5, #8]
 801c374:	e7cf      	b.n	801c316 <__swbuf_r+0x1a>
 801c376:	4b09      	ldr	r3, [pc, #36]	; (801c39c <__swbuf_r+0xa0>)
 801c378:	429c      	cmp	r4, r3
 801c37a:	bf08      	it	eq
 801c37c:	68ec      	ldreq	r4, [r5, #12]
 801c37e:	e7ca      	b.n	801c316 <__swbuf_r+0x1a>
 801c380:	4621      	mov	r1, r4
 801c382:	4628      	mov	r0, r5
 801c384:	f000 f81e 	bl	801c3c4 <__swsetup_r>
 801c388:	2800      	cmp	r0, #0
 801c38a:	d0cb      	beq.n	801c324 <__swbuf_r+0x28>
 801c38c:	f04f 37ff 	mov.w	r7, #4294967295
 801c390:	e7ea      	b.n	801c368 <__swbuf_r+0x6c>
 801c392:	bf00      	nop
 801c394:	0801d584 	.word	0x0801d584
 801c398:	0801d5a4 	.word	0x0801d5a4
 801c39c:	0801d564 	.word	0x0801d564

0801c3a0 <_write_r>:
 801c3a0:	b538      	push	{r3, r4, r5, lr}
 801c3a2:	4d07      	ldr	r5, [pc, #28]	; (801c3c0 <_write_r+0x20>)
 801c3a4:	4604      	mov	r4, r0
 801c3a6:	4608      	mov	r0, r1
 801c3a8:	4611      	mov	r1, r2
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	602a      	str	r2, [r5, #0]
 801c3ae:	461a      	mov	r2, r3
 801c3b0:	f7e7 f9af 	bl	8003712 <_write>
 801c3b4:	1c43      	adds	r3, r0, #1
 801c3b6:	d102      	bne.n	801c3be <_write_r+0x1e>
 801c3b8:	682b      	ldr	r3, [r5, #0]
 801c3ba:	b103      	cbz	r3, 801c3be <_write_r+0x1e>
 801c3bc:	6023      	str	r3, [r4, #0]
 801c3be:	bd38      	pop	{r3, r4, r5, pc}
 801c3c0:	24002e24 	.word	0x24002e24

0801c3c4 <__swsetup_r>:
 801c3c4:	4b32      	ldr	r3, [pc, #200]	; (801c490 <__swsetup_r+0xcc>)
 801c3c6:	b570      	push	{r4, r5, r6, lr}
 801c3c8:	681d      	ldr	r5, [r3, #0]
 801c3ca:	4606      	mov	r6, r0
 801c3cc:	460c      	mov	r4, r1
 801c3ce:	b125      	cbz	r5, 801c3da <__swsetup_r+0x16>
 801c3d0:	69ab      	ldr	r3, [r5, #24]
 801c3d2:	b913      	cbnz	r3, 801c3da <__swsetup_r+0x16>
 801c3d4:	4628      	mov	r0, r5
 801c3d6:	f7fe ff09 	bl	801b1ec <__sinit>
 801c3da:	4b2e      	ldr	r3, [pc, #184]	; (801c494 <__swsetup_r+0xd0>)
 801c3dc:	429c      	cmp	r4, r3
 801c3de:	d10f      	bne.n	801c400 <__swsetup_r+0x3c>
 801c3e0:	686c      	ldr	r4, [r5, #4]
 801c3e2:	89a3      	ldrh	r3, [r4, #12]
 801c3e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c3e8:	0719      	lsls	r1, r3, #28
 801c3ea:	d42c      	bmi.n	801c446 <__swsetup_r+0x82>
 801c3ec:	06dd      	lsls	r5, r3, #27
 801c3ee:	d411      	bmi.n	801c414 <__swsetup_r+0x50>
 801c3f0:	2309      	movs	r3, #9
 801c3f2:	6033      	str	r3, [r6, #0]
 801c3f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c3f8:	81a3      	strh	r3, [r4, #12]
 801c3fa:	f04f 30ff 	mov.w	r0, #4294967295
 801c3fe:	e03e      	b.n	801c47e <__swsetup_r+0xba>
 801c400:	4b25      	ldr	r3, [pc, #148]	; (801c498 <__swsetup_r+0xd4>)
 801c402:	429c      	cmp	r4, r3
 801c404:	d101      	bne.n	801c40a <__swsetup_r+0x46>
 801c406:	68ac      	ldr	r4, [r5, #8]
 801c408:	e7eb      	b.n	801c3e2 <__swsetup_r+0x1e>
 801c40a:	4b24      	ldr	r3, [pc, #144]	; (801c49c <__swsetup_r+0xd8>)
 801c40c:	429c      	cmp	r4, r3
 801c40e:	bf08      	it	eq
 801c410:	68ec      	ldreq	r4, [r5, #12]
 801c412:	e7e6      	b.n	801c3e2 <__swsetup_r+0x1e>
 801c414:	0758      	lsls	r0, r3, #29
 801c416:	d512      	bpl.n	801c43e <__swsetup_r+0x7a>
 801c418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c41a:	b141      	cbz	r1, 801c42e <__swsetup_r+0x6a>
 801c41c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c420:	4299      	cmp	r1, r3
 801c422:	d002      	beq.n	801c42a <__swsetup_r+0x66>
 801c424:	4630      	mov	r0, r6
 801c426:	f7ff fb37 	bl	801ba98 <_free_r>
 801c42a:	2300      	movs	r3, #0
 801c42c:	6363      	str	r3, [r4, #52]	; 0x34
 801c42e:	89a3      	ldrh	r3, [r4, #12]
 801c430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c434:	81a3      	strh	r3, [r4, #12]
 801c436:	2300      	movs	r3, #0
 801c438:	6063      	str	r3, [r4, #4]
 801c43a:	6923      	ldr	r3, [r4, #16]
 801c43c:	6023      	str	r3, [r4, #0]
 801c43e:	89a3      	ldrh	r3, [r4, #12]
 801c440:	f043 0308 	orr.w	r3, r3, #8
 801c444:	81a3      	strh	r3, [r4, #12]
 801c446:	6923      	ldr	r3, [r4, #16]
 801c448:	b94b      	cbnz	r3, 801c45e <__swsetup_r+0x9a>
 801c44a:	89a3      	ldrh	r3, [r4, #12]
 801c44c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c454:	d003      	beq.n	801c45e <__swsetup_r+0x9a>
 801c456:	4621      	mov	r1, r4
 801c458:	4630      	mov	r0, r6
 801c45a:	f000 f95b 	bl	801c714 <__smakebuf_r>
 801c45e:	89a0      	ldrh	r0, [r4, #12]
 801c460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c464:	f010 0301 	ands.w	r3, r0, #1
 801c468:	d00a      	beq.n	801c480 <__swsetup_r+0xbc>
 801c46a:	2300      	movs	r3, #0
 801c46c:	60a3      	str	r3, [r4, #8]
 801c46e:	6963      	ldr	r3, [r4, #20]
 801c470:	425b      	negs	r3, r3
 801c472:	61a3      	str	r3, [r4, #24]
 801c474:	6923      	ldr	r3, [r4, #16]
 801c476:	b943      	cbnz	r3, 801c48a <__swsetup_r+0xc6>
 801c478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c47c:	d1ba      	bne.n	801c3f4 <__swsetup_r+0x30>
 801c47e:	bd70      	pop	{r4, r5, r6, pc}
 801c480:	0781      	lsls	r1, r0, #30
 801c482:	bf58      	it	pl
 801c484:	6963      	ldrpl	r3, [r4, #20]
 801c486:	60a3      	str	r3, [r4, #8]
 801c488:	e7f4      	b.n	801c474 <__swsetup_r+0xb0>
 801c48a:	2000      	movs	r0, #0
 801c48c:	e7f7      	b.n	801c47e <__swsetup_r+0xba>
 801c48e:	bf00      	nop
 801c490:	24000100 	.word	0x24000100
 801c494:	0801d584 	.word	0x0801d584
 801c498:	0801d5a4 	.word	0x0801d5a4
 801c49c:	0801d564 	.word	0x0801d564

0801c4a0 <__assert_func>:
 801c4a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c4a2:	4614      	mov	r4, r2
 801c4a4:	461a      	mov	r2, r3
 801c4a6:	4b09      	ldr	r3, [pc, #36]	; (801c4cc <__assert_func+0x2c>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	4605      	mov	r5, r0
 801c4ac:	68d8      	ldr	r0, [r3, #12]
 801c4ae:	b14c      	cbz	r4, 801c4c4 <__assert_func+0x24>
 801c4b0:	4b07      	ldr	r3, [pc, #28]	; (801c4d0 <__assert_func+0x30>)
 801c4b2:	9100      	str	r1, [sp, #0]
 801c4b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c4b8:	4906      	ldr	r1, [pc, #24]	; (801c4d4 <__assert_func+0x34>)
 801c4ba:	462b      	mov	r3, r5
 801c4bc:	f000 f8e0 	bl	801c680 <fiprintf>
 801c4c0:	f000 f9ef 	bl	801c8a2 <abort>
 801c4c4:	4b04      	ldr	r3, [pc, #16]	; (801c4d8 <__assert_func+0x38>)
 801c4c6:	461c      	mov	r4, r3
 801c4c8:	e7f3      	b.n	801c4b2 <__assert_func+0x12>
 801c4ca:	bf00      	nop
 801c4cc:	24000100 	.word	0x24000100
 801c4d0:	0801d72d 	.word	0x0801d72d
 801c4d4:	0801d73a 	.word	0x0801d73a
 801c4d8:	0801d768 	.word	0x0801d768

0801c4dc <_close_r>:
 801c4dc:	b538      	push	{r3, r4, r5, lr}
 801c4de:	4d06      	ldr	r5, [pc, #24]	; (801c4f8 <_close_r+0x1c>)
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	4604      	mov	r4, r0
 801c4e4:	4608      	mov	r0, r1
 801c4e6:	602b      	str	r3, [r5, #0]
 801c4e8:	f7e7 f92f 	bl	800374a <_close>
 801c4ec:	1c43      	adds	r3, r0, #1
 801c4ee:	d102      	bne.n	801c4f6 <_close_r+0x1a>
 801c4f0:	682b      	ldr	r3, [r5, #0]
 801c4f2:	b103      	cbz	r3, 801c4f6 <_close_r+0x1a>
 801c4f4:	6023      	str	r3, [r4, #0]
 801c4f6:	bd38      	pop	{r3, r4, r5, pc}
 801c4f8:	24002e24 	.word	0x24002e24

0801c4fc <__sflush_r>:
 801c4fc:	898a      	ldrh	r2, [r1, #12]
 801c4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c502:	4605      	mov	r5, r0
 801c504:	0710      	lsls	r0, r2, #28
 801c506:	460c      	mov	r4, r1
 801c508:	d458      	bmi.n	801c5bc <__sflush_r+0xc0>
 801c50a:	684b      	ldr	r3, [r1, #4]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	dc05      	bgt.n	801c51c <__sflush_r+0x20>
 801c510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c512:	2b00      	cmp	r3, #0
 801c514:	dc02      	bgt.n	801c51c <__sflush_r+0x20>
 801c516:	2000      	movs	r0, #0
 801c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c51c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c51e:	2e00      	cmp	r6, #0
 801c520:	d0f9      	beq.n	801c516 <__sflush_r+0x1a>
 801c522:	2300      	movs	r3, #0
 801c524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c528:	682f      	ldr	r7, [r5, #0]
 801c52a:	602b      	str	r3, [r5, #0]
 801c52c:	d032      	beq.n	801c594 <__sflush_r+0x98>
 801c52e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c530:	89a3      	ldrh	r3, [r4, #12]
 801c532:	075a      	lsls	r2, r3, #29
 801c534:	d505      	bpl.n	801c542 <__sflush_r+0x46>
 801c536:	6863      	ldr	r3, [r4, #4]
 801c538:	1ac0      	subs	r0, r0, r3
 801c53a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c53c:	b10b      	cbz	r3, 801c542 <__sflush_r+0x46>
 801c53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c540:	1ac0      	subs	r0, r0, r3
 801c542:	2300      	movs	r3, #0
 801c544:	4602      	mov	r2, r0
 801c546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c548:	6a21      	ldr	r1, [r4, #32]
 801c54a:	4628      	mov	r0, r5
 801c54c:	47b0      	blx	r6
 801c54e:	1c43      	adds	r3, r0, #1
 801c550:	89a3      	ldrh	r3, [r4, #12]
 801c552:	d106      	bne.n	801c562 <__sflush_r+0x66>
 801c554:	6829      	ldr	r1, [r5, #0]
 801c556:	291d      	cmp	r1, #29
 801c558:	d82c      	bhi.n	801c5b4 <__sflush_r+0xb8>
 801c55a:	4a2a      	ldr	r2, [pc, #168]	; (801c604 <__sflush_r+0x108>)
 801c55c:	40ca      	lsrs	r2, r1
 801c55e:	07d6      	lsls	r6, r2, #31
 801c560:	d528      	bpl.n	801c5b4 <__sflush_r+0xb8>
 801c562:	2200      	movs	r2, #0
 801c564:	6062      	str	r2, [r4, #4]
 801c566:	04d9      	lsls	r1, r3, #19
 801c568:	6922      	ldr	r2, [r4, #16]
 801c56a:	6022      	str	r2, [r4, #0]
 801c56c:	d504      	bpl.n	801c578 <__sflush_r+0x7c>
 801c56e:	1c42      	adds	r2, r0, #1
 801c570:	d101      	bne.n	801c576 <__sflush_r+0x7a>
 801c572:	682b      	ldr	r3, [r5, #0]
 801c574:	b903      	cbnz	r3, 801c578 <__sflush_r+0x7c>
 801c576:	6560      	str	r0, [r4, #84]	; 0x54
 801c578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c57a:	602f      	str	r7, [r5, #0]
 801c57c:	2900      	cmp	r1, #0
 801c57e:	d0ca      	beq.n	801c516 <__sflush_r+0x1a>
 801c580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c584:	4299      	cmp	r1, r3
 801c586:	d002      	beq.n	801c58e <__sflush_r+0x92>
 801c588:	4628      	mov	r0, r5
 801c58a:	f7ff fa85 	bl	801ba98 <_free_r>
 801c58e:	2000      	movs	r0, #0
 801c590:	6360      	str	r0, [r4, #52]	; 0x34
 801c592:	e7c1      	b.n	801c518 <__sflush_r+0x1c>
 801c594:	6a21      	ldr	r1, [r4, #32]
 801c596:	2301      	movs	r3, #1
 801c598:	4628      	mov	r0, r5
 801c59a:	47b0      	blx	r6
 801c59c:	1c41      	adds	r1, r0, #1
 801c59e:	d1c7      	bne.n	801c530 <__sflush_r+0x34>
 801c5a0:	682b      	ldr	r3, [r5, #0]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d0c4      	beq.n	801c530 <__sflush_r+0x34>
 801c5a6:	2b1d      	cmp	r3, #29
 801c5a8:	d001      	beq.n	801c5ae <__sflush_r+0xb2>
 801c5aa:	2b16      	cmp	r3, #22
 801c5ac:	d101      	bne.n	801c5b2 <__sflush_r+0xb6>
 801c5ae:	602f      	str	r7, [r5, #0]
 801c5b0:	e7b1      	b.n	801c516 <__sflush_r+0x1a>
 801c5b2:	89a3      	ldrh	r3, [r4, #12]
 801c5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5b8:	81a3      	strh	r3, [r4, #12]
 801c5ba:	e7ad      	b.n	801c518 <__sflush_r+0x1c>
 801c5bc:	690f      	ldr	r7, [r1, #16]
 801c5be:	2f00      	cmp	r7, #0
 801c5c0:	d0a9      	beq.n	801c516 <__sflush_r+0x1a>
 801c5c2:	0793      	lsls	r3, r2, #30
 801c5c4:	680e      	ldr	r6, [r1, #0]
 801c5c6:	bf08      	it	eq
 801c5c8:	694b      	ldreq	r3, [r1, #20]
 801c5ca:	600f      	str	r7, [r1, #0]
 801c5cc:	bf18      	it	ne
 801c5ce:	2300      	movne	r3, #0
 801c5d0:	eba6 0807 	sub.w	r8, r6, r7
 801c5d4:	608b      	str	r3, [r1, #8]
 801c5d6:	f1b8 0f00 	cmp.w	r8, #0
 801c5da:	dd9c      	ble.n	801c516 <__sflush_r+0x1a>
 801c5dc:	6a21      	ldr	r1, [r4, #32]
 801c5de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c5e0:	4643      	mov	r3, r8
 801c5e2:	463a      	mov	r2, r7
 801c5e4:	4628      	mov	r0, r5
 801c5e6:	47b0      	blx	r6
 801c5e8:	2800      	cmp	r0, #0
 801c5ea:	dc06      	bgt.n	801c5fa <__sflush_r+0xfe>
 801c5ec:	89a3      	ldrh	r3, [r4, #12]
 801c5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c5f2:	81a3      	strh	r3, [r4, #12]
 801c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 801c5f8:	e78e      	b.n	801c518 <__sflush_r+0x1c>
 801c5fa:	4407      	add	r7, r0
 801c5fc:	eba8 0800 	sub.w	r8, r8, r0
 801c600:	e7e9      	b.n	801c5d6 <__sflush_r+0xda>
 801c602:	bf00      	nop
 801c604:	20400001 	.word	0x20400001

0801c608 <_fflush_r>:
 801c608:	b538      	push	{r3, r4, r5, lr}
 801c60a:	690b      	ldr	r3, [r1, #16]
 801c60c:	4605      	mov	r5, r0
 801c60e:	460c      	mov	r4, r1
 801c610:	b913      	cbnz	r3, 801c618 <_fflush_r+0x10>
 801c612:	2500      	movs	r5, #0
 801c614:	4628      	mov	r0, r5
 801c616:	bd38      	pop	{r3, r4, r5, pc}
 801c618:	b118      	cbz	r0, 801c622 <_fflush_r+0x1a>
 801c61a:	6983      	ldr	r3, [r0, #24]
 801c61c:	b90b      	cbnz	r3, 801c622 <_fflush_r+0x1a>
 801c61e:	f7fe fde5 	bl	801b1ec <__sinit>
 801c622:	4b14      	ldr	r3, [pc, #80]	; (801c674 <_fflush_r+0x6c>)
 801c624:	429c      	cmp	r4, r3
 801c626:	d11b      	bne.n	801c660 <_fflush_r+0x58>
 801c628:	686c      	ldr	r4, [r5, #4]
 801c62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d0ef      	beq.n	801c612 <_fflush_r+0xa>
 801c632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c634:	07d0      	lsls	r0, r2, #31
 801c636:	d404      	bmi.n	801c642 <_fflush_r+0x3a>
 801c638:	0599      	lsls	r1, r3, #22
 801c63a:	d402      	bmi.n	801c642 <_fflush_r+0x3a>
 801c63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c63e:	f7fe fe78 	bl	801b332 <__retarget_lock_acquire_recursive>
 801c642:	4628      	mov	r0, r5
 801c644:	4621      	mov	r1, r4
 801c646:	f7ff ff59 	bl	801c4fc <__sflush_r>
 801c64a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c64c:	07da      	lsls	r2, r3, #31
 801c64e:	4605      	mov	r5, r0
 801c650:	d4e0      	bmi.n	801c614 <_fflush_r+0xc>
 801c652:	89a3      	ldrh	r3, [r4, #12]
 801c654:	059b      	lsls	r3, r3, #22
 801c656:	d4dd      	bmi.n	801c614 <_fflush_r+0xc>
 801c658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c65a:	f7fe fe6b 	bl	801b334 <__retarget_lock_release_recursive>
 801c65e:	e7d9      	b.n	801c614 <_fflush_r+0xc>
 801c660:	4b05      	ldr	r3, [pc, #20]	; (801c678 <_fflush_r+0x70>)
 801c662:	429c      	cmp	r4, r3
 801c664:	d101      	bne.n	801c66a <_fflush_r+0x62>
 801c666:	68ac      	ldr	r4, [r5, #8]
 801c668:	e7df      	b.n	801c62a <_fflush_r+0x22>
 801c66a:	4b04      	ldr	r3, [pc, #16]	; (801c67c <_fflush_r+0x74>)
 801c66c:	429c      	cmp	r4, r3
 801c66e:	bf08      	it	eq
 801c670:	68ec      	ldreq	r4, [r5, #12]
 801c672:	e7da      	b.n	801c62a <_fflush_r+0x22>
 801c674:	0801d584 	.word	0x0801d584
 801c678:	0801d5a4 	.word	0x0801d5a4
 801c67c:	0801d564 	.word	0x0801d564

0801c680 <fiprintf>:
 801c680:	b40e      	push	{r1, r2, r3}
 801c682:	b503      	push	{r0, r1, lr}
 801c684:	4601      	mov	r1, r0
 801c686:	ab03      	add	r3, sp, #12
 801c688:	4805      	ldr	r0, [pc, #20]	; (801c6a0 <fiprintf+0x20>)
 801c68a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c68e:	6800      	ldr	r0, [r0, #0]
 801c690:	9301      	str	r3, [sp, #4]
 801c692:	f7ff fc67 	bl	801bf64 <_vfiprintf_r>
 801c696:	b002      	add	sp, #8
 801c698:	f85d eb04 	ldr.w	lr, [sp], #4
 801c69c:	b003      	add	sp, #12
 801c69e:	4770      	bx	lr
 801c6a0:	24000100 	.word	0x24000100

0801c6a4 <_lseek_r>:
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	4d07      	ldr	r5, [pc, #28]	; (801c6c4 <_lseek_r+0x20>)
 801c6a8:	4604      	mov	r4, r0
 801c6aa:	4608      	mov	r0, r1
 801c6ac:	4611      	mov	r1, r2
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	602a      	str	r2, [r5, #0]
 801c6b2:	461a      	mov	r2, r3
 801c6b4:	f7e7 f870 	bl	8003798 <_lseek>
 801c6b8:	1c43      	adds	r3, r0, #1
 801c6ba:	d102      	bne.n	801c6c2 <_lseek_r+0x1e>
 801c6bc:	682b      	ldr	r3, [r5, #0]
 801c6be:	b103      	cbz	r3, 801c6c2 <_lseek_r+0x1e>
 801c6c0:	6023      	str	r3, [r4, #0]
 801c6c2:	bd38      	pop	{r3, r4, r5, pc}
 801c6c4:	24002e24 	.word	0x24002e24

0801c6c8 <__swhatbuf_r>:
 801c6c8:	b570      	push	{r4, r5, r6, lr}
 801c6ca:	460e      	mov	r6, r1
 801c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c6d0:	2900      	cmp	r1, #0
 801c6d2:	b096      	sub	sp, #88	; 0x58
 801c6d4:	4614      	mov	r4, r2
 801c6d6:	461d      	mov	r5, r3
 801c6d8:	da08      	bge.n	801c6ec <__swhatbuf_r+0x24>
 801c6da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c6de:	2200      	movs	r2, #0
 801c6e0:	602a      	str	r2, [r5, #0]
 801c6e2:	061a      	lsls	r2, r3, #24
 801c6e4:	d410      	bmi.n	801c708 <__swhatbuf_r+0x40>
 801c6e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c6ea:	e00e      	b.n	801c70a <__swhatbuf_r+0x42>
 801c6ec:	466a      	mov	r2, sp
 801c6ee:	f000 f8df 	bl	801c8b0 <_fstat_r>
 801c6f2:	2800      	cmp	r0, #0
 801c6f4:	dbf1      	blt.n	801c6da <__swhatbuf_r+0x12>
 801c6f6:	9a01      	ldr	r2, [sp, #4]
 801c6f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c6fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c700:	425a      	negs	r2, r3
 801c702:	415a      	adcs	r2, r3
 801c704:	602a      	str	r2, [r5, #0]
 801c706:	e7ee      	b.n	801c6e6 <__swhatbuf_r+0x1e>
 801c708:	2340      	movs	r3, #64	; 0x40
 801c70a:	2000      	movs	r0, #0
 801c70c:	6023      	str	r3, [r4, #0]
 801c70e:	b016      	add	sp, #88	; 0x58
 801c710:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c714 <__smakebuf_r>:
 801c714:	898b      	ldrh	r3, [r1, #12]
 801c716:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c718:	079d      	lsls	r5, r3, #30
 801c71a:	4606      	mov	r6, r0
 801c71c:	460c      	mov	r4, r1
 801c71e:	d507      	bpl.n	801c730 <__smakebuf_r+0x1c>
 801c720:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c724:	6023      	str	r3, [r4, #0]
 801c726:	6123      	str	r3, [r4, #16]
 801c728:	2301      	movs	r3, #1
 801c72a:	6163      	str	r3, [r4, #20]
 801c72c:	b002      	add	sp, #8
 801c72e:	bd70      	pop	{r4, r5, r6, pc}
 801c730:	ab01      	add	r3, sp, #4
 801c732:	466a      	mov	r2, sp
 801c734:	f7ff ffc8 	bl	801c6c8 <__swhatbuf_r>
 801c738:	9900      	ldr	r1, [sp, #0]
 801c73a:	4605      	mov	r5, r0
 801c73c:	4630      	mov	r0, r6
 801c73e:	f7ff fa17 	bl	801bb70 <_malloc_r>
 801c742:	b948      	cbnz	r0, 801c758 <__smakebuf_r+0x44>
 801c744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c748:	059a      	lsls	r2, r3, #22
 801c74a:	d4ef      	bmi.n	801c72c <__smakebuf_r+0x18>
 801c74c:	f023 0303 	bic.w	r3, r3, #3
 801c750:	f043 0302 	orr.w	r3, r3, #2
 801c754:	81a3      	strh	r3, [r4, #12]
 801c756:	e7e3      	b.n	801c720 <__smakebuf_r+0xc>
 801c758:	4b0d      	ldr	r3, [pc, #52]	; (801c790 <__smakebuf_r+0x7c>)
 801c75a:	62b3      	str	r3, [r6, #40]	; 0x28
 801c75c:	89a3      	ldrh	r3, [r4, #12]
 801c75e:	6020      	str	r0, [r4, #0]
 801c760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c764:	81a3      	strh	r3, [r4, #12]
 801c766:	9b00      	ldr	r3, [sp, #0]
 801c768:	6163      	str	r3, [r4, #20]
 801c76a:	9b01      	ldr	r3, [sp, #4]
 801c76c:	6120      	str	r0, [r4, #16]
 801c76e:	b15b      	cbz	r3, 801c788 <__smakebuf_r+0x74>
 801c770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c774:	4630      	mov	r0, r6
 801c776:	f000 f8ad 	bl	801c8d4 <_isatty_r>
 801c77a:	b128      	cbz	r0, 801c788 <__smakebuf_r+0x74>
 801c77c:	89a3      	ldrh	r3, [r4, #12]
 801c77e:	f023 0303 	bic.w	r3, r3, #3
 801c782:	f043 0301 	orr.w	r3, r3, #1
 801c786:	81a3      	strh	r3, [r4, #12]
 801c788:	89a0      	ldrh	r0, [r4, #12]
 801c78a:	4305      	orrs	r5, r0
 801c78c:	81a5      	strh	r5, [r4, #12]
 801c78e:	e7cd      	b.n	801c72c <__smakebuf_r+0x18>
 801c790:	0801b185 	.word	0x0801b185

0801c794 <__ascii_mbtowc>:
 801c794:	b082      	sub	sp, #8
 801c796:	b901      	cbnz	r1, 801c79a <__ascii_mbtowc+0x6>
 801c798:	a901      	add	r1, sp, #4
 801c79a:	b142      	cbz	r2, 801c7ae <__ascii_mbtowc+0x1a>
 801c79c:	b14b      	cbz	r3, 801c7b2 <__ascii_mbtowc+0x1e>
 801c79e:	7813      	ldrb	r3, [r2, #0]
 801c7a0:	600b      	str	r3, [r1, #0]
 801c7a2:	7812      	ldrb	r2, [r2, #0]
 801c7a4:	1e10      	subs	r0, r2, #0
 801c7a6:	bf18      	it	ne
 801c7a8:	2001      	movne	r0, #1
 801c7aa:	b002      	add	sp, #8
 801c7ac:	4770      	bx	lr
 801c7ae:	4610      	mov	r0, r2
 801c7b0:	e7fb      	b.n	801c7aa <__ascii_mbtowc+0x16>
 801c7b2:	f06f 0001 	mvn.w	r0, #1
 801c7b6:	e7f8      	b.n	801c7aa <__ascii_mbtowc+0x16>

0801c7b8 <memmove>:
 801c7b8:	4288      	cmp	r0, r1
 801c7ba:	b510      	push	{r4, lr}
 801c7bc:	eb01 0402 	add.w	r4, r1, r2
 801c7c0:	d902      	bls.n	801c7c8 <memmove+0x10>
 801c7c2:	4284      	cmp	r4, r0
 801c7c4:	4623      	mov	r3, r4
 801c7c6:	d807      	bhi.n	801c7d8 <memmove+0x20>
 801c7c8:	1e43      	subs	r3, r0, #1
 801c7ca:	42a1      	cmp	r1, r4
 801c7cc:	d008      	beq.n	801c7e0 <memmove+0x28>
 801c7ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c7d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c7d6:	e7f8      	b.n	801c7ca <memmove+0x12>
 801c7d8:	4402      	add	r2, r0
 801c7da:	4601      	mov	r1, r0
 801c7dc:	428a      	cmp	r2, r1
 801c7de:	d100      	bne.n	801c7e2 <memmove+0x2a>
 801c7e0:	bd10      	pop	{r4, pc}
 801c7e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c7e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c7ea:	e7f7      	b.n	801c7dc <memmove+0x24>

0801c7ec <__malloc_lock>:
 801c7ec:	4801      	ldr	r0, [pc, #4]	; (801c7f4 <__malloc_lock+0x8>)
 801c7ee:	f7fe bda0 	b.w	801b332 <__retarget_lock_acquire_recursive>
 801c7f2:	bf00      	nop
 801c7f4:	24002e18 	.word	0x24002e18

0801c7f8 <__malloc_unlock>:
 801c7f8:	4801      	ldr	r0, [pc, #4]	; (801c800 <__malloc_unlock+0x8>)
 801c7fa:	f7fe bd9b 	b.w	801b334 <__retarget_lock_release_recursive>
 801c7fe:	bf00      	nop
 801c800:	24002e18 	.word	0x24002e18

0801c804 <_realloc_r>:
 801c804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c808:	4680      	mov	r8, r0
 801c80a:	4614      	mov	r4, r2
 801c80c:	460e      	mov	r6, r1
 801c80e:	b921      	cbnz	r1, 801c81a <_realloc_r+0x16>
 801c810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c814:	4611      	mov	r1, r2
 801c816:	f7ff b9ab 	b.w	801bb70 <_malloc_r>
 801c81a:	b92a      	cbnz	r2, 801c828 <_realloc_r+0x24>
 801c81c:	f7ff f93c 	bl	801ba98 <_free_r>
 801c820:	4625      	mov	r5, r4
 801c822:	4628      	mov	r0, r5
 801c824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c828:	f000 f864 	bl	801c8f4 <_malloc_usable_size_r>
 801c82c:	4284      	cmp	r4, r0
 801c82e:	4607      	mov	r7, r0
 801c830:	d802      	bhi.n	801c838 <_realloc_r+0x34>
 801c832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c836:	d812      	bhi.n	801c85e <_realloc_r+0x5a>
 801c838:	4621      	mov	r1, r4
 801c83a:	4640      	mov	r0, r8
 801c83c:	f7ff f998 	bl	801bb70 <_malloc_r>
 801c840:	4605      	mov	r5, r0
 801c842:	2800      	cmp	r0, #0
 801c844:	d0ed      	beq.n	801c822 <_realloc_r+0x1e>
 801c846:	42bc      	cmp	r4, r7
 801c848:	4622      	mov	r2, r4
 801c84a:	4631      	mov	r1, r6
 801c84c:	bf28      	it	cs
 801c84e:	463a      	movcs	r2, r7
 801c850:	f7fe fd7a 	bl	801b348 <memcpy>
 801c854:	4631      	mov	r1, r6
 801c856:	4640      	mov	r0, r8
 801c858:	f7ff f91e 	bl	801ba98 <_free_r>
 801c85c:	e7e1      	b.n	801c822 <_realloc_r+0x1e>
 801c85e:	4635      	mov	r5, r6
 801c860:	e7df      	b.n	801c822 <_realloc_r+0x1e>
	...

0801c864 <_read_r>:
 801c864:	b538      	push	{r3, r4, r5, lr}
 801c866:	4d07      	ldr	r5, [pc, #28]	; (801c884 <_read_r+0x20>)
 801c868:	4604      	mov	r4, r0
 801c86a:	4608      	mov	r0, r1
 801c86c:	4611      	mov	r1, r2
 801c86e:	2200      	movs	r2, #0
 801c870:	602a      	str	r2, [r5, #0]
 801c872:	461a      	mov	r2, r3
 801c874:	f7e6 ff30 	bl	80036d8 <_read>
 801c878:	1c43      	adds	r3, r0, #1
 801c87a:	d102      	bne.n	801c882 <_read_r+0x1e>
 801c87c:	682b      	ldr	r3, [r5, #0]
 801c87e:	b103      	cbz	r3, 801c882 <_read_r+0x1e>
 801c880:	6023      	str	r3, [r4, #0]
 801c882:	bd38      	pop	{r3, r4, r5, pc}
 801c884:	24002e24 	.word	0x24002e24

0801c888 <__ascii_wctomb>:
 801c888:	b149      	cbz	r1, 801c89e <__ascii_wctomb+0x16>
 801c88a:	2aff      	cmp	r2, #255	; 0xff
 801c88c:	bf85      	ittet	hi
 801c88e:	238a      	movhi	r3, #138	; 0x8a
 801c890:	6003      	strhi	r3, [r0, #0]
 801c892:	700a      	strbls	r2, [r1, #0]
 801c894:	f04f 30ff 	movhi.w	r0, #4294967295
 801c898:	bf98      	it	ls
 801c89a:	2001      	movls	r0, #1
 801c89c:	4770      	bx	lr
 801c89e:	4608      	mov	r0, r1
 801c8a0:	4770      	bx	lr

0801c8a2 <abort>:
 801c8a2:	b508      	push	{r3, lr}
 801c8a4:	2006      	movs	r0, #6
 801c8a6:	f000 f855 	bl	801c954 <raise>
 801c8aa:	2001      	movs	r0, #1
 801c8ac:	f7e6 ff0a 	bl	80036c4 <_exit>

0801c8b0 <_fstat_r>:
 801c8b0:	b538      	push	{r3, r4, r5, lr}
 801c8b2:	4d07      	ldr	r5, [pc, #28]	; (801c8d0 <_fstat_r+0x20>)
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	4604      	mov	r4, r0
 801c8b8:	4608      	mov	r0, r1
 801c8ba:	4611      	mov	r1, r2
 801c8bc:	602b      	str	r3, [r5, #0]
 801c8be:	f7e6 ff50 	bl	8003762 <_fstat>
 801c8c2:	1c43      	adds	r3, r0, #1
 801c8c4:	d102      	bne.n	801c8cc <_fstat_r+0x1c>
 801c8c6:	682b      	ldr	r3, [r5, #0]
 801c8c8:	b103      	cbz	r3, 801c8cc <_fstat_r+0x1c>
 801c8ca:	6023      	str	r3, [r4, #0]
 801c8cc:	bd38      	pop	{r3, r4, r5, pc}
 801c8ce:	bf00      	nop
 801c8d0:	24002e24 	.word	0x24002e24

0801c8d4 <_isatty_r>:
 801c8d4:	b538      	push	{r3, r4, r5, lr}
 801c8d6:	4d06      	ldr	r5, [pc, #24]	; (801c8f0 <_isatty_r+0x1c>)
 801c8d8:	2300      	movs	r3, #0
 801c8da:	4604      	mov	r4, r0
 801c8dc:	4608      	mov	r0, r1
 801c8de:	602b      	str	r3, [r5, #0]
 801c8e0:	f7e6 ff4f 	bl	8003782 <_isatty>
 801c8e4:	1c43      	adds	r3, r0, #1
 801c8e6:	d102      	bne.n	801c8ee <_isatty_r+0x1a>
 801c8e8:	682b      	ldr	r3, [r5, #0]
 801c8ea:	b103      	cbz	r3, 801c8ee <_isatty_r+0x1a>
 801c8ec:	6023      	str	r3, [r4, #0]
 801c8ee:	bd38      	pop	{r3, r4, r5, pc}
 801c8f0:	24002e24 	.word	0x24002e24

0801c8f4 <_malloc_usable_size_r>:
 801c8f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c8f8:	1f18      	subs	r0, r3, #4
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	bfbc      	itt	lt
 801c8fe:	580b      	ldrlt	r3, [r1, r0]
 801c900:	18c0      	addlt	r0, r0, r3
 801c902:	4770      	bx	lr

0801c904 <_raise_r>:
 801c904:	291f      	cmp	r1, #31
 801c906:	b538      	push	{r3, r4, r5, lr}
 801c908:	4604      	mov	r4, r0
 801c90a:	460d      	mov	r5, r1
 801c90c:	d904      	bls.n	801c918 <_raise_r+0x14>
 801c90e:	2316      	movs	r3, #22
 801c910:	6003      	str	r3, [r0, #0]
 801c912:	f04f 30ff 	mov.w	r0, #4294967295
 801c916:	bd38      	pop	{r3, r4, r5, pc}
 801c918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c91a:	b112      	cbz	r2, 801c922 <_raise_r+0x1e>
 801c91c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c920:	b94b      	cbnz	r3, 801c936 <_raise_r+0x32>
 801c922:	4620      	mov	r0, r4
 801c924:	f000 f830 	bl	801c988 <_getpid_r>
 801c928:	462a      	mov	r2, r5
 801c92a:	4601      	mov	r1, r0
 801c92c:	4620      	mov	r0, r4
 801c92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c932:	f000 b817 	b.w	801c964 <_kill_r>
 801c936:	2b01      	cmp	r3, #1
 801c938:	d00a      	beq.n	801c950 <_raise_r+0x4c>
 801c93a:	1c59      	adds	r1, r3, #1
 801c93c:	d103      	bne.n	801c946 <_raise_r+0x42>
 801c93e:	2316      	movs	r3, #22
 801c940:	6003      	str	r3, [r0, #0]
 801c942:	2001      	movs	r0, #1
 801c944:	e7e7      	b.n	801c916 <_raise_r+0x12>
 801c946:	2400      	movs	r4, #0
 801c948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c94c:	4628      	mov	r0, r5
 801c94e:	4798      	blx	r3
 801c950:	2000      	movs	r0, #0
 801c952:	e7e0      	b.n	801c916 <_raise_r+0x12>

0801c954 <raise>:
 801c954:	4b02      	ldr	r3, [pc, #8]	; (801c960 <raise+0xc>)
 801c956:	4601      	mov	r1, r0
 801c958:	6818      	ldr	r0, [r3, #0]
 801c95a:	f7ff bfd3 	b.w	801c904 <_raise_r>
 801c95e:	bf00      	nop
 801c960:	24000100 	.word	0x24000100

0801c964 <_kill_r>:
 801c964:	b538      	push	{r3, r4, r5, lr}
 801c966:	4d07      	ldr	r5, [pc, #28]	; (801c984 <_kill_r+0x20>)
 801c968:	2300      	movs	r3, #0
 801c96a:	4604      	mov	r4, r0
 801c96c:	4608      	mov	r0, r1
 801c96e:	4611      	mov	r1, r2
 801c970:	602b      	str	r3, [r5, #0]
 801c972:	f7e6 fe97 	bl	80036a4 <_kill>
 801c976:	1c43      	adds	r3, r0, #1
 801c978:	d102      	bne.n	801c980 <_kill_r+0x1c>
 801c97a:	682b      	ldr	r3, [r5, #0]
 801c97c:	b103      	cbz	r3, 801c980 <_kill_r+0x1c>
 801c97e:	6023      	str	r3, [r4, #0]
 801c980:	bd38      	pop	{r3, r4, r5, pc}
 801c982:	bf00      	nop
 801c984:	24002e24 	.word	0x24002e24

0801c988 <_getpid_r>:
 801c988:	f7e6 be84 	b.w	8003694 <_getpid>

0801c98c <checkint>:
 801c98c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c990:	f240 33fe 	movw	r3, #1022	; 0x3fe
 801c994:	429a      	cmp	r2, r3
 801c996:	b570      	push	{r4, r5, r6, lr}
 801c998:	dd2a      	ble.n	801c9f0 <checkint+0x64>
 801c99a:	f240 4333 	movw	r3, #1075	; 0x433
 801c99e:	429a      	cmp	r2, r3
 801c9a0:	dc24      	bgt.n	801c9ec <checkint+0x60>
 801c9a2:	1a9b      	subs	r3, r3, r2
 801c9a4:	f1a3 0620 	sub.w	r6, r3, #32
 801c9a8:	f04f 32ff 	mov.w	r2, #4294967295
 801c9ac:	fa02 f403 	lsl.w	r4, r2, r3
 801c9b0:	fa02 f606 	lsl.w	r6, r2, r6
 801c9b4:	f1c3 0520 	rsb	r5, r3, #32
 801c9b8:	fa22 f505 	lsr.w	r5, r2, r5
 801c9bc:	4334      	orrs	r4, r6
 801c9be:	432c      	orrs	r4, r5
 801c9c0:	409a      	lsls	r2, r3
 801c9c2:	ea20 0202 	bic.w	r2, r0, r2
 801c9c6:	ea21 0404 	bic.w	r4, r1, r4
 801c9ca:	4322      	orrs	r2, r4
 801c9cc:	f1a3 0420 	sub.w	r4, r3, #32
 801c9d0:	f1c3 0220 	rsb	r2, r3, #32
 801c9d4:	d10c      	bne.n	801c9f0 <checkint+0x64>
 801c9d6:	40d8      	lsrs	r0, r3
 801c9d8:	fa01 f302 	lsl.w	r3, r1, r2
 801c9dc:	4318      	orrs	r0, r3
 801c9de:	40e1      	lsrs	r1, r4
 801c9e0:	4308      	orrs	r0, r1
 801c9e2:	f000 0001 	and.w	r0, r0, #1
 801c9e6:	f1d0 0002 	rsbs	r0, r0, #2
 801c9ea:	bd70      	pop	{r4, r5, r6, pc}
 801c9ec:	2002      	movs	r0, #2
 801c9ee:	e7fc      	b.n	801c9ea <checkint+0x5e>
 801c9f0:	2000      	movs	r0, #0
 801c9f2:	e7fa      	b.n	801c9ea <checkint+0x5e>
 801c9f4:	0000      	movs	r0, r0
	...

0801c9f8 <pow>:
 801c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c9fc:	ee10 4a90 	vmov	r4, s1
 801ca00:	ed2d 8b0a 	vpush	{d8-d12}
 801ca04:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 801ca08:	ee11 7a90 	vmov	r7, s3
 801ca0c:	f10a 32ff 	add.w	r2, sl, #4294967295
 801ca10:	f240 73fd 	movw	r3, #2045	; 0x7fd
 801ca14:	429a      	cmp	r2, r3
 801ca16:	ee10 6a10 	vmov	r6, s0
 801ca1a:	ee11 0a10 	vmov	r0, s2
 801ca1e:	b086      	sub	sp, #24
 801ca20:	46d4      	mov	ip, sl
 801ca22:	ea4f 5517 	mov.w	r5, r7, lsr #20
 801ca26:	d806      	bhi.n	801ca36 <pow+0x3e>
 801ca28:	f3c5 030a 	ubfx	r3, r5, #0, #11
 801ca2c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 801ca30:	2b7f      	cmp	r3, #127	; 0x7f
 801ca32:	f240 8156 	bls.w	801cce2 <pow+0x2ea>
 801ca36:	1802      	adds	r2, r0, r0
 801ca38:	eb47 0107 	adc.w	r1, r7, r7
 801ca3c:	f06f 0e01 	mvn.w	lr, #1
 801ca40:	f112 39ff 	adds.w	r9, r2, #4294967295
 801ca44:	f141 38ff 	adc.w	r8, r1, #4294967295
 801ca48:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 801ca4c:	45ce      	cmp	lr, r9
 801ca4e:	eb73 0808 	sbcs.w	r8, r3, r8
 801ca52:	d23f      	bcs.n	801cad4 <pow+0xdc>
 801ca54:	ea52 0301 	orrs.w	r3, r2, r1
 801ca58:	f04f 0300 	mov.w	r3, #0
 801ca5c:	d10c      	bne.n	801ca78 <pow+0x80>
 801ca5e:	19b6      	adds	r6, r6, r6
 801ca60:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 801ca64:	4164      	adcs	r4, r4
 801ca66:	42b3      	cmp	r3, r6
 801ca68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ca6c:	41a3      	sbcs	r3, r4
 801ca6e:	f0c0 808c 	bcc.w	801cb8a <pow+0x192>
 801ca72:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ca76:	e028      	b.n	801caca <pow+0xd2>
 801ca78:	4da3      	ldr	r5, [pc, #652]	; (801cd08 <pow+0x310>)
 801ca7a:	42ac      	cmp	r4, r5
 801ca7c:	bf08      	it	eq
 801ca7e:	429e      	cmpeq	r6, r3
 801ca80:	d107      	bne.n	801ca92 <pow+0x9a>
 801ca82:	1800      	adds	r0, r0, r0
 801ca84:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 801ca88:	417f      	adcs	r7, r7
 801ca8a:	4283      	cmp	r3, r0
 801ca8c:	4b9f      	ldr	r3, [pc, #636]	; (801cd0c <pow+0x314>)
 801ca8e:	41bb      	sbcs	r3, r7
 801ca90:	e7ed      	b.n	801ca6e <pow+0x76>
 801ca92:	19b6      	adds	r6, r6, r6
 801ca94:	489e      	ldr	r0, [pc, #632]	; (801cd10 <pow+0x318>)
 801ca96:	4164      	adcs	r4, r4
 801ca98:	42b3      	cmp	r3, r6
 801ca9a:	eb70 0504 	sbcs.w	r5, r0, r4
 801ca9e:	d374      	bcc.n	801cb8a <pow+0x192>
 801caa0:	4281      	cmp	r1, r0
 801caa2:	bf08      	it	eq
 801caa4:	429a      	cmpeq	r2, r3
 801caa6:	d170      	bne.n	801cb8a <pow+0x192>
 801caa8:	4a9a      	ldr	r2, [pc, #616]	; (801cd14 <pow+0x31c>)
 801caaa:	4294      	cmp	r4, r2
 801caac:	bf08      	it	eq
 801caae:	429e      	cmpeq	r6, r3
 801cab0:	d0df      	beq.n	801ca72 <pow+0x7a>
 801cab2:	4294      	cmp	r4, r2
 801cab4:	ea6f 0707 	mvn.w	r7, r7
 801cab8:	bf34      	ite	cc
 801caba:	2400      	movcc	r4, #0
 801cabc:	2401      	movcs	r4, #1
 801cabe:	0fff      	lsrs	r7, r7, #31
 801cac0:	42bc      	cmp	r4, r7
 801cac2:	f040 81d9 	bne.w	801ce78 <pow+0x480>
 801cac6:	ee21 0b01 	vmul.f64	d0, d1, d1
 801caca:	b006      	add	sp, #24
 801cacc:	ecbd 8b0a 	vpop	{d8-d12}
 801cad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cad4:	eb16 0806 	adds.w	r8, r6, r6
 801cad8:	eb44 0904 	adc.w	r9, r4, r4
 801cadc:	f118 31ff 	adds.w	r1, r8, #4294967295
 801cae0:	f169 0200 	sbc.w	r2, r9, #0
 801cae4:	458e      	cmp	lr, r1
 801cae6:	4193      	sbcs	r3, r2
 801cae8:	d223      	bcs.n	801cb32 <pow+0x13a>
 801caea:	ee20 0b00 	vmul.f64	d0, d0, d0
 801caee:	2c00      	cmp	r4, #0
 801caf0:	da12      	bge.n	801cb18 <pow+0x120>
 801caf2:	4639      	mov	r1, r7
 801caf4:	f7ff ff4a 	bl	801c98c <checkint>
 801caf8:	2801      	cmp	r0, #1
 801cafa:	d10d      	bne.n	801cb18 <pow+0x120>
 801cafc:	eeb1 0b40 	vneg.f64	d0, d0
 801cb00:	ea58 0309 	orrs.w	r3, r8, r9
 801cb04:	d10a      	bne.n	801cb1c <pow+0x124>
 801cb06:	2f00      	cmp	r7, #0
 801cb08:	dadf      	bge.n	801caca <pow+0xd2>
 801cb0a:	b006      	add	sp, #24
 801cb0c:	ecbd 8b0a 	vpop	{d8-d12}
 801cb10:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb14:	f000 b9f0 	b.w	801cef8 <__math_divzero>
 801cb18:	2000      	movs	r0, #0
 801cb1a:	e7f1      	b.n	801cb00 <pow+0x108>
 801cb1c:	2f00      	cmp	r7, #0
 801cb1e:	dad4      	bge.n	801caca <pow+0xd2>
 801cb20:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cb24:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801cb28:	ed8d 7b00 	vstr	d7, [sp]
 801cb2c:	ed9d 0b00 	vldr	d0, [sp]
 801cb30:	e7cb      	b.n	801caca <pow+0xd2>
 801cb32:	2c00      	cmp	r4, #0
 801cb34:	da2c      	bge.n	801cb90 <pow+0x198>
 801cb36:	4639      	mov	r1, r7
 801cb38:	f7ff ff28 	bl	801c98c <checkint>
 801cb3c:	b930      	cbnz	r0, 801cb4c <pow+0x154>
 801cb3e:	b006      	add	sp, #24
 801cb40:	ecbd 8b0a 	vpop	{d8-d12}
 801cb44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb48:	f000 b9ee 	b.w	801cf28 <__math_invalid>
 801cb4c:	2801      	cmp	r0, #1
 801cb4e:	bf14      	ite	ne
 801cb50:	2000      	movne	r0, #0
 801cb52:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 801cb56:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801cb5a:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 801cb5e:	f3c5 020a 	ubfx	r2, r5, #0, #11
 801cb62:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 801cb66:	2b7f      	cmp	r3, #127	; 0x7f
 801cb68:	d92d      	bls.n	801cbc6 <pow+0x1ce>
 801cb6a:	4b67      	ldr	r3, [pc, #412]	; (801cd08 <pow+0x310>)
 801cb6c:	2000      	movs	r0, #0
 801cb6e:	429c      	cmp	r4, r3
 801cb70:	bf08      	it	eq
 801cb72:	4286      	cmpeq	r6, r0
 801cb74:	f43f af7d 	beq.w	801ca72 <pow+0x7a>
 801cb78:	f240 31bd 	movw	r1, #957	; 0x3bd
 801cb7c:	428a      	cmp	r2, r1
 801cb7e:	d80c      	bhi.n	801cb9a <pow+0x1a2>
 801cb80:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801cb84:	42b0      	cmp	r0, r6
 801cb86:	41a3      	sbcs	r3, r4
 801cb88:	d204      	bcs.n	801cb94 <pow+0x19c>
 801cb8a:	ee31 0b00 	vadd.f64	d0, d1, d0
 801cb8e:	e79c      	b.n	801caca <pow+0xd2>
 801cb90:	2000      	movs	r0, #0
 801cb92:	e7e4      	b.n	801cb5e <pow+0x166>
 801cb94:	ee30 0b41 	vsub.f64	d0, d0, d1
 801cb98:	e797      	b.n	801caca <pow+0xd2>
 801cb9a:	2e01      	cmp	r6, #1
 801cb9c:	eb74 0303 	sbcs.w	r3, r4, r3
 801cba0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801cba4:	bf34      	ite	cc
 801cba6:	2301      	movcc	r3, #1
 801cba8:	2300      	movcs	r3, #0
 801cbaa:	4295      	cmp	r5, r2
 801cbac:	bf8c      	ite	hi
 801cbae:	2500      	movhi	r5, #0
 801cbb0:	2501      	movls	r5, #1
 801cbb2:	42ab      	cmp	r3, r5
 801cbb4:	f000 809d 	beq.w	801ccf2 <pow+0x2fa>
 801cbb8:	b006      	add	sp, #24
 801cbba:	ecbd 8b0a 	vpop	{d8-d12}
 801cbbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbc2:	f000 b991 	b.w	801cee8 <__math_oflow>
 801cbc6:	f1bc 0f00 	cmp.w	ip, #0
 801cbca:	d10b      	bne.n	801cbe4 <pow+0x1ec>
 801cbcc:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801cd00 <pow+0x308>
 801cbd0:	ee20 7b07 	vmul.f64	d7, d0, d7
 801cbd4:	ec53 2b17 	vmov	r2, r3, d7
 801cbd8:	ee17 6a10 	vmov	r6, s14
 801cbdc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801cbe0:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 801cbe4:	4b4c      	ldr	r3, [pc, #304]	; (801cd18 <pow+0x320>)
 801cbe6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801cbea:	4423      	add	r3, r4
 801cbec:	f3c3 3246 	ubfx	r2, r3, #13, #7
 801cbf0:	1519      	asrs	r1, r3, #20
 801cbf2:	0d1b      	lsrs	r3, r3, #20
 801cbf4:	051b      	lsls	r3, r3, #20
 801cbf6:	eba4 0903 	sub.w	r9, r4, r3
 801cbfa:	4b48      	ldr	r3, [pc, #288]	; (801cd1c <pow+0x324>)
 801cbfc:	ee04 1a10 	vmov	s8, r1
 801cc00:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 801cc04:	f1b6 0800 	subs.w	r8, r6, #0
 801cc08:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 801cc0c:	ec49 8b15 	vmov	d5, r8, r9
 801cc10:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 801cc14:	eea5 6b07 	vfma.f64	d6, d5, d7
 801cc18:	ed93 7b00 	vldr	d7, [r3]
 801cc1c:	ed93 5b02 	vldr	d5, [r3, #8]
 801cc20:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 801cc24:	eea4 2b07 	vfma.f64	d2, d4, d7
 801cc28:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 801cc2c:	ee36 ab02 	vadd.f64	d10, d6, d2
 801cc30:	ee32 2b4a 	vsub.f64	d2, d2, d10
 801cc34:	eea4 7b05 	vfma.f64	d7, d4, d5
 801cc38:	ed93 5b04 	vldr	d5, [r3, #16]
 801cc3c:	ee32 2b06 	vadd.f64	d2, d2, d6
 801cc40:	ee37 7b02 	vadd.f64	d7, d7, d2
 801cc44:	ee26 5b05 	vmul.f64	d5, d6, d5
 801cc48:	ed93 4b08 	vldr	d4, [r3, #32]
 801cc4c:	ee26 0b05 	vmul.f64	d0, d6, d5
 801cc50:	eeb0 9b40 	vmov.f64	d9, d0
 801cc54:	ee95 9b06 	vfnms.f64	d9, d5, d6
 801cc58:	ed93 5b06 	vldr	d5, [r3, #24]
 801cc5c:	ee3a 8b00 	vadd.f64	d8, d10, d0
 801cc60:	ee26 bb00 	vmul.f64	d11, d6, d0
 801cc64:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 801cc68:	eea6 5b04 	vfma.f64	d5, d6, d4
 801cc6c:	ee3a ab48 	vsub.f64	d10, d10, d8
 801cc70:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801cc74:	ee37 9b09 	vadd.f64	d9, d7, d9
 801cc78:	ee3a ab00 	vadd.f64	d10, d10, d0
 801cc7c:	eea6 4b03 	vfma.f64	d4, d6, d3
 801cc80:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801cc84:	ee39 ab0a 	vadd.f64	d10, d9, d10
 801cc88:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 801cc8c:	eea6 3b0c 	vfma.f64	d3, d6, d12
 801cc90:	eea0 4b03 	vfma.f64	d4, d0, d3
 801cc94:	eea0 5b04 	vfma.f64	d5, d0, d4
 801cc98:	eeab ab05 	vfma.f64	d10, d11, d5
 801cc9c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 801cca0:	ee21 7b06 	vmul.f64	d7, d1, d6
 801cca4:	ee17 3a90 	vmov	r3, s15
 801cca8:	eeb0 5b47 	vmov.f64	d5, d7
 801ccac:	f3c3 560a 	ubfx	r6, r3, #20, #11
 801ccb0:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801ccb4:	18b2      	adds	r2, r6, r2
 801ccb6:	2a3e      	cmp	r2, #62	; 0x3e
 801ccb8:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801ccbc:	ee38 8b46 	vsub.f64	d8, d8, d6
 801ccc0:	ee38 ab0a 	vadd.f64	d10, d8, d10
 801ccc4:	eea1 5b0a 	vfma.f64	d5, d1, d10
 801ccc8:	d92b      	bls.n	801cd22 <pow+0x32a>
 801ccca:	2a00      	cmp	r2, #0
 801cccc:	da0b      	bge.n	801cce6 <pow+0x2ee>
 801ccce:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ccd2:	ee37 0b00 	vadd.f64	d0, d7, d0
 801ccd6:	2800      	cmp	r0, #0
 801ccd8:	f43f aef7 	beq.w	801caca <pow+0xd2>
 801ccdc:	eeb1 0b40 	vneg.f64	d0, d0
 801cce0:	e6f3      	b.n	801caca <pow+0xd2>
 801cce2:	2000      	movs	r0, #0
 801cce4:	e77e      	b.n	801cbe4 <pow+0x1ec>
 801cce6:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801ccea:	d919      	bls.n	801cd20 <pow+0x328>
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	f6bf af63 	bge.w	801cbb8 <pow+0x1c0>
 801ccf2:	b006      	add	sp, #24
 801ccf4:	ecbd 8b0a 	vpop	{d8-d12}
 801ccf8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccfc:	f000 b8ec 	b.w	801ced8 <__math_uflow>
 801cd00:	00000000 	.word	0x00000000
 801cd04:	43300000 	.word	0x43300000
 801cd08:	3ff00000 	.word	0x3ff00000
 801cd0c:	fff00000 	.word	0xfff00000
 801cd10:	ffe00000 	.word	0xffe00000
 801cd14:	7fe00000 	.word	0x7fe00000
 801cd18:	c0196aab 	.word	0xc0196aab
 801cd1c:	0801d878 	.word	0x0801d878
 801cd20:	2600      	movs	r6, #0
 801cd22:	495d      	ldr	r1, [pc, #372]	; (801ce98 <pow+0x4a0>)
 801cd24:	ed91 4b02 	vldr	d4, [r1, #8]
 801cd28:	ed91 3b00 	vldr	d3, [r1]
 801cd2c:	eeb0 6b44 	vmov.f64	d6, d4
 801cd30:	eea7 6b03 	vfma.f64	d6, d7, d3
 801cd34:	ee16 5a10 	vmov	r5, s12
 801cd38:	ee36 6b44 	vsub.f64	d6, d6, d4
 801cd3c:	ed91 4b04 	vldr	d4, [r1, #16]
 801cd40:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801cd44:	eea6 7b04 	vfma.f64	d7, d6, d4
 801cd48:	eeb0 0b47 	vmov.f64	d0, d7
 801cd4c:	ed91 7b06 	vldr	d7, [r1, #24]
 801cd50:	18dc      	adds	r4, r3, r3
 801cd52:	f104 030f 	add.w	r3, r4, #15
 801cd56:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 801cd5a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801cd5e:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801cd62:	ee35 0b00 	vadd.f64	d0, d5, d0
 801cd66:	ee20 6b00 	vmul.f64	d6, d0, d0
 801cd6a:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 801cd6e:	ed91 5b08 	vldr	d5, [r1, #32]
 801cd72:	ee30 7b07 	vadd.f64	d7, d0, d7
 801cd76:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801cd7a:	eea0 5b04 	vfma.f64	d5, d0, d4
 801cd7e:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801cd82:	eea6 7b05 	vfma.f64	d7, d6, d5
 801cd86:	ee26 6b06 	vmul.f64	d6, d6, d6
 801cd8a:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801cd8e:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 801cd92:	f8d2 e004 	ldr.w	lr, [r2, #4]
 801cd96:	eea0 5b04 	vfma.f64	d5, d0, d4
 801cd9a:	1940      	adds	r0, r0, r5
 801cd9c:	2700      	movs	r7, #0
 801cd9e:	eb17 020c 	adds.w	r2, r7, ip
 801cda2:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 801cda6:	eea6 7b05 	vfma.f64	d7, d6, d5
 801cdaa:	2e00      	cmp	r6, #0
 801cdac:	d15f      	bne.n	801ce6e <pow+0x476>
 801cdae:	42bd      	cmp	r5, r7
 801cdb0:	db13      	blt.n	801cdda <pow+0x3e2>
 801cdb2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801cdb6:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801cdba:	4610      	mov	r0, r2
 801cdbc:	ec41 0b10 	vmov	d0, r0, r1
 801cdc0:	eea7 0b00 	vfma.f64	d0, d7, d0
 801cdc4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ce80 <pow+0x488>
 801cdc8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cdcc:	b006      	add	sp, #24
 801cdce:	ecbd 8b0a 	vpop	{d8-d12}
 801cdd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cdd6:	f000 b8bf 	b.w	801cf58 <__math_check_oflow>
 801cdda:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801cdde:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801cde2:	4610      	mov	r0, r2
 801cde4:	ec41 0b15 	vmov	d5, r0, r1
 801cde8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801cdec:	ee27 6b05 	vmul.f64	d6, d7, d5
 801cdf0:	ee35 7b06 	vadd.f64	d7, d5, d6
 801cdf4:	eeb0 3bc7 	vabs.f64	d3, d7
 801cdf8:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801cdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce00:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801ce88 <pow+0x490>
 801ce04:	d52a      	bpl.n	801ce5c <pow+0x464>
 801ce06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801ce0a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801ce0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce12:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 801ce16:	ee35 6b06 	vadd.f64	d6, d5, d6
 801ce1a:	bf48      	it	mi
 801ce1c:	eeb0 4b43 	vmovmi.f64	d4, d3
 801ce20:	ee37 3b04 	vadd.f64	d3, d7, d4
 801ce24:	ee34 5b43 	vsub.f64	d5, d4, d3
 801ce28:	ee35 7b07 	vadd.f64	d7, d5, d7
 801ce2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ce30:	ee37 7b03 	vadd.f64	d7, d7, d3
 801ce34:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ce38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ce3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce40:	d104      	bne.n	801ce4c <pow+0x454>
 801ce42:	4632      	mov	r2, r6
 801ce44:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801ce48:	ec43 2b17 	vmov	d7, r2, r3
 801ce4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ce50:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ce54:	ee26 6b00 	vmul.f64	d6, d6, d0
 801ce58:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ce5c:	ee27 0b00 	vmul.f64	d0, d7, d0
 801ce60:	b006      	add	sp, #24
 801ce62:	ecbd 8b0a 	vpop	{d8-d12}
 801ce66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce6a:	f000 b86c 	b.w	801cf46 <__math_check_uflow>
 801ce6e:	ec43 2b10 	vmov	d0, r2, r3
 801ce72:	eea7 0b00 	vfma.f64	d0, d7, d0
 801ce76:	e628      	b.n	801caca <pow+0xd2>
 801ce78:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801ce90 <pow+0x498>
 801ce7c:	e625      	b.n	801caca <pow+0xd2>
 801ce7e:	bf00      	nop
 801ce80:	00000000 	.word	0x00000000
 801ce84:	7f000000 	.word	0x7f000000
 801ce88:	00000000 	.word	0x00000000
 801ce8c:	00100000 	.word	0x00100000
	...
 801ce98:	0801e8c0 	.word	0x0801e8c0

0801ce9c <with_errno>:
 801ce9c:	b513      	push	{r0, r1, r4, lr}
 801ce9e:	4604      	mov	r4, r0
 801cea0:	ed8d 0b00 	vstr	d0, [sp]
 801cea4:	f7fc fe8c 	bl	8019bc0 <__errno>
 801cea8:	ed9d 0b00 	vldr	d0, [sp]
 801ceac:	6004      	str	r4, [r0, #0]
 801ceae:	b002      	add	sp, #8
 801ceb0:	bd10      	pop	{r4, pc}

0801ceb2 <xflow>:
 801ceb2:	b082      	sub	sp, #8
 801ceb4:	b158      	cbz	r0, 801cece <xflow+0x1c>
 801ceb6:	eeb1 7b40 	vneg.f64	d7, d0
 801ceba:	ed8d 7b00 	vstr	d7, [sp]
 801cebe:	ed9d 7b00 	vldr	d7, [sp]
 801cec2:	2022      	movs	r0, #34	; 0x22
 801cec4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801cec8:	b002      	add	sp, #8
 801ceca:	f7ff bfe7 	b.w	801ce9c <with_errno>
 801cece:	eeb0 7b40 	vmov.f64	d7, d0
 801ced2:	e7f2      	b.n	801ceba <xflow+0x8>
 801ced4:	0000      	movs	r0, r0
	...

0801ced8 <__math_uflow>:
 801ced8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cee0 <__math_uflow+0x8>
 801cedc:	f7ff bfe9 	b.w	801ceb2 <xflow>
 801cee0:	00000000 	.word	0x00000000
 801cee4:	10000000 	.word	0x10000000

0801cee8 <__math_oflow>:
 801cee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cef0 <__math_oflow+0x8>
 801ceec:	f7ff bfe1 	b.w	801ceb2 <xflow>
 801cef0:	00000000 	.word	0x00000000
 801cef4:	70000000 	.word	0x70000000

0801cef8 <__math_divzero>:
 801cef8:	b082      	sub	sp, #8
 801cefa:	2800      	cmp	r0, #0
 801cefc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cf00:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801cf04:	fe06 7b07 	vseleq.f64	d7, d6, d7
 801cf08:	ed8d 7b00 	vstr	d7, [sp]
 801cf0c:	ed9d 0b00 	vldr	d0, [sp]
 801cf10:	ed9f 7b03 	vldr	d7, [pc, #12]	; 801cf20 <__math_divzero+0x28>
 801cf14:	2022      	movs	r0, #34	; 0x22
 801cf16:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801cf1a:	b002      	add	sp, #8
 801cf1c:	f7ff bfbe 	b.w	801ce9c <with_errno>
	...

0801cf28 <__math_invalid>:
 801cf28:	eeb0 7b40 	vmov.f64	d7, d0
 801cf2c:	eeb4 7b47 	vcmp.f64	d7, d7
 801cf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf34:	ee30 6b40 	vsub.f64	d6, d0, d0
 801cf38:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801cf3c:	d602      	bvs.n	801cf44 <__math_invalid+0x1c>
 801cf3e:	2021      	movs	r0, #33	; 0x21
 801cf40:	f7ff bfac 	b.w	801ce9c <with_errno>
 801cf44:	4770      	bx	lr

0801cf46 <__math_check_uflow>:
 801cf46:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf4e:	d102      	bne.n	801cf56 <__math_check_uflow+0x10>
 801cf50:	2022      	movs	r0, #34	; 0x22
 801cf52:	f7ff bfa3 	b.w	801ce9c <with_errno>
 801cf56:	4770      	bx	lr

0801cf58 <__math_check_oflow>:
 801cf58:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801cf78 <__math_check_oflow+0x20>
 801cf5c:	eeb0 7bc0 	vabs.f64	d7, d0
 801cf60:	eeb4 7b46 	vcmp.f64	d7, d6
 801cf64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf68:	dd02      	ble.n	801cf70 <__math_check_oflow+0x18>
 801cf6a:	2022      	movs	r0, #34	; 0x22
 801cf6c:	f7ff bf96 	b.w	801ce9c <with_errno>
 801cf70:	4770      	bx	lr
 801cf72:	bf00      	nop
 801cf74:	f3af 8000 	nop.w
 801cf78:	ffffffff 	.word	0xffffffff
 801cf7c:	7fefffff 	.word	0x7fefffff

0801cf80 <_init>:
 801cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf82:	bf00      	nop
 801cf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf86:	bc08      	pop	{r3}
 801cf88:	469e      	mov	lr, r3
 801cf8a:	4770      	bx	lr

0801cf8c <_fini>:
 801cf8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf8e:	bf00      	nop
 801cf90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf92:	bc08      	pop	{r3}
 801cf94:	469e      	mov	lr, r3
 801cf96:	4770      	bx	lr
